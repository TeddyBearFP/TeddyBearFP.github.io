<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Qt Linguist 語言家(多國語言)</title>
    <url>/2020/02/18/Qt-Linguist-%E8%AA%9E%E8%A8%80%E5%AE%B6-%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80/</url>
    <content><![CDATA[<h1 id="Qt-Linguist-語言家-多國語言"><a href="#Qt-Linguist-語言家-多國語言" class="headerlink" title="Qt Linguist 語言家 多國語言"></a>Qt Linguist 語言家 多國語言</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以國際化來說我們開發的軟體必須要加上多國語言才夠 International，那在 Qt 軟體完成後我們可以用 Qt 本身提供的 Linguist 達到多國語言的介面</p>
<h2 id="多國語言工具"><a href="#多國語言工具" class="headerlink" title="多國語言工具"></a>多國語言工具</h2><p>在進行多國語言翻譯時會有三種工具<br>這三種通常會在你安裝的 Qt 資料夾內<br>例如: C:\Qt\Qt5.10.1\5.10.1\msvc2015\bin</p>
<h3 id="lupdate-exe"><a href="#lupdate-exe" class="headerlink" title="lupdate.exe"></a>lupdate.exe</h3><p>用於生成或更新翻譯源文件（.ts）文件的命令行工具。<br>用法：透過 cmd 切換到專案層接著輸入 </p>
<pre><code>lupdate 專案名稱.pro
</code></pre><h3 id="linguist"><a href="#linguist" class="headerlink" title="linguist"></a>linguist</h3><p>用於執行翻譯工作的 GUI 工具</p>
<h3 id="lrelease-exe"><a href="#lrelease-exe" class="headerlink" title="lrelease.exe"></a>lrelease.exe</h3><p>用於從.ts 文件中生成.qm 文件的命令行工具。<br>用法：透過 cmd 切換到專案層接著輸入</p>
<pre><code>lrelease 專案名稱.pro
</code></pre><h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>以上直接呼叫 lupdate 與 lrelease 是因為把這三種工具的檔案位置</p>
<pre><code>C:\Qt\Qt5.10.1\5.10.1\msvc2015\bin\
</code></pre><p>加入到環境變數所以才可以直接這樣在 cmd 當中呼叫使用</p>
<h2 id="多國語言實作"><a href="#多國語言實作" class="headerlink" title="多國語言實作"></a>多國語言實作</h2><h3 id="qsTr"><a href="#qsTr" class="headerlink" title="qsTr()"></a>qsTr()</h3><p>若字串要轉換成多國語言那麼當我們在先寫軟體時需要在該字串前加上 qsTr</p>
<h3 id="Step-1-編寫英文版應用程式"><a href="#Step-1-編寫英文版應用程式" class="headerlink" title="Step 1 編寫英文版應用程式"></a>Step 1 編寫英文版應用程式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    id: root</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"TB MultiLanguage"</span>)</span><br><span class="line">    property <span class="keyword">bool</span> translated: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    Column &#123;</span><br><span class="line">        anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        anchors.verticalCenter: parent.verticalCenter</span><br><span class="line">        spacing: <span class="number">20</span></span><br><span class="line">        Repeater &#123;</span><br><span class="line">            model: [qsTr(<span class="string">"Monday"</span>), qsTr(<span class="string">"Tuesday"</span>), qsTr(<span class="string">"Wednesday"</span>), qsTr(<span class="string">"Thursday"</span>),</span><br><span class="line">                    qsTr(<span class="string">"Friday"</span>), qsTr(<span class="string">"Saturday"</span>), qsTr(<span class="string">"Sunday"</span>)]</span><br><span class="line">            Text &#123;</span><br><span class="line">                text: modelData</span><br><span class="line">                font.pixelSize: <span class="number">28</span></span><br><span class="line">                color: <span class="string">"#31AA4E"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Button &#123;</span><br><span class="line">        width: <span class="number">200</span></span><br><span class="line">        height: <span class="number">100</span></span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        anchors.rightMargin: <span class="number">20</span></span><br><span class="line">        anchors.bottom: parent.bottom</span><br><span class="line">        anchors.bottomMargin: <span class="number">20</span></span><br><span class="line">        text: <span class="string">"TeddyBearFP\nSwitch language"</span></span><br><span class="line">        font.pixelSize: <span class="number">20</span></span><br><span class="line">        background: Rectangle &#123;</span><br><span class="line">            color: <span class="string">"chartreuse"</span></span><br><span class="line">            border.width: <span class="number">1</span></span><br><span class="line">            border.color: <span class="string">"blue"</span></span><br><span class="line">            radius: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            <span class="keyword">if</span>(translated)</span><br><span class="line">                multiLanguage.updateLanguage(<span class="string">"CHT"</span>)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                multiLanguage.updateLanguage(<span class="string">"ENG"</span>)</span><br><span class="line">            translated = !translated</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>英文版完成圖</p>
<p><img src="https://i.imgur.com/G9nhUeQ.png" alt></p>
<h3 id="Step-2-Create-Translation-Source-files-創建-ts-檔"><a href="#Step-2-Create-Translation-Source-files-創建-ts-檔" class="headerlink" title="Step 2 Create Translation Source files 創建 ts 檔"></a>Step 2 Create Translation Source files 創建 ts 檔</h3><h4 id="pro-新增-TRANSLATIONS-指令"><a href="#pro-新增-TRANSLATIONS-指令" class="headerlink" title="pro 新增 TRANSLATIONS 指令"></a>pro 新增 TRANSLATIONS 指令</h4><p>在專案 pro 檔中加入以下指令:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">TRANSLATIONS = translator/MultiLanguage_ENG.ts\</span><br><span class="line">               translator/MultiLanguage_CHT.ts</span><br></pre></td></tr></table></figure>
<h4 id="系統管理員權限-cmd-更新-ts-檔"><a href="#系統管理員權限-cmd-更新-ts-檔" class="headerlink" title="系統管理員權限 cmd 更新 ts 檔"></a>系統管理員權限 cmd 更新 ts 檔</h4><p>先在 pro 檔案旁創建剛剛輸入的資料夾名稱 ( “translator/MultiLanguage_ENG.ts” ) 的資料夾，以我的例子來說要創建個叫做 “translator” 的資料夾在 pro 檔旁<br>以系統管理員權限開啟 cmd 切換到專案層( “D:\MultiLanguage” ) 並用 lupdate.exe 更新 ts 檔</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">開啟 cmd</span><br><span class="line">d:</span><br><span class="line">cd MultiLanguage 到達( <span class="string">"D:\MultiLanguage"</span> )該層後</span><br><span class="line">輸入</span><br><span class="line">lupdate.exe MultiLanguage.pro</span><br></pre></td></tr></table></figure>
<p>指令成功圖</p>
<p><img src="https://i.imgur.com/u3Wcyft.png" alt></p>
<p>成功產出 ts 檔</p>
<p><img src="https://i.imgur.com/eGqYnfk.png" alt></p>
<h3 id="Step-3-執行-Linguist-翻譯"><a href="#Step-3-執行-Linguist-翻譯" class="headerlink" title="Step 3 執行 Linguist 翻譯"></a>Step 3 執行 Linguist 翻譯</h3><h4 id="填寫-ts-檔"><a href="#填寫-ts-檔" class="headerlink" title="填寫 ts 檔"></a>填寫 ts 檔</h4><p>完成步驟二後我們會得到 ts 檔<br>未完成翻譯的 ts 檔內容會如下圖:</p>
<p><img src="https://i.imgur.com/ukgzb5N.png" alt></p>
<p>如果翻譯檔非常大型我們可以先從 excel 翻完後執行腳本讓它自行幫我們填寫<br>可以參考我的另一篇文章 <a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/"> Python 解析 ts 檔 (XML) </a> ，這樣可以看你要從 ts 轉 excel 或是 excel 填寫 ts 內容皆快速很多</p>
<p>翻譯完成圖:</p>
<p><img src="https://i.imgur.com/MyNc1hL.png" alt></p>
<h4 id="Linguist-語言家翻譯並存檔"><a href="#Linguist-語言家翻譯並存檔" class="headerlink" title="Linguist 語言家翻譯並存檔"></a>Linguist 語言家翻譯並存檔</h4><p>完成上一步的填寫 ts 檔後，我們開啟 Linguist</p>
<p>開啟 Linguist 我們有兩種方式</p>
<p>第一種: 若已經把一開始三個工具的路徑加入環境變數那麼只要在 cmd 輸入</p>
<pre><code>linguist
</code></pre><p>第二種: 我們可以在 QtCreator 新增路徑，設定好後點擊 tool 便可直接啟動工具</p>
<p>到 QtCreator Environment 新增</p>
<p><img src="https://i.imgur.com/kTqbWOG.png" alt></p>
<p>接著便可在上方的 Tools 使用啟動該工具</p>
<p><img src="https://i.imgur.com/nsxuvZC.png" alt></p>
<p>Linguist 開啟 ts files 開啟後選擇從什麼語言翻譯到什麼語言</p>
<p><img src="https://i.imgur.com/hUfZvy8.png" alt></p>
<p>Linguist 確認翻譯無異常後存檔</p>
<p><img src="https://i.imgur.com/CwIRIXa.png" alt></p>
<h3 id="Step-4-ts-轉成-qm-檔"><a href="#Step-4-ts-轉成-qm-檔" class="headerlink" title="Step 4 ts 轉成 qm 檔"></a>Step 4 ts 轉成 qm 檔</h3><h4 id="產生-qm-檔"><a href="#產生-qm-檔" class="headerlink" title="產生 qm 檔"></a>產生 qm 檔</h4><p>用 cmd 使用 lrelease 將剛剛填寫完畢並且確認翻譯無誤的 ts 檔透過指令產出 qm 檔</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">lrelease.exe  MultiLanguage.pro</span><br></pre></td></tr></table></figure>
<p>成功產出 qm 檔</p>
<p><img src="https://i.imgur.com/CjkuL47.png" alt></p>
<h4 id="將-translator-qm檔-加至現有專案"><a href="#將-translator-qm檔-加至現有專案" class="headerlink" title="將 translator/ qm檔 加至現有專案"></a>將 translator/ qm檔 加至現有專案</h4><p>回到 QtCreator 將專案的 Resource 新增現有資料夾至專案中<br>Add Exising Directory<br>把 translator 資料夾與剛剛產出的 qm 檔導入</p>
<p><img src="https://i.imgur.com/yR8iQm1.png" alt></p>
<h4 id="創建一個-MultiLanguage-class"><a href="#創建一個-MultiLanguage-class" class="headerlink" title="創建一個 MultiLanguage class"></a>創建一個 MultiLanguage class</h4><p>MultiLanguage class 用來判別現在要顯示哪種語言</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MULTILANGUAGE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MULTILANGUAGE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTranslator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//繼承 QQuickItem 讓這個類別可以在 qml 中被呼叫</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiLanguage</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//將 engine 導入，呼叫 retranslate 用來刷新頁面，否則即使 installTranslator 畫面看似也無動作</span></span><br><span class="line">    MultiLanguage( QQmlApplicationEngine *engine ) </span><br><span class="line">    &#123;</span><br><span class="line">        m_engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//qml 呼叫此函式切換語言</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">updateLanguage</span><span class="params">( QString lang )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">QFont <span class="title">engFont</span><span class="params">( <span class="string">"Arial"</span> )</span></span>;</span><br><span class="line">        <span class="function">QFont <span class="title">chFont</span><span class="params">( <span class="string">"Microsoft JhengHei"</span> )</span></span>;</span><br><span class="line">        qDebug() &lt;&lt; lang;</span><br><span class="line">        <span class="keyword">if</span> ( lang == <span class="string">"ENG"</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            m_translator.load( <span class="string">"MultiLanguage_ENG"</span>, <span class="string">":/translator"</span> );</span><br><span class="line">            qApp-&gt;installTranslator( &amp;m_translator ); <span class="comment">//這個qApp 等於從 main.cpp 使用的 QGuiApplication app( argc, argv );</span></span><br><span class="line">            qApp-&gt;setFont( engFont );</span><br><span class="line">            m_engine-&gt;retranslate(); <span class="comment">//必須讓 engine 重新翻譯否則無變化</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( lang == <span class="string">"CHT"</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            m_translator.load( <span class="string">"MultiLanguage_CHT"</span>, <span class="string">":/translator"</span> );</span><br><span class="line">            qApp-&gt;installTranslator( &amp;m_translator );</span><br><span class="line">            qApp-&gt;setFont( chFont );</span><br><span class="line">            m_engine-&gt;retranslate(); <span class="comment">//必須讓 engine 重新翻譯否則無變化</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            qApp-&gt;removeTranslator( &amp;m_translator );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QQmlApplicationEngine *m_engine;</span><br><span class="line">    QTranslator m_translator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MULTILANGUAGE_H</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>重點整理:<br>  需將 main.cpp 的 engine 導入，呼叫 retranslate 用來刷新頁面，否則即使 installTranslator 畫面看似也無動作<br>  這個qApp 等於從 main.cpp 使用的 QGuiApplication app( argc, argv );</li>
</ul>
<h4 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"multilanguage.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主要變更下面三句指令</span></span><br><span class="line">    <span class="comment">// 初始化 multiLanguage 並且把 engine 導入</span></span><br><span class="line">    <span class="function">MultiLanguage <span class="title">multiLanguage</span><span class="params">( &amp;engine )</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用 setContextProperty 方法將類別註冊給 qml 使用</span></span><br><span class="line">    engine.rootContext()-&gt;setContextProperty( <span class="string">"multiLanguage"</span>, &amp;multiLanguage );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 預設程式初始語言為英文</span></span><br><span class="line">    multiLanguage.updateLanguage( <span class="string">"ENG"</span> );</span><br><span class="line"></span><br><span class="line">    engine.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line">    <span class="keyword">if</span> ( engine.rootObjects().isEmpty() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> result = app.exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完成圖"><a href="#完成圖" class="headerlink" title="完成圖"></a>完成圖</h2><p>大功告成啦<br>接下來只要按切換語言按鈕便會在英文與繁體中文間做即時切換</p>
<p>繁體中文</p>
<p><img src="https://i.imgur.com/DHe2mv3.png" alt></p>
<p>英文</p>
<p><img src="https://i.imgur.com/G9nhUeQ.png" alt></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Linguist</tag>
        <tag>多國語言</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 計時器 Timer</title>
    <url>/2020/02/18/Qt-%E8%A8%88%E6%99%82%E5%99%A8-QTimer-%E8%A8%AD%E5%AE%9A%E5%80%92%E6%95%B8%E8%A8%88%E6%99%82%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Qt-計時器-QTimer-設定倒數計時器"><a href="#Qt-計時器-QTimer-設定倒數計時器" class="headerlink" title="Qt 計時器 QTimer 設定倒數計時器"></a>Qt 計時器 QTimer 設定倒數計時器</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們需要寫一些函式持續執行運作個特定幾秒，並且不讓其運作影響整個 UI 被 hang 住，這樣我們除了把函式自己創建另一條執行緒執行之外，也可以透過 Qt 提供的 QTimer 方便且迅速的達到相同效果，這一篇我們記錄 C++ 端的 QTimer 與 QML 端的 Timer 兩種用法</p>
<h2 id="Qt-QTimer"><a href="#Qt-QTimer" class="headerlink" title="Qt QTimer"></a>Qt QTimer</h2><p>這邊我們舉個例子:<br>當程式運作到某個階段時我們要響起蜂鳴器 3 秒，那麼如果純粹一個 While 迴圈則會讓整個程式卡在該函式的 While 倒數迴圈中，雖然以 Qtconcurrent 解決也很棒，但今天不介紹它，我們使用的是 QTimer</p>
<h2 id="QTimer-倒數計時器"><a href="#QTimer-倒數計時器" class="headerlink" title="QTimer 倒數計時器"></a>QTimer 倒數計時器</h2><h3 id="標頭檔-h"><a href="#標頭檔-h" class="headerlink" title="標頭檔.h"></a>標頭檔.h</h3><p>首先我們可以在標頭檔 .h 先宣告成員<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtimer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeddybearFP</span>:</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TeddybearFP();</span><br><span class="line">    ~TeddybearFP();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QTimer buzzerTimer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBuzzerTimerTimeOut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="實作檔-cpp"><a href="#實作檔-cpp" class="headerlink" title="實作檔.cpp"></a>實作檔.cpp</h3><p>接著在實作檔 .cpp 中實作<br>在建構子中連結 signal 與 slot<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfp.h"</span></span></span><br><span class="line"></span><br><span class="line">TeddybearFP::TeddybearFP() &#123;</span><br><span class="line">    <span class="comment">// connect 函式中需要傳 buzzerTimer 記憶體起始位置，與 QTimer 本身的擁有的 timeout 信號, 而 SLOT 則是我們編寫的時間到處發的函式</span></span><br><span class="line">    connect( &amp;buzzerTimer, SIGNAL( timeout() ), <span class="keyword">this</span>, SLOT( onBuzzerTimerTimeOut() ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TeddybearFP::~TeddybearFP() &#123;</span><br><span class="line">    <span class="comment">//有 connect 記得一定要在解構 disconnect 阿阿阿阿阿,否則會越綁定越多次</span></span><br><span class="line">    disconnect( &amp;buzzerTimer, SIGNAL( timeout() ), <span class="keyword">this</span>, SLOT( onBuzzerTimerTimeOut() ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddybearFP::doSomething &#123;</span><br><span class="line">    buzzerTimer.start( <span class="number">3000</span> ); <span class="comment">//設定 buzzer 倒數 3 秒,若沒有設定間隔,預設間隔為一秒, 此時這類別的執行緒會空出來,直到3秒倒數完成</span></span><br><span class="line"></span><br><span class="line">    Set蜂鳴器(響)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddybearFP::onBuzzerTimerTimeOut()</span><br><span class="line">&#123;</span><br><span class="line">    Set蜂鳴器(不響)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddybearFP::onStopBtnClicked()</span><br><span class="line">&#123;</span><br><span class="line">    buzzerTimer.stop();</span><br><span class="line">    onBuzzerTimerTimeOut();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>透過 QTimer 方式編寫的話，當倒數 3 秒鐘時，畫面就不會被卡住囉，依然可以正常操作，僅在 3 秒鐘一到的那一瞬間會回到主執行緒做 onBuzzerTimerTimeOut() 函式內部的事情，另外我們還編寫了另一個 SLOT  onStopBtnClicked() 當暫停按鍵被點擊，我們直接暫停計時器並且蜂鳴器結束</p>
<h2 id="QML-Timer用法"><a href="#QML-Timer用法" class="headerlink" title="QML Timer用法"></a>QML Timer用法</h2><p>在 QML 中的 Timer 類似於 C++ 端的 QTimer ，僅需調整些屬性即可使用<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Properties  屬性</span><br><span class="line">interval :  設定每次重複執行的間隔時間</span><br><span class="line">repeat :    是否重覆執行</span><br><span class="line">running :   是否運行,若為 <span class="literal">true</span> 則一進該頁面會直接執行</span><br><span class="line"></span><br><span class="line">Methods </span><br><span class="line">restart() : 重新執行</span><br><span class="line">start() :   計時器開始</span><br><span class="line">stop() :    計時器暫停</span><br><span class="line"></span><br><span class="line">slot </span><br><span class="line">onTriggered : 每次計時器觸發時要做什麼事情寫在這裡</span><br></pre></td></tr></table></figure></p>
<p>以下我們來看一下如何把 QML 端的計時器運用在工程模式中</p>
<h3 id="工程模式"><a href="#工程模式" class="headerlink" title="工程模式"></a>工程模式</h3><p>有時候我們要讓一些資訊僅讓工程師檢視不讓使用者得知<br>那麼我們可以做一個隱藏的 button 並在指定時間內按特定次數才顯示</p>
<h3 id="工程模式實作"><a href="#工程模式實作" class="headerlink" title="工程模式實作"></a>工程模式實作</h3><p>這邊我們舉個例子:<br>按程式操作介面的右下角的隱藏按鈕5秒內按壓五次則顯示工程師身高<br>在一定時間內按壓頁面右下角隱藏的按鈕超過特定次數，出現隱藏資訊的實作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QML Show_engineer_height.qml</span></span><br><span class="line">Item &#123;</span><br><span class="line">    property <span class="keyword">int</span> timerCounter: <span class="number">0</span></span><br><span class="line">    property <span class="keyword">int</span> clickCounter: <span class="number">0</span></span><br><span class="line">    width: <span class="number">800</span></span><br><span class="line">    height:<span class="number">600</span></span><br><span class="line">    </span><br><span class="line">    Timer &#123;</span><br><span class="line">        id: timer</span><br><span class="line">        repeat: <span class="literal">true</span>   <span class="comment">//當開始後會持續執行,若設定 false 則onTriggerd 內容僅會執行一次</span></span><br><span class="line">        onTriggered: &#123; <span class="comment">//當timer.start()會進入此處, 每次計時器觸發時做的事情放此</span></span><br><span class="line">            timerCounter = timerCounter + <span class="number">1</span></span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">"timerCounter:"</span>,timerCounter)</span><br><span class="line">            <span class="keyword">if</span>( timerCounter === <span class="number">5</span>) <span class="comment">//倒數五秒若點擊次數不到五次則全部歸零</span></span><br><span class="line">            &#123;</span><br><span class="line">                timerCounter = <span class="number">0</span></span><br><span class="line">                clickCounter = <span class="number">0</span></span><br><span class="line">                stop()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Button &#123;</span><br><span class="line">        <span class="comment">//放在右下角</span></span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        anchors.bottom: parent.bottom</span><br><span class="line">        width: <span class="number">200</span></span><br><span class="line">        height: <span class="number">200</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            <span class="keyword">if</span>( !timer.running ) timer.start() <span class="comment">//若計時器尚未運行則啟動計時器</span></span><br><span class="line">            clickCounter = clickCounter + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>( clickCounter &gt;= <span class="number">5</span> ) timer.stop() <span class="comment">//超過5次則讓計時器停止不繼續倒數</span></span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">"clickCounter:"</span>,clickCounter)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Text &#123;</span><br><span class="line">        width: <span class="number">100</span></span><br><span class="line">        height: <span class="number">50</span></span><br><span class="line">        anchors.left: parent.left</span><br><span class="line">        anchors.leftMargin: <span class="number">50</span></span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.topMargin: <span class="number">50</span></span><br><span class="line">        font.pixelSize: <span class="number">28</span></span><br><span class="line">        color: <span class="string">"white"</span></span><br><span class="line">        horizontalAlignment: Text.AlignHCenter <span class="comment">//置中</span></span><br><span class="line">        text: <span class="string">"Engineer Height: 176"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>QTimer</tag>
        <tag>Timer</tag>
      </tags>
  </entry>
  <entry>
    <title>Python generate fake data for testing database syntax efficiency</title>
    <url>/2020/02/14/Python-generate-fake-data-for-testing-database-syntax-efficiency/</url>
    <content><![CDATA[<h1 id="Python-產出假資料來測試資料庫語法的效率"><a href="#Python-產出假資料來測試資料庫語法的效率" class="headerlink" title="Python 產出假資料來測試資料庫語法的效率"></a>Python 產出假資料來測試資料庫語法的效率</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們需要一些測試資料，例如:要測試資料庫語法是否夠快速，那麼我們可以先寫一個 FakeDataGenerator 來產生包含 ( 名字、性別、生日、到訪日、地址、EMail、備註文字 ) 的測試資料</p>
<h2 id="fake2db"><a href="#fake2db" class="headerlink" title="fake2db"></a>fake2db</h2><p>這邊我們使用的是 Python 有人提供的 fake2db 函式庫可以得到許多隨機特定格式資料。</p>
<h3 id="安裝-fake2db"><a href="#安裝-fake2db" class="headerlink" title="安裝 fake2db"></a>安裝 fake2db</h3><p>老樣子用 pip 安裝一下 fake2db<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install fake2db</span><br></pre></td></tr></table></figure></p>
<h3 id="使用-fake2db"><a href="#使用-fake2db" class="headerlink" title="使用 fake2db"></a>使用 fake2db</h3><p>每次取得 faker 的函式回傳值皆會是函式隨機產生後回傳的每次不一樣</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line">fake = Faker()</span><br><span class="line">print(<span class="string">"Name:"</span>, fake.name())</span><br><span class="line">print(<span class="string">"date:"</span>,fake.date())</span><br><span class="line">print(<span class="string">"thisYearDate:"</span>,fake.date_time_this_year())</span><br><span class="line">print(<span class="string">"Comment:"</span>,fake.text())</span><br><span class="line">print(<span class="string">"word:"</span>,fake.word())</span><br><span class="line">print(<span class="string">"Address:"</span>,fake.address())</span><br><span class="line">print(<span class="string">"PhoneNumber:"</span>, fake.phone_number())</span><br><span class="line">print(<span class="string">"EMail:"</span>, fake.email())</span><br><span class="line"></span><br><span class="line"><span class="comment">#輸出結果如下</span></span><br><span class="line">Name: Christine Kelley</span><br><span class="line">date: <span class="number">2006</span><span class="number">-12</span><span class="number">-24</span></span><br><span class="line">thisYearDate: <span class="number">2020</span><span class="number">-02</span><span class="number">-02</span> <span class="number">03</span>:<span class="number">12</span>:<span class="number">26</span></span><br><span class="line">Comment: Illo fugiat non laudantium libero deleniti consequatur facere. Et esse voluptas dicta. Recusandae ducimus quos earum nesciunt. Similique autem inventore quisquam minus excepturi sint.</span><br><span class="line">word: repellendus</span><br><span class="line">Address: <span class="number">61905</span> Linda Lodge</span><br><span class="line">Lake Reginamouth, GA <span class="number">71925</span></span><br><span class="line">PhoneNumber: <span class="number">00118138799</span></span><br><span class="line">EMail: mbaxter@yahoo.com</span><br></pre></td></tr></table></figure>
<p>利用以上特性讓我們來做測試資料吧</p>
<h2 id="FakeDataGenerator-實作"><a href="#FakeDataGenerator-實作" class="headerlink" title="FakeDataGenerator 實作"></a>FakeDataGenerator 實作</h2><p>用 faker 函式創建假的會員資料</p>
<p>fakeDataNumber 填入欲產出的假資料數量<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">'member.db'</span>)</span><br><span class="line">cursorObj = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDatabase</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursorObj.execute(<span class="string">'''CREATE TABLE member</span></span><br><span class="line"><span class="string">                         ('SN'         TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Name'        TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Gender'      TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Birthday'    TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Address'     TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'PhoneNumber' TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'EMail'       TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Comment'     TEXT    NOT NULL);'''</span>)</span><br><span class="line">        print(<span class="string">"member table created!"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"member table already exists."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateFakeData</span><span class="params">( fakeDataNumber )</span>:</span></span><br><span class="line">    fake = Faker()</span><br><span class="line">    data = []</span><br><span class="line">    sn = <span class="number">1</span></span><br><span class="line">    gender = [<span class="string">"M"</span>, <span class="string">"F"</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range( <span class="number">1</span>, fakeDataNumber ) :</span><br><span class="line">        <span class="keyword">if</span>(sn%<span class="number">10000</span> == <span class="number">0</span>):</span><br><span class="line">            print(sn)</span><br><span class="line">        genderSeed = random.randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        data.append([sn,fake.name(),gender[genderSeed],fake.date(),fake.address(),fake.phone_number(),fake.email(),fake.text()])</span><br><span class="line">        sn+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    q = <span class="string">"""INSERT INTO member(SN,Name,Gender,Birthday,Address,PhoneNumber,EMail,Comment) VALUES(?,?,?,?,?,?,?,?)"""</span></span><br><span class="line">    cursorObj.executemany(q,data)</span><br><span class="line">    con.commit()  </span><br><span class="line">    con.close()</span><br><span class="line">    print(<span class="string">"Fake Data generated!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tStart = time.time()</span><br><span class="line">    createDatabase()</span><br><span class="line">    fakeDataNumber = <span class="number">1000</span></span><br><span class="line">    generateFakeData( fakeDataNumber )</span><br><span class="line">    tEnd = time.time()</span><br><span class="line">    print(<span class="string">"It takes "</span>, round (tEnd - tStart, <span class="number">2</span>) , <span class="string">" seconds to generate "</span>, fakeDataNumber, <span class="string">" fake data."</span>)</span><br></pre></td></tr></table></figure></p>
<p>執行結果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">member table already exists.</span><br><span class="line">Fake Data generated!</span><br><span class="line">It takes  4.9  seconds to generate  1000  fake data.</span><br></pre></td></tr></table></figure></p>
<p><img src="https://i.imgur.com/kbYTaC6.png" alt></p>
<h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><ol>
<li>目前使用上來說 fake.date() 有機會在 faker 函式庫本身內部出錯 ( return 發生錯誤 )導致程式終止 OSError</li>
<li>fake.text() 因回傳的字串字數多，速度比較慢，會導致在大量產出時速度很慢，若只要一些 Text 的話，可以用 fake.word() 加減用</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>fake2db</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt access a cpp structure in QML ( Q_GADGET )</title>
    <url>/2020/02/05/Qt-access-a-cpp-structure-in-QML-Q-GADGET/</url>
    <content><![CDATA[<h1 id="Qt-access-a-cpp-structure-in-QML-Q-GADGET"><a href="#Qt-access-a-cpp-structure-in-QML-Q-GADGET" class="headerlink" title="Qt access a cpp structure in QML ( Q_GADGET )"></a>Qt access a cpp structure in QML ( Q_GADGET )</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為 QProperty 不能使用非 QObject 的子類別資料型態，所以不是單純註冊就可以讓 qml 端使用，單純註冊僅能讓註冊的自訂型態被認得，但是其內容依舊是 undefined，那麼我們看看如何透過 Q_GADGET 解決這個問題吧<br>這一篇記錄如何在 qml 端對 C++ 的結構作操作。</p>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>跟隨以下六步驟達到從 qml 操作 c++ 結構</p>
<h3 id="ModelDataItem-h"><a href="#ModelDataItem-h" class="headerlink" title="ModelDataItem.h"></a>ModelDataItem.h</h3><p>例如: 有個類別叫做 modelDataItem 負責各類數據讓 qml 端顯示與存取，其中某一筆 QProperty 的資料型態需用自定義的結構 struct Figure 紀錄身高與體重</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MODELDATAITEM_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODELDATAITEM_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Step1: 創建自定義結構</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Figure</span> //紀錄身材的結構</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Q_GADGET <span class="comment">// 輕量型 QObject</span></span><br><span class="line">    <span class="keyword">int</span> m_height;</span><br><span class="line">    <span class="keyword">int</span> m_weight;</span><br><span class="line">    Q_PROPERTY( <span class="keyword">int</span> height MEMBER m_height )</span><br><span class="line">    Q_PROPERTY( <span class="keyword">int</span> weight MEMBER m_weight )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelDataItem</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step2: 以自定義結構為型態類別創建 QProperty 並實作它</span></span><br><span class="line">    Q_PROPERTY( Figure figure READ figure WRITE setFigure NOTIFY figureChanged )</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ModelDataItem</span><span class="params">( QObject *parent = <span class="literal">nullptr</span> )</span></span>;</span><br><span class="line">    <span class="function">Figure <span class="title">figure</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Figure m_figure;</span><br><span class="line">    </span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">figureChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step3: 實作完成 QProperty 後，Q_DECLARE_METATYPE 宣告該型態給 qml </span></span><br><span class="line">Q_DECLARE_METATYPE( Figure )</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MODELDATAITEM_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="ModelDataItem-cpp"><a href="#ModelDataItem-cpp" class="headerlink" title="ModelDataItem.cpp"></a>ModelDataItem.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"modeldataitem.h"</span></span></span><br><span class="line"></span><br><span class="line">ModelDataItem::ModelDataItem( QObject *parent )</span><br><span class="line">    : QObject( parent )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Flag ModelDataItem::figure()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_figure;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ModelDataItem::setFigure( Figure figure )</span><br><span class="line">&#123;</span><br><span class="line">    m_figure = figure;</span><br><span class="line">    <span class="function">emit <span class="title">figureChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"modeldataitem.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step4: 註冊自定義類別</span></span><br><span class="line">    qmlRegisterType&lt;ModelDataItem&gt;( <span class="string">"teddybearFp"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"ModelDataItem"</span> );</span><br><span class="line">    <span class="comment">// Step5: 註冊自定義型態</span></span><br><span class="line">    qRegisterMetaType&lt;Figure&gt;( <span class="string">"Figure"</span> ); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( mainWindow.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = app.exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="User-qml"><a href="#User-qml" class="headerlink" title="User.qml"></a>User.qml</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> teddybearFp <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">ModelDataItem &#123;</span><br><span class="line">    id: root</span><br><span class="line">    anchors.fill: parent</span><br><span class="line">    </span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        acceptedButtons: Qt.LeftButton | Qt.RightButton</span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            <span class="comment">//Step6: 直接對結構內的 QProperty 操作 assign value</span></span><br><span class="line">            <span class="comment">//結構內 QProperty 雖然沒寫 WRITE 但是會寫入數值</span></span><br><span class="line">            <span class="comment">//並且在類別內的 Figure 寫入後發送信號 NOTIFY 通知 (figureChanged()觸發)</span></span><br><span class="line">            root.figure.height = <span class="number">180</span></span><br><span class="line">            root.figure.weight = <span class="number">70</span></span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">"height:"</span>, root.figure.height)</span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">"weight:"</span>, root.figure.weight)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>透過 Q_GADGET 方法，即使 QProperty 的資料型態沒有使用類別去繼承 QObject 也能在 Qml 中進行操作喔</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Q_GADGET</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 顯示軟體版本資訊</title>
    <url>/2020/01/07/Qt-%E9%A1%AF%E7%A4%BA%E8%BB%9F%E9%AB%94%E7%89%88%E6%9C%AC%E8%B3%87%E8%A8%8A/</url>
    <content><![CDATA[<h1 id="Qt-顯示軟體版本資訊"><a href="#Qt-顯示軟體版本資訊" class="headerlink" title="Qt 顯示軟體版本資訊"></a>Qt 顯示軟體版本資訊</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>開發應用軟體，出版的時候最好加上個軟體版本資訊，方便日後的升級與控管，這一篇我們記錄如何顯示軟體版本資訊</p>
<h2 id="Qt-軟體版本資訊實作"><a href="#Qt-軟體版本資訊實作" class="headerlink" title="Qt 軟體版本資訊實作"></a>Qt 軟體版本資訊實作</h2><h3 id="YourApp-pro"><a href="#YourApp-pro" class="headerlink" title="YourApp.pro"></a>YourApp.pro</h3><p>在 pro 檔案中加入軟體版本資訊</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#軟體版本資訊</span></span><br><span class="line">VERSION = <span class="number">1.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#加入定義讓軟體版本資訊可以在 cpp 中使用</span></span><br><span class="line">DEFINES += APP_VERSION=\\\<span class="string">"$$VERSION\\\"</span></span><br></pre></td></tr></table></figure>
<h3 id="使用端-cpp"><a href="#使用端-cpp" class="headerlink" title="使用端.cpp"></a>使用端.cpp</h3><p>用 Q_INVOKABLE 函式將軟體版本資訊傳遞到顯示端</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="function">Q_INVOKABLE QString <span class="title">getVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line">QString About::getVersion()&#123;</span><br><span class="line">    <span class="keyword">return</span> APP_VERSION;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>顯示軟體版本資訊</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt BusyIndicator</title>
    <url>/2019/12/26/Qt-BusyIndicator/</url>
    <content><![CDATA[<h1 id="Qt-BusyIndicator"><a href="#Qt-BusyIndicator" class="headerlink" title="Qt BusyIndicator"></a>Qt BusyIndicator</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們對圖片進行運算時，如果沒有任何動畫告知會以為整個 UI hang 住了，那麼我們可以透過 BusyIndicator ，當圖片在載入或是運算時，會有 Loading 動畫</p>
<h2 id="BusyIndicator"><a href="#BusyIndicator" class="headerlink" title="BusyIndicator"></a>BusyIndicator</h2><p>繁忙指示器應用於指示正在加載內容或 UI 阻塞以等待資源可用時的活動</p>
<h2 id="BusyIndicator-實作"><a href="#BusyIndicator-實作" class="headerlink" title="BusyIndicator 實作"></a>BusyIndicator 實作</h2><p>我們來看看如何將 BusyIndicator 用在圖片載入與計算的時候顯示 Loading 動畫</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Image &#123;</span><br><span class="line">    id: img</span><br><span class="line">    width: parent.width</span><br><span class="line">    height: parent.height</span><br><span class="line">    transformOrigin: Item.TopLeft</span><br><span class="line">    fillMode: Image.PreserveAspectFit</span><br><span class="line">    asynchronous: <span class="literal">true</span> <span class="comment">//注意這邊要設置成非同步載入</span></span><br><span class="line">&#125;</span><br><span class="line">BusyIndicator &#123;</span><br><span class="line">    anchors.centerIn: parent</span><br><span class="line">    width: <span class="number">96</span></span><br><span class="line">    height: <span class="number">96</span></span><br><span class="line">    implicitWidth: <span class="number">96</span></span><br><span class="line">    implicitHeight: <span class="number">96</span></span><br><span class="line">    running: img.status === Image.Loading</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>BusyIndicator</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt QUrlQuery</title>
    <url>/2019/12/26/Qt-QUrlQuery/</url>
    <content><![CDATA[<h1 id="Qt-QUrlQuery"><a href="#Qt-QUrlQuery" class="headerlink" title="Qt QUrlQuery"></a>Qt QUrlQuery</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們使用我前幾篇所編寫的 <a href="https://teddybearfp.github.io/2019/12/12/Qt-QQuickImageProvider-%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9C%96%E7%89%87%E6%8F%90%E4%BE%9B%E8%80%85/#more">Qt QQuickImageProvider 好用的圖片提供者</a>那麼可以搭配這一篇所介紹的 QUrlQuery ，讓我們跟 ImageProvider 要求圖片的語句更簡易的剖析，讓要求圖片的寫法與 HTTP 的 GET 語句一致</p>
<h2 id="HTTP-GET-語法"><a href="#HTTP-GET-語法" class="headerlink" title="HTTP GET 語法"></a>HTTP GET 語法</h2><p>統一資源定位符（英語： Uniform Resource Locator，縮寫：URL；或稱 統一資源定位器、定位位址、 URL 位址 [1]，俗稱 網頁位址或簡稱網址）是網際網路上標準的資源的位址（ Address ），如同在網路上的門牌。</p>
<p>GET 模式的表單參數，以「?」字元為起點，每個參數以「&amp;」隔開，再以「=」分開參數名稱與資料，通常以 UTF8 的 URL 編碼，避開字元衝突的問題</p>
<p>例如:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="string">"http://www.example.com/TeddyBearFp?date=20191225&amp;festival=Christmas"</span></span><br></pre></td></tr></table></figure>
<p>上述網址<br>在問號以前: 為網址路徑<br>問號後方: 為 query 語句,並且在多個參數間以 &amp; 隔開</p>
<p>如果我們直接以字串方式剖析 query 內容並分類成 key , value 較繁瑣，可以用更方便的函式庫 QUrlQuery 來剖析</p>
<h2 id="QUrlQuery"><a href="#QUrlQuery" class="headerlink" title="QUrlQuery"></a>QUrlQuery</h2><p>剖析 HTTP GET 語法，將問號以前的路徑與 Query 內容分開</p>
<h3 id="取得-query-語句"><a href="#取得-query-語句" class="headerlink" title="取得 query 語句"></a>取得 query 語句</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//將網址 http://www.example.com/TeddyBearFp?date=20191225&amp;festival=Christmas 剖析出 query 內容</span></span><br><span class="line"><span class="function">QUrl <span class="title">url</span><span class="params">(<span class="string">"http://www.example.com/TeddyBearFp?date=20191225&amp;festival=Christmas"</span>)</span></span>;</span><br><span class="line"><span class="function">QUrlQuery <span class="title">query</span><span class="params">(url.query())</span></span>;</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"query: "</span> &lt;&lt; url.query();</span><br><span class="line"><span class="comment">//印出 "date=20191225&amp;festival=Christmas"</span></span><br></pre></td></tr></table></figure>
<h3 id="從-query-語句中剖析出-Key-value"><a href="#從-query-語句中剖析出-Key-value" class="headerlink" title="從 query 語句中剖析出 Key, value"></a>從 query 語句中剖析出 Key, value</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//將網址 http://www.example.com/TeddyBearFp?visitDate=20191225&amp;festival=Christmas 剖析出 query 內容</span></span><br><span class="line"><span class="function">QUrl <span class="title">url</span><span class="params">(<span class="string">"http://www.example.com/TeddyBearFp?date=20191225&amp;festival=Christmas"</span>)</span></span>;</span><br><span class="line"><span class="function">QUrlQuery <span class="title">query</span><span class="params">(url.query())</span></span>;</span><br><span class="line">QList&lt;QPair&lt;QString, QString&gt;&gt; <span class="built_in">list</span> = query.queryItems();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length(); i++ )</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"list["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: ("</span> &lt;&lt; <span class="built_in">list</span>[ i ].first &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="built_in">list</span>[ i ].second &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">    <span class="comment">//印出 list[ 0 ]: ( "date" , "20191225" )</span></span><br><span class="line">    <span class="comment">//印出 list[ 1 ]: ( "festival" , "Christmas" )</span></span><br><span class="line">&#125;</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"date: "</span> &lt;&lt; query.queryItemValue( <span class="string">"date"</span> );</span><br><span class="line"><span class="comment">//印出 date: 20191225</span></span><br><span class="line">qDebug() &lt;&lt; <span class="string">"festival: "</span> &lt;&lt; query.queryItemValue( <span class="string">"festival"</span> );</span><br><span class="line"><span class="comment">//印出 festival: Christmas</span></span><br></pre></td></tr></table></figure>
<h2 id="QUrlQuery-搭配-ImageProvider-的實作"><a href="#QUrlQuery-搭配-ImageProvider-的實作" class="headerlink" title="QUrlQuery 搭配 ImageProvider 的實作"></a>QUrlQuery 搭配 ImageProvider 的實作</h2><p>如果有點忘記 ImageProvider 是什麼可以回顧一下 <a href="https://teddybearfp.github.io/2019/12/12/Qt-QQuickImageProvider-%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9C%96%E7%89%87%E6%8F%90%E4%BE%9B%E8%80%85/#more">Qt QQuickImageProvider 好用的圖片提供者</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage ImageProvider::requestImage( <span class="keyword">const</span> QString &amp;id, QSize *size, <span class="keyword">const</span> QSize &amp;requestedSize )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QUrl <span class="title">url</span><span class="params">( id )</span></span>;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"id: "</span> &lt;&lt; id; <span class="comment">//output1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">QUrlQuery <span class="title">query</span><span class="params">( url.query() )</span></span>;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"query: "</span> &lt;&lt; url.query(); <span class="comment">//output2</span></span><br><span class="line">    </span><br><span class="line">    QList&lt;QPair&lt;QString, QString&gt;&gt; <span class="built_in">list</span> = query.queryItems();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length(); i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"list["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: ("</span> &lt;&lt; <span class="built_in">list</span>[ i ].first &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="built_in">list</span>[ i ].second &lt;&lt; <span class="string">")"</span>; <span class="comment">//output3</span></span><br><span class="line">    &#125;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"contrast: "</span> &lt;&lt; query.queryItemValue( <span class="string">"contrast"</span> ).toInt(); <span class="comment">//output4</span></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"brightness: "</span> &lt;&lt; query.queryItemValue( <span class="string">"brightness"</span> ).toInt(); <span class="comment">//output5</span></span><br><span class="line">    </span><br><span class="line">    QString imgPath = id.split( <span class="string">'?'</span> )[ <span class="number">0</span> ];</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"imgPath "</span> &lt;&lt; imgPath; <span class="comment">//output6</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    QImage img = QImage( imgPath ).convertToFormat( QImage::Format_RGB888 );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( query.queryItemValue( <span class="string">"contrast"</span> ) != <span class="string">""</span> )</span><br><span class="line">        contrastLevel = query.queryItemValue( <span class="string">"contrast"</span> ).toInt();</span><br><span class="line">    <span class="keyword">if</span> ( query.queryItemValue( <span class="string">"brightness"</span> ) != <span class="string">""</span> )</span><br><span class="line">        brightnessLevel = query.queryItemValue( <span class="string">"brightness"</span> ).toInt();</span><br><span class="line">        </span><br><span class="line">    Brightness( &amp;img, brightnessLevel );</span><br><span class="line">    Contrast( &amp;img, contrastLevel );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> img;</span><br></pre></td></tr></table></figure>
<p>輸出檢視</p>
<pre><code>//output1
id:  &quot;d:/TeddyBearFp/20191025170005.jpg?contrast=0&amp;brightness=2&quot;

//output2
query:  &quot;contrast=0&amp;brightness=0&quot;

//output3
list[ 0 ]: ( &quot;contrast&quot; , &quot;0&quot; )
list[ 1 ]: ( &quot;brightness&quot; , &quot;2&quot; )

//output4
contrast:  0

//output5
brightness:  2

//output6
imgPath  &quot;d:/TeddyBearFp/20191025170005.jpg&quot;
</code></pre>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QUrlQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt QSqlQuery</title>
    <url>/2019/12/25/Qt-QSqlQuery/</url>
    <content><![CDATA[<h1 id="Qt-QSqlQuery"><a href="#Qt-QSqlQuery" class="headerlink" title="Qt QSqlQuery"></a>Qt QSqlQuery</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇記錄一些 Qt 使用 QSqlQuery 對 Sql 操作的語法</p>
<h2 id="創建-db"><a href="#創建-db" class="headerlink" title="創建 db"></a>創建 db</h2><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">QSqlDatabase db;</span><br><span class="line">db = <span class="attribute">QSqlDatabase</span>::addDatabase( <span class="string">"QSQLITE"</span> );</span><br><span class="line">db.setDatabaseName( dbPath );</span><br><span class="line">db.setUserName(<span class="string">"admin"</span>);</span><br><span class="line">db.setPassword(<span class="string">"1234"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="QSqlQuery"><a href="#QSqlQuery" class="headerlink" title="QSqlQuery"></a>QSqlQuery</h2><h3 id="QSqlQuery-1"><a href="#QSqlQuery-1" class="headerlink" title="QSqlQuery"></a>QSqlQuery</h3><p>QSqlQuery 可以執行任何的 SQL 語句</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">QSqlQuery query(db);</span><br><span class="line">query.exec(<span class="string">"INSERT INTO employee (id, name, salary) "</span></span><br><span class="line">           <span class="string">"VALUES (1001, 'Thad Beaumont', 65000)"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="操作多項紀錄-named-binding"><a href="#操作多項紀錄-named-binding" class="headerlink" title="操作多項紀錄( named binding )"></a>操作多項紀錄( named binding )</h3><p>bindValue<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//創建 QSqlQuery</span></span><br><span class="line"><span class="function">QSqlQuery <span class="title">query</span><span class="params">( db )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//named binding 綁定多個欄位</span></span><br><span class="line">query.prepare(<span class="string">"INSERT INTO employee (id, name, salary) "</span></span><br><span class="line">              <span class="string">"VALUES (:id, :name, :salary)"</span>);</span><br><span class="line">query.bindValue(<span class="string">":id"</span>, <span class="number">1001</span>);</span><br><span class="line">query.bindValue(<span class="string">":name"</span>, <span class="string">"Thad Beaumont"</span>);</span><br><span class="line">query.bindValue(<span class="string">":salary"</span>, <span class="number">65000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//執行 sql 語句成功與否</span></span><br><span class="line"><span class="keyword">if</span> ( !query.exec() )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//印出錯誤訊息</span></span><br><span class="line">    qDebug( <span class="string">"Database::SetToStation Cannot set station because %s"</span>, qPrintable( query.lastError().text() ) );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="操作多項紀錄-positional-binding"><a href="#操作多項紀錄-positional-binding" class="headerlink" title="操作多項紀錄( positional binding )"></a>操作多項紀錄( positional binding )</h3><p>addBindValue<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//創建 QSqlQuery</span></span><br><span class="line"><span class="function">QSqlQuery <span class="title">query</span><span class="params">(db)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//positional binding 綁定多個欄位</span></span><br><span class="line">query.prepare(<span class="string">"INSERT INTO employee (id, name, salary) "</span></span><br><span class="line">              <span class="string">"VALUES (?, ?, ?)"</span>);</span><br><span class="line">query.addBindValue(<span class="number">1001</span>);</span><br><span class="line">query.addBindValue(<span class="string">"Thad Beaumont"</span>);</span><br><span class="line">query.addBindValue(<span class="number">65000</span>);</span><br><span class="line"><span class="comment">//執行 sql 語句成功與否</span></span><br><span class="line"><span class="keyword">if</span> ( !query.exec() )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//印出錯誤訊息</span></span><br><span class="line">    qDebug( <span class="string">"Database::SetToStation Cannot set station because %s"</span>, qPrintable( query.lastError().text() ) );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="搜尋遍歷"><a href="#搜尋遍歷" class="headerlink" title="搜尋遍歷"></a>搜尋遍歷</h3><p>query.next()<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QSqlQuery <span class="title">query</span><span class="params">(db)</span></span>;</span><br><span class="line">query.exec(<span class="string">"SELECT * FROM Measurements"</span>);</span><br><span class="line"><span class="comment">//next () 方法移至所查得的下一筆資料，如果可以找到下一筆資料則傳回 true，否則傳回 false (搜尋遍歷)</span></span><br><span class="line"><span class="keyword">while</span> (query.next()) &#123;</span><br><span class="line">    <span class="keyword">int</span> id = query.value(<span class="number">0</span>).toInt();</span><br><span class="line">    QString name = query.value(<span class="number">1</span>).toString();</span><br><span class="line">    <span class="keyword">int</span> age = query.value(<span class="number">2</span>).toInt();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">" "</span> &lt;&lt; qPrintable(name) &lt;&lt; <span class="string">" "</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://doc.qt.io/qt-5/sql-sqlstatements.html" target="_blank" rel="noopener">Executing SQL Statements</a></p>
<p><a href="https://openhome.cc/Gossip/Qt4Gossip/QSqlQuery.html" target="_blank" rel="noopener">QSqlQuery - OpenHome.cc</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QSql</tag>
        <tag>QSqlQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt QSql Transactions</title>
    <url>/2019/12/25/Qt-QSql-Transactions/</url>
    <content><![CDATA[<h1 id="Qt-QSql-Transactions"><a href="#Qt-QSql-Transactions" class="headerlink" title="Qt QSql Transactions"></a>Qt QSql Transactions</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如我們要將兩個有關聯的 A Table 與 B Table 資料進行操作，如果針對各別單獨操作，可能 A 表格刪除成功， B 表格內的資料卻刪除失敗的時候，那麼這兩個表格中的資料就會出現問題，這時候我們就要透過 Transactions 的方式避免表格資料不同步的問題發生</p>
<h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p>交易功能 Transactions<br>首先喊出 Transactions 像是買賣雙方說要來交易<br>接著如果買賣雙方發現有異狀則喊 rollback 回復交易並且結束交易<br>若是雙方驗證後都正確皆大歡喜則 commit 確認交易提交並且結束交易</p>
<p>所以運作模式如下<br>先檢查有沒有支援 transaction 有的話建立 transactions ，並對資料庫多項操作</p>
<p>如果資料內容操作皆如預期，那麼可以透過 commit 方式提交結果，結束 transactions<br><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="attribute">QSqlDatabase</span>::database().commit();</span><br></pre></td></tr></table></figure></p>
<p>如果資料內容操作不如預期，那麼可以透過 rollback 方式退到操作 transactions 之前的資料庫資料，結束 transactions</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="attribute">QSqlDatabase</span>::database().rollback();</span><br></pre></td></tr></table></figure>
<p>整體流程:<br><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得目前資料庫連結的 QSqlDatabase 實例</span></span><br><span class="line">QSqlDriver *driver = <span class="attribute">QSqlDatabase</span>::database().driver();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 hasFeature () 測試是否支援交易，如果支援交易，則使用 transaction () 開啟交易</span></span><br><span class="line"><span class="keyword">if</span> (driver-&gt;hasFeature(<span class="attribute">QSqlDriver</span>::Transactions)) &#123;</span><br><span class="line">    <span class="comment">//在創建 query 之前，先建立 transactions </span></span><br><span class="line">    <span class="attribute">QSqlDatabase</span>::database().transaction();</span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//執行多個 Sql 語法</span></span><br><span class="line">    query.exec(<span class="string">"UPDATE ....."</span>);</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( query.exec() ) <span class="comment">//使用 commit () 提交執行</span></span><br><span class="line">        <span class="attribute">QSqlDatabase</span>::database().commit();</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//使用 rollback () 方法撤消</span></span><br><span class="line">        <span class="attribute">QSqlDatabase</span>::database().rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>注意: 必須在創建 query 之前，先建立 transactions </li>
</ul>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="attribute">QSqlDatabase</span>::database().transaction();</span><br><span class="line">QSqlQuery query( db );</span><br></pre></td></tr></table></figure>
<h2 id="Transactions-實作"><a href="#Transactions-實作" class="headerlink" title="Transactions 實作"></a>Transactions 實作</h2><p>A 表格的memberSN碼 為外鍵連結 B表格的SN碼</p>
<p>假設今天資料需求是當 B表格某筆資料被刪除時那麼關聯到的 A表格內容也要刪除掉，下列記錄為如何確保資料在兩個表格皆正確刪除</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建立 transaction ( 必須在創建 query 之前，先建立 transactions )</span></span><br><span class="line"><span class="attribute">QSqlDatabase</span>::database().transaction(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//建立 query</span></span><br><span class="line">QSqlQuery query( db );</span><br><span class="line"></span><br><span class="line"><span class="comment">//QSqlQuery 執行 SQL statements</span></span><br><span class="line"><span class="comment">//透過 named binding 對 A Table 資料庫操作</span></span><br><span class="line">query.prepare( <span class="string">"Delete from A WHERE MemberSN = :SN"</span> );</span><br><span class="line">query.bindValue( <span class="string">":SN"</span>, memberItem-&gt;sn() );</span><br><span class="line"></span><br><span class="line"><span class="comment">//檢測 sql 操作是否執行成功</span></span><br><span class="line"><span class="keyword">if</span> ( !query.exec() )</span><br><span class="line">&#123;</span><br><span class="line">    qDebug( <span class="string">"DeleteA() Cannot get member"</span> );</span><br><span class="line">    <span class="comment">//失敗回退到 transaction 先前狀態，並結束 transaction</span></span><br><span class="line">    <span class="attribute">QSqlDatabase</span>::database().rollback();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//QSqlQuery 執行 SQL statements</span></span><br><span class="line">    <span class="comment">//透過 named binding 對 B Table 資料庫操作</span></span><br><span class="line">    query.prepare( <span class="string">"Delete from B where SN=:SN"</span> );</span><br><span class="line">    query.bindValue( <span class="number">0</span>, memberItem-&gt;sn() );</span><br><span class="line">    <span class="keyword">if</span> ( !query.exec() )</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug( <span class="string">"DeleteB() Cannot get Member"</span> );</span><br><span class="line">        <span class="attribute">QSqlDatabase</span>::database().rollback();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">QSqlDatabase</span>::database().commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QSql</tag>
        <tag>Transactions</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Context Menu 動態菜單</title>
    <url>/2019/12/20/Qt-Context-Menu-%E5%8B%95%E6%85%8B%E8%8F%9C%E5%96%AE/</url>
    <content><![CDATA[<h1 id="Qt-Context-Menu-動態菜單"><a href="#Qt-Context-Menu-動態菜單" class="headerlink" title="Qt Context Menu 動態菜單"></a>Qt Context Menu 動態菜單</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這一篇將記錄如何製作一個 Dynamic 的右鍵菜單，在不同頁面中，依照不同需求右鍵菜單的內容有所變化</p>
<h2 id="Context-Menu-作法"><a href="#Context-Menu-作法" class="headerlink" title="Context Menu 作法"></a>Context Menu 作法</h2><p>菜單主要會分三個部分</p>
<ul>
<li>文字顯示</li>
<li>圖示顯示</li>
<li>觸發事件</li>
</ul>
<p>我們主要可以透過 Instantiator 動態產生 model 中的內容，另外為了實作 Dynamic 所以 model 要開放給使用層填寫，在這邊是以 menuDetails 作記錄，使用層傳入 JSON 格式的 model 內容，ContextMenu 以 modelData 操作其內容，</p>
<h3 id="文字顯示"><a href="#文字顯示" class="headerlink" title="文字顯示"></a>文字顯示</h3><p>文字顯示將傳入的 JSON text 解析出來<br>modelData.text</p>
<h3 id="圖示顯示"><a href="#圖示顯示" class="headerlink" title="圖示顯示"></a>圖示顯示</h3><p>這跟文字的提取類似<br>modelData.icon</p>
<h3 id="觸發事件"><a href="#觸發事件" class="headerlink" title="觸發事件"></a>觸發事件</h3><p>原本我是將 function 同樣以 JSON 方式傳入但好像哪裡出了問題，所以改以信號方式解決<br>我們可以透過傳遞信號的方式將被選擇到的項目名稱傳出，依項目做指定的動作</p>
<p>signal menuItemSelected(var item)<br>onTriggered: menuItemSelected(modelData.text)</p>
<h2 id="Context-Menu-實作"><a href="#Context-Menu-實作" class="headerlink" title="Context Menu 實作"></a>Context Menu 實作</h2><h3 id="ContextMenu-qml"><a href="#ContextMenu-qml" class="headerlink" title="ContextMenu.qml"></a>ContextMenu.qml</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.12</span></span><br><span class="line"></span><br><span class="line">Menu &#123;</span><br><span class="line">    id: contextMenu</span><br><span class="line">    property <span class="keyword">var</span> menuDetails <span class="comment">// need to contain &#123; "text":"text", "icon":"../image/icon/..", fn:function() &#123; dosomething &#125; &#125;</span></span><br><span class="line">    signal menuItemSelected(<span class="keyword">var</span> item)</span><br><span class="line"></span><br><span class="line">    Instantiator &#123;</span><br><span class="line">        id: inst</span><br><span class="line">        model: menuDetails</span><br><span class="line">        MenuItem &#123;</span><br><span class="line">            text: modelData.text</span><br><span class="line">            <span class="comment">//icon: modelData.icon</span></span><br><span class="line">            onTriggered: menuItemSelected(modelData.text)</span><br><span class="line">        &#125;</span><br><span class="line">        onObjectAdded: contextMenu.insertItem(index, object)</span><br><span class="line">        onObjectRemoved: contextMenu.removeItem(object)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MenuSeparator &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">    MenuItem &#123;</span><br><span class="line">        text: <span class="string">"About"</span></span><br><span class="line">        icon.source: <span class="string">"qrc:/images/maximized.svg"</span></span><br><span class="line">        onTriggered: <span class="built_in">console</span>.log(<span class="string">"About Clicked"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ContextMenu &#123;</span><br><span class="line">    id: contextMenu</span><br><span class="line">    menuDetails: [</span><br><span class="line">        &#123;<span class="string">"text"</span>:<span class="string">"Select"</span>,<span class="string">"icon"</span>:<span class="string">"qrc:/images/a.jpg"</span>,<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"Select is clicked"</span>)&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"text"</span>:<span class="string">"Copy"</span>  ,<span class="string">"icon"</span>:<span class="string">"qrc:/images/b.jpg"</span>,<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"Copy is clicked"</span>)&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"text"</span>:<span class="string">"Paste"</span> ,<span class="string">"icon"</span>:<span class="string">"qrc:/images/c.jpg"</span>,<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"Paste is clicked"</span>)&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">    onMenuItemSelected: &#123;</span><br><span class="line">        <span class="keyword">if</span>(item === <span class="string">"Select"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Select is clicked"</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item === <span class="string">"Copy"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Copy is clicked"</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item === <span class="string">"Paste"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Paste is clicked"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>ContextMenu</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt QQuickImageProvider 好用的圖片提供者</title>
    <url>/2019/12/12/Qt-QQuickImageProvider-%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9C%96%E7%89%87%E6%8F%90%E4%BE%9B%E8%80%85/</url>
    <content><![CDATA[<h1 id="Qt-QQuickImageProvider-好用的圖片提供者"><a href="#Qt-QQuickImageProvider-好用的圖片提供者" class="headerlink" title="Qt QQuickImageProvider 好用的圖片提供者"></a>Qt QQuickImageProvider 好用的圖片提供者</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在編寫介面程式常需要使用到圖片，不管是用來增添質感的還是做影像處理輸出顯示的圖片，Qt 提供了非常好用的 class ，<a href="https://doc.qt.io/qt-5/qquickimageprovider.html" target="_blank" rel="noopener">QQuickImageProvider</a> 今天來記錄一下如何在 qml 中使用 QQuickImageProvider 類別並取得調整完亮度的圖片</p>
<h2 id="QQuickImageProvider"><a href="#QQuickImageProvider" class="headerlink" title="QQuickImageProvider"></a>QQuickImageProvider</h2><p><a href="https://doc.qt.io/qt-5/qquickimageprovider.html" target="_blank" rel="noopener">QQuickImageProvider</a> 將圖片在 C++ 中處理與操作(調整圖片亮度、對比、紅色抽離…)，完成後回傳圖片提供給 qml 顯示，在 main 註冊後便可以在全專案中使用，不用在需要的地方導入 .h 或是 import 十分方便</p>
<h2 id="QQuickImageProvider-實作"><a href="#QQuickImageProvider-實作" class="headerlink" title="QQuickImageProvider 實作"></a>QQuickImageProvider 實作</h2><h3 id="ImageProvider-h"><a href="#ImageProvider-h" class="headerlink" title="ImageProvider.h"></a>ImageProvider.h</h3><p>主要做的事情:</p>
<p>繼承 QQuickImageProvider<br>覆寫 requestImage ( 當 QQuickImageProvider 被呼叫時，會從這個函式進入 )<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> IMAGEPROVIDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGEPROVIDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QImage&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickImageProvider&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//This class is responsible for process image and supply who in need</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageProvider</span> :</span> <span class="keyword">public</span> QObject, <span class="keyword">public</span> QQuickImageProvider</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ImageProvider</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//lock requestImage</span></span><br><span class="line">    QMutex mutex;</span><br><span class="line"></span><br><span class="line">    <span class="function">QImage <span class="title">requestImage</span><span class="params">( <span class="keyword">const</span> QString &amp;id, QSize *size, <span class="keyword">const</span> QSize &amp;requestedSize )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Brightness</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Brightness</span><span class="params">( QImage *img, <span class="keyword">int</span> level )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// image parameters</span></span><br><span class="line">    <span class="keyword">int</span> brightnessLevel;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// IMAGEPROVIDER_H</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="ImageProvider-cpp"><a href="#ImageProvider-cpp" class="headerlink" title="ImageProvider.cpp"></a>ImageProvider.cpp</h3><p>當 qml 要圖片的時候， 會從 requestImage 函式進入，可以將傳遞的 id 訊息剖析，得知他要一張怎樣的照片，例如:要亮度加兩階的 brightness 圖片回傳</p>
<p>在 qml 中傳<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">img.source = <span class="string">"image://TBImageProvider/"</span> + <span class="string">"d:/images/test.jpg?brightness = 2?"</span></span><br></pre></td></tr></table></figure></p>
<p>從 requestImage 參數內的 id 將會收到下列訊息</p>
<pre><code>&quot;d:/images/test.jpg?brightness = 2?&quot;
</code></pre><p>接著我們可以針對 id 剖析<br>剖析出圖片路徑: “d:/images/test.jpg”<br>與調整的亮度值: 2<br>呼叫函式對圖片操作並回傳圖片</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"imageprovider.h"</span></span></span><br><span class="line"></span><br><span class="line">ImageProvider::ImageProvider()</span><br><span class="line">    : QQuickImageProvider( QQuickImageProvider::Image )</span><br><span class="line">&#123;</span><br><span class="line">    brightnessLevel = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QImage ImageProvider::requestImage( <span class="keyword">const</span> QString &amp;id, QSize *size, <span class="keyword">const</span> QSize &amp;requestedSize )</span><br><span class="line">&#123;</span><br><span class="line">    Q_UNUSED( requestedSize )</span><br><span class="line">    qDebug() &lt;&lt; id;</span><br><span class="line">    mutex.lock();</span><br><span class="line"></span><br><span class="line">    QStringList part = id.split( <span class="string">'?'</span> );</span><br><span class="line">    QString imgPath = id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( part.size() &gt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        imgPath = part[ <span class="number">0</span> ];</span><br><span class="line">        part = part[ <span class="number">1</span> ].split( <span class="string">'&amp;'</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; part.size(); idx++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( part[ idx ].startsWith( <span class="string">"brightness = "</span> ) )</span><br><span class="line">                brightnessLevel = part[ idx ].replace( <span class="string">"brightness = "</span>, <span class="string">""</span> ).toInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面兩句主要是因為從 db load 路徑時可能會產生的字符</span></span><br><span class="line">    imgPath = imgPath.replace( <span class="string">"%5C"</span>, <span class="string">"\\"</span> );</span><br><span class="line">    imgPath = imgPath.replace( <span class="string">"%5c"</span>, <span class="string">"\\"</span> );</span><br><span class="line"></span><br><span class="line">    QImage img = QImage( imgPath ).convertToFormat( QImage::Format_RGB888 );</span><br><span class="line"></span><br><span class="line">    Brightness( &amp;img, brightnessLevel );</span><br><span class="line"></span><br><span class="line">    mutex.unlock();</span><br><span class="line">    <span class="keyword">return</span> img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ImageProvider::Brightness( QImage *img, <span class="keyword">int</span> level )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf = img-&gt;bits();</span><br><span class="line">    <span class="keyword">int</span> byteCount = img-&gt;byteCount();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for <span class="comment">//平行處理加速</span></span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; byteCount; idx++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = buf[ idx ] + level * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v &gt; <span class="number">255</span> )</span><br><span class="line">            buf[ idx ] = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; <span class="number">0</span> )</span><br><span class="line">            buf[ idx ] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            buf[ idx ] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="註冊-QQuickImageProvider"><a href="#註冊-QQuickImageProvider" class="headerlink" title="註冊 QQuickImageProvider"></a>註冊 QQuickImageProvider</h3><p>主要只有 addImageProvider 這句指令</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"viewmodels/controls/imageprovider.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> quick;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line">    </span><br><span class="line">    MainWindow mainWindow;</span><br><span class="line">    <span class="comment">// 註冊的名稱是之後每次要用 imageProvider 都要呼叫的，這邊我取名為 TBImageProvider, 後者為覆寫 QQuickImageProvider 的類別名稱</span></span><br><span class="line">    mainWindow.addImageProvider( QLatin1String( <span class="string">"TBImageProvider"</span> ), <span class="keyword">new</span> ImageProvider );</span><br><span class="line">    mainWindow.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( mainWindow.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = app.exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指定圖像提供者應加載圖像"><a href="#指定圖像提供者應加載圖像" class="headerlink" title="指定圖像提供者應加載圖像"></a>指定圖像提供者應加載圖像</h3><p>要指定圖像提供者應加載圖像，請對圖像的 URL 源使用 “image：” 方案，後跟圖像提供者的標識符和請求的圖像。 例如：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Image &#123; <span class="attr">source</span>: <span class="string">"image://TBImageProvider/image.png"</span> &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="ImageViewer-qml"><a href="#ImageViewer-qml" class="headerlink" title="ImageViewer.qml"></a>ImageViewer.qml</h3><p>例如: 在 qml 中按下亮度增加按鈕後，會呼叫 image provider 將圖片處理成指定亮度並在 img 元件中顯示該圖<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Image &#123;</span><br><span class="line">    id: img</span><br><span class="line">    width: parent.width</span><br><span class="line">    height: parent.height</span><br><span class="line">    transformOrigin: Item.TopLeft</span><br><span class="line">    fillMode: Image.PreserveAspectFit <span class="comment">//等比例裁剪</span></span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">Button &#123;</span><br><span class="line">    id: btnContrastPlus</span><br><span class="line">    width: <span class="number">100</span></span><br><span class="line">    height: <span class="number">50</span></span><br><span class="line">    text: <span class="string">"+"</span></span><br><span class="line">    onClicked: &#123;</span><br><span class="line">        img.source = <span class="string">"image://TBImageProvider/"</span> + pic.path + <span class="string">"test.jpg"</span> + <span class="string">"?brightness = "</span> + <span class="built_in">parseInt</span>( imageViewer.getBrightness())+ <span class="string">"?"</span></span><br><span class="line">        <span class="comment">//img.source = "image://TBImageProvider/" + "d:/images/test.jpg?brightness = 2?"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QQuickImageProvider</tag>
      </tags>
  </entry>
  <entry>
    <title>QFileInfo 檢測資料夾存在與資料數量</title>
    <url>/2019/12/03/QFileInfo-%E6%AA%A2%E6%B8%AC%E8%B3%87%E6%96%99%E5%A4%BE%E5%AD%98%E5%9C%A8%E8%88%87%E8%B3%87%E6%96%99%E6%95%B8%E9%87%8F/</url>
    <content><![CDATA[<h1 id="QFileInfo-檢測資料夾存在與資料數量"><a href="#QFileInfo-檢測資料夾存在與資料數量" class="headerlink" title="QFileInfo 檢測資料夾存在與資料數量"></a>QFileInfo 檢測資料夾存在與資料數量</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了程式不會崩潰，那麼在做一些計算之前，我們需要先取得指定資料夾是否存在或是特定檔案類型個數符不符合<br>這一篇我以取得 jpg 檔為例<br>將 Dialog 傳送回來的路徑剖析檔案個數</p>
<h2 id="IsFileCorrect"><a href="#IsFileCorrect" class="headerlink" title="IsFileCorrect"></a>IsFileCorrect</h2><p>我們在進行運算之前可以先執行這個判斷函式，以免程式崩潰</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> TBTester::IsFileCorrect( QString path ) &#123;</span><br><span class="line">    QDir* dir = <span class="keyword">new</span> QDir( path );</span><br><span class="line">    <span class="keyword">if</span> ( !dir-&gt;exists() )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 若資料夾不存在, 回傳 False</span></span><br><span class="line">        </span><br><span class="line">    QStringList filter;</span><br><span class="line">    filter &lt;&lt; <span class="string">"*.jpg"</span>;  <span class="comment">// 所有 jpg 格式檔案</span></span><br><span class="line">    <span class="comment">//filter &lt;&lt; "[0-9]*.jpg"; //所有數字檔名的 jpg 格式檔案</span></span><br><span class="line">    dir-&gt;setNameFilters( filter ); <span class="comment">// 設置過濾器</span></span><br><span class="line">    QList&lt;QFileInfo&gt;* fileInfo = <span class="keyword">new</span> QList&lt;QFileInfo&gt;( dir-&gt;entryInfoList( filter ) );</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; fileInfo-&gt;count()  <span class="comment">//取得過濾後的檔案數量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( fileInfo-&gt;count() &lt; <span class="number">128</span> ) <span class="comment">//如果該檔案類型不符合最低計算條件則回傳 False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QDir</tag>
        <tag>QFileInfo</tag>
      </tags>
  </entry>
  <entry>
    <title>QImage memory buffer 操作</title>
    <url>/2019/11/04/QImage-memory-buffer-%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="QImage-memory-buffer-操作"><a href="#QImage-memory-buffer-操作" class="headerlink" title="QImage memory buffer 操作"></a>QImage memory buffer 操作</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>QImage 讀取圖片後，將其轉換成 memory buffer 進行顏色操作與計算每個 bit 的數值，這一篇我會記錄一些比較常用到的 memory buffer 處理，例如: QImage 讀取圖片後轉成 memory buffer，單通道轉三通道，與 resize 成不同大小的圖</p>
<h2 id="讀取單張圖片至-memory-buffer"><a href="#讀取單張圖片至-memory-buffer" class="headerlink" title="讀取單張圖片至 memory buffer"></a>讀取單張圖片至 memory buffer</h2><p>運用 QImage 的函式讀取 128 張 寬512 <em> 高128 的灰階(單通道)圖片，並存到 memory buffer ( unsigned char </em> ) 中<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage img = QImage( <span class="number">512</span>, <span class="number">128</span>, QImage::Format_Grayscale8 );</span><br><span class="line"><span class="comment">//將 imgBuf 指向 img 的記憶體起始位置, 這樣對 imgBuf 操作即是對 img 操作</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* imgBuf = img.bits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//高</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;   <span class="comment">//寬</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">512</span>; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//將整張圖變成白色</span></span><br><span class="line">        imgBuf[ i * <span class="number">512</span> + j ] = <span class="number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存取圖片驗證是不是變成純白色的圖</span></span><br><span class="line">img.save(<span class="string">"image.jpg"</span>,<span class="string">"JPG"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="讀取多張圖片至-memory-buffer"><a href="#讀取多張圖片至-memory-buffer" class="headerlink" title="讀取多張圖片至 memory buffer"></a>讀取多張圖片至 memory buffer</h2><p>運用 QImage 的函式讀取 128 張 寬512 <em> 高512 的灰階(單通道)圖片，並存到 memory buffer ( unsigned char </em> ) </p>
<p>QFileDialog 用法可以參考我的另一篇文章 <a href="https://teddybearfp.github.io/2019/08/21/Qt-FileDialog/#more">QFileDialog</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//宣告一個 512 * 512 單通道的 QImage img </span></span><br><span class="line">QImage img = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_Grayscale8 );</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* src = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">512</span> * <span class="number">512</span> * <span class="number">128</span> ];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* ptr = src;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//path 為絕對路徑或是 QFileDialog 讀取到的值</span></span><br><span class="line">    img.load( path + QString::number( i ) + <span class="string">".jpg"</span>, <span class="string">"JPG"</span> );</span><br><span class="line">    <span class="comment">//一張一張圖片拷貝到記憶體位置中</span></span><br><span class="line">    <span class="built_in">memcpy</span>( ptr, img.bits(), img.sizeInBytes() );</span><br><span class="line">    <span class="comment">//位移一張灰階圖的大小,若三通道圖則需要位移 512 * 512 * 3</span></span><br><span class="line">    ptr += <span class="number">512</span> * <span class="number">512</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用完後記得 delete</span></span><br><span class="line"><span class="keyword">if</span> ( ptr != <span class="literal">nullptr</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//ptr指向空指標即可</span></span><br><span class="line">    ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( src != <span class="literal">nullptr</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] src;</span><br><span class="line">    src = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="操作灰階-單通道-圖片-memory-buffer"><a href="#操作灰階-單通道-圖片-memory-buffer" class="headerlink" title="操作灰階(單通道)圖片 memory buffer"></a>操作灰階(單通道)圖片 memory buffer</h2><p>灰階(單通道) 寬512 高128 的圖片操作, 這邊操作除了整張圖變白外, 順便記錄正規化( Normalization ) value 是將原本 memory buffer 中數值區間對應到另一個數值區間中, 例如: 原本 memory buffer 中值是 10 ~ 200 透過正規化讓它變成 0 ~ 255 區間, 這可以看我的另一篇文章 <a href="https://teddybearfp.github.io/2019/01/08/normalize/">標準化(Normalization)</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">512</span>; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//整張圖變白</span></span><br><span class="line">        <span class="comment">//src[ i * 512 + j ] = value;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Normalization value</span></span><br><span class="line">        <span class="keyword">double</span> value = targetMin + ( (<span class="keyword">float</span>) ( ( src[ i * <span class="number">512</span> + j ] - originMin ) / (<span class="keyword">float</span>) diff ) * ( targetMax - targetMin ) );</span><br><span class="line">        src[ i * <span class="number">512</span> + j ] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="單通道轉三通道"><a href="#單通道轉三通道" class="headerlink" title="單通道轉三通道"></a>單通道轉三通道</h2><p>讀取位元深度為 8 的灰階圖( 單通道 ), 將其轉換成位元深度 24 的彩色圖( 三通道 ), 這邊要注意的是單通道轉三通道, stride 會變 3 倍</p>
<p>單通道: stride = width<br>三通道: stride = width * 3</p>
<p>單通道: dataLength = width <em> height<br>三通道: dataLength = width </em> 3 * height</p>
<p>這邊舉例:<br>單通道 memory buffer<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *src = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ width * height ]</span><br></pre></td></tr></table></figure></p>
<p>三通道 memory buffer<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一種</span></span><br><span class="line">QImage colorImg = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888 );</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *dst = colorImg.bits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二種</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *dst = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ width * <span class="number">3</span> * height ]</span><br></pre></td></tr></table></figure></p>
<p>進行轉換</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = src[ i * width + j];</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] =src[ i * width + j];</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] =src[ i * width + j]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>雖然完成圖片長一樣但是已經變成三通道以 RGB 存放的圖片了,可以進行後續操作</p>
<h2 id="單通道轉三通道-Mapping-to-Jet"><a href="#單通道轉三通道-Mapping-to-Jet" class="headerlink" title="單通道轉三通道 ( Mapping to Jet )"></a>單通道轉三通道 ( Mapping to Jet )</h2><p>這邊所謂的 Jet 是 MatlabJet 一種由 藍 -&gt; 綠 -&gt; 紅的色彩映射, 詳細做法可以看我的另一篇文章<a href="https://teddybearfp.github.io/2019/10/14/Color-mapping-Matlab-Jet/">Color mapping (Matlab Jet)</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        v = src[ i * width + j ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> dv;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//vmin, vmax 表示 Jet 上下限,可以用參數傳入例如: vmin:0 ,vmax;255</span></span><br><span class="line">        <span class="keyword">if</span> ( v &lt; vmin )</span><br><span class="line">            v = vmin;</span><br><span class="line">        <span class="keyword">if</span> ( v &gt; vmax )</span><br><span class="line">            v = vmax;</span><br><span class="line">        dv = vmax - vmin;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.125</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = ( <span class="number">0.5</span> + ( v - vmin ) * ( ( <span class="number">1</span> - <span class="number">0.5</span> ) / ( <span class="number">0.125</span> * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.375</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = ( ( v - ( dv * <span class="number">0.125</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.375</span> - <span class="number">0.125</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.625</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = ( ( v - ( dv * <span class="number">0.375</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.625</span> - <span class="number">0.375</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = ( <span class="number">1</span> - ( v - ( dv * <span class="number">0.375</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.625</span> - <span class="number">0.375</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.875</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = ( <span class="number">1</span> - ( v - ( dv * <span class="number">0.625</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.875</span> - <span class="number">0.625</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = ( <span class="number">1</span> - ( v - dv * <span class="number">0.875</span> - vmin ) * ( <span class="number">0.5</span> / ( ( <span class="number">1</span> - <span class="number">0.875</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QImage</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 打造我的第二隻專屬 LineBot</title>
    <url>/2019/10/22/Python-%E6%89%93%E9%80%A0%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E9%9A%BB-LineBot/</url>
    <content><![CDATA[<h1 id="Python-打造我的第二隻專屬-LineBot"><a href="#Python-打造我的第二隻專屬-LineBot" class="headerlink" title="Python 打造我的第二隻專屬 LineBot"></a>Python 打造我的第二隻專屬 LineBot</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的第一個 <a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">LineBot 泰迪熊</a> 已經運作一年多了，最近 M 學長想要有一隻可以在公司揪團購的時候能用的機器人，這題材我覺得蠻有趣的，想說順便整理先前的做法並作一些改善，同時記錄製做過程，所以決定再創造一隻機器人</p>
<h2 id="LineBot"><a href="#LineBot" class="headerlink" title="LineBot"></a>LineBot</h2><p>LineBot 因不需安裝程式，可直接在 Line 上進行操作，若是僅提供些訊息的話是比 app 來的更方便快速的，給親朋好友使用也只需分享好友資料並可開始使用，所以也是個不錯的開發方式</p>
<h2 id="我的第一隻-LineBot-泰迪熊"><a href="#我的第一隻-LineBot-泰迪熊" class="headerlink" title="我的第一隻 LineBot 泰迪熊"></a>我的第一隻 LineBot 泰迪熊</h2><p>在我先前的文章有記錄我的第一個 <a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">LineBot 泰迪熊</a> </p>
<p>主要功能有以下幾個</p>
<ol>
<li>快速輸入面板</li>
<li>取得天氣資訊</li>
<li>取得將各大版 PTT 的 Top 15 文章，直接幫你篩選熱門文章節省時間</li>
<li>取得即時新聞內容</li>
<li>取得現正熱映電影與電影評分</li>
<li>推薦附近好吃的餐廳與小吃並得到評分與距離</li>
<li>聊天功能</li>
<li>圖戰功能</li>
<li>關鍵字搜尋功能</li>
</ol>
<h2 id="第二隻-LineBot-泰迪熊-Super"><a href="#第二隻-LineBot-泰迪熊-Super" class="headerlink" title="第二隻 LineBot 泰迪熊 Super"></a>第二隻 LineBot 泰迪熊 Super</h2><p>目前第二隻 LineBot 的定位，會是功能較簡單，利於之後重新定位或是擴充的角色，命名方式是以七龍珠的內的命名法則為參考</p>
<p>主要功能暫定有以下幾個</p>
<ol>
<li>呈現菜單</li>
<li>紀錄大家要點什麼餐點</li>
<li>呈現大家要點的餐點內容</li>
</ol>
<h2 id="創建-LineBot"><a href="#創建-LineBot" class="headerlink" title="創建 LineBot"></a>創建 LineBot</h2><h3 id="申請-Line-帳號"><a href="#申請-Line-帳號" class="headerlink" title="申請 Line 帳號"></a>申請 Line 帳號</h3><p>第一步是先申請 Line 帳號，或用自己的 Line 帳號，才可以創建 LineBot </p>
<h3 id="LINE-Develop"><a href="#LINE-Develop" class="headerlink" title="LINE Develop"></a>LINE Develop</h3><h4 id="創建頻道"><a href="#創建頻道" class="headerlink" title="創建頻道"></a>創建頻道</h4><p><a href="https://developers.line.biz/en/" target="_blank" rel="noopener">LINE Develop</a> 中登入 Line 帳號後會看到此頁面<br>選擇 Provider List 看到現有頻道</p>
<p><img src="https://i.imgur.com/lD7kLQD.png" alt></p>
<p>選擇 Create new Channel ，如果要製做 LineBot 請選 Message API</p>
<p><img src="https://i.imgur.com/C5k8vaO.png" alt></p>
<p>接著填寫 LineBot 基本資料，信箱、概述等等，填寫完畢後送出並同意 Line 相關規章</p>
<p>完成後會看到 Provider List 新增了剛剛創建的 LineBot</p>
<p><img src="https://i.imgur.com/9o73ACv.png" alt></p>
<h4 id="允許-webhook-傳訊"><a href="#允許-webhook-傳訊" class="headerlink" title="允許 webhook 傳訊"></a>允許 webhook 傳訊</h4><p>點選剛剛創建的 LineBot 會看到該機器人的設置內容，將 webhook enabled 並儲存</p>
<p><img src="https://i.imgur.com/NHhhuMr.png" alt></p>
<h4 id="取得-Channel-secret、Channel-access-token"><a href="#取得-Channel-secret、Channel-access-token" class="headerlink" title="取得 Channel secret、Channel access token"></a>取得 Channel secret、Channel access token</h4><p>這邊最重要的事情就是取得 Channel secret 跟 Channel access token</p>
<p>Channel secret</p>
<p><img src="https://i.imgur.com/nNUUEl0.png" alt></p>
<p>若 Channel access token 是空的，則按右邊 Issue 產生</p>
<p><img src="https://i.imgur.com/Ot4Qd67.png" alt></p>
<p>到時候將這兩個值貼在程式碼中</p>
<pre><code>Channel_Access_Token = YOUR_CHANNEL_SECRET
Channel_Secret = YOUR_CHANNEL_SECRET
</code></pre><h3 id="LINE-Official-Account-Manager"><a href="#LINE-Official-Account-Manager" class="headerlink" title="LINE Official Account Manager"></a>LINE Official Account Manager</h3><p>接著我們到 <a href="https://manager.line.biz" target="_blank" rel="noopener">LINE Official Account Manager</a> 對泰迪熊 Super 進行更詳細的設定</p>
<h4 id="帳號設定頁面"><a href="#帳號設定頁面" class="headerlink" title="帳號設定頁面"></a>帳號設定頁面</h4><p><img src="https://i.imgur.com/Flx16BJ.png" alt></p>
<p>勾選 接受邀請加入群組或多人聊天室 讓泰迪熊 Super 能變群組機器人<br><img src="https://i.imgur.com/hY8gZn4.png" alt></p>
<h4 id="回應設定頁面"><a href="#回應設定頁面" class="headerlink" title="回應設定頁面"></a>回應設定頁面</h4><p>可以設置一些基本問後語句，可以在這邊將罐頭訊息關閉</p>
<p><img src="https://i.imgur.com/J0hw0Ez.png" alt></p>
<h2 id="部屬-LineBot"><a href="#部屬-LineBot" class="headerlink" title="部屬 LineBot"></a>部屬 LineBot</h2><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><p>設定完一些基本資料與行為後，要將 LineBot 部屬到 Heroku 上運行， 首先要先申辦 Heroku 帳號</p>
<h4 id="heroku-cli"><a href="#heroku-cli" class="headerlink" title="heroku-cli"></a>heroku-cli</h4><p>有了帳號後下載 <a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noopener">heroku-cli</a></p>
<p>注意: Heroku CLI 需要 Git 環境需先安裝完成後再安裝 CLI<br>The Heroku CLI requires Git, the popular version control system. If you don’t already have Git installed, complete the following before installing the CLI:</p>
<p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener">Git installation</a><br><a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup" target="_blank" rel="noopener">First-time Git setup</a></p>
<h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><p>Git 與 Heroku CLI 安裝完成後，開啟命令提示字元 command line 切換到 linebot 的資料夾並輸入以下指令</p>
<p>1.登入 Heroku</p>
<pre><code>heroku login
</code></pre><p>輸入 heroku 帳號密碼登入成功會寫 Logged in as “你的信箱” 如下圖</p>
<p><img src="https://i.imgur.com/PlTUdWl.png" alt></p>
<p>2.創建.git資料夾(初始化 git)<br>僅在第一次使用時要輸入</p>
<pre><code>git config --global user.name &quot;你的名字&quot;
git config --global user.email 你的信箱

git init
</code></pre><p><img src="https://i.imgur.com/uylQ6lp.png" alt></p>
<p>可以到該層看是否創建 .git 資料夾</p>
<p>3.與 Heroku 連線</p>
<pre><code>heroku git:remote -a HEROKU_APP名稱
</code></pre><p><img src="https://i.imgur.com/C66dMoq.png" alt></p>
<p>4.偵測變更 與 commit 與 push<br>注意1: git add .中的這個.需要與 add 空一格<br>注意2: 建置時 buildpackages 可以選擇語言 例如: 選擇Python<br><img src="https://i.imgur.com/FL4Wjxc.png" alt></p>
<pre><code>git add .
git commit -m &quot;此次變更說明&quot;
git push heroku master
</code></pre><p>成功部屬後，會在 Heroku app 的 overview 中看到 build successed</p>
<p><img src="https://i.imgur.com/KyzN5FP.png" alt></p>
<p>以上四步驟指令可以在 web app 裡的 deploy 看到</p>
<p><img src="https://i.imgur.com/bBQIxsE.png" alt></p>
<p>之後有任何變更要套用僅需第一步驟登入 heroku 與第三步驟連線 heroku 並且反覆執行第四步驟即可更新</p>
<h4 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h4><p>除了 cmd 指令方式還可以用 git gui 方式上傳程式碼，部屬到 Heroku 上面，我用的是 <a href="https://www.sourcetreeapp.com" target="_blank" rel="noopener">Sourcetree</a> 整體使用上算是容易上手且頁面簡潔，如果覺得用 cmd 部屬太困難那麼就用有使用者介面的 git gui 方式吧</p>
<h2 id="Webhook-URL"><a href="#Webhook-URL" class="headerlink" title="Webhook URL"></a>Webhook URL</h2><p>最後要把之前尚未填寫的 Webhook URL 給補上，這個值會是你的 Heroku 部屬完成後的網址加上/callback</p>
<p>例如: 我部屬完成 Heroku ，在 Heroku 主頁右上角 Open app 得到剛剛部屬完成的位置 <a href="https://superteddybearbot.herokuapp.com" target="_blank" rel="noopener">https://superteddybearbot.herokuapp.com</a><br>那麼我們的 Webhook URL 即是 <a href="https://superteddybearbot.herokuapp.com/callback" target="_blank" rel="noopener">https://superteddybearbot.herokuapp.com/callback</a></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.oxxostudio.tw/articles/201701/line-bot.html" target="_blank" rel="noopener">LINE BOT 實戰 (原理篇)</a><br><a href="https://github.com/twtrubiks/line-bot-tutorial" target="_blank" rel="noopener">twtrubiks/line-bot-tutorial - GitHub</a><br><a href="https://yaoandy107.github.io/line-bot-tutorial/" target="_blank" rel="noopener">LineBot+Python，輕鬆建立聊天機器人</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LineBot</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 求圓邊上的極座標位置</title>
    <url>/2019/10/19/%E6%B1%82%E5%9C%93%E7%9A%84%E6%A5%B5%E5%BA%A7%E6%A8%99%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Qt-求圓邊上的極座標位置"><a href="#Qt-求圓邊上的極座標位置" class="headerlink" title="Qt 求圓邊上的極座標位置"></a>Qt 求圓邊上的極座標位置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要將一個圓的邊分為幾個點，可以用極座標的方式去取得每個點的 (X , Y) 值</p>
<h2 id="直角坐標轉極座標"><a href="#直角坐標轉極座標" class="headerlink" title="直角坐標轉極座標"></a>直角坐標轉極座標</h2><p>直角坐標點 ( x , y ) 轉為極座標點為 ( r cos(θ), r sin(θ) )</p>
<p>x = r cos(θ), y = r sin(θ) 其中 r 為圓的半徑, θ 是角度</p>
<p>例如: 在原點為 ( 0 , 0 ), 半徑為 100 的圓型中取得角度為 45°<br>那麼我們會得到該點座標為 ( 100 <em> cos( 45° ), 100 </em> sin( 45° ) ) = ( 100 <em> 0.7071 , 100  </em> 0.7071 ) = ( 71 , 71 )</p>
<p><img src="https://i.imgur.com/X8hllOn.png" alt></p>
<h2 id="將圓上的邊分為幾個點實作"><a href="#將圓上的邊分為幾個點實作" class="headerlink" title="將圓上的邊分為幾個點實作"></a>將圓上的邊分為幾個點實作</h2><p>來實作直角坐標轉極座標算法，將圓上的邊分為特定點數 (例如:一百個點)<br>首先我們先用 Qt 畫一個 512 * 512 的圓，並在圓上找到 100 個座標點繞一圈，那麼要找一百個點的話，表示 θ 每次增加量為 360 / 100 = 3.6°</p>
<p>完成圖如下:</p>
<p><img src="https://i.imgur.com/BArDoUu.png" alt></p>
<p>我們這邊用 QPainter 來實現並將其製作成 qml item 以利後續延伸</p>
<h3 id="PolarCoordinates-h"><a href="#PolarCoordinates-h" class="headerlink" title="PolarCoordinates.h"></a>PolarCoordinates.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> POLARCOORDINATES_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POLARCOORDINATES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickPaintedItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolarCoordinates</span> :</span> <span class="keyword">public</span> QQuickPaintedItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( <span class="keyword">int</span> number READ number WRITE setNumber NOTIFY numberChanged )</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    PolarCoordinates();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">( QPainter *painter )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNumber</span><span class="params">( <span class="keyword">int</span> number )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_number;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawPolarCoordinates</span><span class="params">( QPainter *painter )</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">numberChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// POLARCOORDINATES_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="PolarCoordinates-cpp"><a href="#PolarCoordinates-cpp" class="headerlink" title="PolarCoordinates.cpp"></a>PolarCoordinates.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"polarcoordinates.h"</span></span></span><br><span class="line"></span><br><span class="line">PolarCoordinates::PolarCoordinates()</span><br><span class="line">&#123;</span><br><span class="line">    m_number = <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::paint( QPainter *painter )</span><br><span class="line">&#123;</span><br><span class="line">    painter-&gt;setPen( QPen( Qt::black, <span class="number">1</span> ) );</span><br><span class="line">    <span class="function">QRectF <span class="title">rectangle1</span><span class="params">( <span class="number">0.0</span>, <span class="number">0.0</span>, width() - <span class="number">1</span>, height() - <span class="number">1</span> )</span></span>;</span><br><span class="line">    painter-&gt;drawEllipse( rectangle1 ); <span class="comment">//畫直徑為512的圓</span></span><br><span class="line"></span><br><span class="line">    drawPolarCoordinates( painter );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::drawPolarCoordinates( QPainter *painter )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> degree = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> radius = width() / <span class="number">2</span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">center</span><span class="params">( width() / <span class="number">2</span>, height() / <span class="number">2</span> )</span></span>; <span class="comment">//Center of mind</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_number; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        degree += <span class="number">360.0</span> / m_number;</span><br><span class="line">        painter-&gt;setPen( QPen( Qt::red, <span class="number">5</span> ) );</span><br><span class="line">        <span class="comment">// find the m_number Polar coordinates in the width, height circle.</span></span><br><span class="line">        painter-&gt;drawPoint( QPointF( radius * <span class="built_in">cos</span>( degree ) + center.x(), radius * <span class="built_in">sin</span>( degree ) + center.y() ) );</span><br><span class="line"></span><br><span class="line">        painter-&gt;setPen( QPen( Qt::green, <span class="number">5</span> ) );</span><br><span class="line">        <span class="comment">// find the m_number Polar coordinates in the width, height/ 4 circle.</span></span><br><span class="line">        painter-&gt;drawPoint( QPointF( ( radius / <span class="number">2</span> ) * <span class="built_in">cos</span>( degree ) + center.x(), ( ( radius / <span class="number">2</span> ) * <span class="built_in">sin</span>( degree ) + center.y() ) / <span class="number">4</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PolarCoordinates::number()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::setNumber( <span class="keyword">int</span> number )</span><br><span class="line">&#123;</span><br><span class="line">    m_number = number;</span><br><span class="line">    update();</span><br><span class="line">    <span class="function">emit <span class="title">numberChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.12</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">600</span></span><br><span class="line">    height: <span class="number">600</span></span><br><span class="line">    title: qsTr(<span class="string">"Polar Coordinates"</span>)</span><br><span class="line">    PolarCoordinates</span><br><span class="line">    &#123;</span><br><span class="line">        anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        anchors.verticalCenter: parent.verticalCenter</span><br><span class="line">        width: <span class="number">512</span></span><br><span class="line">        height: <span class="number">512</span></span><br><span class="line">        number: <span class="number">100</span> <span class="comment">//可以指定要分為幾個點</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成!<br><img src="https://i.imgur.com/O2Un1jf.png" alt></p>
<h2 id="補充-角度與弧度"><a href="#補充-角度與弧度" class="headerlink" title="補充 ( 角度與弧度 )"></a>補充 ( 角度與弧度 )</h2><p>在 C 標準函式庫中 sin 與 cos 三角函數相關的函式是使用弧度 ( radian ) 而非角度</p>
<pre><code>double sin(double x);
回傳值: 為 x 弧度(弳度)的 sine 值
參數: 需傳弧度，以弧度表示角度的值，一弧度等於 180 / PI 度。
sin ( radian ), cos ( radian )
</code></pre><p>一個完整的圓的弧度是 2 π ，所以 2 π * radian = 360°</p>
<p>π <em> radian = 180°, 1° = (π / 180) </em> radian , 1 radian = 180° / π</p>
<p>由此可知: </p>
<pre><code>radian = (π / 180) * degree
degree = (180 / π) * radian
</code></pre><p>例如: 求 30 度的 sin 值，則必須將 30 度轉為弧度 radian = 30 * ( 3.1415 / 180 )</p>
<pre><code>sin ( 30 * ( 3.1415 / 180 ) ) = 0.5
</code></pre>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>QPainter</tag>
        <tag>極座標</tag>
        <tag>QQuickPaintedItem</tag>
      </tags>
  </entry>
  <entry>
    <title>Color mapping ( Matlab Jet )</title>
    <url>/2019/10/14/Color-mapping-Matlab-Jet/</url>
    <content><![CDATA[<h1 id="Color-mapping-Matlab-Jet-in-Qt"><a href="#Color-mapping-Matlab-Jet-in-Qt" class="headerlink" title="Color mapping ( Matlab Jet ) in Qt"></a>Color mapping ( Matlab Jet ) in Qt</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天記錄最近編寫的小工具( ColorMappingJet )，將灰階重新分布為色彩空間( Matlab Jet )，顏色映射( Color mapping )是將一個圖像的顏色映射到另一個圖像的顏色的功能。顏色映射可以被稱為導致映射函數的算法或者變換圖像顏色的算法。</p>
<h2 id="Matlab-Jet"><a href="#Matlab-Jet" class="headerlink" title="Matlab Jet"></a>Matlab Jet</h2><p>這是種顏色映射的算法，是將灰階值放到 Jet 上進行顏色映射( Color mapping )，值由小到大從深藍到綠到深紅</p>
<p>如下圖:</p>
<p><img src="https://i.imgur.com/gUzSwAv.png" alt></p>
<p>下圖是截取自 <a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">Origins of Colormaps</a> 網站講解的 Jet 映射原理</p>
<p><img src="https://i.imgur.com/7Dzl98j.png" alt="圖1"></p>
<p>主要是在 1/8 , 3/8 , 5/8 , 7/8 這幾個位置進行顏色轉折</p>
<h2 id="Color-mapping-in-Qt"><a href="#Color-mapping-in-Qt" class="headerlink" title="Color mapping in Qt"></a>Color mapping in Qt</h2><p>我編寫的小工具 ( ColorMappingJet ) 是可以輸入任意上下限的灰階值再透過 Slider 調整當下數值，讓下方的方型進行顏色映射</p>
<p>上下限不一定要是0 ~ 255 或是 -1 ~ 1<br>可以是 0 ~ 300 或是 123 ~ 777</p>
<p>例如:<br>下限為 0</p>
<p><img src="https://i.imgur.com/rB75nGX.png" alt></p>
<p>上限為 300<br><img src="https://i.imgur.com/v87ITRr.png" alt></p>
<p>那麼我們要怎麼將灰階值轉換成三通道( RGB )值?</p>
<p>我的做法是將輸入的灰階值做顏色映射，將單通道的灰階值轉成三通道<br>由深藍色 -&gt; 藍色 -&gt;綠色 -&gt; 紅色 -&gt; 深紅色</p>
<pre><code>Slider 控制單通道灰階值 value

if 
value 在小於 0.125 時: 紅色通道值為 0 ， 綠色通道值為 0 ， 藍色通道值的增加，從 0.5 加到 1

else if 
value 在小於 0.375 時: 紅色通道值為 0 ， 綠色通道值的增加，從 0 加到 1 ， 藍色通道值維持 1

else if
value 在小於 0.625 時: 紅色通道值的增加，從 0 加到 1 ， 綠色通道值維持 1 ， 藍色通道值則從 1 減至 0

else if
value 在小於 0.875 時: 紅色通道維持 1 ， 綠色通道值則從 1 減至 0 ， 藍色通道值為 0

else
其他 value: 紅色通道值則從 1 減至 0.5 ， 綠色通道值為 0 ， 藍色通道值為 0
</code></pre><p>運算出來的數值存取至 Q_PROPERTY 的 QColor 中傳遞給 qml<br>透過以上方法就完成啦!</p>
<p><img src="https://i.imgur.com/FTi7JMC.png" alt></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">Origins of Colormaps</a></p>
<p><a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">圖1 來源</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Color mapping</tag>
      </tags>
  </entry>
  <entry>
    <title>Qml Loader 載入器應用</title>
    <url>/2019/10/02/Qml-Loader-%E8%BC%89%E5%85%A5%E5%99%A8%E6%87%89%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Qml-Loader-載入器應用"><a href="#Qml-Loader-載入器應用" class="headerlink" title="Qml Loader 載入器應用"></a>Qml Loader 載入器應用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天來記錄一下 qml 中經常使用到的 Loader 元件</p>
<h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>載入器是用來動態載入 qml 中的元件</p>
<p>載入頁面 - 可以用 source property 載入 qml 頁面 ( Qml file )<br>載入元件 - 或是用 sourceComponent property 元件 ( Component ) </p>
<p>透過 Loader 元件還可以解決頁面載入時某些元件尚未使用就搭載會錯誤的問題<br>例如:某個顯示元件需要在使用者選定圖片後，將圖片去做處理並顯示，那麼如果包在Component中的話，<br>一進入該頁面就會找不到顯示內容，透過 Loader 可以在選擇後，載入該顯示內容</p>
<h2 id="載入頁面"><a href="#載入頁面" class="headerlink" title="載入頁面"></a>載入頁面</h2><p>可以用 source property 載入 qml 頁面</p>
<h3 id="不帶參數載入頁面"><a href="#不帶參數載入頁面" class="headerlink" title="不帶參數載入頁面"></a>不帶參數載入頁面</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    Loader &#123; id: pageLoader &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: pageLoader.source = <span class="string">"Page1.qml"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="帶參數載入頁面"><a href="#帶參數載入頁面" class="headerlink" title="帶參數載入頁面"></a>帶參數載入頁面</h3><p>這邊要注意的部分是透過 setSource 所傳遞的參數會在載入新頁面完成後，才將值傳遞過去，所以頁面與元件載入優先於收到值，要非常注意這個先後順序</p>
<p>Sender.qml<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    Loader &#123; id: pageLoader &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: pageLoader.setSource(<span class="string">"qrc:/Receiver.qml"</span>,  &#123;<span class="string">"src"</span>: volumeRendering.object, <span class="string">"loaderActive"</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="comment">//Receiver.qml 頁面中需要對應的 Property 例如: Property var src 與 Property alias loaderActive: loader.active 存放</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面強調的 setSource 優先順序問題來看看大概是怎個情形吧<br>如果有元件是需要傳遞過來的值才能順利載入頁面，但是值還未被傳遞完成，元件卻先被載入，出現異常</p>
<p>例如:以下程式碼 Sender.qml 透過 setSource 方式載入 Receiver.qml 頁面並傳遞 src 值，<br>此時因 ImageImport 需有 source 做相對應計算後顯示，但是尚未有數值，頁面卻先搭載，導致錯誤</p>
<p>Receiver.qml 錯誤範例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    id: root</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    property var src</span><br><span class="line">    property alias loaderActive: loader.active</span><br><span class="line">    </span><br><span class="line">    Viewer &#123;</span><br><span class="line">        anchors.fill: parent;</span><br><span class="line">        ImageImport &#123;</span><br><span class="line">            source: root.src</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="載入元件"><a href="#載入元件" class="headerlink" title="載入元件"></a>載入元件</h2><p>那麼我們該如何解決以上問題呢</p>
<p>可以透過 Loader 讓元件延遲載入，將需要延遲的元件包在 Component 之中<br>此處必須注意的是 Component 最外層僅能一個主要元件( 可以一層一層被包在內 )，不能最外層兩個以上元件</p>
<p>Receiver.qml 正確範例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    id: root</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    property var src <span class="comment">//先將值存取至 src 需要時提取</span></span><br><span class="line">    property alias loaderActive: loader.active <span class="comment">//先將值存取至 loaderActive 需要時提取</span></span><br><span class="line">    property <span class="keyword">int</span> xValue: sliderX.value <span class="comment">//榜定 sliderX.value 值</span></span><br><span class="line">    </span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">        asynchronous: <span class="literal">true</span></span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        width: <span class="number">512</span></span><br><span class="line">        height: <span class="number">500</span></span><br><span class="line">        active: <span class="literal">false</span> <span class="comment">//頁面載入時，不會搭載此元件，直到頁面載入完成後，接收到 setSource 來的值 src 內容與 loaderActive : true 才搭載</span></span><br><span class="line">        sourceComponent: component <span class="comment">//設置 Component 元件</span></span><br><span class="line">    &#125;</span><br><span class="line">    Component &#123;</span><br><span class="line">        id: component    </span><br><span class="line">        Viewer &#123;</span><br><span class="line">            anchors.fill: parent;</span><br><span class="line">            <span class="function">function <span class="title">crop</span><span class="params">()</span> </span>&#123; <span class="comment">//搭載後才能認到 mapper 所以不能直接被使用，需透過函式</span></span><br><span class="line">                mapper.setCroppingRegionPlanes(<span class="number">0</span>,xValue,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            Mapper &#123;</span><br><span class="line">                id: mapper</span><br><span class="line">                ImageImport &#123;</span><br><span class="line">                    source: root.src <span class="comment">//接收來自於 Sender.qml 的 volumeRendering.object</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Slider &#123;</span><br><span class="line">        id: sliderX</span><br><span class="line">        from:<span class="number">0</span></span><br><span class="line">        value: <span class="number">511</span></span><br><span class="line">        to:<span class="number">511</span></span><br><span class="line">        stepSize: <span class="number">1</span></span><br><span class="line">        onValueChanged: loader.item.crop() </span><br><span class="line">        <span class="comment">//因載入完成第一時間並不曉得 mapper 所以必須使用 loader 的 item ( 指的是 sourceComponent 對象 ) 的函式 Crop()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Loader</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 如何在 qml 中使用 C++ Enum</title>
    <url>/2019/10/02/Qt-%E5%A6%82%E4%BD%95%E5%9C%A8-qml-%E4%B8%AD%E4%BD%BF%E7%94%A8-C-Enum/</url>
    <content><![CDATA[<h1 id="Qt-如何在-qml-中使用-C-Enum"><a href="#Qt-如何在-qml-中使用-C-Enum" class="headerlink" title="Qt 如何在 qml 中使用 C++ Enum"></a>Qt 如何在 qml 中使用 C++ Enum</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果要在 qml 中使用列舉，qml 中是不認得列舉型別的並需先註冊才可以讓 qml 端操作 C++ 的列舉，這邊來記錄一下該如何在 qml 中使用 C++ 的列舉</p>
<h2 id="列舉"><a href="#列舉" class="headerlink" title="列舉"></a>列舉</h2><p>列舉是一種複合型別，是一個被命名的整型常數的集合，適合用來歸納能分類成一組列舉的值與利於型別檢查，那麼什麼是適合分類成一組列舉的值，例如在日常生活中很常見的表示星期的 SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY 就是一個列舉或是 東、西、南、北。</p>
<h2 id="TB-C-enum-in-qml-實作"><a href="#TB-C-enum-in-qml-實作" class="headerlink" title="TB C++ enum in qml 實作"></a>TB C++ enum in qml 實作</h2><p>要在 qml 中使用 C++ 的 enum 要先註冊讓 qml 認得該資料型態，這邊我們記錄一下以星期為列舉範例</p>
<h3 id="步驟一-創建類別"><a href="#步驟一-創建類別" class="headerlink" title="步驟一 創建類別"></a>步驟一 創建類別</h3><p>創建一個類別繼承 QObject 或是 QObject 子類別( 例如: QQuickItem 必須添加 Q_OBJECT 巨集 )</p>
<h3 id="步驟二-創建列舉"><a href="#步驟二-創建列舉" class="headerlink" title="步驟二 創建列舉"></a>步驟二 創建列舉</h3><p>創建一個 enum 並加上 Q_ENUM( YourEnumNameHere ) 標籤並在私有封裝中加上</p>
<pre><code>QMetaEnum metaEnumWeek = QMetaEnum::fromType&lt;TeddyBearFP::Week&gt;();
</code></pre><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEDDYBEARFP_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEDDYBEARFP_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//步驟一</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeddyBearFP</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟二</span></span><br><span class="line">    <span class="keyword">enum</span> Week</span><br><span class="line">    &#123;</span><br><span class="line">        SUNDAY = <span class="number">7</span>,</span><br><span class="line">        MONDAY = <span class="number">1</span>,</span><br><span class="line">        TUESDAY = <span class="number">2</span>,</span><br><span class="line">        WEDNESDAY = <span class="number">3</span>,</span><br><span class="line">        THURSDAY = <span class="number">4</span>,</span><br><span class="line">        FRIDAY = <span class="number">5</span>,</span><br><span class="line">        SATURDAY = <span class="number">6</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM( Week )</span><br><span class="line"></span><br><span class="line">    TeddyBearFP();</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE QString <span class="title">enumValueKey_Week</span><span class="params">( Week week )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QMetaEnum metaEnumWeek = QMetaEnum::fromType&lt;TeddyBearFP::Week&gt;();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TEDDYBEARFP_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="步驟三-註冊類別"><a href="#步驟三-註冊類別" class="headerlink" title="步驟三 註冊類別"></a>步驟三 註冊類別</h3><p>在 main.cpp 中註冊類別讓 qml 可以使用</p>
<pre><code>qmlRegisterType&lt;TeddyBearFP&gt;( &quot;teddyBearFP&quot;, 1, 0, &quot;TeddyBearFP&quot; );
</code></pre><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tb2.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟三 註冊類別</span></span><br><span class="line">    qmlRegisterType&lt;TeddyBearFP&gt;( <span class="string">"teddyBearFP"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"TeddyBearFP"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟五 註冊另一個類別與列舉</span></span><br><span class="line">    qmlRegisterType&lt;TB2&gt;( <span class="string">"tb2"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"TB2"</span> );</span><br><span class="line">    qRegisterMetaType&lt;TeddyBearFP::Week&gt;();</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    engine.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line">    <span class="keyword">if</span> ( engine.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="步驟四-導入類別使用列舉"><a href="#步驟四-導入類別使用列舉" class="headerlink" title="步驟四 導入類別使用列舉"></a>步驟四 導入類別使用列舉</h3><p>在我們導入註冊成功的的類別後，在這一個步驟中，已經可以使用該類別的列舉內容了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> teddyBearFP <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">TeddyBearFP &#123;</span><br><span class="line">    Column</span><br><span class="line">    &#123;</span><br><span class="line">        width: parent.width</span><br><span class="line">        spacing: <span class="number">2</span></span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"Week Name: "</span> + enumValueKey_Week(TeddyBearFP.SUNDAY);</span><br><span class="line">        &#125;</span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"Week Value: "</span> + TeddyBearFP.SUNDAY.toString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="步驟五-註冊列舉"><a href="#步驟五-註冊列舉" class="headerlink" title="步驟五 註冊列舉"></a>步驟五 註冊列舉</h3><p>如果你想要在其他類別中使用該列舉那麼必須在 main.cpp 中註冊它</p>
<pre><code>qRegisterMetaType&lt;TeddyBearFP::Week&gt;();
</code></pre><p>註冊完成後便可以在另一個類別中使用</p>
<h4 id="h-cpp"><a href="#h-cpp" class="headerlink" title=".h / .cpp"></a>.h / .cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TB2</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TB2();</span><br><span class="line">    <span class="function">Q_INVOKABLE QString <span class="title">test</span><span class="params">( TeddyBearFP::Week week )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tb2.h"</span></span></span><br><span class="line"></span><br><span class="line">TB2::TB2()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QString TB2::test( TeddyBearFP::Week week )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( week == TeddyBearFP::MONDAY )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MONDAY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( week == TeddyBearFP::FRIDAY )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FRIDAY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Others"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="qml"><a href="#qml" class="headerlink" title="qml"></a>qml</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> tb2 <span class="number">1.0</span></span><br><span class="line">TB2 &#123;</span><br><span class="line">    Column &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        anchors.topMargin: <span class="number">5</span></span><br><span class="line">        anchors.leftMargin: <span class="number">5</span></span><br><span class="line">        spacing: <span class="number">20</span></span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"TB2"</span></span><br><span class="line">        &#125;</span><br><span class="line">        Column</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            spacing: <span class="number">2</span></span><br><span class="line">            Text</span><br><span class="line">            &#123;</span><br><span class="line">                width: parent.width</span><br><span class="line">                font.pixelSize : <span class="number">16</span></span><br><span class="line">                text:<span class="string">"Week Name: "</span> + test(TeddyBearFP.FRIDAY);</span><br><span class="line">            &#125;</span><br><span class="line">            Text</span><br><span class="line">            &#123;</span><br><span class="line">                width: parent.width</span><br><span class="line">                font.pixelSize : <span class="number">16</span></span><br><span class="line">                text:<span class="string">"Week Value: "</span> + TeddyBearFP.FRIDAY.toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完成-查看數值"><a href="#完成-查看數值" class="headerlink" title="完成 查看數值"></a>完成 查看數值</h3><p><img src="https://i.imgur.com/RMTfnvy.png" alt></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>公司 M 學長的資料分享</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Enum</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt CreateMutex 確保應用程式不會被重複執行</title>
    <url>/2019/10/01/Qt-CreateMutex-%E7%A2%BA%E4%BF%9D%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E4%B8%8D%E6%9C%83%E8%A2%AB%E9%87%8D%E8%A4%87%E5%9F%B7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="Qt-CreateMutex-確保應用程式不會被重複執行"><a href="#Qt-CreateMutex-確保應用程式不會被重複執行" class="headerlink" title="Qt CreateMutex 確保應用程式不會被重複執行"></a>Qt CreateMutex 確保應用程式不會被重複執行</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>編寫好一個應用程式要避免該程式被重複開啟，那麼我這邊紀錄的方式是用 CreateMutex 解決不會有多個行程去使用到同一個資源的問題，其運作方式會等一個行程用完資源後換下一個行程使用，而不會有相互衝突的問題</p>
<h2 id="CreateMutex-用法"><a href="#CreateMutex-用法" class="headerlink" title="CreateMutex 用法"></a>CreateMutex 用法</h2><p>CreateMutex()函式可以用來創建一個有指定名稱或無指定名稱的互斥對象</p>
<p>如果執行成功，就會返回互斥對象的 handle ，回傳零則表示有誤<br>若是返回有效的 handle 但是已經有指定名稱的，那麼 GetLastError 會得到 ERROR_ALREADY_EXISTS 已經存在的錯誤</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE <span class="title">CreateMutexA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpMutexAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bInitialOwner, <span class="comment">//初始化互斥對象的擁有者</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName <span class="comment">//指向互斥對象的指標</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Handle hMutex = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二個參數，TRUE表示建立佔有Mutex使用權，FALSE表示建立者不佔有Mutex使用權</span></span><br><span class="line">hMutex = CreateMutex(<span class="literal">NULL</span>,FALSE,<span class="string">"MyMutex"</span>); <span class="comment">//建立Mutex</span></span><br><span class="line">WaitForSingleObject(hMutex, <span class="number">500</span>); <span class="comment">//取得Mutex使用權限並等待使用被釋放</span></span><br><span class="line"><span class="comment">//等待函式完成通常要給個 Timeout ms時間，特殊情況下才給 INFINITE 直到被手動釋放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//......Critical section protected code here(臨界區間) 這區塊的資源不會有同時被使用問題</span></span><br><span class="line"></span><br><span class="line">ReleaseMutex(hMutex); <span class="comment">//釋放使用使用權，讓其他執行續或行程進入critical section</span></span><br></pre></td></tr></table></figure>
<h2 id="實作-CreateMutex-確保應用程式不會被重複執行實作"><a href="#實作-CreateMutex-確保應用程式不會被重複執行實作" class="headerlink" title="實作 CreateMutex 確保應用程式不會被重複執行實作"></a>實作 CreateMutex 確保應用程式不會被重複執行實作</h2><p>了解 CreateMutex 用法的話，我們可以運用創建互斥鎖時指定名稱不重複的特性，達到確保應用程式唯一。</p>
<p>我們可以在應用程式一開啟的時候，創建一個 Mutex 指定應用程式名稱，並用 GetLastError 判斷是否 ERROR_ALREADY_EXISTS 若新創建成功則正常開啟應用程式，否則關閉該 handle 並把指標指向 NULL 最後回傳 FALSE 讓程式關閉不會繼續執行</p>
<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkUnique</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 創建 handleMutex 並設指定名稱</span></span><br><span class="line">    HANDLE m_hMutex = CreateMutex( <span class="literal">NULL</span>, FALSE, <span class="string">L"TeddyBearFP"</span> );</span><br><span class="line">    <span class="comment">// 檢查錯誤代碼</span></span><br><span class="line">    <span class="keyword">if</span> ( GetLastError() == ERROR_ALREADY_EXISTS )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果已有mutex存在則釋放 handle Mutex 並初始handle Mutex 指標位址</span></span><br><span class="line">        CloseHandle( m_hMutex );</span><br><span class="line">        m_hMutex = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 程式退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    <span class="keyword">if</span> ( !checkUnique() ) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 離開程式</span></span><br><span class="line">    engine.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( engine.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上程式碼完成後，可以用以下方式驗證</p>
<p>開啟應用程式，接著開啟工作管理員看是否能找到該應用程式，順利找到該應用程式後，再重複開啟應用程式，會看到該應用程式在工作管理員中出現並快速關閉，實現檔案唯一的管控，這樣就成功拉!</p>
<h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>CreateMutex 方式創建 critical section 臨界區間亦可以讓多行程的多執行檔對單一動態連結檔(DLL) 進行操作存取而不會互相衝突</p>
<h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p><a href="http://white5168.blogspot.com/2013/03/createmutex.html#.XZNjC0YzY2w" target="_blank" rel="noopener">CreateMutex建立多線程互斥機制—解決行程 … - iInfo 資訊交流
</a><br><a href="https://baike.baidu.com/item/CreateMutex" target="_blank" rel="noopener">CreateMutex_百度百科
</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>CreateMutex</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 與 qml 透過 Q_PROPERTY 資料傳遞</title>
    <url>/2019/09/27/C-%E8%88%87-qml-%E9%80%8F%E9%81%8E-Q-PROPERTY-%E8%B3%87%E6%96%99%E5%82%B3%E9%81%9E/</url>
    <content><![CDATA[<h1 id="C-與-qml-透過-Q-PROPERTY-資料傳遞"><a href="#C-與-qml-透過-Q-PROPERTY-資料傳遞" class="headerlink" title="C++ 與 qml 透過 Q_PROPERTY 資料傳遞"></a>C++ 與 qml 透過 Q_PROPERTY 資料傳遞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有個資料流需求，需將資料由 sender.qml 呼叫 C++ 端的函式處理成 unsigned char* 型態送至另一個 receiver.qml 再由 receiver.qml 傳送至它的 C++ 端做資料處理，那麼如何讓指標在 C++ 與 qml 中傳送，此篇主要記錄 Q_PROPERTY 如何傳遞 QObject </p>
<h2 id="註冊型態"><a href="#註冊型態" class="headerlink" title="註冊型態"></a>註冊型態</h2><p>使用 QObject 的 SetProperty 時若傳送的變數型態是qml中不認得的需先註冊，這樣才能讓它們的值保存在QVariant中<br>例如: unsigned char<em><br>QVariant 是不能存放 unsigned char</em> 的 </p>
<p>需要註冊的有兩個地方<br>第一個地方是使用到的 class 標頭檔<br>第二個地方是 main.cpp</p>
<p>以下範例為註冊 unsigned char*</p>
<h3 id="標頭檔註冊"><a href="#標頭檔註冊" class="headerlink" title="標頭檔註冊"></a>標頭檔註冊</h3><p>需在該 class .h 檔中註冊型態<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span> * )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolumeRendering</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    VolumeRendering();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">qRegisterMetaType&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span> *&gt;( <span class="string">"unsigned char *"</span> );</span><br></pre></td></tr></table></figure>
<h2 id="範例程式"><a href="#範例程式" class="headerlink" title="範例程式"></a>範例程式</h2><p>這邊我編寫sender與receiver記錄一下這資料流</p>
<p>sender會將資料 unsigned char* 與 int 透過 Q_PROPERTY 的方式以變數型態 QObject 傳遞給 receiver</p>
<p>receiver則會以 Q_PROPERTY 方式接收並印出 unsigned char* 記憶體位置證實是同一個記憶體位置表示成功接收</p>
<h3 id="資料流圖解"><a href="#資料流圖解" class="headerlink" title="資料流圖解"></a>資料流圖解</h3><p><img src="https://i.imgur.com/EwMEbjC.jpg" alt></p>
<h3 id="sender-h"><a href="#sender-h" class="headerlink" title="sender.h"></a>sender.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SENDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SENDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span> * )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( QObject *object READ object WRITE setObject NOTIFY objectChanged )</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sender();</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">sendObject</span><span class="params">( <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> number )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObject</span><span class="params">( QObject *object )</span></span>;</span><br><span class="line">    <span class="function">QObject *<span class="title">object</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QObject *m_Object;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">objectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SENDER_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="sender-cpp"><a href="#sender-cpp" class="headerlink" title="sender.cpp"></a>sender.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"></span><br><span class="line">Sender::Sender()</span><br><span class="line">&#123;</span><br><span class="line">    m_Object = <span class="keyword">new</span> QObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Sender::sendObject( <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> number )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* buf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">3</span> ];</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender buf:"</span> &lt;&lt; buf;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender width:"</span> &lt;&lt; width;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender height:"</span> &lt;&lt; height;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender number:"</span> &lt;&lt; number &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"src"</span>, QVariant::fromValue( buf ) );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"width"</span>, width );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"height"</span>, height );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"number"</span>, number );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Sender::setObject( QObject* object )</span><br><span class="line">&#123;</span><br><span class="line">    m_Object = object;</span><br><span class="line">    <span class="function">emit <span class="title">objectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QObject* Sender::object()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sender-qml"><a href="#sender-qml" class="headerlink" title="sender.qml"></a>sender.qml</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> teddybear.Sender <span class="number">1.0</span></span><br><span class="line">Sender &#123;</span><br><span class="line">    id: sender</span><br><span class="line">    Button &#123;</span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.topMargin: <span class="number">50</span></span><br><span class="line">        anchors.left: parent.left</span><br><span class="line">        anchors.leftMargin: <span class="number">50</span></span><br><span class="line">        width: <span class="number">200</span></span><br><span class="line">        height: <span class="number">180</span></span><br><span class="line">        text: <span class="string">"Send QObject"</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            sender.sendObject(<span class="number">512</span>,<span class="number">512</span>,<span class="number">8</span>)</span><br><span class="line">            loader.setSource(<span class="string">"qrc:/receiver.qml"</span>, &#123;<span class="string">"object"</span>: sender.object&#125; )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="receiver-h"><a href="#receiver-h" class="headerlink" title="receiver.h"></a>receiver.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RECEIVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECEIVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( QObject *receivedObject READ receivedObject WRITE setReceivedObject NOTIFY receivedObjectChanged )</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Receiver();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setReceivedObject</span><span class="params">( QObject *receivedObject )</span></span>;</span><br><span class="line">    <span class="function">QObject *<span class="title">receivedObject</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QObject *m_ReceivedObject;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receivedObjectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// RECEIVER_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="receiver-cpp"><a href="#receiver-cpp" class="headerlink" title="receiver.cpp"></a>receiver.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span>* )</span><br><span class="line">Receiver::Receiver()</span><br><span class="line">&#123;</span><br><span class="line">    m_ReceivedObject = <span class="keyword">new</span> QObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Receiver::setReceivedObject( QObject* receivedObject )</span><br><span class="line">&#123;</span><br><span class="line">    m_ReceivedObject = receivedObject;</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received buf: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"src"</span> ).value&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received width: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"width"</span> ).toInt();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received height: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"height"</span> ).toInt();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received number: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"number"</span> ).toInt() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">receivedObjectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QObject* Receiver::receivedObject()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_ReceivedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="receiver-qml"><a href="#receiver-qml" class="headerlink" title="receiver.qml"></a>receiver.qml</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> teddybear.Receiver <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">Receiver &#123;</span><br><span class="line">    id: receiver</span><br><span class="line">    property var object</span><br><span class="line"></span><br><span class="line">    receivedObject: object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line"></span><br><span class="line">    qmlRegisterType&lt;Sender&gt;( <span class="string">"teddybear.Sender"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"Sender"</span> );</span><br><span class="line">    qmlRegisterType&lt;Receiver&gt;( <span class="string">"teddybear.Receiver"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"Receiver"</span> );</span><br><span class="line">    qRegisterMetaType&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span> *&gt;( <span class="string">"unsigned char *"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> QUrl <span class="title">url</span><span class="params">( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) )</span></span>;</span><br><span class="line">    QObject::connect(</span><br><span class="line">        &amp;engine, &amp;QQmlApplicationEngine::objectCreated,</span><br><span class="line">        &amp;app, [url]( QObject *obj, <span class="keyword">const</span> QUrl &amp;objUrl ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !obj &amp;&amp; url == objUrl )</span><br><span class="line">                QCoreApplication::<span class="built_in">exit</span>( <span class="number">-1</span> );</span><br><span class="line">        &#125;,</span><br><span class="line">        Qt::QueuedConnection );</span><br><span class="line">    engine.load( url );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.12</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">800</span></span><br><span class="line">    height: <span class="number">800</span></span><br><span class="line">    title: qsTr(<span class="string">"Q_PROPERTY dataflow"</span>)</span><br><span class="line">    Component.onCompleted: loader.setSource(<span class="string">"qrc:/sender.qml"</span>)</span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="驗證成果"><a href="#驗證成果" class="headerlink" title="驗證成果"></a>驗證成果</h3><p><img src="https://i.imgur.com/hyB7o4n.png" alt></p>
<p>成功傳遞與接收拉!</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>QObject</tag>
        <tag>Q_PROPERTY</tag>
        <tag>setProperty</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 查詢 IP 位址是多少</title>
    <url>/2019/09/23/Python-%E6%9F%A5%E8%A9%A2-IP-%E4%BD%8D%E5%9D%80%E6%98%AF%E5%A4%9A%E5%B0%91/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們想知道自己當下電腦使用的網路 IP 位址是多少 ( 連結到的WIFI網路或是有線網路 ) ，常見的IP位址分為IPv4與IPv6兩大類</p>
<h2 id="取得-IP-位址"><a href="#取得-IP-位址" class="headerlink" title="取得 IP 位址"></a>取得 IP 位址</h2><h3 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h3><p>在 cmd 我們可以透過 ipconfig 得到 IP 位址<br>例如: </p>
<p>使用 ipconfig /all 得到</p>
<pre><code>IP Address. . . . . . . . . . . . : 192.168.0.100
</code></pre><p>或是用 ipconfig 得到</p>
<pre><code>IPv4 位址 . . . . . . . . . . . . : 192.168.0.100
</code></pre><h2 id="取得對外-IP-位址"><a href="#取得對外-IP-位址" class="headerlink" title="取得對外 IP 位址"></a>取得對外 IP 位址</h2><p>取得對外 IP 位址可以透過很多取得 IP 位址網站得到<br>例如:<br>    <a href="https://www.whatismyip.com.tw/" target="_blank" rel="noopener">我的IP位址查詢
</a><br><a href="https://www.ifreesite.com/ipaddress/" target="_blank" rel="noopener">IP地理位置查詢/域名IP地址查詢 地圖版</a></p>
<p>那麼如果要用程式取得 IP 位址的話，可以運用一下爬蟲技術達到這個功能<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"></span><br><span class="line">ip = get(<span class="string">'https://api.ipify.org'</span>).text</span><br></pre></td></tr></table></figure></p>
<h2 id="取得國家與地理位置"><a href="#取得國家與地理位置" class="headerlink" title="取得國家與地理位置"></a>取得國家與地理位置</h2><p>有了對外 IP 位址我們可以透過以下網址搜尋該對外 IP 位址的國家與地理位置<br><a href="https://www.ez2o.com/App/Net/IP" target="_blank" rel="noopener">IP 查詢- 快速搜尋IP 地理位置- ez2o Studio
</a></p>
<p>假如是遠端遙控不知道在何處的電腦，撇開 IP 位址的方式當然可以用 google map 定位得知裝置究竟是在哪裡囉<br>雖然以上這假設蠻奇怪的，但我還真的遇過這種特殊要求XD</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>pyinstaller 將 Python script 打包成執行檔</title>
    <url>/2019/09/23/pyinstaller-%E5%B0%87-Python-script-%E6%89%93%E5%8C%85%E6%88%90%E5%9F%B7%E8%A1%8C%E6%AA%94/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我常常用 python 完成一份小程式解決一些生活上的雜事，那麼完成一份程式碼後，想要跟他人分享那麼就需要將 python 腳本打包成執行檔，讓他人使用，要將 python script 打包成執行檔需要使用 pyinstaller ，這一篇紀錄如何使用 pyinstaller</p>
<h2 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h2><h3 id="安裝-pyinstaller"><a href="#安裝-pyinstaller" class="headerlink" title="安裝 pyinstaller"></a>安裝 pyinstaller</h3><p>開啟 cmd 並輸入以下指令安裝 pyinstaller<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install pyinstaller</span><br></pre></td></tr></table></figure></p>
<h3 id="使用-pyinstaller"><a href="#使用-pyinstaller" class="headerlink" title="使用 pyinstaller"></a>使用 pyinstaller</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-F: 將多個檔案打包成單一個執行檔放在 dist 資料夾中</span><br><span class="line">-w: 關閉 cmd 視窗 不顯示</span><br><span class="line">-i: 將執行檔附上圖片</span><br><span class="line"></span><br><span class="line">pyinstaller -F DataAnalysis.py -i teddybear.ico</span><br><span class="line">pyinstaller -F -w DataAnalysis.py</span><br></pre></td></tr></table></figure>
<h2 id="python-failed-to-execute-script-問題"><a href="#python-failed-to-execute-script-問題" class="headerlink" title="python failed to execute script 問題"></a>python failed to execute script 問題</h2><p>如果執行打包完成的執行檔時無法執行並跳出”python failed to execute script”這個問題，我自己的解法有以下兩種</p>
<h3 id="檢查是否有不認得的-module"><a href="#檢查是否有不認得的-module" class="headerlink" title="檢查是否有不認得的 module"></a>檢查是否有不認得的 module</h3><p>例如:使用到 requests 的 module 卻沒有該函式庫<br>解法:先開啟 cmd 輸入<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure></p>
<p>完成後再重新打包一次執行檔</p>
<h3 id="檢查是否-pyinstaller-太舊"><a href="#檢查是否-pyinstaller-太舊" class="headerlink" title="檢查是否 pyinstaller 太舊"></a>檢查是否 pyinstaller 太舊</h3><p>我本身遇到這問題的時候是用這個解法成功解決的</p>
<p>先升級 pip<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></p>
<p>升級完 pip 再安裝一次 pyinstaller</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyinstaller -F -w DataAnalysis.py</span><br></pre></td></tr></table></figure>
<h3 id="加入版本資訊"><a href="#加入版本資訊" class="headerlink" title="加入版本資訊"></a>加入版本資訊</h3><p>首先我們先填寫版本資訊的文字檔</p>
<h4 id="file-version-info-txt"><a href="#file-version-info-txt" class="headerlink" title="file_version_info.txt"></a>file_version_info.txt</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VSVersionInfo(</span><br><span class="line">  ffi=FixedFileInfo(</span><br><span class="line">    filevers=(1, 0, 0, 1),</span><br><span class="line">    prodvers=(1, 0, 0, 1),</span><br><span class="line">    mask=0x3f,</span><br><span class="line">    flags=0x0,</span><br><span class="line">    OS=0x40004,</span><br><span class="line">    fileType=0x1,</span><br><span class="line">    subtype=0x0,</span><br><span class="line">    date=(0, 0)</span><br><span class="line">    ),</span><br><span class="line">  kids=[</span><br><span class="line">    StringFileInfo(</span><br><span class="line">      [</span><br><span class="line">      StringTable(</span><br><span class="line">        u&apos;040904B0&apos;,</span><br><span class="line">        [StringStruct(u&apos;CompanyName&apos;, u&apos;TeddyBearFp&apos;),</span><br><span class="line">        StringStruct(u&apos;FileDescription&apos;, u&apos;Powerful crawler created by G.C.L.&apos;),</span><br><span class="line">        StringStruct(u&apos;FileVersion&apos;, u&apos;v1.0.0.1&apos;),</span><br><span class="line">        StringStruct(u&apos;InternalName&apos;, u&apos;PowerfulHelper&apos;),</span><br><span class="line">        StringStruct(u&apos;LegalCopyright&apos;, u&apos;G.C.L. All rights reserved.&apos;),</span><br><span class="line">        StringStruct(u&apos;OriginalFilename&apos;, u&apos;PowerfulHelper.exe&apos;),</span><br><span class="line">        StringStruct(u&apos;ProductName&apos;, u&apos;PowerfulHelper.exe&apos;),</span><br><span class="line">        StringStruct(u&apos;ProductVersion&apos;, u&apos;v1.0.0.1&apos;)])</span><br><span class="line">      ]), </span><br><span class="line">    VarFileInfo([VarStruct(u&apos;Translation&apos;, [1033, 1200])])</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="pyinstaller-1"><a href="#pyinstaller-1" class="headerlink" title="pyinstaller"></a>pyinstaller</h4><p>將剛剛填寫好的版本資訊放在 py 檔同一層<br>接著用 pyinstaller 將版本資訊加到執行檔中<br>指令:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyinstaller -F --version-file=file_version_info.txt PowerfulHelper.py</span><br></pre></td></tr></table></figure></p>
<h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>如果是用 64 bits 的 Python 去打包執行檔則只能在 64 bits 上使用<br>而在 32 bits 打包的可以在 64 bits 跟 32 bits 使用</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>QImage 讀取並轉成Memory buffer</title>
    <url>/2019/09/11/QImage-%E8%AE%80%E5%8F%96%E4%B8%A6%E8%BD%89%E6%88%90Memory-buffer/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時我們可以把圖片讀取後轉成記憶體的方式去做處理，或是傳送給其他函式操作，那麼TB在此記錄一下如何讀取數張圖片並存至Buffer中</p>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>首先要使Qt環境中支援QImage<br>如果你創建專案時是選Qt Console的話要去pro檔案中刪除</p>
<pre><code>Qt -= gui
</code></pre><p>上述這一行</p>
<p>並在欲使用的地方導入QImage</p>
<pre><code>#include &lt;QImage&gt;
</code></pre><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先創建Buffer並宣告其大小,長:512 寬:512 張數:100</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *buf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">512</span> * <span class="number">512</span> * <span class="number">100</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">//迴圈將100張圖批次放至buffer記憶體中</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//宣告欲讀取圖片的QImage,並宣告圖片寬:512 高:512與 通道數:3通道(RGB)</span></span><br><span class="line">    QImage img = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888 );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//讀取路徑宣告</span></span><br><span class="line">    QString path = <span class="string">"D:\\Project\\pics\\"</span> + QString::number( i ) + <span class="string">".jpg"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//讀取圖片</span></span><br><span class="line">    img.load( path, <span class="string">"JPEG"</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//進行一個將圖片旋轉180度的動作</span></span><br><span class="line">    QMatrix matrix;</span><br><span class="line">    matrix.rotate( <span class="number">180</span> );</span><br><span class="line">    img = img.transformed( matrix );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//將三通道的圖轉為灰階單通道</span></span><br><span class="line">    img = img.convertToFormat( QImage::Format_Grayscale8 );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//存至buffer中, memcpy(目的地記憶體起始位置, 來源記憶體起始位置, 資料長度)</span></span><br><span class="line">    <span class="built_in">memcpy</span>( buf + i * img.sizeInBytes(), img.bits(), img.sizeInBytes() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過上述程式碼便可以成功將100張jpg圖檔的資料存進buffer中唷</p>
<p>其他QImage相關操作我們可以看看我的另一篇文章<a href="https://teddybearfp.github.io/2018/11/08/QImage-%E6%93%8D%E4%BD%9C/">Qt QImage &amp;&amp; QQuickPaintedItem 操作</a>有更多詳細解說</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>QImage</tag>
      </tags>
  </entry>
  <entry>
    <title>Dependency Walker</title>
    <url>/2019/08/22/Dependency-Walker/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>記得剛進公司的時候，對dll動態連結檔還非常不了解，寫專案的時候缺少哪個dll都不太清楚，導致靜態連結檔正確產出obj檔案但是在執行檔的時候會crash掉，每次解決都需要花不少時間找少哪個動態連結檔dll，今天來記錄一下一個神好用的軟體，Dependency Walker，有了這個神軟體考試都一百分</p>
<h2 id="Dependency-Walker-概述"><a href="#Dependency-Walker-概述" class="headerlink" title="Dependency Walker 概述"></a>Dependency Walker 概述</h2><p>當程式執行時，有DLL問題時，可以使用Dependency Walker工具做檢查<br>Dependency Walker可以遞迴地檢測程式所使用的所有相依動態連結檔DLL。</p>
<h2 id="使用-Dependency-Walker"><a href="#使用-Dependency-Walker" class="headerlink" title="使用 Dependency Walker"></a>使用 Dependency Walker</h2><p>要使用Dependency Walker前提須要先產出執行檔，那麼就需要先把Link error之類的連結問題與obj先產出才會有執行檔，有了執行檔後開啟Dependency Walker選擇欲檢查的執行檔，就會出現以下畫面</p>
<h3 id="顯示缺少的dll"><a href="#顯示缺少的dll" class="headerlink" title="顯示缺少的dll"></a>顯示缺少的dll</h3><p><img src="https://i.imgur.com/y2kWeMt.png" alt></p>
<p>從上面的圖可得知缺少3個dll分別為VTKCOMMONCOLOR,VTKCOMMONCOMPUTATIONALGEOMETRY,VTKCOMMONCORE<br>三個動態連結檔dll那麼將它們放至執行檔旁一切就解決拉</p>
<h3 id="補上後的畫面"><a href="#補上後的畫面" class="headerlink" title="補上後的畫面"></a>補上後的畫面</h3><p><img src="https://i.imgur.com/IuMT3uH.png" alt></p>
<p>圖中可以看到剛剛缺少的dll已經補上了<br>那麼這時候如果原本的問題僅是缺少dll問題的化基本上就能執行囉</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Dependency Walker</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt FileDialog</title>
    <url>/2019/08/21/Qt-FileDialog/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做介面端難免有需要給使用者選擇檔案的時候，那麼這時候使用FileDialog可以開啟檔案選擇介面讓使用者選擇特定類型檔案或是資料夾，這一篇來記錄一下Qt FileDialog的使用吧</p>
<h2 id="Qt-FileDialog"><a href="#Qt-FileDialog" class="headerlink" title="Qt FileDialog"></a>Qt FileDialog</h2><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Dialogs <span class="number">1.3</span></span><br><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="title">Button</span>&#123; <span class="comment">//透過這個按鍵可以觸發FileDialog</span></span><br><span class="line">        <span class="attribute">id:</span><span class="string">openBtn</span></span><br><span class="line">        <span class="attribute">anchors.left</span>: <span class="built_in">parent</span>.left</span><br><span class="line">        <span class="attribute">anchors.top</span>: <span class="built_in">parent</span>.top</span><br><span class="line">        <span class="attribute">anchors.margins</span>: <span class="number">50</span></span><br><span class="line">        <span class="attribute">text</span>:<span class="string">"Select folder\nto do something"</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">250</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">150</span></span><br><span class="line">        <span class="attribute">onClicked</span>: fileDialog.open()</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title">Label</span> &#123;</span><br><span class="line">       <span class="attribute">id:</span><span class="string"> labels</span></span><br><span class="line">       <span class="attribute">text</span>: qsTr(<span class="string">""</span>)</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">25</span></span><br><span class="line">       <span class="attribute">anchors.top</span>: openBtn.verticalCenter</span><br><span class="line">       <span class="attribute">anchors.left</span>:<span class="attribute">openBtn.right</span></span><br><span class="line"><span class="attribute">       anchors.leftMargin</span>: <span class="number">15</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title">FileDialog</span> &#123;</span><br><span class="line">       <span class="attribute">id:</span><span class="string">fileDialog</span></span><br><span class="line">       <span class="attribute">title</span>: <span class="string">"Select folder"</span> <span class="comment">//上方顯示的標題</span></span><br><span class="line">       <span class="attribute">folder</span>: shortcuts.desktop <span class="comment">//讓起始位置指向desktop</span></span><br><span class="line">       <span class="attribute">selectExisting</span>: <span class="literal">true</span></span><br><span class="line">       <span class="attribute">selectFolder</span>: <span class="literal">true</span> <span class="comment">//這個屬性為true時,選擇整個資料夾而非檔案</span></span><br><span class="line">       <span class="attribute">selectMultiple</span>: <span class="literal">false</span> <span class="comment">//這個屬性處理是否可以選擇多個檔案</span></span><br><span class="line">       <span class="attribute">onAccepted</span>: &#123; <span class="comment">//選擇檔案的時候做的事情Call function do something...</span></span><br><span class="line">           <span class="comment">//fileDialog.setNameFilter(tr("Images (*.png *.jpg)"));//若selectFolder為false選擇檔案時可以過濾檔案類型,僅顯示給使用者看某類型檔案</span></span><br><span class="line">           labels.text = fileDialog.fileUrl;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"You chose: "</span> + fileDialog.fileUrl);</span><br><span class="line">           doSomething(fileDialog.fileUrl) <span class="comment">//得到的字串可能為"file:///D:/Sample"</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="attribute">onRejected</span>: &#123; <span class="comment">//取消的時候做的行為,例如不做事或是程式關閉Qt.quit()</span></span><br><span class="line">           labels.text = <span class="string">""</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="FileDialog-Demo"><a href="#FileDialog-Demo" class="headerlink" title="FileDialog Demo"></a>FileDialog Demo</h2><p><img src="https://i.imgur.com/wJsbXQe.png" alt></p>
<h2 id="DoSomething-字串處理"><a href="#DoSomething-字串處理" class="headerlink" title="DoSomething 字串處理"></a>DoSomething 字串處理</h2><h3 id="viewmodel"><a href="#viewmodel" class="headerlink" title="viewmodel"></a>viewmodel</h3><p>收到剛剛從qml端傳來的QString字串後做一些處理再傳至純C lib做事情,所以需要QString轉成Char*</p>
<p>將QString: </p>
<pre><code>&quot;file:///D:/Sample&quot;
</code></pre><p>轉換成Char*:</p>
<pre><code>&quot;D:\\Sample\\&quot;
</code></pre><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Sample::doSomething( QString path )</span><br><span class="line">&#123;</span><br><span class="line">    path.replace( <span class="string">"file:///"</span>, <span class="string">""</span> );</span><br><span class="line">    path.replace( <span class="string">"/"</span>, <span class="string">"\\"</span> );</span><br><span class="line">    path.append( <span class="string">"\\"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//QString to char*</span></span><br><span class="line">    QByteArray ba = path.toLocal8Bit();</span><br><span class="line">    <span class="keyword">char</span>* s = ba.data();</span><br><span class="line">    DoSomething( s );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">Sample__API <span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">( <span class="keyword">char</span>* path )</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>FileDialog</tag>
      </tags>
  </entry>
  <entry>
    <title>TB腦力激盪_遺失的連續數(無排序)</title>
    <url>/2019/08/13/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA-%E9%81%BA%E5%A4%B1%E7%9A%84%E9%80%A3%E7%BA%8C%E6%95%B8-%E7%84%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了精進寫程式能力，紀錄一下遇到的題目與我覺得還算不錯的解</p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>N個連續數字(無排序)，找出缺少的那個數字(前提起始數字不缺漏)<br>例如:題目(7個連續數字，起始為76)<br>那麼內容可能為[83,79,76,81,78,82]找出缺少哪一個數字<br>這答案為77<br>試著編寫程式找到缺少的數字</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>我的方法完成兩個目標即可達成<br>第一個目標找到數字的頭(最小的數字) min<br>第二個目標找出給的內容總和 sum</p>
<p>我們僅需運用時間複雜度O(n)一個迴圈的時間<br>同時找出最小的數字min,並將所有數字加起來得到總和sum<br>接著把剛剛找到的最小的數字加上題目給的N個連續數字的N做一個梯形運算取得該有的總和減掉剛剛算出的sum</p>
<p>以例題舉例來說<br>最小數字min:76<br>N:7<br>梯形面積:(76 + (76 + 7)) * 7 / 2 (上底加下底乘高除二)<br>= 556.5<br>= 556 (無條件捨去)<br>迴圈算出來的總和Sum:83 + 79 + 76 + 81 + 78 + 82 = 479<br>梯形面積減掉Sum:77</p>
<p>ANS:77</p>
]]></content>
      <categories>
        <category>腦力激盪</category>
      </categories>
      <tags>
        <tag>腦力激盪</tag>
        <tag>無序連續數</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt QPainter</title>
    <url>/2019/07/12/Qt-QPainter/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>快速的匯整圖形資料並繪製，可以達到即時影像的效果，那麼將圖形繪製除了我之前編寫的<a href="https://teddybearfp.github.io/2018/11/08/QImage-%E6%93%8D%E4%BD%9C/#more">Qt QImage &amp; QQuickPaintedItem 操作</a>裡面提的針對bits的操作每個位元的顏色方式之外，今天這一篇所記錄的是以QImage整份用QPainter操作再用QQuickPaintItem畫在Canvas上</p>
<pre><code>文章為[泰迪熊的程式足跡G.C.L.](https://teddybearfp.github.io/)所編寫，禁止轉載與抄襲，引用部分文章請附上出處
</code></pre><h2 id="QPainter實作"><a href="#QPainter實作" class="headerlink" title="QPainter實作"></a>QPainter實作</h2><h3 id="TeddyBearFPCanvas-h"><a href="#TeddyBearFPCanvas-h" class="headerlink" title="TeddyBearFPCanvas.h"></a>TeddyBearFPCanvas.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEDDYBEARFPCANVAS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEDDYBEARFPCANVAS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickPaintedItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeddyBearFPCanvas</span> :</span> <span class="keyword">public</span> QQuickPaintedItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TeddyBearFPCanvas( QQuickItem* parent = <span class="literal">nullptr</span> );</span><br><span class="line">    ~TeddyBearFPCanvas();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">( QPainter* painter )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QImage imgs;</span><br><span class="line">    QImage aImg;</span><br><span class="line">    QImage bImg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isStarted;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Polling</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TEDDYBEARFPCANVAS_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="TeddyBearFPCanvas-cpp"><a href="#TeddyBearFPCanvas-cpp" class="headerlink" title="TeddyBearFPCanvas.cpp"></a>TeddyBearFPCanvas.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfpcanvas.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CANVAS_INTERVAL 5</span></span><br><span class="line"></span><br><span class="line">TeddyBearFPCanvas::TeddyBearFPCanvas( QQuickItem* parent )</span><br><span class="line">    : QQuickPaintedItem( parent )</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::paint( QPainter* painter )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">( <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height() )</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">( <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height() )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//將imgs畫上</span></span><br><span class="line">    painter-&gt;drawImage( target, imgs, source );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( isStarted ) update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TeddyBearFPCanvas::~TeddyBearFPCanvas()</span><br><span class="line">&#123;</span><br><span class="line">    stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::start()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( isStarted )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    isStarted = <span class="literal">true</span>;</span><br><span class="line">    future = QtConcurrent::run( <span class="keyword">this</span>, &amp;TeddyBearFPCanvas::Polling );</span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::Polling()</span><br><span class="line">&#123;</span><br><span class="line">    imgs = QImage( <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height(), QImage::Format_Grayscale8 );</span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">( Qt::gray )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( isStarted )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//從某處得到了aImg, bImg資料</span></span><br><span class="line">        <span class="comment">//ret = some Function</span></span><br><span class="line">        <span class="keyword">if</span> ( ret != ComboOk )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        aImg = aImg.scaled( <span class="number">320</span>, <span class="number">240</span> );</span><br><span class="line">        </span><br><span class="line">        QImage dstImg;</span><br><span class="line">        <span class="comment">//將整份bImg複製(不能直接用等於dstImg = bImg ,這樣寫的話更改dstImg也會更動到bImg)</span></span><br><span class="line">        dstImg = bImg.copy();</span><br><span class="line">        dstImg = dstImg.scaled( <span class="number">320</span>, <span class="number">240</span> );</span><br><span class="line"></span><br><span class="line">        <span class="function">QPainter <span class="title">painter</span><span class="params">( &amp;imgs )</span></span>;</span><br><span class="line">        painter.setPen( pen );</span><br><span class="line"></span><br><span class="line">        painter.drawImage( <span class="number">0</span>, <span class="number">0</span>, dstImg );</span><br><span class="line">        <span class="comment">//灰色間隔</span></span><br><span class="line">        painter.drawRect( <span class="number">0</span>, dstImg.height(), <span class="keyword">this</span>-&gt;width(), CANVAS_INTERVAL );</span><br><span class="line">        painter.drawImage( <span class="number">0</span>, dstImg.height() + CANVAS_INTERVAL, aImg );</span><br><span class="line">        painter.end();</span><br><span class="line"></span><br><span class="line">        Sleep( <span class="number">30</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::stop()</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">    future.waitForFinished();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QPainter</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake GUI使用</title>
    <url>/2019/07/05/CMake-GUI/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要繼續來研究3D相關的課題了，繼上次困難的OpenGL我的另一篇文章所記錄的<a href="https://teddybearfp.github.io/2018/12/23/3D-Volume-Rendering/">OpenGL 3D立體渲染</a>折騰了一番後，要來用VTK這個視覺化工具函式庫(VTK， Visualization Toolkit)，VTK社群快速地成長，其在學術研究及商業應用的領域受到重用，例如Slicer 生物醫學計算軟體使用VTK作為其核心，許多討論研究VTK的IEEE論文出現。而這個Third-party的套件要如何使用，cxx的話就得透過CMake將source資料編譯成sln檔 讓c++可以編譯產生dll、lib與h檔，Python的話則是下載擴充包</p>
<p>今天記錄的內容是如何用產出QT可以使用的VTK動態連結檔<br>下方步驟將會循序的CMake VTK項目產出VTK動態連結檔</p>
<pre><code>文章為[泰迪熊的程式足跡G.C.L.](https://teddybearfp.github.io/)所編寫，禁止轉載與抄襲，引用部分文章請附上出處
</code></pre><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>在CMake步驟中最主要的目的就是要取得bin(動態連結檔), include(標頭檔),lib(靜態連結檔)這三種類型檔案，有了這三個類型的檔案，我們就可以使用這third-party的相關套件</p>
<h2 id="Download-VTK"><a href="#Download-VTK" class="headerlink" title="Download VTK"></a>Download VTK</h2><p>首先先下載<a href="https://vtk.org/download/" target="_blank" rel="noopener">VTK</a><br>我抓的是目前最新的<a href="https://www.vtk.org/files/release/8.2/VTK-8.2.0.zip" target="_blank" rel="noopener">VTK-8.2.0.zip</a><br>接著解壓縮在D槽資料夾中例如: “D:/VTK -8.2.0”(建議D槽)</p>
<h2 id="CMake-流程概述"><a href="#CMake-流程概述" class="headerlink" title="CMake 流程概述"></a>CMake 流程概述</h2><p>如果要編譯debug與release版的Third-Party套件大致分為以下14個步驟</p>
<h3 id="步驟1-5"><a href="#步驟1-5" class="headerlink" title="步驟1~5"></a>步驟1~5</h3><p>1.開啟cmake gui<br>2.選擇source(例如:C:/opencv/sources)<br>3.選擇目的資料夾<br>4.configure<br>5.configure完成後</p>
<ul>
<li>(例如opencv選擇build&gt;&gt;opencv_world打勾)</li>
</ul>
<h3 id="步驟6-10"><a href="#步驟6-10" class="headerlink" title="步驟6~10"></a>步驟6~10</h3><p>6.search找尋prefix(cmake&gt;&gt;cmake_install_prefix) 更改路徑<br>7.generate完成後 點擊open project<br>8.開啟sln後build需要的檔案</p>
<ul>
<li>(例如module內的opencv_world)</li>
</ul>
<p>9.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>10.至install設定的資料夾即可找到.h  , .dll , .lib</p>
<h3 id="步驟11-14"><a href="#步驟11-14" class="headerlink" title="步驟11~14"></a>步驟11~14</h3><p>11.此時只有debug版所以還要再編一次release版<br>12.切換成release再次build需要的檔案</p>
<ul>
<li>(例如module內的opencv_world)</li>
</ul>
<p>13.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>14.步驟完成後 就有debug版跟release版了!</p>
<h2 id="CMake-VTK"><a href="#CMake-VTK" class="headerlink" title="CMake VTK"></a>CMake VTK</h2><p>開啟CMake gui</p>
<h3 id="選擇來源與build路徑"><a href="#選擇來源與build路徑" class="headerlink" title="選擇來源與build路徑"></a>選擇來源與build路徑</h3><p>Where is the source code: 選擇剛剛解壓縮的資料夾”D:/VTK -8.2.0”<br>Where to build the binaries: “D:/VTK”</p>
<h3 id="Search-CMAKE-INSTALL-PREFIX"><a href="#Search-CMAKE-INSTALL-PREFIX" class="headerlink" title="Search CMAKE_INSTALL_PREFIX"></a>Search CMAKE_INSTALL_PREFIX</h3><p>填寫完畢後<br>Search: install<br>搜尋: install<br>找到CMAKE_INSTALL_PREFIX這一個項目並將內容寫為”D:/VTK/install” (盡量跟上方build的路徑一致)<br>這樣編出來的檔案會生成在上方這個路徑中</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><pre><code>建議將build出來的路徑寫在D槽不要在C槽中，因為在C槽需要以管理員許可權啟動Visual Studio並開啟VTK的sln檔，否則如果你沒有以管理員許可權啟動Visual Studio，INSTALL將會失敗
</code></pre><h3 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h3><p>設定完後點擊左下方的Configure等待一下<br>接著會出現一些紅底的VTK項目(此處看當下CMake要產出什麼相關要做不一樣的勾選)<br>把VTK_Group_QT打勾<br>再次Configure會再出現紅底VTK項目但是數量會變少<br>那麼我再Configure一次<br>發現這一次完成後沒有紅底項目了</p>
<h3 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h3><p>Configure完成後點擊Generate<br>等待頁面出現Generate Done</p>
<h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p>生成完的檔案在”D:/VTK”中<br>開啟VTK.sln(透過Visual Studio開啟)<br>首先在右方ALL_BUILD點選右鍵build，要等很久請耐心等候(此操作等於sudo make)<br>接著ALL_BUILD建置完成後，找尋一樣在右方欄位ALL_BUILD下面的INSTALL點選右鍵build(此操作等於sudo make install)<br>兩者都build完後就大功告成拉</p>
<h3 id="使用VTK"><a href="#使用VTK" class="headerlink" title="使用VTK"></a>使用VTK</h3><p>欲使用VTK可以到剛剛CMAKE_INSTALL_PREFIX填寫的位置找尋，像我們這一篇紀錄的是放在”D:/VTK/install”中，那麼我們可以到該資料夾中找到bin(動態連結檔), include(標頭檔),lib(靜態連結檔)與plugins…<br>若他人需要這個third-party套件僅需提供”D:/VTK/install”資料夾即可</p>
<p>OK產出後我們就可以去導入並開始使用VTK囉 3D世界我來啦!</p>
<h2 id="補充-Python-VTK"><a href="#補充-Python-VTK" class="headerlink" title="補充(Python VTK)"></a>補充(Python VTK)</h2><p>Python使用VTK套件就沒拿麼複雜僅需簡單的至下方網站下載擴充包<br>至<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">非官方擴充包(Unofficial Windows Binaries for Python Extension Packages)</a>下載VTK-8.2.0-cp36-cp36m-win32.whl，這檔名36的部分指的是Python版本，載完解壓縮完後，至cmd中執行python install VTK-8.2.0-cp36-cp36m-win32.whl開始安裝<br>完成後在欲使用VTK的專案中上方添加import vtk</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/VTK" target="_blank" rel="noopener">VTK - 维基百科，自由的百科全书</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CMake GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python sqlite3 SqlDBHandler</title>
    <url>/2019/06/23/Python-sqlite3-SqlDBHandler/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在程式的執行時，我們可以產出一些參數在資料庫中讓程式一開始有預設行為，也便於後續更改行為時不用改程式碼僅需更改資料庫參數，這一篇紀錄使用python中的sqlite3簡易的database CRUD操作模組製作的SqlDBHandler，完成了SqlDBHandler可以在往後有資料庫需求時快速的建立資料庫，那麼看一下該怎麼使用這個SqlDBHandler吧</p>
<h2 id="SqlDBHandler"><a href="#SqlDBHandler" class="headerlink" title="SqlDBHandler"></a>SqlDBHandler</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment">#創建資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(levelname)s : %(message)s'</span>, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDB</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">            logging.info(path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">                os.mkdir(path)</span><br><span class="line">                logging.info(<span class="string">"mkdir "</span> + path +<span class="string">" successfully"</span>)</span><br><span class="line">            <span class="comment">#資料夾創建成功後連結資料庫</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.conn = sqlite3.connect(<span class="string">'C:\\ProgramData\\'</span> + folderName + <span class="string">'\\'</span> + databaseName + <span class="string">".sqlite"</span>)</span><br><span class="line">                self.c = self.conn.cursor()</span><br><span class="line">                logging.info(<span class="string">"Opened database successfully"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.warning(<span class="string">"Opened database Failed"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"mkdir Failed. Do you remember import os?"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createTable</span><span class="params">(self, tableName, tableStructure)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#Sql語法 建立表格,表格名 欄位名 欄位型別</span></span><br><span class="line">            <span class="comment">#執行Sql語法</span></span><br><span class="line">            self.c.execute(<span class="string">"CREATE TABLE "</span> + tableName + <span class="string">"("</span> + tableStructure + <span class="string">");"</span>)</span><br><span class="line">            logging.info(<span class="string">"Table created successfully"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.info(<span class="string">"CreateTable Error maybe database is exits!"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, tableName, tableFields, tableValue)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"INSERT INTO "</span> + tableName + <span class="string">" ("</span> + tableFields + <span class="string">") VALUES ("</span> + tableValue + <span class="string">")"</span></span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAll</span><span class="params">(self, tableName)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectByCondition</span><span class="params">(self, tableName, searchCondition)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" WHERE "</span> + searchCondition</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, updateCondition)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"UPDATE "</span> + tableName + <span class="string">" SET "</span> + recordToChange + <span class="string">" where "</span> + updateCondition</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, tableName, deleteCondition)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tableName <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> tableName != <span class="string">''</span>:</span><br><span class="line">            self.dbsql = <span class="string">"DELETE from "</span> + tableName + <span class="string">" where "</span> + deleteCondition</span><br><span class="line">            logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">            result = self.execSql(self.dbsql)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSql</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 執行sql語句 </span></span><br><span class="line">            self.c.execute(dbsql)</span><br><span class="line">        <span class="comment"># 進行資料庫語句的提交操作，不提交則無法生效，每次執行後都要提交</span></span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.info(<span class="string">"Operate Dababase Error !"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSqlWithReturn</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor = self.conn.execute(dbsql)</span><br><span class="line">            <span class="comment"># 用一個變數來接受fetchall（）查詢所有這個函式返回的值。,fetchone ()是查詢一個，只有一個結果和fetchall有區別</span></span><br><span class="line">            <span class="keyword">return</span> self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"select Record Error !"</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 關閉遊標</span></span><br><span class="line">            self.c.close()</span><br><span class="line">            <span class="comment"># 關閉資料庫連結,在資料庫操作完成後需要把游標與連結都關掉</span></span><br><span class="line">            self.conn.close()</span><br><span class="line">            logging.info(<span class="string">"Closed database successfully"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"Closed database Failed"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="檔案放置架構"><a href="#檔案放置架構" class="headerlink" title="檔案放置架構"></a>檔案放置架構</h2><pre><code>D:\Application
├── modules
│   └── SqlDBHandler.py
|        └── SqlDBHandler.py
└── modulesTester
    └── SqlDBHandlerTester.py
        └── SqlDBHandlerTester.py
</code></pre><h2 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"D:\Application"</span>)</span><br><span class="line"><span class="keyword">from</span> modules.SqlDBHandler.SqlDBHandler <span class="keyword">import</span> SqlDB</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#填寫欲創建的資料庫相關資料</span></span><br><span class="line">    folderName = <span class="string">"DBHandler"</span></span><br><span class="line">    databaseName = <span class="string">"ExchangeHelper"</span></span><br><span class="line">    tableName = <span class="string">"TARGET"</span></span><br><span class="line">    fieldsName = <span class="string">"幣別, 目標匯率, 爬取日期, 今日是否觸價, 是否爬取"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#implement SqlDB 傳入(資料夾名稱, 資料庫名稱)</span></span><br><span class="line">    db = SqlDB( folderName, databaseName )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#=====SqlDB CRUD=====</span></span><br><span class="line">    <span class="comment">#1.建立資料表 傳入(資料表格名稱, 表格結構)</span></span><br><span class="line">    db.createTable( tableName, </span><br><span class="line">                    <span class="string">'''</span></span><br><span class="line"><span class="string">                    '幣別'          TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                    '目標匯率'       INT     NOT NULL,</span></span><br><span class="line"><span class="string">                    '爬取日期'       DATE    NOT NULL,</span></span><br><span class="line"><span class="string">                    '今日是否觸價'   TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                    '是否爬取'       TEXT    NOT NULL</span></span><br><span class="line"><span class="string">                    '''</span></span><br><span class="line">                  )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#2.insert用法: 插入資料 傳入(資料表格名稱, 欄位名稱, 資料)</span></span><br><span class="line">    <span class="comment">#導入datetime取得時間</span></span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">    date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    tableValue = <span class="string">"'美金 (USD)', 30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y'"</span></span><br><span class="line">    db.insert( tableName, fieldsName, tableValue)</span><br><span class="line">    tableValue = <span class="string">"'日圓 (JPY)', 0.30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y'"</span></span><br><span class="line">    db.insert( tableName, fieldsName, tableValue)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#3.selectAll用法: 取得整個資料表格資料</span></span><br><span class="line">    dataAll = db.selectAll( tableName )</span><br><span class="line">    <span class="comment">#逐一列出資料</span></span><br><span class="line">    print( <span class="string">"Original data: SELECT * FROM TARGET"</span> )</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dataAll:</span><br><span class="line">        print( c )</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#4.selectByCondition用法: 取得資料表格特定條件資料</span></span><br><span class="line">    searchCondition = <span class="string">'"幣別" = "日圓 (JPY)"'</span></span><br><span class="line">    data = db.selectByCondition( tableName, searchCondition )</span><br><span class="line">    print( <span class="string">"selectByCondition: SELECT * FROM TARGET WHERE \"幣別\" = \"日圓 (JPY)\""</span> )</span><br><span class="line">    print( data )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#5.update用法: </span></span><br><span class="line">    recordToChange = <span class="string">'"目標匯率" = 29'</span></span><br><span class="line">    updateCondition= <span class="string">'"幣別" = "美金 (USD)"'</span></span><br><span class="line">    db.update( tableName, recordToChange, updateCondition )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#6.delete用法:</span></span><br><span class="line">    deleteCondition = <span class="string">'"幣別" = "日圓 (JPY)"'</span></span><br><span class="line">    db.delete( tableName, deleteCondition )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#再次讀取整個表格資料查看修改後的結果</span></span><br><span class="line">    dataAll = db.selectAll( tableName )</span><br><span class="line">    <span class="comment">#逐一列出資料</span></span><br><span class="line">    print( <span class="string">"After update/delete data"</span> )</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dataAll:</span><br><span class="line">        print( c )</span><br><span class="line">        <span class="comment">#陣列方式可以分別取得每筆資料的各個欄位值</span></span><br><span class="line">        <span class="comment">#c[0]: 美金 (USD)</span></span><br><span class="line">        <span class="comment">#c[1]: 29</span></span><br><span class="line">        <span class="comment">#c[2]: 2019-06-23</span></span><br><span class="line">        <span class="comment">#c[3]: N</span></span><br><span class="line">        <span class="comment">#c[4]: Y</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#7.關閉cursor, 關閉資料庫連結</span></span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure>
<h2 id="輸出結果"><a href="#輸出結果" class="headerlink" title="輸出結果"></a>輸出結果</h2><p><img src="https://i.imgur.com/8wqhnDQ.png" alt></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://kaiching.org/pydoing/py/python-library-sqlite3.html" target="_blank" rel="noopener">Python 速查手冊- 12.6 資料庫sqlite3 - 程式語言教學誌</a><br><a href="https://www.google.com/search?ei=UeUOXdKzEY7_0gSsx7qgDg&amp;q=python+sqlite3+&amp;oq=python+sqlite3+&amp;gs_l=psy-ab.3..0l10.5367.9993..10405...7.0..0.74.869.15......0....1..gws-wiz.......0i13j0i10.ZZKlmg1fkvQ" target="_blank" rel="noopener">透過Python 將資料存入SQLite 教學– 小魚的資訊技術學習路– Medium</a></p>
<p>本篇以下列網站為範本做修改<br><a href="http://qinfei.glrsmart.com/2017/03/08/python-sqlite3-shu-ju-ku-cao-zuo-li-cheng/" target="_blank" rel="noopener">Python Sqlite3 数据库操作例程</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>sqlite3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 匯率觸價通知小幫手</title>
    <url>/2019/06/21/Python-%E5%8C%AF%E7%8E%87%E8%A7%B8%E5%83%B9%E9%80%9A%E7%9F%A5%E5%B0%8F%E5%B9%AB%E6%89%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子難得出國郊遊，遇到了美中貿易大戰，日幣瘋狂漲漲漲一路飆到0.29多，我一整個傻眼貓咪，少吃好幾碗拉麵的我就決定了以後有匯率觸價就在低點購入一些，這篇記錄我編寫的匯率觸價通知小幫手，當匯率達到你心中可接受的範圍後便會寄信到你的email信箱中，告訴你484該入手各種幣別了</p>
<h2 id="匯率小幫手介紹"><a href="#匯率小幫手介紹" class="headerlink" title="匯率小幫手介紹"></a>匯率小幫手介紹</h2><p>這個小幫手在執行時會顯示台灣銀行的匯率，接著你可以輸入心中能接受的日幣價位，例如0.29那麼當日幣低於0.29時便會寄信給你，有了這小工具對於要出國的人或是投資的人都是個不錯的小幫手!<br>後續可能新增走勢圖之類</p>
<p>收到信件時的訊息截圖</p>
<p><img src="https://i.imgur.com/a3hJSkq.png" alt></p>
<h2 id="程式流程"><a href="#程式流程" class="headerlink" title="程式流程"></a>程式流程</h2><p>匯率小幫手程式流程大概是以下四個步驟</p>
<h3 id="導入TBLogger"><a href="#導入TBLogger" class="headerlink" title="導入TBLogger"></a>導入TBLogger</h3><p>首先導入這個<a href="https://teddybearfp.github.io/2019/04/28/Python-logger/#more">TBLogger</a>是我另一篇文章介紹的Logger，是負責用來幫忙在程式開發時幫忙除錯與程式完成時輔助維護的好工具，在導入的同時會在”C:\ProgramData\ExchangeHelper”中建立資料夾並生成Log檔</p>
<h3 id="導入DBHandler"><a href="#導入DBHandler" class="headerlink" title="導入DBHandler"></a>導入DBHandler</h3><p>接著我們導入資料庫小幫手，一樣會生成在”C:\ProgramData\ExchangeHelper”中，內部會有些預設的參數，即使使用者要修改爬取的內容也不需要重新編寫程式碼，只要將資料庫中的值修改即可</p>
<h3 id="爬取台灣銀行資訊"><a href="#爬取台灣銀行資訊" class="headerlink" title="爬取台灣銀行資訊"></a>爬取台灣銀行資訊</h3><p>再來我們該進入這個匯率小幫手的核心囉，爬取台灣銀行的匯率資訊，爬到的表格進行資料清理變成我們要的資料</p>
<h3 id="資料比對並寄出Email"><a href="#資料比對並寄出Email" class="headerlink" title="資料比對並寄出Email"></a>資料比對並寄出Email</h3><p>最後我們讀取資料庫預設的值or使用者需要爬取的匯率去跟我們的爬到的資料比對，符合的就寄信通知給使用者，收到信後就大功告成啦!!!</p>
<h2 id="匯率小幫手實作"><a href="#匯率小幫手實作" class="headerlink" title="匯率小幫手實作"></a>匯率小幫手實作</h2><h3 id="TBLogger"><a href="#TBLogger" class="headerlink" title="TBLogger"></a>TBLogger</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBLog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">        <span class="comment">#如果資料夾不存在則創建資料夾</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">            os.mkdir(path)</span><br><span class="line">        self.user = getpass.getuser()</span><br><span class="line">        self.logger = logging.getLogger(self.user)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        format = <span class="string">'%(asctime)s [%(threadName)s][%(levelname)s] %(name)s : %(funcName)s() %(message)s'</span></span><br><span class="line">        self.formatter = logging.Formatter(format)</span><br><span class="line">        self.streamhandler = logging.StreamHandler()</span><br><span class="line">        self.streamhandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.streamhandler)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetPath</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        logfile = path + self.user + <span class="string">'.log'</span></span><br><span class="line">        self.filehandler = logging.FileHandler(logfile)</span><br><span class="line">        self.filehandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.filehandler)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.error(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, level, msg)</span>:</span></span><br><span class="line">        self.logger.log(level, msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLevel</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disable</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.disable(<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">RemoveHandle</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.logger.removeHandler(self.streamhandler)</span><br><span class="line">        self.logger.removeHandler(self.filehandler)</span><br><span class="line">        self.streamhandler.flush()</span><br><span class="line">        self.filehandler.flush()</span><br><span class="line">        self.streamhandler.close()</span><br><span class="line">        self.filehandler.close()</span><br></pre></td></tr></table></figure>
<h4 id="TBLog-截圖"><a href="#TBLog-截圖" class="headerlink" title="TBLog 截圖"></a>TBLog 截圖</h4><p><img src="https://i.imgur.com/ooEPQuH.png" alt></p>
<h3 id="DBHandler"><a href="#DBHandler" class="headerlink" title="DBHandler"></a>DBHandler</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment">#創建資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(levelname)s : %(message)s'</span>, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDB</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fileName, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = <span class="string">"C:\\ProgramData\\"</span> + fileName</span><br><span class="line">            logging.info(path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">                os.mkdir(path)</span><br><span class="line">                logging.info(<span class="string">"mkdir "</span> + path +<span class="string">" successfully"</span>)</span><br><span class="line">            <span class="comment">#資料夾創建成功後連結資料庫</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.conn = sqlite3.connect(<span class="string">'C:\\ProgramData\\'</span> + fileName + <span class="string">'\\'</span> + databaseName + <span class="string">".sqlite"</span>)</span><br><span class="line">                self.c = self.conn.cursor()</span><br><span class="line">                logging.info(<span class="string">"Opened database successfully"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.warning(<span class="string">"Opened database Failed"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"mkdir Failed. Do you remember import os?"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 關閉遊標</span></span><br><span class="line">            self.c.close()</span><br><span class="line">            <span class="comment"># 關閉資料庫連結,在資料庫操作完成後需要把游標與連結都關掉</span></span><br><span class="line">            self.conn.close()</span><br><span class="line">            logging.info(<span class="string">"Closed database successfully"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"Closed database Failed"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createTable</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#獲得游標cursor</span></span><br><span class="line">            self.c = self.conn.cursor()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#Sql語法 建立表格,表格名 欄位名 欄位型別</span></span><br><span class="line">                <span class="comment">#執行Sql語法</span></span><br><span class="line">                self.c.execute(<span class="string">'''CREATE TABLE TARGET</span></span><br><span class="line"><span class="string">                       ('幣別'           TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                        '目標匯率'       INT     NOT NULL,</span></span><br><span class="line"><span class="string">                        '爬取日期'       DATE    NOT NULL,</span></span><br><span class="line"><span class="string">                        '今日是否觸價'   TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                        '是否爬取'       TEXT    NOT NULL);'''</span>)</span><br><span class="line">                logging.info(<span class="string">"Table created successfully"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.info(<span class="string">"CreateTable Error maybe database is exits!"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"You need to createDatabase and then createTable."</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, tableName, tableStrcture, tableValue)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"INSERT INTO "</span> + tableName + <span class="string">" "</span> + tableStrcture + <span class="string">" VALUES "</span> + tableValue</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSql</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">        <span class="comment"># 執行sql語句 </span></span><br><span class="line">        self.c.execute(dbsql)</span><br><span class="line">        <span class="comment"># 進行資料庫語句的提交操作，不提交則無法生效，每次執行後都要提交</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line">        <span class="comment"># return 1</span></span><br><span class="line">        <span class="comment"># except:</span></span><br><span class="line">            <span class="comment"># logging.info("Operate Dababase Error !")</span></span><br><span class="line">            <span class="comment"># return 0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAll</span><span class="params">(self, tableName)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        record = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> record</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOne</span><span class="params">(self, tableName, racordToSearch)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" WHERE "</span> + racordToSearch</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        record = self.execSqlWithReturn(self.dbsql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, racordToSearch)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"UPDATE "</span> + tableName + <span class="string">" SET "</span> + recordToChange + <span class="string">" where "</span> + racordToSearch</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, tableName, recordToDelete)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tableName <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> tableName != <span class="string">''</span>:</span><br><span class="line">            self.dbsql = <span class="string">"DELETE from "</span> + tableName + <span class="string">" where "</span> + recordToDelete</span><br><span class="line">            logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">            result = self.execSql(self.dbsql)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSqlWithReturn</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor = self.conn.execute(dbsql)</span><br><span class="line">            <span class="comment"># 用一個變數來接受fetchall（）查詢所有這個函式返回的值。,fetchone ()是查詢一個，只有一個結果和fetchall有區別</span></span><br><span class="line">            <span class="keyword">return</span> self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"select Record Error !"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="創建的Database截圖"><a href="#創建的Database截圖" class="headerlink" title="創建的Database截圖"></a>創建的Database截圖</h4><p>程式執行時在”C:\ProgramData\ExchangeHelper”中創建這些資料庫<br><img src="https://i.imgur.com/aaxAZbN.png" alt></p>
<h3 id="ExchangeHelper"><a href="#ExchangeHelper" class="headerlink" title="ExchangeHelper"></a>ExchangeHelper</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用pandas取得dataframe</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#取得當下時間</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="comment">#用python的sqlite3做資料庫存取</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="comment">#發送信件</span></span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="comment">#創資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#忽略警告</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"><span class="comment">#導入TBLogger</span></span><br><span class="line"><span class="keyword">from</span> TBLogger <span class="keyword">import</span> TBLog</span><br><span class="line"><span class="keyword">from</span> DBHandler <span class="keyword">import</span> SqlDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBHandler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, databaseFilePath, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#implement SqlDB</span></span><br><span class="line">        <span class="comment">#創建資料庫檔案</span></span><br><span class="line">        self.db = SqlDB(databaseFilePath, databaseName)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeTarget</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#如果資料庫表格未被創建則創建資料庫檔案內的表格</span></span><br><span class="line">        <span class="keyword">if</span>( self.db.createTable() ):</span><br><span class="line">            <span class="comment">#表格名稱</span></span><br><span class="line">            tableName = <span class="string">"TARGET"</span></span><br><span class="line">            <span class="comment">#表格欄位名稱</span></span><br><span class="line">            tableStrcture = <span class="string">"(幣別, 目標匯率, 爬取日期, 今日是否觸價, 是否爬取)"</span></span><br><span class="line">            <span class="comment">#取得日期</span></span><br><span class="line">            date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">            <span class="comment">#表格內容,日期要以"字串"形式送入Date中</span></span><br><span class="line">            tableValue = <span class="string">"('美金 (USD)', 30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y')"</span></span><br><span class="line">            <span class="comment">#插入表格中(表格名稱, 表格欄位名稱, 表格內容)</span></span><br><span class="line">            self.db.insert( tableName, tableStrcture, tableValue )</span><br><span class="line">            tableValue = <span class="string">"('日圓 (JPY)', 0.30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y')"</span></span><br><span class="line">            self.db.insert( tableName, tableStrcture, tableValue )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readTarget</span><span class="params">(self)</span>:</span></span><br><span class="line">        tableName = <span class="string">"TARGET"</span></span><br><span class="line">        row = self.db.selectAll(tableName)</span><br><span class="line">        targetCurrency = []</span><br><span class="line">        targetPrice = []</span><br><span class="line">        crawlDate = []</span><br><span class="line">        isTodayTouched = []</span><br><span class="line">        isNeeded = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> row:</span><br><span class="line">            <span class="keyword">if</span> ( c[<span class="number">4</span>].upper() == <span class="string">'Y'</span> ):</span><br><span class="line">                targetCurrency.append(c[<span class="number">0</span>])</span><br><span class="line">                targetPrice.append(c[<span class="number">1</span>])</span><br><span class="line">                crawlDate.append(c[<span class="number">2</span>])</span><br><span class="line">                isTodayTouched.append(c[<span class="number">3</span>])</span><br><span class="line">                isNeeded.append(c[<span class="number">4</span>])</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> targetCurrency,targetPrice,crawlDate,isTodayTouched</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, racordToSearch)</span>:</span></span><br><span class="line">        self.db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span>      </span><br><span class="line">        self.db.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#匯率小幫手</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExchangeRateHelper</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.exchangeRate = <span class="string">""</span></span><br><span class="line">        self.sender = <span class="string">""</span></span><br><span class="line">        self.receiver=<span class="string">""</span></span><br><span class="line">        self.msg = MIMEMultipart()</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#爬取匯率表格</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CrawlExchangeRate</span><span class="params">(self, targetWeb)</span>:</span></span><br><span class="line">        <span class="comment">#臺灣銀行牌告匯率表格</span></span><br><span class="line">        dfs = pd.read_html(targetWeb)</span><br><span class="line">        self.exchangeRate = dfs[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#取得row全部19種幣別、5個col</span></span><br><span class="line">        self.exchangeRate = self.exchangeRate.ix[:,<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#設定col標頭</span></span><br><span class="line">        self.exchangeRate.columns = [<span class="string">u'幣別'</span>, <span class="string">u'現金匯率-本行買入'</span>, <span class="string">u'現金匯率-本行賣出'</span>, <span class="string">u'即期匯率-本行買入'</span>, <span class="string">u'即期匯率-本行賣出'</span>]</span><br><span class="line">        <span class="comment">#將  "美金 (USD)  美金 (USD)"  切成  "美金 (USD)", 使用str函式相關時要先.str</span></span><br><span class="line">        self.exchangeRate[<span class="string">u'幣別'</span>] = self.exchangeRate[<span class="string">u'幣別'</span>].str.split(<span class="string">' '</span>,<span class="number">2</span>).str[<span class="number">2</span>].str.strip(<span class="string">" "</span>)</span><br><span class="line">        <span class="comment">#exchangeRate加入時間欄位格式化時間為年-月-日 時:分:秒</span></span><br><span class="line">        self.exchangeRate[<span class="string">'資料截取時間'</span>] = datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#將時間欄位轉換成時間格式存放</span></span><br><span class="line">        self.exchangeRate[<span class="string">'資料截取時間'</span>] = pd.to_datetime(self.exchangeRate[<span class="string">'資料截取時間'</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#寫入資料庫</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            self.exchangeRate.to_sql(<span class="string">'exchangeRate'</span>, con = db, if_exists=<span class="string">'replace'</span>, index = <span class="keyword">False</span>) <span class="comment">#增加到資料後方if_exists='append', 整份覆寫if_exists='replace'</span></span><br><span class="line">        <span class="comment">#讀取資料庫</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            df = pd.read_sql_query(<span class="string">'select * from exchangeRate'</span>, con = db)</span><br><span class="line">            </span><br><span class="line">        db.close()</span><br><span class="line">        print(df)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ExchangeRateNotice</span><span class="params">(self, targetCurrency, targetPrice)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            <span class="comment">#取得幣別為"日幣"</span></span><br><span class="line">            df = pd.read_sql_query(<span class="string">r'select * from exchangeRate where "幣別" = "'</span> + targetCurrency + <span class="string">'" order by "資料截取時間" limit 1'</span></span><br><span class="line">                                   , con = db)</span><br><span class="line">        <span class="keyword">if</span>( float(df[<span class="string">u'現金匯率-本行賣出'</span>]) &lt;= targetPrice ):</span><br><span class="line">            <span class="comment">#初始化</span></span><br><span class="line">            self.msg = MIMEMultipart()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#設定寄收信箱帳號</span></span><br><span class="line">            self.senderName = <span class="string">"匯率小幫手"</span></span><br><span class="line">            self.sender = <span class="string">'寄件者信箱@gmail.com'</span></span><br><span class="line">            self.senderPassword = <span class="string">'寄件者密碼'</span></span><br><span class="line">            self.receiver   = <span class="string">'收件者信箱@gmail.com'</span></span><br><span class="line">            self.msg[<span class="string">'From'</span>] = self.senderName</span><br><span class="line">            self.msg[<span class="string">'To'</span>]   = self.receiver</span><br><span class="line">            self.msg[<span class="string">'Subject'</span>] = <span class="string">'[匯率觸價通知]'</span></span><br><span class="line">            </span><br><span class="line">            self.msg.attach(MIMEText(df.to_html(index=<span class="keyword">False</span>), <span class="string">'html'</span>))</span><br><span class="line">            self.msg.attach(MIMEText(<span class="string">"匯率觸價 484該買"</span> + targetCurrency + <span class="string">"啦!!!"</span>, <span class="string">'plain'</span>))</span><br><span class="line">            server = smtplib.SMTP(<span class="string">'smtp.gmail.com'</span>, <span class="number">587</span>)</span><br><span class="line">            server.starttls()</span><br><span class="line">            server.login(self.sender, self.senderPassword)</span><br><span class="line">            text = self.msg.as_string()</span><br><span class="line">            server.sendmail(self.sender, self.receiver, text)</span><br><span class="line">            server.quit()</span><br><span class="line">            tbLog.info(targetCurrency + <span class="string">"匯率觸價 Email 已寄出!"</span>)</span><br><span class="line">            databaseFilePath = <span class="string">"ExchangeRateHelper"</span></span><br><span class="line">            databaseName = <span class="string">"target"</span></span><br><span class="line">            db = DBHandler(databaseFilePath, databaseName)</span><br><span class="line">            tableName = <span class="string">"TARGET"</span></span><br><span class="line">            recordToChange = <span class="string">'"今日是否觸價" = "Y"'</span></span><br><span class="line">            racordToSearch = <span class="string">'"幣別" = '</span> + <span class="string">'"'</span> + targetCurrency + <span class="string">'"'</span></span><br><span class="line">            db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tbLog.info(targetCurrency + <span class="string">"換匯再等等吧!"</span>)</span><br><span class="line">        </span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tbLog = TBLog(<span class="string">"ExchangeRateHelper"</span>)</span><br><span class="line">    tbLog.SetPath(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\'</span>)</span><br><span class="line">    tbLog.info(<span class="string">"***** ExchangeRateHelper Started *****"</span>)</span><br><span class="line">    exchangeRateHelper = ExchangeRateHelper()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果不存在檔案則創建爬取幣別與匯率目標的資料庫</span></span><br><span class="line">    databaseFilePath = <span class="string">"ExchangeRateHelper"</span></span><br><span class="line">    databaseName = <span class="string">"target"</span></span><br><span class="line">    db = DBHandler(databaseFilePath, databaseName)</span><br><span class="line">    db.makeTarget()</span><br><span class="line">    targetCurrency = []</span><br><span class="line">    targetPrice = []</span><br><span class="line">    crawlDate = []</span><br><span class="line">    isTodayTouched = []</span><br><span class="line">    isNeeded = []</span><br><span class="line">    targetCurrency, targetPrice, crawlDate, isTodayTouched= db.readTarget()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#測試換日用</span></span><br><span class="line">    <span class="comment">#date = (datetime.now()+ timedelta(days=2)).strftime('%Y-%m-%d') </span></span><br><span class="line">    date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#爬取台灣銀行匯率</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> targetCurrency:</span><br><span class="line">        tbLog.info(<span class="string">"target is null, please check your database and what you want to observe set Y."</span>)</span><br><span class="line">    <span class="keyword">else</span>:     </span><br><span class="line">        exchangeRateHelper.CrawlExchangeRate(<span class="string">'http://rate.bot.com.tw/xrt?Lang=zh-TW'</span>)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(targetCurrency):</span><br><span class="line">            <span class="keyword">if</span>( crawlDate[i] != date ):</span><br><span class="line">                tableName = <span class="string">"TARGET"</span></span><br><span class="line">                recordToChange = <span class="string">'"今日是否觸價" = "N"'</span></span><br><span class="line">                racordToSearch = <span class="string">'"幣別" = '</span> + <span class="string">'"'</span> + targetCurrency[i] + <span class="string">'"'</span></span><br><span class="line">                db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">            <span class="keyword">if</span>( crawlDate[i] == date <span class="keyword">and</span> isTodayTouched[i] == <span class="string">'Y'</span>):</span><br><span class="line">                tbLog.info(targetCurrency[i] + <span class="string">"匯率觸價, 今日已通知."</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exchangeRateHelper.ExchangeRateNotice( targetCurrency[i], targetPrice[i] )</span><br><span class="line">            </span><br><span class="line">    tbLog.info(<span class="string">"***** ExchangeRateHelper  Closed *****"</span>)</span><br><span class="line">    tbLog.RemoveHandle()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure>
<h2 id="資料庫的設定"><a href="#資料庫的設定" class="headerlink" title="資料庫的設定"></a>資料庫的設定</h2><p>在程式第一次執行時，會自動產出預設的資料庫檔案在”C:\ProgramData\ExchangeHelper”資料夾中，可以下載sqliteStudio或是DBsqlite查看其內容，若是某個幣別不想爬取則把Y改成N反之從N改Y</p>
<h3 id="目標資料庫內容截圖"><a href="#目標資料庫內容截圖" class="headerlink" title="目標資料庫內容截圖"></a>目標資料庫內容截圖</h3><p><img src="https://i.imgur.com/p08582O.png" alt></p>
<h3 id="僅有唯讀權限"><a href="#僅有唯讀權限" class="headerlink" title="僅有唯讀權限"></a>僅有唯讀權限</h3><p>在更改資料庫的時候若出現權限不足，僅有唯讀權限時</p>
<pre><code>針對該資料庫右鍵-&gt;內容-&gt;安全性-&gt;編輯-&gt;Users-&gt;將寫入打勾並確定
</code></pre><p>更改安全性設定後的資料庫便可以改寫囉!</p>
<h2 id="工作排程器"><a href="#工作排程器" class="headerlink" title="工作排程器"></a>工作排程器</h2><p>將匯率小幫手加到電腦的工作排程器中，可以在電腦啟動的時候在排定的時間執行程式幫忙監看匯率，例如:每隔半小時執行一次或是想要執行的頻率或特定時間點執行</p>
<p>可以看我另一篇編寫的<a href="https://teddybearfp.github.io/2019/06/20/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/">工作排程器</a> 了解如何讓我們的匯率小幫手默默為你查看匯率</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.youtube.com/watch?v=Wbk9hxntMjY" target="_blank" rel="noopener">[爬蟲實戰] 如何設定工作排程自動將牌告匯率存進資料庫之中?</a><br><a href="http://qinfei.glrsmart.com/2017/03/08/python-sqlite3-shu-ju-ku-cao-zuo-li-cheng/" target="_blank" rel="noopener">Python Sqlite3 数据库操作例程</a><br><a href="https://kaiching.org/pydoing/py/python-library-sqlite3.html" target="_blank" rel="noopener">Python 速查手冊- 12.6 資料庫sqlite3 - 程式語言教學誌</a><br><a href="https://www.largitdata.com/course/81/" target="_blank" rel="noopener">[爬蟲實戰] 如何撰寫Python爬蟲抓取台灣銀行的牌告匯率? - 大數學堂</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>sqlite3</tag>
        <tag>工作排程器</tag>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>工作排程器</title>
    <url>/2019/06/20/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作排程器可以將我們寫好的程式，在特定時間或是規律的日復一日執行著，例如:網路爬蟲、或是一些重複性的工作內容我們就藉由工作排程器執行我們的程式進而達到目的</p>
<p>但是工作排程器需要開啟電腦才會在背景默默運行，而不像我之前編寫的Linebot<a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">[Python 如何打造專屬的LineBot呢]</a>或是網頁直接架在server上無時無刻的可被喚醒或是持續運作著</p>
<p>那麼這次主要會紀錄這一篇工作排程器是因為另一篇<a href="https://teddybearfp.github.io/2019/06/21/python-%E5%8C%AF%E7%8E%87%E8%A7%B8%E5%83%B9%E9%80%9A%E7%9F%A5%E5%B0%8F%E5%B9%AB%E6%89%8B/#more">Python 匯率觸價通知小幫手</a>純粹想做幾個想法的結合的順便當作練習</p>
<h2 id="工作排程器"><a href="#工作排程器" class="headerlink" title="工作排程器"></a>工作排程器</h2><p>將寫好的程式加到電腦的工作排程器中，可以在電腦啟動的時候在排定的時間執行程式幫忙監看匯率，例如:每隔半小時執行一次或是想要執行的頻率或特定時間點</p>
<h3 id="開啟工作排程器"><a href="#開啟工作排程器" class="headerlink" title="開啟工作排程器"></a>開啟工作排程器</h3><p>首先在windows搜尋內輸入排程便會找到工作排程器</p>
<h3 id="建立工作"><a href="#建立工作" class="headerlink" title="建立工作"></a>建立工作</h3><p>開啟工作排程器接著在右邊動作欄位中選建立工作</p>
<p><img src="https://i.imgur.com/38Nt4lU.png" alt></p>
<h4 id="欄位-一般"><a href="#欄位-一般" class="headerlink" title="欄位:一般"></a>欄位:一般</h4><p>一般欄位輸入工作名稱例如:匯率小幫手，接著勾選”不論使用者登入與否均執行”、”以最高權限執行並”設定選擇Windows 10 or 你的作業系統</p>
<p><img src="https://i.imgur.com/Vf9R2qE.png" alt></p>
<h4 id="欄位-觸發程序"><a href="#欄位-觸發程序" class="headerlink" title="欄位:觸發程序"></a>欄位:觸發程序</h4><p>這邊新增你想要匯率小幫手的執行時間與頻率</p>
<p><img src="https://i.imgur.com/AJO1oiH.png" alt></p>
<h4 id="欄位-動作"><a href="#欄位-動作" class="headerlink" title="欄位:動作"></a>欄位:動作</h4><p>新增動作時選擇啟動程式<br>程式或指令碼輸入: python<br>新增引數: 完整檔案位置<br>並按下確認</p>
<p>例如:<br>程式或指令碼: </p>
<pre><code>python
</code></pre><p>新增引數:</p>
<pre><code>D:\Application\_ExchangeRateHelper\ExchangeRateHelper.py
</code></pre><p>那麼他就會用cmd 下python ExchangeRateHelper.py的動作</p>
<p><img src="https://i.imgur.com/k5xGX9Q.png" alt></p>
<h4 id="欄位-條件"><a href="#欄位-條件" class="headerlink" title="欄位:條件"></a>欄位:條件</h4><p>這部分建議把”只有在電腦是使用AC電源時才啟動這個工作”取消</p>
<p><img src="https://i.imgur.com/LW815Cv.png" alt></p>
<h4 id="欄位-歷程紀錄"><a href="#欄位-歷程紀錄" class="headerlink" title="欄位:歷程紀錄"></a>欄位:歷程紀錄</h4><p>這邊可以查看工作執行的歷史紀錄<br>若是無法查看寫已停用的話在工作排程器左邊欄位”工作排程器程式庫”點擊右鍵”啟用所有工作歷程紀錄”</p>
<h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p><img src="https://i.imgur.com/00uhqH6.png" alt></p>
<h3 id="可能會遇到的問題"><a href="#可能會遇到的問題" class="headerlink" title="可能會遇到的問題"></a>可能會遇到的問題</h3><p>一切都設定好了為什麼時間到沒有動作呢?</p>
<p>可以至你的工作排程中點選右鍵-&gt;內容-&gt;條件<br>看看電源選項是否勾選了”只有在電腦是使用AC電源時才啟動這個工作”<br>若是勾選在沒接Adapter的時候到指定時間就不會執行囉<br>所以解決辦法就是取消勾選這個項目</p>
<p><img src="https://i.imgur.com/LW815Cv.png" alt></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>工作排程器</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM Coding rule小幫手</title>
    <url>/2019/06/17/LLVM-Coding-rule%E5%B0%8F%E5%B9%AB%E6%89%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家一起共同開發專案時必須遵守團隊的coding rule，但是coding rule那麼多有些又跟平常的編寫習慣不同常常忘記，來看看怎麼用LLVM解決這個問題吧，這一篇記錄LLVM底層虛擬機器（Low Level Virtual Machine），LLVM是一個自由軟體專案，它是一種編譯器基礎設施，以C++寫成，包含一系列模組化的編譯器元件和工具鏈，用來開發編譯器前端和後端。</p>
<h2 id="下載LLVM"><a href="#下載LLVM" class="headerlink" title="下載LLVM"></a>下載LLVM</h2><p><a href="http://releases.llvm.org/download.html#8.0.0" target="_blank" rel="noopener">LLVM載點</a><br>載對應的環境位元數</p>
<p><a href="http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-apple-darwin.tar.xz" target="_blank" rel="noopener">macOS (.sig)</a><br><a href="http://releases.llvm.org/8.0.0/LLVM-8.0.0-win32.exe" target="_blank" rel="noopener">Windows (32-bit) (.sig)</a><br><a href="http://releases.llvm.org/8.0.0/LLVM-8.0.0-win64.exe" target="_blank" rel="noopener">Windows (64-bit) (.sig)</a> </p>
<h2 id="安裝LLVM"><a href="#安裝LLVM" class="headerlink" title="安裝LLVM"></a>安裝LLVM</h2><p>開啟LLVM-8.0.0-win64.exe安裝<br>一直按下一步</p>
<h2 id="設定LLVM"><a href="#設定LLVM" class="headerlink" title="設定LLVM"></a>設定LLVM</h2><p>安裝完成後，開啟Qt Creator<br>接著在上方Navigation bar中找尋</p>
<pre><code>Help -&gt; About Plugins -&gt; C++中的Beautiful(experimental)打勾Load
</code></pre><p><img src="https://i.imgur.com/Yd0CkLy.png" alt></p>
<p>勾選完成後重開Qt Creator</p>
<p>在上方Navigation bar</p>
<pre><code>Tool -&gt; Options -&gt; Beautifier中 Clang Format設定ClangFormat command選擇&quot;C:\Program Files (x86)\LLVM\bin\clang-format.exe&quot;
</code></pre><p><img src="https://i.imgur.com/T5FckqH.png" alt></p>
<p>接著並在Options中選擇Use customized style, 新增style<br>內容可以為如下</p>
<pre><code>BasedOnStyle: WebKit
AlignTrailingComments: true
BinPackParameters: true
AlignEscapedNewlines: Left
BreakBeforeBraces: Allman
AllowShortIfStatementsOnASingleLine: true
IndentCaseLabels: true
SpaceAfterCStyleCast: true
SpacesInParentheses: true
SpacesInSquareBrackets: true
SpacesInContainerLiterals: true
SpaceBeforeAssignmentOperators: true
DerivePointerAlignment: true
PointerAlignment: Right
MaxEmptyLinesToKeep: 1
</code></pre><h2 id="觸發LLVM"><a href="#觸發LLVM" class="headerlink" title="觸發LLVM"></a>觸發LLVM</h2><p>觸發LLVM分兩種一種是設為快捷鍵<br>一種是每當儲存時自動執行LLVM</p>
<h3 id="快捷鍵方式設定"><a href="#快捷鍵方式設定" class="headerlink" title="快捷鍵方式設定"></a>快捷鍵方式設定</h3><p>可以至Keyboard的地方找ClangFormat 設定FormatFile的快捷鍵</p>
<p><img src="https://i.imgur.com/MdWX3qI.png" alt></p>
<h3 id="儲存時自動執行設定"><a href="#儲存時自動執行設定" class="headerlink" title="儲存時自動執行設定"></a>儲存時自動執行設定</h3><p><img src="https://i.imgur.com/6G9YEsc.png" alt></p>
<p>以上步驟完成後即使coding rule忘記了，還是可以幫你自動遵守哦!</p>
<p>牛刀小試一下,不好的coding style經過LLVM後自動展開<br><img src="https://i.imgur.com/wjapLkh.png" alt></p>
<p><img src="https://i.imgur.com/CJzhKfI.png" alt></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 取得螢幕寬高</title>
    <url>/2019/05/29/Qt-%E5%8F%96%E5%BE%97%E8%9E%A2%E5%B9%95%E5%AF%AC%E9%AB%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>設計介面的時候，需要掌握螢幕寬高比較好做調整介面大小，這一篇記錄Qt在c++端與qml端分別怎麼取得螢幕寬高</p>
<h2 id="偵測螢幕寬高實作"><a href="#偵測螢幕寬高實作" class="headerlink" title="偵測螢幕寬高實作"></a>偵測螢幕寬高實作</h2><p><strong>我們以1920 * 1080 雙螢幕的環境去做以下螢幕偵測</strong></p>
<h3 id="qml端"><a href="#qml端" class="headerlink" title="qml端"></a>qml端</h3><p>設計UI時都要做個scale來適應各解析度與dpi，這樣在各個環境中都能呈現與開發時一樣的UI介面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">ApplicationWindow  &#123;</span><br><span class="line">    id:application</span><br><span class="line">    property double dpi: Screen.pixelDensity * <span class="number">25.4</span></span><br><span class="line">    property double dpiScale: dpi / <span class="number">72</span><span class="comment">//以dpi 72為base</span></span><br><span class="line">    property double width: Screen.width</span><br><span class="line">    property double height: Screen.height</span><br><span class="line">    property double widthScale: Screen.width / <span class="number">1920</span> <span class="comment">//以寬1920設計介面為base</span></span><br><span class="line">    property double heightScale: Screen.height / <span class="number">1080</span><span class="comment">//以高1080設計介面為base</span></span><br><span class="line">    property double whScale: (Screen.width / <span class="number">1920</span>) / dpiScale</span><br><span class="line">    </span><br><span class="line">    color: <span class="string">"transparent"</span> <span class="comment">//將背景的部分設為透明化</span></span><br><span class="line">    <span class="comment">//無框、置頂、不會取得Focus</span></span><br><span class="line">    flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鍵盤置中</span></span><br><span class="line">    title: qsTr(<span class="string">"Virtual Keyboard"</span>)</span><br><span class="line">    x: <span class="number">0</span></span><br><span class="line">    y: Screen.height - application.height</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: Screen.width</span><br><span class="line">    height: Screen.height / <span class="number">3</span> + ( <span class="number">75</span> * heightScale)</span><br><span class="line">    </span><br><span class="line">    Component.onCompleted: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen width:"</span>,Screen.width)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen height:"</span>,Screen.height)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen pixelDensity:"</span>,Screen.pixelDensity)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen dpi"</span>,Screen.pixelDensity * <span class="number">25.4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的值如下<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Screen width: <span class="number">1920</span></span><br><span class="line">Screen height: <span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//qml的pixelDensity取得到的值為每mm多少pixel</span></span><br><span class="line">Screen pixelDensity: <span class="number">2.8353435141139114</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//轉換成dpi的話要將mm轉成英吋 1inch = 2.54cm, 2.54cm = 25.4mm</span></span><br><span class="line"><span class="comment">//(所以 Screen pixelDensity * 25.4 = Screen dpi)</span></span><br><span class="line"><span class="comment">//dpi在變換螢幕解析度時不太會有變化，在更改螢幕上的文字極其他項目大小100%、125%、150%會有變化</span></span><br><span class="line"><span class="comment">//例如:125%時dpi可能會是72那麼在150%時可能為36所以要做大小轉換要乘上scale</span></span><br><span class="line">Screen dpi <span class="number">72.01772525849334</span></span><br></pre></td></tr></table></figure></p>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDesktopWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QRect&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tester"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Tester::Tester()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> virtualWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> virtualHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> availableWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> availableHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> screenWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> screenHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    QDesktopWidget *deskWgt = QApplication::desktop();</span><br><span class="line">    <span class="keyword">if</span> (deskWgt) &#123;</span><br><span class="line">        virtualWidth = deskWgt-&gt;width();</span><br><span class="line">        virtualHeight = deskWgt-&gt;height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"virtual width:"</span> &lt;&lt; virtualWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; virtualHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        QRect availableRect = deskWgt-&gt;availableGeometry();</span><br><span class="line">        availableWidth = availableRect.width();</span><br><span class="line">        availableHeight = availableRect.height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"available width:"</span> &lt;&lt;availableWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; availableHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        QRect screenRect = deskWgt-&gt;screenGeometry();</span><br><span class="line">        screenWidth = screenRect.width();</span><br><span class="line">        screenHeight = screenRect.height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"screen width:"</span> &lt;&lt;screenWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; screenHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的值如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//virtual width會將雙螢幕的寬高加進去</span></span><br><span class="line"><span class="keyword">virtual</span> width:<span class="number">3840</span>,height:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//available width主畫面的寬高並且扣掉工具列</span></span><br><span class="line">available width:<span class="number">1920</span>,height:<span class="number">1032</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//screen width完整的主畫面的寬高不扣工具列</span></span><br><span class="line">screen width:<span class="number">1920</span>,height:<span class="number">1080</span></span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/ieearth/article/details/43669821" target="_blank" rel="noopener">【QT】在Qt中获取屏幕大小</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>螢幕寬高</tag>
      </tags>
  </entry>
  <entry>
    <title>互斥鎖 (Mutex lock)</title>
    <url>/2019/05/27/%E4%BA%92%E6%96%A5%E9%8E%96-Mutex-lock/</url>
    <content><![CDATA[<h2 id="Mutex-lock實作"><a href="#Mutex-lock實作" class="headerlink" title="Mutex lock實作"></a>Mutex lock實作</h2><p>MutexTester.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TB_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TB_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MutexTester</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doThreadFuction</span><span class="params">()</span></span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex gMutex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TB</span></span></span><br></pre></td></tr></table></figure></p>
<p>MutexTester.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MutexTester::MutexTester()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MutexTester::doThreadFuction()</span><br><span class="line">&#123;</span><br><span class="line">    lock_guard&lt;mutex&gt; mLock( gMutex );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//doSomething...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>互斥鎖</tag>
        <tag>Mutex lock</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt SystemTray implement</title>
    <url>/2019/05/25/Qt-SystemTray-implement/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要實作常駐程式，讓程式不出現在工具列，而是將程式最小化到系統托盤中，並且點擊右鍵可以做喚醒(最大化)與關閉的動作，甚至用另一隻程式透過windows api開啟、最大化或關閉這個系統托盤中的程式，例如:編寫一個程式搭載了我另一篇編寫的虛擬鍵盤<a href="https://teddybearfp.github.io/2018/10/26/Qt-Virtual-Keyboard/">(Qt 如何製作Windows多國輸入法的虛擬鍵盤)</a>，那麼我們的虛擬鍵盤就可以將它編寫成常駐程式由主程式做控制，這篇記錄的是如何在Qt實作這個功能</p>
<p>先來看成果<br>我們的應用程式會在系統托盤出現<br><img src="https://i.imgur.com/TELnHNh.png" alt></p>
<h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p>我們可以將SystemTray寫成一個class使用，與使用QSystemTrayIcon這個class在C++與qml達到系統托盤功能</p>
<h2 id="實作SystemTray"><a href="#實作SystemTray" class="headerlink" title="實作SystemTray"></a>實作SystemTray</h2><h3 id="MySystemTray-pro"><a href="#MySystemTray-pro" class="headerlink" title="MySystemTray.pro"></a>MySystemTray.pro</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">TEMPLATE = app</span><br><span class="line"> </span><br><span class="line">QT += qml quick widgets</span><br><span class="line"> </span><br><span class="line">SOURCES += main.cpp \</span><br><span class="line">    systemtray.cpp</span><br><span class="line"> </span><br><span class="line">RESOURCES += qml.qrc</span><br><span class="line"> </span><br><span class="line"># Additional <span class="keyword">import</span> path used to resolve QML modules in Qt Creator's code model</span><br><span class="line">QML_IMPORT_PATH =</span><br><span class="line"> </span><br><span class="line"># Default rules <span class="keyword">for</span> deployment.</span><br><span class="line">include(deployment.pri)</span><br><span class="line"> </span><br><span class="line">HEADERS += \</span><br><span class="line">    systemtray.h</span><br></pre></td></tr></table></figure>
<h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;systemtray.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"> </span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// We declare and initialize the class object to work with system tray</span></span><br><span class="line">    SystemTray * systemTray = <span class="keyword">new</span> SystemTray();</span><br><span class="line">    QQmlContext * context = engine.rootContext();</span><br><span class="line">    <span class="comment">// Set access to an object of class properties in QML context</span></span><br><span class="line">    context-&gt;setContextProperty(<span class="string">"systemTray"</span>, systemTray);</span><br><span class="line"> </span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="systemtray-h"><a href="#systemtray-h" class="headerlink" title="systemtray.h"></a>systemtray.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SYSTEMTRAY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEMTRAY_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QAction&gt; //用來控制視窗與關閉程式</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt; //系統托盤功能核心</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//繼承QObject</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemTray</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">SystemTray</span><span class="params">(QObject *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//創建信號</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalIconActivated</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalShow</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalQuit</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">//slot會接收從系統托盤中點擊應用程式的事件信號</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">iconActivated</span><span class="params">(QSystemTrayIcon::ActivationReason reason)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideIconTray</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* Declare the object of future applications for the tray icon*/</span></span><br><span class="line">    QSystemTrayIcon *trayIcon;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SYSTEMTRAY_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="systemtray-cpp"><a href="#systemtray-cpp" class="headerlink" title="systemtray.cpp"></a>systemtray.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"systemtray.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenu&gt;</span></span></span><br><span class="line"> </span><br><span class="line">SystemTray::SystemTray(QObject *parent) : QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用QMenu創建擁有最大化與關閉程式兩個選項的菜單</span></span><br><span class="line">    QMenu *trayIconMenu = <span class="keyword">new</span> QMenu();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      QAction類別代表窗口的一個動作，這個動作可顯示在選單，也可在工具欄，</span></span><br><span class="line"><span class="comment">      當使用者點擊工具欄時做出反應，並且兩者所執行的動作一樣顯示的圖標也會同步，</span></span><br><span class="line"><span class="comment">      因此，Qt並沒有專門的選單類或工具欄類，只使用同樣的QAction類別，當我們把QAction對象添加到選單，就顯示成一個選單項，添加到工具欄，就顯示成一個工具按鈕。</span></span><br><span class="line"><span class="comment">      QAction包含了圖標、選單文字、快捷鍵、浮動幫助等等</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//創建開啟視窗QAction</span></span><br><span class="line">    QAction * viewWindow = <span class="keyword">new</span> QAction(trUtf8(<span class="string">"Open TB VirtualKeyboard"</span>), <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//創建結束程式QAction</span></span><br><span class="line">    QAction * quitAction = <span class="keyword">new</span> QAction(trUtf8(<span class="string">"Quit"</span>), <span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line">    viewWindow-&gt;setIcon(QIcon(<span class="string">":/Image/launch.png"</span>));</span><br><span class="line">    quitAction-&gt;setIcon(QIcon(<span class="string">":/Image/close.png"</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//連結信號 操作Menu上的項目時給予Qml適當的信號</span></span><br><span class="line">    connect(viewWindow, &amp;QAction::triggered, <span class="keyword">this</span>, &amp;SystemTray::signalShow);</span><br><span class="line">    connect(quitAction, &amp;QAction::triggered, <span class="keyword">this</span>, &amp;SystemTray::signalQuit);</span><br><span class="line"> </span><br><span class="line">    trayIconMenu-&gt;addAction(viewWindow);</span><br><span class="line">    trayIconMenu-&gt;addAction(quitAction);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//初始化托盤圖標，圖標集，然後指定工具提示</span></span><br><span class="line">    trayIcon = <span class="keyword">new</span> QSystemTrayIcon();</span><br><span class="line">    trayIcon-&gt;setContextMenu(trayIconMenu);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      QIcon除了寫絕對位置外亦可將圖片放置與qrc.qml的相對位置中</span></span><br><span class="line"><span class="comment">      例如:放在qrc.qml檔案旁的Image資料夾中檔名為keyboard.png</span></span><br><span class="line"><span class="comment">      並且在專案中找到qrc點擊右鍵選擇open with-&gt;open plain text將相對位置加入檔案中</span></span><br><span class="line"><span class="comment">      &lt;file&gt;Image/keyboard.png&lt;/file&gt;</span></span><br><span class="line"><span class="comment">      c++中如果要使用嵌入的qrc資源，則要在路徑的前端放置:/</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    trayIcon-&gt;setIcon(QIcon(<span class="string">":/Image/keyboard.png"</span>));</span><br><span class="line">    trayIcon-&gt;show();</span><br><span class="line">    trayIcon-&gt;setToolTip(<span class="string">"TB VirtualKeyboard"</span> <span class="string">"\n"</span></span><br><span class="line">                         <span class="string">"On-Screen Keyboard"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//連結Icon按下後信號觸發行為</span></span><br><span class="line">    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),</span><br><span class="line">            <span class="keyword">this</span>, SLOT(iconActivated(QSystemTrayIcon::ActivationReason)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//處理當系統托盤中Icon被按下後的行為</span></span><br><span class="line"><span class="keyword">void</span> SystemTray::iconActivated(QSystemTrayIcon::ActivationReason reason)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (reason)&#123;</span><br><span class="line">    <span class="keyword">case</span> QSystemTrayIcon::Trigger:</span><br><span class="line">        <span class="comment">// In the case of pressing the signal on the icon tray in the call signal QML layer</span></span><br><span class="line">        <span class="function">emit <span class="title">signalIconActivated</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> SystemTray::hideIconTray()</span><br><span class="line">&#123;</span><br><span class="line">    trayIcon-&gt;hide();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.5</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">1.4</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.0</span></span><br><span class="line"> </span><br><span class="line">ApplicationWindow &#123;</span><br><span class="line">    id: application</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"TB VirtualKeyboard"</span>)</span><br><span class="line"> </span><br><span class="line">    flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Chance to ignore the checkbox</span></span><br><span class="line">    property bool ignoreCheck: <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//連結SystemTray並當signalShow信號觸發時slot onSignalShow將應用程式畫面顯示(最大化)</span></span><br><span class="line">    Connections &#123;</span><br><span class="line">        target: systemTray</span><br><span class="line">        onSignalShow: &#123;</span><br><span class="line">            application.show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//當signalQuit信號觸發時slot onSignalQuit將ignorecheck設為true並將應用程式關閉</span></span><br><span class="line">        onSignalQuit: &#123;</span><br><span class="line">            ignoreCheck = <span class="literal">true</span></span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//點擊托盤圖示最大化或最小化應用程式</span></span><br><span class="line">        onSignalIconActivated: &#123;</span><br><span class="line">             <span class="keyword">if</span>(application.visibility === Window.Hidden) &#123;</span><br><span class="line">                 application.show()</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 application.hide()</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Test check box to control the closing of the window</span></span><br><span class="line">    CheckBox &#123;</span><br><span class="line">        id: checkTray</span><br><span class="line">        anchors.centerIn: parent</span><br><span class="line">        text: qsTr(<span class="string">"Enable minimizing to system tray during the window closing"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 處理視窗被關閉的行為</span></span><br><span class="line">    onClosing: &#123;</span><br><span class="line">        <span class="comment">//如果checkbox不被忽略那麼關閉視窗時都是對應用程式做最小化，相反的當checkbox被忽略則關閉應用程式</span></span><br><span class="line">        <span class="keyword">if</span>(checkTray.checked === <span class="literal">true</span> &amp;&amp; ignoreCheck === <span class="literal">false</span>)&#123;</span><br><span class="line">            close.accepted = <span class="literal">false</span></span><br><span class="line">            application.hide()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Qt.quit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完成圖"><a href="#完成圖" class="headerlink" title="完成圖"></a>完成圖</h2><p><img src="https://i.imgur.com/nSvUN3k.png" alt title="顯示應用程式名稱與提示"></p>
<p><img src="https://i.imgur.com/uy71NNH.png" alt title="點擊右鍵出現菜單選項"></p>
<h2 id="Qt-實用的介面設計技巧"><a href="#Qt-實用的介面設計技巧" class="headerlink" title="Qt 實用的介面設計技巧"></a>Qt 實用的介面設計技巧</h2><p>setWindowFlags(Qt::WindowCloseButtonHint);//只要關閉按鈕<br>Qt::FramelessWindowHint: 沒有邊框的應用程式視窗<br>Qt::WindowStaysOnTopHint: 應用程式永遠在最上面的視窗<br>Qt::X11BypassWindowManagerHint: 隱藏工作列顯示應用程式Icon<br>Qt::WA_ShowWithoutActivating: 不取得Focus</p>
<p>第一種: </p>
<pre><code>clientMainWindow::clientMainWindow(QWidget *parent):QMainWindow(parent) {
    //setWindowFlags(Qt::WindowFlags type) 可以放各種flag
    setWindowFlages(Qt::Tool | Qt::X11BypassWindowManagerHint)
}
</code></pre><p>第二種:</p>
<p>在qml中設定</p>
<pre><code>flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint
</code></pre><h2 id="Icon下載"><a href="#Icon下載" class="headerlink" title="Icon下載"></a>Icon下載</h2><p>對於寫軟體的來說可能美感部分是非常艱困的一個環節，所以必須找個免費且無版權的Icon素材下載網站，那麼我這邊推薦的是<a href="https://material.io/tools/icons/?icon=launch&amp;style=baseline" target="_blank" rel="noopener">Google Icon</a>畫風簡單明瞭又易於下載 讚讚</p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2018/10/26/Qt-Virtual-Keyboard/">Qt 如何製作Windows多國輸入法的虛擬鍵盤</a><br>看看如何編寫一個客製化多國輸入法的虛擬鍵盤</p>
<p><img src="https://i.imgur.com/TAwJE04.png" alt></p>
<p><img src="https://i.imgur.com/GmxzAQ2.png" alt></p>
<h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p>本篇記錄的實作是以下網站兩種方法的第一種方式<br><a href="https://evileg.com/en/post/180/" target="_blank" rel="noopener">QML - Lesson 008. How to work with system tray (QSystemTrayIcon)</a></p>
<p>QAction解析<br><a href="http://monkeycoding.com/?tag=qaction" target="_blank" rel="noopener">QAction | 阿洲的程式教學</a></p>
<p>更多的程式介面設計介紹<br><a href="https://www.itread01.com/content/1549643957.html" target="_blank" rel="noopener">QT常用實用的介面設計技巧</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>系統托盤</tag>
        <tag>SystemTray</tag>
      </tags>
  </entry>
  <entry>
    <title>PyDash 建置</title>
    <url>/2019/04/30/PyDash%E5%BB%BA%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pyDash 是一個輕量且 基於 web 的 linux 性能監測工具 ，它是用 python 和 Django 加上 Chart.js 來編寫的。<br>可以使用這個工具來監視你的 Linux 個人電腦/服務器資源，比如 CPU、內存、網絡統計，包括在線用戶的進程以及更多。儀表盤完全由主要的 Python 發行版本所提供的 Python 庫開發所以不需要額外安裝太多的函式庫，這篇文章記錄如何使用Django建置虛擬環境執行程式碼</p>
<h2 id="建置流程"><a href="#建置流程" class="headerlink" title="建置流程"></a>建置流程</h2><p>1.首先安裝pip<br>    下載<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a><br>    安裝pip</p>
<pre><code>python get-pip.py
</code></pre><p>2.安裝虛擬環境</p>
<pre><code>pip install virtualenv
</code></pre><p>3.下載檔案<br>    <a href="https://gitlab.com/k3oni/pydash" target="_blank" rel="noopener">https://gitlab.com/k3oni/pydash</a><br>    下載檔案或是git下來</p>
<pre><code>git clone https://github.com/k3oni/pydash.git
</code></pre><p>並切換到當層路徑</p>
<pre><code>cd pydash
</code></pre><p>4.創建虛擬環境<br>    取名為pydashtest(可任意命名)</p>
<pre><code>virtualenv pydashtest
</code></pre><p>5.激活虛擬環境<br>    切換到剛剛創建的虛擬環境pydashtest資料夾中的Scripts啟動</p>
<pre><code>activate
</code></pre><p>輸入成功會命令提示字元指令最前方會出現虛擬環境名稱例如:(pydashtest)</p>
<p><img src="https://i.imgur.com/jaKo0vb.png" alt></p>
<p>6.安裝所需函式庫<br>    切換到與requirements.txt同一層中執行以下指令(以這個pydash來說僅需要另外安裝django==1.6.8)</p>
<pre><code>pip install -r requirements.txt
</code></pre><p>7.進入pydash資料夾中將settings.py檔案中的SECRET_KEY設定密鑰存取並退出</p>
<p><img src="https://i.imgur.com/olpy66E.png" alt></p>
<p>8.創建資料庫與身分驗證(輸入信箱與密碼)</p>
<pre><code>python manage.py syncdb
</code></pre><p><img src="https://i.imgur.com/xAWxyv1.png" alt></p>
<p>9.執行 Django 開發服務器<br>    python manage.py runserver<br>    若出現一些錯誤訊息可能是缺少一些函式庫<br>    那麼我們只要安裝缺少的函式庫即可</p>
<pre><code>例如:pip install keras
</code></pre><p>一直重複執行python manage.py runserver直到沒有缺少函式庫</p>
<pre><code>from django.conf.urls import patterns, url
ImportError: cannot import name &apos;patterns&apos;
出現上面這個問題的話解決辦法是呼叫下列指令
pip install Django==1.8
</code></pre><p>出現以下畫面代表正確</p>
<p><img src="https://i.imgur.com/z7uWs6S.png" alt></p>
<p>10.登入<br>    接著打開瀏覽器輸入網址<br>    <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a><br>    (特別注意:第一格是輸入Username不是信箱帳號)</p>
<p><img src="https://i.imgur.com/JHlINId.png" alt></p>
<p>登入成功後觀看數據囉</p>
<p><img src="https://i.imgur.com/5mzyqbE.png" alt></p>
<p>結束runserver</p>
<pre><code>Ctrl+C
</code></pre><p>離開虛擬環境</p>
<pre><code>deactivate
</code></pre><p>__init__.py 用來告訴Python這個資料夾是一個模組，裡面通常是空的，不過也可以寫一些程式碼在裡面。<br>manage.py 用來操作整個Django專案的小工具，例如啟動伺服器python manage.py runserver，或是同步資料庫python manage.py syncdb<br>settings.py 設定檔<br>urls.py 負責網站的路由。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://kknews.cc/zh-tw/other/92rgx6b.html[]" target="_blank" rel="noopener">pyDash：一個基於 web 的 Linux 性能監測工具</a><br><a href="https://kaochenlong.com/2011/10/18/django-your-first-django-project/" target="_blank" rel="noopener">開始你的第一個專案| 高見龍</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PyDash</tag>
      </tags>
  </entry>
  <entry>
    <title>Python logger</title>
    <url>/2019/04/28/Python-logger/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近開始要編寫Python程式碼，上一篇<a href="https://teddybearfp.github.io/2019/04/08/C-logger/#more">C Logger</a>幫助我開發與維護程式覺得十分好用，更確定Logger是編寫程式碼的必備品，所以也想要在Python開發時也能有一隻良好的Logger幫忙紀錄日誌，了解使用者的行為，這一篇就來記錄如何做出我們Python版本的Logger吧!</p>
<p>先來看成果吧</p>
<p><img src="https://i.imgur.com/WXfItPR.png" alt></p>
<p>Log訊息組成:</p>
<pre><code>年-月-日 時:分:秒,毫秒 [Log層級] 使用者: 函式名稱 Log訊息 [執行緒名稱]
</code></pre><h2 id="TBLogger"><a href="#TBLogger" class="headerlink" title="TBLogger"></a>TBLogger</h2><p>TBLogger記錄了時間、Log層級、使用者、函式名稱、Log訊息與執行緒名稱同時亦會寫檔儲存</p>
<p>備註:此段程式碼出處為<a href="http://yhhuang1966.blogspot.com/2018/04/python-logging_24.html" target="_blank" rel="noopener">小狐狸事務所Python 學習筆記 : 日誌 (logging) 模組測試</a><br>將其稍作改寫</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBLog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">        <span class="comment">#如果資料夾不存在則創建資料夾</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">            os.mkdir(path)</span><br><span class="line">        self.user = getpass.getuser()</span><br><span class="line">        self.logger = logging.getLogger(self.user)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        format = <span class="string">'%(asctime)s [%(threadName)s][%(levelname)s] %(name)s : %(funcName)s() %(message)s'</span></span><br><span class="line">        self.formatter = logging.Formatter(format)</span><br><span class="line">        self.streamhandler = logging.StreamHandler()</span><br><span class="line">        self.streamhandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.streamhandler)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetPath</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        logfile = path + self.user + <span class="string">'.log'</span></span><br><span class="line">        self.filehandler = logging.FileHandler(logfile)</span><br><span class="line">        self.filehandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.filehandler)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.error(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, level, msg)</span>:</span></span><br><span class="line">        self.logger.log(level, msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLevel</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disable</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.disable(<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.logger.removeHandler(self.streamhandler)</span><br><span class="line">        self.logger.removeHandler(self.filehandler)</span><br><span class="line">        self.streamhandler.flush()</span><br><span class="line">        self.filehandler.flush()</span><br><span class="line">        self.streamhandler.close()</span><br><span class="line">        self.filehandler.close()</span><br></pre></td></tr></table></figure>
<h2 id="Test-py"><a href="#Test-py" class="headerlink" title="Test.py"></a>Test.py</h2><p>在其他專案中導入TBLogger</p>
<p>例如:Test.py中可以將TBLogger.py導入</p>
<pre><code>from TBLogger import TBLog
</code></pre><p>Implement TBLog class<br>先設定Log檔案儲存路徑並且在最後用完時要把handle移除,否則持續使用會出現重複的Log</p>
<pre><code>tbLog = TBLog(&quot;FolderName&quot;)
tbLog.SetPath(&apos;C:\\ProgramData\\FolderName\\&apos;)
tbLog.info(&quot;***** Project Started *****&quot;)

tbLog.info(&quot;***** Project  Closed *****&quot;)
tbLog.Close()
</code></pre><p>Python Console</p>
<p><img src="https://i.imgur.com/QbUelH4.png" alt></p>
<p>亦可在程式執行與結束分別編寫Log訊息表示</p>
<p><img src="https://i.imgur.com/Oou9VAR.png" alt></p>
<p>這就是我要的Logger</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://yhhuang1966.blogspot.com/2018/04/python-logging_24.html" target="_blank" rel="noopener">小狐狸事務所Python 學習筆記 : 日誌 (logging) 模組測試</a><br><a href="https://stackoverflow.max-everyday.com/2017/10/python-logging/" target="_blank" rel="noopener">[Python] logging 教學– Max的程式語言筆記</a><br><a href="https://javawithravi.com/how-to-display-thread-id-in-python-logs/" target="_blank" rel="noopener">How to display thread id in python logs</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Logger</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm安裝與Anaconda使用</title>
    <url>/2019/04/26/PyCharm-%E5%AE%89%E8%A3%9D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安裝編譯環境是個非常重要的環節，好的開始是成功的一半，若是能順利安裝並編譯出自己的第一支程式是個讓人興奮的事情，這邊紀錄一下Python安裝與PyCharm安裝過程與Anaconda使用方式</p>
<p>本篇安裝環境為<br>Python 3.6.7(64bits)<br>PyCharm 2019.01.01<br>Anaconda 2019.03 Python 3.7 version</p>
<h2 id="Python-安裝"><a href="#Python-安裝" class="headerlink" title="Python 安裝"></a>Python 安裝</h2><h3 id="Python-2-vs-Python-3"><a href="#Python-2-vs-Python-3" class="headerlink" title="Python 2 vs Python 3"></a>Python 2 vs Python 3</h3><ul>
<li>print 語法差異</li>
<li>整數相除python2為整數,python3為浮點數</li>
<li>型態比較python2型態比較可以不同型態,python3會提醒型態錯誤</li>
<li>python3幾乎支援並相容所有函式庫</li>
<li>python3支援Unicode字符串</li>
<li><p>python3的xrange執行是比python2慢的</p>
<p>  長期遠觀來說應該選擇python3</p>
</li>
</ul>
<h3 id="Python-3-install"><a href="#Python-3-install" class="headerlink" title="Python 3 install"></a>Python 3 install</h3><p>首先要先安裝Python再去安裝編譯環境<br><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Python安裝(Windows)</a><br><a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener">Python安裝(MacOSX)</a></p>
<p>電腦如果是64位元的話就要下載64bits的版本</p>
<p><img src="https://i.imgur.com/GeZeEJt.png" alt></p>
<p>安裝時將add to path打勾，這樣便會自動新增環境變數</p>
<h2 id="PyCharm-安裝"><a href="#PyCharm-安裝" class="headerlink" title="PyCharm 安裝"></a>PyCharm 安裝</h2><p>PyCharm是一個用於計算機編程的集成開發環境（IDE），主要用於Python語言開發，由捷克公司JetBrains開發，提供代碼分析、圖形化調試器，集成測試器、集成版本控制系統，並支持使用Django進行網頁開發。</p>
<h3 id="好用IDE推薦"><a href="#好用IDE推薦" class="headerlink" title="好用IDE推薦"></a>好用IDE推薦</h3><ul>
<li>PyCharm<pre><code>1.有非常好的除錯器
2.可以方便的處理虛擬環境
3.良好的介面環境
4.免費
</code></pre></li>
<li>JupyterNotebook<br>  簡潔的介面<br>  方便的快捷鍵<br>  之前我都使用jupyter編寫爬蟲與畫圖執行非常方便 大推!</li>
</ul>
<h3 id="PyCharm-安裝-1"><a href="#PyCharm-安裝-1" class="headerlink" title="PyCharm 安裝"></a>PyCharm 安裝</h3><p><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">Pycharm下載</a></p>
<p><img src="https://i.imgur.com/Q5dJhNp.png" alt><br>沒有特別購買的話就下載右邊的Community版本</p>
<p>下載完畢後開啟安裝檔</p>
<ul>
<li>64-bits若電腦是64位元的安裝時務必勾選</li>
<li>.py association這一項勾選的意思是以後python檔案皆由PyCharm開啟</li>
</ul>
<p>精美的開啟畫面</p>
<p><img src="https://i.imgur.com/i0jhGu9.png" alt></p>
<p><img src="https://i.imgur.com/0SdWmAE.png" alt></p>
<p>剛進入PyCharm時，字體非常的小，我平常連手機都用特大字型這樣看很不習慣<br>那麼我們到Setting裡面找尋Font去設定<br><img src="https://i.imgur.com/EWTITRt.png" alt><br>我是將字型大小調到20</p>
<p>在介面上看起來的大小<br><img src="https://i.imgur.com/IpqviDP.png" alt></p>
<p>此時雖然安裝好了開啟新專案但是我們的Interpreter設定尚未完全<br>我們來繼續往下看如何使用Anaconda管理我們的Interpreter吧!</p>
<h2 id="Anaconda-安裝與使用"><a href="#Anaconda-安裝與使用" class="headerlink" title="Anaconda 安裝與使用"></a>Anaconda 安裝與使用</h2><h3 id="Python專案環境選擇"><a href="#Python專案環境選擇" class="headerlink" title="Python專案環境選擇"></a>Python專案環境選擇</h3><ul>
<li>Anaconda易於管理便於更新</li>
</ul>
<p><a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">Anaconda下載</a></p>
<p><img src="https://i.imgur.com/JfOWMKX.png" alt></p>
<h3 id="Anaconda用法"><a href="#Anaconda用法" class="headerlink" title="Anaconda用法"></a>Anaconda用法</h3><p>Anaconda用法其實跟python的virtualenv用法類似</p>
<h4 id="執行Anaconda-prompt"><a href="#執行Anaconda-prompt" class="headerlink" title="執行Anaconda prompt"></a>執行Anaconda prompt</h4><pre><code>conda create -n myenv python=3.6 packages
    #myenv環境名稱可以自己取
    #packages可以自行添增例如numpy=1.7 matplotlib
    #python=3.6是選擇interpreter版本
conda create -n myenv python=3.6 numpy pandas matplotlib pip
</code></pre><h4 id="啟動虛擬環境"><a href="#啟動虛擬環境" class="headerlink" title="啟動虛擬環境"></a>啟動虛擬環境</h4><pre><code>activate myenv
</code></pre><p>啟動成功在最前方的()內會變成虛擬環境的名稱<br><img src="https://i.imgur.com/yjTfgR8.png" alt></p>
<h4 id="檢測環境-用來看目前創建了幾個虛擬環境"><a href="#檢測環境-用來看目前創建了幾個虛擬環境" class="headerlink" title="檢測環境(用來看目前創建了幾個虛擬環境)"></a>檢測環境(用來看目前創建了幾個虛擬環境)</h4><pre><code>conda env list
</code></pre><p><img src="https://i.imgur.com/tkCe7xx.png" alt></p>
<h4 id="檢測當下虛擬環境的packages"><a href="#檢測當下虛擬環境的packages" class="headerlink" title="檢測當下虛擬環境的packages"></a>檢測當下虛擬環境的packages</h4><pre><code>conda list -n myenv
若是activate狀態則
conda list即可
</code></pre><h4 id="安裝環境的packages"><a href="#安裝環境的packages" class="headerlink" title="安裝環境的packages"></a>安裝環境的packages</h4><pre><code>conda install -n myenv pip
activate myenv
pip install SomePackage

ex:
    conda install -n myenv pip  #在虛擬環境安裝pip裝完後才能裝其他缺少的函式庫(若虛擬環境已有安裝則可以省略)
    activate myenv  #啟動虛擬環境
    pip install numpy pandas tensorflow keras opencv-python 
</code></pre><h4 id="關閉環境"><a href="#關閉環境" class="headerlink" title="關閉環境"></a>關閉環境</h4><pre><code>deactive
</code></pre><p>那麼完成後PyCharm便可以在Interpreter中找到剛剛設置的虛擬環境達到函式庫的更新與管理</p>
<pre><code>在Setting &gt; Project Interpreter去做設定
</code></pre><p><img src="https://i.imgur.com/pMSqzVK.png" alt></p>
<pre><code>選擇設定 &gt; 勾選Existing environment
</code></pre><p><img src="https://i.imgur.com/22MFEhi.png" alt></p>
<p>按下Run沒出現異常 exit code 0 大功告成拉~<br>可以開始編寫程式碼</p>
<p><img src="https://i.imgur.com/eSNdhIc.png" alt></p>
<p>下次再紀錄陪伴我最久的jupyter notebook~</p>
<p>參考資料:<br><a href="https://zh.wikipedia.org/zh-tw/PyCharm" target="_blank" rel="noopener">PyCharm - 維基百科，自由的百科全書 - Wikipedia</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PyCharm</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>C logger</title>
    <url>/2019/04/08/C-logger/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>編寫專案時，除了直接印出訊息來驗證與除錯之外，我們還需要LOG幫助我們維護程式，這一篇完整記錄了我編寫的LOG動態函式庫寫法與使用方式，LOG會顯示時間戳記(毫秒)、LOG層級、ThreadID、LOG訊息，讓我們來看看實作流程吧!</p>
<h2 id="顯示內容"><a href="#顯示內容" class="headerlink" title="顯示內容"></a>顯示內容</h2><p>先來看看成果</p>
<pre><code>//組成方式為(年-月-日 時:分:秒.毫秒),Log層級,ThreadID,類別名稱::函式名稱() 輸出訊息
2019-04-09 10:08:08.337,[DEBUG],ThreadID:5140,Device::MotorMove() motorYStep:10.5
2019-04-09 10:08:08.339,[DEBUG],ThreadID:5876,I&apos;m Polling thread!
2019-04-09 10:08:08.339,[TRACE],ThreadID:5876,Device::SetOffSetValue() SetOffSetValue:7
</code></pre><p>透過上面記錄的方式可以清楚掌握程式狀況讓我們來看看如何實作Logger吧!</p>
<h2 id="stdarg-h"><a href="#stdarg-h" class="headerlink" title="stdarg.h"></a>stdarg.h</h2><p>stdarg.h 是C語言中C標準函式庫的標頭檔<br>我們透過stdarg.h主要目的是讓函式能夠接收不定量參數</p>
<p>va_list: 宣告一個指標，讓它指向引數串列。<br>va_start: 初始化這個指標，讓它真正指向正確的引數串列開頭。<br>va_arg: 來取得va_list中的資料。<br>va_end: 清除這個指標，把它設為NULL。範例如下：<br>va_copy: 拷貝va_list的內容</p>
<p>不定參數函式的參數數量是可變動的，它使用省略號來忽略之後的參數。例如printf函式一般。宣告方式如下:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">char</span> *b, ...)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="vprintf"><a href="#vprintf" class="headerlink" title="vprintf"></a>vprintf</h2><p>其他由不定參數函式呼叫的函式<br>透過下面範例了解一下stdarg搭配vprintf的用法<br>參考vprintf - C++ Reference - Cplusplus.com<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* vprintf example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteFormatted</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * format, ... )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  va_list args;</span><br><span class="line">  va_start (args, format);</span><br><span class="line">  <span class="built_in">vprintf</span> (format, args);</span><br><span class="line">  va_end (args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   WriteFormatted (<span class="string">"Call with %d variable argument.\n"</span>,<span class="number">1</span>);</span><br><span class="line">   WriteFormatted (<span class="string">"Call with %d variable %s.\n"</span>,<span class="number">2</span>,<span class="string">"arguments"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>輸出<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Call with <span class="number">1</span> variable argument.</span><br><span class="line">Call with <span class="number">2</span> variable arguments.</span><br></pre></td></tr></table></figure></p>
<p>看完上面用法是不是跟printf用法十分相似呢</p>
<p>沒錯所以我們來編寫一個LOG函式呼叫方式跟printf類似卻能達到我們要的LOG效果</p>
<h2 id="Log分級"><a href="#Log分級" class="headerlink" title="Log分級"></a>Log分級</h2><p>我的TBLog分為八個層級以下是我目前理解的層級定義:</p>
<p>ALL     所有的層級。<br>TRACE     比 DEBUG 層級更細膩的事件訊息<br>DEBUG     細膩的事件訊息，開發中對開發與除錯有幫助。在正式運行一般不輸出<br>INFO     描述訊息，描述程式運行過程。<br>WARN     表示有潛在的危險狀況<br>ERROR     表示發生錯誤事件，但程式可能還能運行。<br>FATAL     表示發生非常嚴重錯誤事件，可能會導致程式終止。<br>OFF     最高级别，用來關閉LOGGER訊息日誌。</p>
<h2 id="創建TBLog-dll"><a href="#創建TBLog-dll" class="headerlink" title="創建TBLog.dll"></a>創建TBLog.dll</h2><p>先在專案new subproject中選擇library新增</p>
<h2 id="TBLog-pro"><a href="#TBLog-pro" class="headerlink" title="TBLog.pro"></a>TBLog.pro</h2><p>可以加入下面兩句指令，讓dll檔產出在與執行檔同一層<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Debug:DESTDIR = ../(你的專案名稱)/debug</span><br><span class="line">Release:DESTDIR = ../(你的專案名稱)/release</span><br></pre></td></tr></table></figure></p>
<h2 id="TBLog-h"><a href="#TBLog-h" class="headerlink" title="TBLog.h"></a>TBLog.h</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma once是一個非標準但是被廣泛支援的前置處理符號，會讓所在的檔案在一個單獨的編譯中只被包含一次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBLOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBLOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TBLOG_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport) <span class="comment">//使用 __declspec(dllexport) 從 DLL 匯出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//設置LOG層級 將層級分為六級</span></span><br><span class="line"><span class="keyword">enum</span> LogLevels</span><br><span class="line">&#123;</span><br><span class="line">    LOGALL,</span><br><span class="line">    LOGTRACE,</span><br><span class="line">    LOGDEBUG,</span><br><span class="line">    LOGINFO,</span><br><span class="line">    LOGWARN,</span><br><span class="line">    LOGERROR,</span><br><span class="line">    LOGFATAL,</span><br><span class="line">    LOGOFF</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同要求取得不同時間的格式</span></span><br><span class="line"><span class="keyword">enum</span> RequestType</span><br><span class="line">&#123;</span><br><span class="line">    LogTimeStamp,</span><br><span class="line">    LogFileName</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogPath</span><span class="params">(<span class="keyword">char</span> *path)</span></span>; <span class="comment">//給上層設置路徑用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level = LOGINFO)</span></span>; <span class="comment">//將LOGLEVEL閥值預設為LOGINFO,表示LOGINFO以上的層級才會顯示與寫檔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">MyLog</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">char</span>* message, ...)</span></span>; <span class="comment">//不定參數函式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TBLOG_H</span></span></span><br></pre></td></tr></table></figure>
<h2 id="TBLog-cpp"><a href="#TBLog-cpp" class="headerlink" title="TBLog.cpp"></a>TBLog.cpp</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tblog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; //printf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt; //va_list, va_arg, va_start, va_end</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;    //取得時間</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; //取得時間</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt; //_access</span></span></span><br><span class="line"></span><br><span class="line">LogLevels logThreshold; <span class="comment">//用來當LOGLEVEL的Filter</span></span><br><span class="line"><span class="keyword">char</span> folderPath[<span class="number">200</span>];   <span class="comment">//資料夾位置</span></span><br><span class="line"><span class="keyword">char</span> filePath[<span class="number">200</span>];     <span class="comment">//LOG檔案路徑</span></span><br><span class="line"><span class="keyword">bool</span> isFirst = <span class="literal">true</span>;    <span class="comment">//第一次進來時初始化值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//LOGLEVEL的Filter</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">GetLogLevel</span><span class="params">(<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//inline行內函式只能建議編譯器，也就是說建議並不一定會被採納，這視您的編譯器而定</span></span><br><span class="line"><span class="comment">//如果建議被採納，則該函式會自動在呼叫點展開程式碼</span></span><br><span class="line">    <span class="keyword">switch</span>(level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//由輕微到嚴重分級</span></span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGTRACE: <span class="keyword">return</span> <span class="string">"[TRACE]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGDEBUG: <span class="keyword">return</span> <span class="string">"[DEBUG]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGINFO:  <span class="keyword">return</span> <span class="string">"[INFO ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGWARN:  <span class="keyword">return</span> <span class="string">"[WARN ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGERROR: <span class="keyword">return</span> <span class="string">"[ERROR]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGFATAL: <span class="keyword">return</span> <span class="string">"[FATAL]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得時間(依照傳進的參數分別回傳檔案年月或是LOG時間戳記)</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">GetTime</span><span class="params">(RequestType request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化char[]</span></span><br><span class="line">    <span class="keyword">char</span> currentTime[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(currentTime, <span class="number">0</span>, <span class="keyword">sizeof</span>(currentTime));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//C取得現在時間,但是C的取得時間方式僅能取到秒,並無法得到毫秒</span></span><br><span class="line">    <span class="keyword">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//毫秒我們用SYSTEMTIME取得</span></span><br><span class="line">    SYSTEMTIME time;</span><br><span class="line">    GetSystemTime(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得毫秒</span></span><br><span class="line">    <span class="keyword">char</span> ms[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> time_ms = time.wMilliseconds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面這段回傳時間格式為2019-04-08 17:15:11.703</span></span><br><span class="line">    <span class="keyword">if</span>(request == LogTimeStamp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//%F 等於 %Y-%m-%d, %T 等於 %H:%M:%S</span></span><br><span class="line">        strftime(currentTime, <span class="number">30</span>, <span class="string">"%F %T"</span>, localtime(&amp;now));</span><br><span class="line">        <span class="comment">//使用 sprintf() 將數字轉成字串 </span></span><br><span class="line">        <span class="built_in">sprintf</span>(ms, <span class="string">"%03d"</span>, time_ms);<span class="comment">//用0將數字填滿三位數例如:7會變成007</span></span><br><span class="line">        <span class="built_in">strcat</span>(currentTime, <span class="string">"."</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(currentTime, ms);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面這段回傳時間格式為201904</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        strftime(currentTime, <span class="number">30</span>, <span class="string">"%Y%m"</span>, localtime(&amp;now));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一種路徑:固定的路徑(不推薦)</span></span><br><span class="line"><span class="comment">// void Initial()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     isFirst = false;</span></span><br><span class="line"><span class="comment">//     //取得年月來當LOG檔名</span></span><br><span class="line"><span class="comment">//     char *date = GetTime(LogFileName);</span></span><br><span class="line"><span class="comment">//     strcat(filePath,"D:\\TBLog\\TBLog_");</span></span><br><span class="line"><span class="comment">//     strcat(filePath, date);</span></span><br><span class="line"><span class="comment">//     strcat(filePath, ".txt");</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二種路徑:開放給上層設置的路徑</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogPath</span><span class="params">(<span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>( folderPath, path, <span class="keyword">sizeof</span>(folderPath) );</span><br><span class="line">    <span class="built_in">memcpy</span>( filePath, folderPath, <span class="keyword">sizeof</span>(filePath) );</span><br><span class="line">    <span class="keyword">char</span> *date = GetTime(LogFileName);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, <span class="string">"\\TBLog_"</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, date);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, <span class="string">".txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//設定閥值</span></span><br><span class="line">    logThreshold = level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">MyLog</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一次使用時設定固定路徑(不推薦)</span></span><br><span class="line">    <span class="comment">//if(isFirst)</span></span><br><span class="line">        <span class="comment">//Initial();</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//or使用上層設定的路徑若沒設路徑則不寫入   </span></span><br><span class="line">    <span class="keyword">if</span>(filePath[<span class="number">0</span>] == <span class="string">'\0'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> message[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message, <span class="number">0</span>, <span class="keyword">sizeof</span>(message));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> message2[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message2, <span class="number">0</span>, <span class="keyword">sizeof</span>(message2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//檢測LOG層級,如果跟LOGDEBUG同級或是更高級就在console log顯示</span></span><br><span class="line">    <span class="keyword">if</span>(level &gt;= LOGDEBUG)</span><br><span class="line">    &#123;</span><br><span class="line">        FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//C語言用來檢查檔案是否存在的寫法</span></span><br><span class="line">        <span class="keyword">if</span>((_access(folderPath, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( _mkdir( folderPath ) == <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"File"</span>,folderPath,<span class="string">"add!\n"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"Can't add File"</span>,folderPath,<span class="string">"\n"</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        strcat_s(message, GetTime(LogTimeStamp));</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line">        strcat_s(message, GetLogLevel(level));</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得執行緒</span></span><br><span class="line">        <span class="keyword">int</span> threadID = GetCurrentThreadId(); </span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">20</span>];</span><br><span class="line">        <span class="comment">//將int轉char[]</span></span><br><span class="line">        <span class="built_in">sprintf</span>(buffer, <span class="string">"%d"</span>, threadID);</span><br><span class="line"></span><br><span class="line">        strcat_s(message, <span class="string">"ThreadID:"</span>);</span><br><span class="line">        strcat_s(message, buffer);</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line">        strcat_s(message, fmt);</span><br><span class="line"></span><br><span class="line">        va_list args; <span class="comment">//用來儲存宏va_arg與宏va_end所需資訊</span></span><br><span class="line">        va_start (args, fmt); <span class="comment">//使va_list指向起始的參數</span></span><br><span class="line">        <span class="built_in">vprintf</span> (message, args);    <span class="comment">//Console logging(印在IDE console log顯示)</span></span><br><span class="line">        strcat_s(message, <span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int fprintf(FILE *stream, const char *format, ...),stdout也是個文檔，把資料輸出到stdout</span></span><br><span class="line">        <span class="built_in">fprintf</span>( <span class="built_in">stdout</span>, <span class="string">"\n"</span>); <span class="comment">//在message結尾加上\n 這樣使用者就不用再加上\n</span></span><br><span class="line">        <span class="built_in">vsprintf</span>(message2, message, args); <span class="comment">//File logging(save message and write file)</span></span><br><span class="line">        va_end (args); <span class="comment">//釋放va_list</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(level &gt;= logThreshold)<span class="comment">//檢測LOG層級,如果跟LOGDEBUG同級或是更高級就寫檔</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//LOG會編寫在D:\\TBLog資料夾中檔名為TBLog_年月.txt,若有同個月分的則不創建新的txt檔案繼續編寫</span></span><br><span class="line">            fp=fopen(filePath,<span class="string">"a"</span>);<span class="comment">//"a"表示檔案存在的話直接接續寫檔，"w"表示檔案存在的話覆寫</span></span><br><span class="line">            <span class="built_in">fprintf</span>(fp,<span class="string">"%s"</span>,message2);<span class="comment">//寫檔</span></span><br><span class="line">            fclose(fp);<span class="comment">//關閉檔案</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因為printf是緩衝輸出，我們透過fflush達到即時輸出</span></span><br><span class="line">        <span class="comment">//flush(stdin)刷新標準輸入緩衝區，把輸入緩衝區裡的東西丟棄  </span></span><br><span class="line">        fflush(<span class="built_in">stdout</span>) <span class="comment">//刷新標準輸出緩衝區，把輸出緩衝區裡的東西打印到標準輸出設備上。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h2><p>先在使用的pro檔中導入TBLog.dll的library<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/release/ -lTBLog</span><br><span class="line"><span class="keyword">else</span>:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/debug/ -lTBLog</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += $$PWD/../TBLog</span><br><span class="line">DEPENDPATH += $$PWD/../TBLog</span><br></pre></td></tr></table></figure></p>
<p>接著導入完成後在使用的檔案中include標頭檔<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../TBLog/tblog.h"</span></span></span><br></pre></td></tr></table></figure></p>
<p>開始使用<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//設定存放Log的路徑位置</span></span><br><span class="line"><span class="keyword">char</span> folderPath[<span class="number">200</span>] = <span class="string">"D:\\TBLog"</span>;</span><br><span class="line">SetLogPath(folderPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定LOGLEVEL閥值若未設定只顯示LOGINFO以上的層級</span></span><br><span class="line">SetLogLevel(LOGINFO);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用MyLog方法跟printf一樣只是不用加上\n,在結尾會由Logger加上,層級低於LOGINFO不顯示、不寫入</span></span><br><span class="line">MyLog(LOGDEBUG,<span class="string">"%s"</span>, <span class="string">"SONGLAAAA"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用MyLog方法跟printf一樣只是不用加上\n,在結尾會由Logger加上,層級大於等於LOGINFO顯示並寫入</span></span><br><span class="line">MyLog(LOGINFO,<span class="string">"Introduce(), Hello my name is %s."</span>,<span class="string">"TeddyBear"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">輸出結果如下:</span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.337</span>,[DEBUG],ThreadID:<span class="number">5140</span>,Device::MotorLongRun() motorYStep:<span class="number">10.5</span></span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.339</span>,[DEBUG],ThreadID:<span class="number">5876</span>,I'm Polling thread!</span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.339</span>,[TRACE],ThreadID:<span class="number">5876</span>,Device::SetOffSetValue() SetOffSetValue:<span class="number">7</span></span><br><span class="line"></span><br><span class="line">使用方式如同<span class="built_in">printf</span>差異僅在於第一個參數先填上LOG層級,再輸入訊息內容,訊息內容目前定義為必須先輸入類別名稱::函式名稱() 再輸出訊息統一使用利於除錯</span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"Device::MotorLongRun() motorYStep:%.1f\n"</span>,motorYStep); <span class="comment">//取到浮點數小數位第一位</span></span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"I'm Polling thread!\n"</span>);</span><br><span class="line">    Logger(LOGTRACE,<span class="string">"Device::SetOffSetValue() OffSetValue:%d\n"</span>,SetOffSetValue);   <span class="comment">//%d整數</span></span><br></pre></td></tr></table></figure></p>
<h2 id="支援Unicode的Logger實作"><a href="#支援Unicode的Logger實作" class="headerlink" title="支援Unicode的Logger實作"></a>支援Unicode的Logger實作</h2><p>可以記錄各國語言Logger<br>我們用wchar_t寬字元來實作<br>先看成果</p>
<p><img src="https://i.imgur.com/AlYR7zz.png" alt></p>
<p>來看看如何達成吧!</p>
<h3 id="TBLog-h-1"><a href="#TBLog-h-1" class="headerlink" title="TBLog.h"></a>TBLog.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBLOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBLOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TBLOG_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> LogLevels</span><br><span class="line">&#123;</span><br><span class="line">    LOGALL,</span><br><span class="line">    LOGTRACE,</span><br><span class="line">    LOGDEBUG,</span><br><span class="line">    LOGINFO,</span><br><span class="line">    LOGWARN,</span><br><span class="line">    LOGERROR,</span><br><span class="line">    LOGFATAL,</span><br><span class="line">    LOGOFF</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> RequestType</span><br><span class="line">&#123;</span><br><span class="line">    LogTimeStamp,</span><br><span class="line">    LogFileName</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level = LOGINFO)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">Logger</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">wchar_t</span>* message, ...)</span></span>; <span class="comment">//w</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TBLOG_H</span></span></span><br></pre></td></tr></table></figure>
<h3 id="TBLog-cpp-1"><a href="#TBLog-cpp-1" class="headerlink" title="TBLog.cpp"></a>TBLog.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tblog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; //printf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt; //va_list, va_arg, va_start, va_end</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LogLevels logThreshold;</span><br><span class="line"><span class="keyword">wchar_t</span> filePath[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">bool</span> isFirst = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> wchar_t* <span class="title">GetLogLevel</span><span class="params">(<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGTRACE: <span class="keyword">return</span> <span class="string">L"[TRACE]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGDEBUG: <span class="keyword">return</span> <span class="string">L"[DEBUG]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGINFO:  <span class="keyword">return</span> <span class="string">L"[INFO ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGWARN:  <span class="keyword">return</span> <span class="string">L"[WARN ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGERROR: <span class="keyword">return</span> <span class="string">L"[ERROR]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGFATAL: <span class="keyword">return</span> <span class="string">L"[FATAL]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">L""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wchar_t</span>* GetTime(RequestType request)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">wchar_t</span> currentTime[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(currentTime, <span class="number">0</span>, <span class="keyword">sizeof</span>(currentTime));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME time;</span><br><span class="line">    GetSystemTime(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wchar_t</span> ms[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> time_ms = time.wMilliseconds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(request == LogTimeStamp)</span><br><span class="line">    &#123;</span><br><span class="line">        wcsftime (currentTime, <span class="number">30</span>, <span class="string">L"%F %T"</span>, localtime(&amp;now));</span><br><span class="line">        swprintf(ms, <span class="string">L"%03d"</span>, time_ms);</span><br><span class="line">        wcscat(currentTime, <span class="string">L"."</span>);</span><br><span class="line">        wcscat(currentTime, ms);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        wcsftime (currentTime, <span class="number">30</span>, <span class="string">L"%Y%m"</span>, localtime(&amp;now));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initial</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    isFirst = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">wchar_t</span> *date = GetTime(LogFileName);</span><br><span class="line">    wcscat(filePath,<span class="string">L"D:\\TBLog\\TBLog_"</span>);</span><br><span class="line">    wcscat(filePath, date);</span><br><span class="line">    wcscat(filePath, <span class="string">L".txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    logThreshold = level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">Logger</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">wchar_t</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isFirst)</span><br><span class="line">        Initial();</span><br><span class="line"></span><br><span class="line">    setlocale(LC_ALL, <span class="string">""</span>); <span class="comment">//超級關鍵!!! 只要處理wchar_t加入這個指令加入當前環境語系才不會怎樣印都?</span></span><br><span class="line">    <span class="keyword">wchar_t</span> message[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message, <span class="number">0</span>, <span class="keyword">sizeof</span>(message));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wchar_t</span> message2[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message2, <span class="number">0</span>, <span class="keyword">sizeof</span>(message2));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(level &gt;= logThreshold)</span><br><span class="line">    &#123;</span><br><span class="line">        FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>((_access(<span class="string">"D:\\TBLog"</span>, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( _mkdir( <span class="string">"D:\\TBLog"</span> ) == <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"File'D:\\TBLog'add!\n"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"Can't add File'D:\\TBLog'\n"</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wcscat(message, GetTime(LogTimeStamp));</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line">        wcscat(message, GetLogLevel(level));</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> threadID = GetCurrentThreadId();</span><br><span class="line">        <span class="keyword">wchar_t</span> buffer[<span class="number">20</span>];</span><br><span class="line">        swprintf(buffer, <span class="number">20</span>, <span class="string">L"%d"</span>, threadID);</span><br><span class="line"></span><br><span class="line">        wcscat(message, <span class="string">L"ThreadID:"</span>);</span><br><span class="line">        wcscat(message, buffer);</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line">        wcscat(message, fmt);</span><br><span class="line"></span><br><span class="line">        va_list args;</span><br><span class="line">        va_start (args, fmt);</span><br><span class="line">        vwprintf (message, args);    <span class="comment">//print</span></span><br><span class="line">        vswprintf(message2, <span class="number">300</span>, message, args); <span class="comment">//save message and write file.</span></span><br><span class="line">        va_end (args);</span><br><span class="line"></span><br><span class="line">        fp=_wfopen(filePath,<span class="string">L"a,ccs=UNICODE"</span>);<span class="comment">//檔案以UNICODE編寫</span></span><br><span class="line">        fwprintf(fp,<span class="string">L"%ls"</span>,message2);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用端-1"><a href="#使用端-1" class="headerlink" title="使用端"></a>使用端</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::sendKey(QString key) &#123;<span class="comment">//QString以unicode編碼保存</span></span><br><span class="line">    CString str = key.toStdWString().c_str();<span class="comment">//將Unicode放到WString寬字串中</span></span><br><span class="line">    Logger(LOGDEBUG, <span class="string">L"Whole input Key:%ls\n"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.cplusplus.com/reference/cstdio/vprintf/" target="_blank" rel="noopener">vprintf - C++ Reference - Cplusplus.com</a><br><a href="https://zh.wikipedia.org/wiki/Stdarg.h" target="_blank" rel="noopener">stdarg.h - 维基百科，自由的百科全书</a><br><a href="https://dotblogs.com.tw/simplecestlavie/2013/01/02/86637" target="_blank" rel="noopener">軟體中的黑盒子 (介紹 va_lsit, va_start, va_end… 等)</a><br><a href="https://teddybearfp.github.io/2018/11/02/C-dll/#more">C/C++ 動態連結函式庫| 泰迪熊的程式足跡</a></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>Logger</tag>
        <tag>vprintf</tag>
        <tag>stdarg.h</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 人數統計(Busuanzi &amp; LeanCloud)</title>
    <url>/2019/03/29/Hexo-Next-%E4%BA%BA%E6%95%B8%E7%B5%B1%E8%A8%88-Busuanzi-LeanCloud/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在網站架設完成後，我們都會希望知道來到網站的人數與行為，那麼我們要如何在Hexo架設的部落格中完成人數統計這個功能呢?這一篇我們紀錄如何使用Busuanzi跟LeanCloud來統計人數</p>
<h2 id="Busuanzi-不蒜子"><a href="#Busuanzi-不蒜子" class="headerlink" title="Busuanzi 不蒜子"></a>Busuanzi 不蒜子</h2><p>先來看看成果~</p>
<p><img src="https://i.imgur.com/3TXciGP.png" alt title="圖1"></p>
<p>恩~看起來不錯 那麼我們開始來配置吧!</p>
<h3 id="Busuanzi-不蒜子配置"><a href="#Busuanzi-不蒜子配置" class="headerlink" title="Busuanzi 不蒜子配置"></a>Busuanzi 不蒜子配置</h3><p>不蒜子在Hexo Next主題配置中是相當容易的，只要到在部落格主題的主配置中開啟功能並設置即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\_config.YML</span><br></pre></td></tr></table></figure></p>
<p>把busuanzi_count:設為true<br>uv:同一個用戶即使連續瀏覽N篇文章，依舊只算1次訪客數<br>pv:同一個用戶連續瀏覽N篇文章，算N次訪客數<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: 訪客數</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 總訪問次數</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: false</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 閱讀數</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p>
<p>上述就完成(圖1)Busuanzi的配置囉<br>有了整個網站的訪客數，但是會發現單篇文章的統計數必須進到每篇文章內才能看到該文章的閱讀次數</p>
<p><img src="https://i.imgur.com/vLu639S.png" alt></p>
<p>這樣要看每篇文章的閱讀次數很不方便那麼我們該如何達到在瀏覽文章篇章的地方就看的到人數統計呢?答案是LeanCloud，待會下方繼續記錄LeanCloud的使用方式，讓我們繼續看下去~</p>
<h3 id="Busuanzi失效"><a href="#Busuanzi失效" class="headerlink" title="Busuanzi失效"></a>Busuanzi失效</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>由於Busuanzi網址更新，導致使用Hexo Next主题時統計瀏覽數失效</p>
<h4 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h4><p>到hexo的themes資料夾</p>
<p>\themes\next\layout_third-party\analytics\busuanzi-counter.swig</p>
<p>打開busuanzi-counter.swig修改內容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//將src中的https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js</span></span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//src更改為https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span></span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子官方網站</a></p>
<h2 id="LeanCloud人數統計"><a href="#LeanCloud人數統計" class="headerlink" title="LeanCloud人數統計"></a>LeanCloud人數統計</h2><p>先至<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>官網註冊，<br>註冊完成後點選創建應用選擇開發版(免費的最讚)</p>
<p><img src="https://i.imgur.com/PP7VzQf.png" alt></p>
<p>接著創建Class<br>這裡很重要Hexo Next主題的Class名稱必須為Counter<br>並且選擇為無限制否則人數會有統計上錯誤</p>
<p><img src="https://i.imgur.com/DvJ4vHr.png" alt></p>
<p>創建完成Class後<br>到設置 &gt; 應用Key &gt; 取得app_id、app_key</p>
<p><img src="https://i.imgur.com/T4pA84N.png" alt></p>
<p>在到部落格主題的主配置中開啟功能並設置app_id、app_key<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\_config.YML</span><br></pre></td></tr></table></figure></p>
<p>leancloud_visitors:<br>  enable: true<br>  app_id: 填寫app_id<br>  app_key: 填寫app_key</p>
<p>皆完成後將部落格再次佈署<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p>
<p>大功告成!!<br>我們在文章列表就可以看到閱讀次數了，不需要點進文章內(灑花)</p>
<p><img src="https://i.imgur.com/NwdmIC7.png" alt></p>
<p>LeanCloud後台數據可以看閱讀次數與拜訪時間點如下圖</p>
<p><img src="https://i.imgur.com/tiKFAnf.png" alt></p>
<p>以上就是我們在Hexo Next如何增加統計人數的方法記錄</p>
<h2 id="同事笑話分享"><a href="#同事笑話分享" class="headerlink" title="同事笑話分享"></a>同事笑話分享</h2><p>同事說他在看棒球新聞的時候<br>同事爸說:鈴木一郎哩<br>同事說:退休啦!<br>同事爸說:蛤!?我說恁母伊郎哩(台語:你媽人哩)</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
        <tag>Busuanzi</tag>
        <tag>LeanCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next SEO分析網站(Search Engine Optimization)</title>
    <url>/2019/03/29/Hexo-SEO%E5%88%86%E6%9E%90%E7%B6%B2%E7%AB%99/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是我第一次編寫個人部落格，我這次架完網站後，由於文章量不多，隔了五個月才設置統計人數功能，開啟統計人數後發現有人閱讀，真的是件讓人很開心的事，這時我就想了解是哪些人觀看我們用心編寫的文章，還有觀看的時候行為如何，例如:曝光度與點擊次數與點閱率、哪個國家的IP，觀看文章的時間與跳出率之類的，有這些資料讓我們了解哪些文章是受歡迎的，我們才可以精進我們的部落格留住更多瀏覽人數，目前只有部屬在Google Search Engine中，所以本篇記錄如何在Hexo Next 使用Google相關的分析</p>
<h2 id="SEO-Search-Engine-Optimization"><a href="#SEO-Search-Engine-Optimization" class="headerlink" title="SEO(Search Engine Optimization)"></a>SEO(Search Engine Optimization)</h2><p>SEO 是一種透過自然排序（無付費）的方式增加網頁曝光度的行銷規律</p>
<p>這一篇會記錄兩種Google分析瀏覽紀錄的方式</p>
<ul>
<li>Google search console</li>
<li>Google Analytics</li>
</ul>
<p>達到網站分析與關鍵字研究</p>
<h2 id="Google-search-console"><a href="#Google-search-console" class="headerlink" title="Google search console"></a>Google search console</h2><p>用Google search console可以看整體成長趨勢包含曝光度與點擊次數與點閱率</p>
<p>首先至<a href="https://search.google.com/search-console/welcome" target="_blank" rel="noopener">Google search console</a>新增資源，將部落格的網址(<a href="https://teddybearfp.github.io/)輸入在網址前置字元">https://teddybearfp.github.io/)輸入在網址前置字元</a></p>
<p><img src="https://i.imgur.com/P291fYl.png" alt></p>
<p>有了資源後我們來驗證，除了上傳HTML檔案驗證的方法還有另一種使用HTML標記，在所謂中繼標記就是以meta開頭的程式碼head.swig前方加入Google驗證碼並上傳即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">檔案位置:</span><br><span class="line">blog\themes\next\layout\_partials\head.swig</span><br></pre></td></tr></table></figure>
<p>開啟head.swig並把Google驗證碼貼在最上方<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;google-site-verification&quot; content=&quot;XXXXXXXXXXX_XXXXXXXXXXXXXXXXXXXXX_XXXXXXXXX&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>重新佈署部落格<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p>
<p>完成啦~ 可以看看我們的網頁數據並開始進行分析囉</p>
<p><img src="https://i.imgur.com/0R9E2qT.png" alt></p>
<p>還可以看讀者是輸入什麼關鍵字搜尋你的文章的</p>
<p><img src="https://i.imgur.com/z3EFoPs.png" alt></p>
<h2 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h2><p>Google Analytics可以更進一步的分析讀者在文章閱讀的時間，讓我們能了解是否能留住讀者，還可以知道什麼時段讀者較多與來自哪裡</p>
<p>首先去<a href="https://analytics.google.com/analytics/web/provision/?authuser=0#/provision" target="_blank" rel="noopener">Google Analytics</a>申請帳號，</p>
<p><img src="https://i.imgur.com/jFM5RC5.png" alt></p>
<p>然後將追蹤ID輸入到主題的主配置中<br>\themes\next<br>google_analytics: UA-XXXXXXXXX-X<br>將部落格再次部屬<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p>
<p>成功後我們就可以看到用戶的使用情形了<br>這Google分析是不是超猛的~~</p>
<p><img src="https://i.imgur.com/2h7Fuj8.png" alt></p>
<p><img src="https://i.imgur.com/ng1iv2n.png" alt></p>
<p>上圖是剛分析的第一天資料量較少，但是可以看一下功能</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.newscan.com.tw/all-seo/seo-guide.htm" target="_blank" rel="noopener">SEO的初學者教學，搞懂SEO搜尋引擎優化，讓你網站訂單接不完-新視野</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo Next</tag>
        <tag>SEO分析網站</tag>
        <tag>Google Analytics</tag>
        <tag>Google search console</tag>
      </tags>
  </entry>
  <entry>
    <title>平行處理用CUDA</title>
    <url>/2019/03/26/%E5%B9%B3%E8%A1%8C%E8%99%95%E7%90%86%E7%94%A8CUDA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天公司最強學長介紹CUDA的厲害，讓我們了解到透過GPU的方式平行處理加速完成計算的驚人之處，所以編寫一篇來記錄這強大的CUD，現今的手機應用軟體依賴執行 GPU 的雲端伺服器。店家使用 GPU 分析零售和網路數據。網站利用 GPU 以更準確地放置廣告。</p>
<h2 id="C-C-平行處理"><a href="#C-C-平行處理" class="headerlink" title="C/C++ 平行處理"></a>C/C++ 平行處理</h2><p>CPU上我們要用平行處理可以透過OpenMP的函式來完成，OpenMP 是一種能透過高階指令，很簡單地將程式平行化、多執行緒化的 API；在最簡單的情形，甚至可以只加一行指令，就可以將迴圈內的程式平行化處理了！<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for <span class="comment">//只要將這句加在耗時的迴圈之前即可變成平行處理</span></span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++ i )</span><br><span class="line">    <span class="comment">//dosomething;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><p>CUDA是由NVIDIA所推出的一種整合技術CUDA核心運算技術不但對遊戲、文書處理或是影音轉檔都幫助甚大，今日的GPU在浮點運算效能上早已超越CPU，不但現在的電腦應用中CPU與GPU是共同存在的，連原本是需要CPU來運算的資料現在都可以藉由GPU來執行，而且還做得更好！<br>現今電影場景許多都是透過CUDA，例如:家喻戶曉的3D阿凡達的電影背景幾乎都是由CUDA運算，拍攝時演員只需要在棚內特製的佈景前擺出動作，然後再和CUDA運算好的虛擬場景結合後，就成為我們在螢光幕前所看到的一切！</p>
<p>編寫方面CUDA可以相容OpenCL或者自家的C編譯器。無論是CUDA C語言或是OpenCL，指令最終都會被驅動程式轉換成PTX程式碼，交由顯示核心計算</p>
<h2 id="CPU-vs-GPU"><a href="#CPU-vs-GPU" class="headerlink" title="CPU vs GPU"></a>CPU vs GPU</h2><p>下面GIF比較CPU與GPU繪圖速度<br>CPU<br><img src="https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif" alt title="圖1"></p>
<p>GPU<br><img src="https://i.imgur.com/Dgj8EJj.gif" alt title="圖2"></p>
<p><img src="https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif" alt title="圖3"></p>
<h2 id="使用CUDA"><a href="#使用CUDA" class="headerlink" title="使用CUDA"></a>使用CUDA</h2><p>使用CUDA簡單的說就是把GPU當CPU來用，要使用之前我們得先看我們的電腦有沒有支援CUDA，在<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">CUDA GPUs </a>可以確認顯示是否有支援，接著至<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">CUDA Toolkit</a>下載相對應版本</p>
<h2 id="CUDA運算環境"><a href="#CUDA運算環境" class="headerlink" title="CUDA運算環境"></a>CUDA運算環境</h2><p>__host__<br>CPU執行且可使用C/C++一般函數</p>
<p>__global__<br>CPU/GPU執行但不可使用C/C++一般函數</p>
<p>__device__<br>GPU執行且不可使用C/C++一般函數<br>在device上執行的副程式，稱為kernel，通常有上百到上千個執行緒(thread)執行同一個kernel。</p>
<h2 id="CUDA-vs-Stream-Processor"><a href="#CUDA-vs-Stream-Processor" class="headerlink" title="CUDA vs Stream Processor"></a>CUDA vs Stream Processor</h2><ul>
<li>CUDA 較早開發</li>
<li>完整性較高</li>
<li>主流</li>
<li>TensorFlow 是使用CUDA做Machine learning</li>
<li>Google 在用</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>公司最強學長的報告<br><a href="https://zh.wikipedia.org/wiki/CUDA" target="_blank" rel="noopener">CUDA - 维基百科，自由的百科全书</a><br><a href="https://www.computerdiy.com.tw/nvidia-cuda/" target="_blank" rel="noopener">硬體加速搞不懂？CUDA讓一切變得更簡單</a><br><a href="https://blogs.nvidia.com.tw/2012/09/what-is-cuda-2/" target="_blank" rel="noopener">什麼是 CUDA?</a><br><a href="https://kheresy.wordpress.com/2006/06/09/%E7%B0%A1%E6%98%93%E7%9A%84%E7%A8%8B%E5%BC%8F%E5%B9%B3%E8%A1%8C%E5%8C%96%E6%96%B9%E6%B3%95%EF%BC%8Dopenmp%EF%BC%88%E4%B8%80%EF%BC%89%E7%B0%A1%E4%BB%8B/" target="_blank" rel="noopener"></a></p>
<h2 id="圖片來源"><a href="#圖片來源" class="headerlink" title="圖片來源"></a>圖片來源</h2><p>圖1:<a href="https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif" target="_blank" rel="noopener">https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif</a><br>圖2:<a href="https://i.imgur.com/Dgj8EJj.gif" target="_blank" rel="noopener">https://i.imgur.com/Dgj8EJj.gif</a><br>圖3:<a href="https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif" target="_blank" rel="noopener">https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>平行處理</tag>
        <tag>CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>環狀佇列(Circular Queue)</title>
    <url>/2019/03/26/%E7%92%B0%E7%8B%80%E4%BD%87%E5%88%97-Circular-Queue/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近處理一些數據是滿兩百筆後，進行一個queue佇列的動作(先進先出)，但是我們如果是使用queue的話只能對頭尾操作，要遍歷一遍的話要用pop，也不適合重覆使用，那麼我們來改用陣列達到實現queue的效果</p>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>Queue是一個先進先出的佇列這種佇列我們可以掌握頭尾的資料</p>
<p>push: 把一個值加到最後<br>pop: 把最後一個值移除<br>size: 得到目前資料長度<br>front: 取得第一筆<br>back: 取得最後一筆<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">q.push(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">q.front();<span class="comment">//1</span></span><br><span class="line">q.back();<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">q.pop();<span class="comment">//1被拿掉</span></span><br><span class="line">q.size();<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<p>優點:可以快速的把第一個值拿掉<br>缺點:只能操作到頭尾資料</p>
<h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>push_back: 把一個值加到最後<br>pop_back: 把最後一個值移除<br>size: 得到目前資料長度<br>vec[]: 得到某一個位置的值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    vec.push_back(<span class="number">1</span>);<span class="comment">//賦值</span></span><br><span class="line">    vec.push_back(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> dataLength = vec.size();<span class="comment">//取得容器長度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,vec.at(<span class="number">1</span>));<span class="comment">//操作元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,vec[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:vec)<span class="comment">//Vector很方便的逐一遍歷</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    vec.pop_back();<span class="comment">//移除2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>優點:宣告時可以不用給予大小<br>缺點:內部進行刪除時效率低</p>
<h2 id="環狀佇列-Unordered"><a href="#環狀佇列-Unordered" class="headerlink" title="環狀佇列(Unordered)"></a>環狀佇列(Unordered)</h2><p>有時候我們只是要最新的100筆資料而不管順序，那麼可以用標準模板庫（Standard Template Library）的Vector容器來達成目標，這種方式是只確保是資料是最新的100筆，而資料順序不是保證從0~99，利用idex紀錄資料，當容器資料量到達100滿的時候從第一筆開始覆蓋<br>首先我們宣告Vector跟宣告大小</p>
<h3 id="第一種-起始記憶體位置不變"><a href="#第一種-起始記憶體位置不變" class="headerlink" title="第一種 起始記憶體位置不變"></a>第一種 起始記憶體位置不變</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> queueSize = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span>.size() &gt;= queueSize)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt;= queueSize)</span><br><span class="line">    &#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>[idx] = value;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queue</span>[idx] = value;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>.push_back(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二種-起始記憶體位置變動"><a href="#第二種-起始記憶體位置變動" class="headerlink" title="第二種 起始記憶體位置變動"></a>第二種 起始記憶體位置變動</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> queueSize = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span>.size() &gt;= queueSize)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>.push_back(value);</span><br><span class="line">    <span class="built_in">queue</span>.erase(<span class="built_in">queue</span>.begin());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>.push_back(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="環狀佇列-Ordered"><a href="#環狀佇列-Ordered" class="headerlink" title="環狀佇列(Ordered)"></a>環狀佇列(Ordered)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_QUEUE 10</span></span><br><span class="line"><span class="keyword">int</span> circularQueue[MAX_QUEUE];</span><br><span class="line"><span class="keyword">int</span> front = <span class="number">-1</span>, rear = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>; <span class="comment">//透過flag可以將原本只能存放N-1個元素的環形佇列變成存放N個元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (rear % MAX_QUEUE == front);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (front == rear)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">queue</span>, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull() &amp;&amp; flag == <span class="number">1</span> || rear == MAX_QUEUE - <span class="number">1</span> &amp;&amp; front == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Circular Queue is full!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Circular Queue add: %d\n"</span>, value);</span><br><span class="line">    rear = (rear + <span class="number">1</span>) % MAX_QUEUE;</span><br><span class="line">    <span class="built_in">queue</span>[rear] = value;</span><br><span class="line">    <span class="keyword">if</span> (front == rear) flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty() &amp;&amp; flag == <span class="number">0</span>)&#123; <span class="comment">//檢查佇列是否為空的</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Circular Queue is empty!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    front = (front + <span class="number">1</span>) % MAX_QUEUE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d is deleted.\n"</span>, <span class="built_in">queue</span>[front]);</span><br><span class="line">    <span class="keyword">if</span> (front == rear) flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Enqueue(circularQueue, <span class="number">1</span>);</span><br><span class="line">    Enqueue(circularQueue, <span class="number">2</span>);</span><br><span class="line">    Enqueue(circularQueue, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://larry850806.github.io/2016/06/06/STL1/" target="_blank" rel="noopener">[C++] STL 容器 (一) - 基本介紹</a><br><a href="https://j101044.wordpress.com/2014/08/19/algorithmc-c-%E4%BD%87%E5%88%97queue/" target="_blank" rel="noopener">[Algorithm][C / C++] 佇列(Queue)、環狀佇列(Circular Queue)</a></p>
<h2 id="好音樂分享"><a href="#好音樂分享" class="headerlink" title="好音樂分享"></a>好音樂分享</h2><p>長大以後聽著很有感觸呢!或許講的是我是你也是妳</p>
<p><a href="https://www.youtube.com/watch?v=3P8ODasFchE&amp;index=4&amp;list=PL5AkdapUo5y1F6DUOeLEPpk0GpNKcIvY4" target="_blank" rel="noopener">『城市唱遊 EP.20』好樂團 - 我把我的青春給你｜樂人 x Volkswagen</a><br><a href="https://www.youtube.com/watch?v=Elb9-GHqxfY" target="_blank" rel="noopener">Vising《 長大以後 》Lyric Video</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>環狀佇列</tag>
        <tag>Circular Queue</tag>
        <tag>Vector</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>看門狗計時器(Watchdog Timer)</title>
    <url>/2019/03/25/%E7%9C%8B%E9%96%80%E7%8B%97%E8%A8%88%E6%99%82%E5%99%A8-Watchdog-Timer/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在編寫一些較有危險性的函式在裝置上，我們要怎麼來降低風險呢?例如:馬達持續未關閉、高壓電輸出、加熱裝置未關閉之類的潛在危險因子，最近編寫一些函式控制裝置，但是有一定的風險在其中，在思考防範機制的時候，前輩給了我一個不錯的思維，就是這些情況可以透過看門狗計時器來幫我們守護整體安全性，使控制系統轉入安全狀態中。</p>
<h2 id="看門狗計時器"><a href="#看門狗計時器" class="headerlink" title="看門狗計時器"></a>看門狗計時器</h2><p>看門狗計時器是一種電腦硬體式的計時裝置，當系統的主程式發生某些錯誤事件時，例如:程式異常中止或是崩潰，導致程式沒有正常執行解構函式與離開狀態機，假死機或未定時的清除看門狗計時器的內含計時值（多半是向對計時器發送清除訊號），這時看門狗計時器就會對系統發出重設、重新啟動或關閉的訊號，使系統從懸停狀態回復到正常運作狀態。看門狗一旦使用便不能停止。一般情況下計數器在系統休眠時依然計數，但在某些晶片上，處於低功耗模式下的看門狗僅僅保留暫存器資料但不計數。</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>在FPGA或是Firmware的地方編寫看門狗計時器，當程式執行的時候，軟體不斷的給看門狗計時器答覆，當沒答覆的時候代表程式離開、需要重啟或關閉，這樣就不用擔心軟體方面的異常中止，硬體自行有保護<br>讚啦!</p>
<h2 id="生活小記"><a href="#生活小記" class="headerlink" title="生活小記"></a>生活小記</h2><p>今天同事跟我說個驚人事實就是漫威屬於迪士尼的，後來我看到復仇者聯盟的宣傳照突然有種喜感，接下來換我告訴他驚人的事實，中國有嘻哈也是迪士尼的，因為Diss你~</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%9C%8B%E9%96%80%E7%8B%97%E8%A8%88%E6%99%82%E5%99%A8" target="_blank" rel="noopener">看門狗計時器- 维基百科，自由的百科全书</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>看門狗計時器</tag>
        <tag>Watchdog Timer</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 資料視覺化(Data Visualization)</title>
    <url>/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>數字比較不能讓一目了然資料的變化，驗證數據時看這些數字比較無感，雖然excel就可以畫圖形了，最近有大量數據圖需要觀察，一個一個excel點進去設定繪製與截圖實在耗時，所以我們編寫一個資料視覺化程式更方便更快速達成多個圖表繪製，可以將同層中的csv數據透過matplotlib分色畫成折線圖並存成圖檔，也可以畫成柱狀圖、圓餅圖、散佈圖與其他更高階的視覺化圖形，這篇我們紀錄折線圖的使用方式<br><img src="https://i.imgur.com/ZTz43gn.png" alt></p>
<h2 id="編寫中文"><a href="#編寫中文" class="headerlink" title="編寫中文"></a>編寫中文</h2><p>Python編碼默認是ASCII格式，沒修改編碼的情況下無法編寫中文，所以輸入中文會報錯，解決辦法有以下兩種</p>
<p>第一種方式<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br></pre></td></tr></table></figure></p>
<p>第二種方式<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br></pre></td></tr></table></figure></p>
<h2 id="glob讀取-csv"><a href="#glob讀取-csv" class="headerlink" title="glob讀取.csv"></a>glob讀取.csv</h2><p>glob.iglob(pathname), 一次只獲取一個匹配路徑<br>glob.glob（pathname), 獲取所有的匹配路徑<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob </span><br><span class="line"></span><br><span class="line">f = glob.iglob(<span class="string">r'.\*.csv'</span>)</span><br><span class="line">input_files = glob.glob(<span class="string">r'*.csv'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> input_file <span class="keyword">in</span> input_files: <span class="comment">#檢視取得到的內容</span></span><br><span class="line">    print(input_file)</span><br></pre></td></tr></table></figure></p>
<h2 id="讀取CSV內容"><a href="#讀取CSV內容" class="headerlink" title="讀取CSV內容"></a>讀取CSV內容</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">input_files = <span class="string">"Teddybearfp.csv"</span></span><br><span class="line">file = pd.read_csv(input_file,encoding = <span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開啟 CSV 檔案</span></span><br><span class="line"><span class="keyword">with</span> open(input_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> rFile:</span><br><span class="line"></span><br><span class="line"><span class="comment">#讀取 CSV 檔案內容</span></span><br><span class="line">filereader = csv.reader(rFile)</span><br><span class="line"></span><br><span class="line"><span class="comment">#filereader.next() 返回即为第一行的内容(通常為標題)</span></span><br><span class="line">header = next(filereader)</span><br><span class="line"></span><br><span class="line"><span class="comment">#剖析header得到title標題與count_header總數</span></span><br><span class="line">title = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_header = len(title)</span><br></pre></td></tr></table></figure>
<h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(plt, data)</span>:</span></span><br><span class="line">    x = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    y = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    <span class="comment">#調整圖形大小</span></span><br><span class="line">    <span class="comment">#默認像素：[6.0,4.0]，分辨率100，圖形大小 600X400</span></span><br><span class="line">    <span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#畫出圖形</span></span><br><span class="line">    plt.xlabel(<span class="string">'Seconds'</span>) <span class="comment">#X軸</span></span><br><span class="line">    plt.ylabel(<span class="string">'Temperature'</span>) <span class="comment">#Y軸</span></span><br><span class="line">    <span class="comment">#plt.ylim((1, 8)) 可以設置極限值改變顯示區域</span></span><br><span class="line">    plt.plot(x, y,color = <span class="string">"red"</span>, label = <span class="string">"A"</span>, linewidth = <span class="number">1</span>) <span class="comment">#畫線並設置顏色與標籤和線寬</span></span><br><span class="line">    plt.legend(loc = <span class="string">'best'</span>,prop=&#123;<span class="string">'size'</span>:<span class="number">6</span>&#125;) <span class="comment">#將標籤找到數據較少的地方放置(盡可能不會遮蔽到數據),prop調整圖示大小</span></span><br><span class="line">    plt.savefig(filename + <span class="string">".png"</span>, dpi=<span class="number">300</span>)<span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#plt.plot(x, y) 線(預設)</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, 'o') 點</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, '-o') 線與點</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, '--o') 虛線與點</span></span><br><span class="line"></span><br><span class="line">data = [ (<span class="number">1</span>,<span class="number">2</span>), (<span class="number">2</span>,<span class="number">8</span>), (<span class="number">5</span>,<span class="number">2</span>), (<span class="number">7</span>,<span class="number">6</span>), (<span class="number">9</span>,<span class="number">10</span>) ]</span><br><span class="line"><span class="comment">#呼叫畫圖函式</span></span><br><span class="line">plotData(plt, data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/Kfl7gec.png" alt></p>
<h2 id="實作csv資料視覺化"><a href="#實作csv資料視覺化" class="headerlink" title="實作csv資料視覺化"></a>實作csv資料視覺化</h2><p>以下實作是將同層的csv資料畫成折線圖(例如:溫度變化圖)讓我們繼續看下去<br><img src="https://i.imgur.com/wseilHN.png" alt title="眼花撩亂的csv數據"></p>
<p>不要懷疑上面的圖真的是模糊過的不是眼睛出問題</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(plt, data, color, filename, label)</span>:</span></span><br><span class="line">    x = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    y = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    plt.xlabel(<span class="string">'Seconds'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Temperature'</span>)</span><br><span class="line">    plt.rcParams[<span class="string">'savefig.dpi'</span>] = <span class="number">800</span></span><br><span class="line">    plt.plot(x, y, <span class="string">'-'</span>, color = color, label = label)</span><br><span class="line">    plt.legend(loc = <span class="string">'best'</span>,prop=&#123;<span class="string">'size'</span>:<span class="number">6</span>&#125;)<span class="comment">#prop調整圖示大小</span></span><br><span class="line">    plt.savefig(filename + <span class="string">".png"</span>, dpi=<span class="number">300</span>)<span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#讀檔取得標題</span></span><br><span class="line">input_files = glob.glob(<span class="string">r'*.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#輸入目標溫度畫輔助線</span></span><br><span class="line">targetDegree = int(input(<span class="string">"Target degree:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> input_file <span class="keyword">in</span> input_files:</span><br><span class="line">    result_data = []</span><br><span class="line">    expect = []</span><br><span class="line">    file = pd.read_csv(input_file,encoding = <span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(input_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> rFile:</span><br><span class="line">        filereader = csv.reader(rFile)</span><br><span class="line">        header = next(filereader)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#剖析header得到title標題與count_header總數</span></span><br><span class="line">    title = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">    count_header = len(title)  </span><br><span class="line"></span><br><span class="line">    color = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"green"</span>, <span class="string">"navy"</span>, <span class="string">"skyblue"</span>, </span><br><span class="line">             <span class="string">"burlywood"</span>, <span class="string">"blue"</span>, <span class="string">"cyan"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>,</span><br><span class="line">             <span class="string">"orange"</span>, <span class="string">"purple"</span>, <span class="string">"magenta"</span>, <span class="string">"slateblue"</span>, <span class="string">"gold"</span>,</span><br><span class="line">             <span class="string">"mintcream"</span>, <span class="string">"navy"</span>, <span class="string">"gold"</span>, <span class="string">"bisque"</span>, <span class="string">"aqua"</span>]</span><br><span class="line">             </span><br><span class="line">    <span class="comment">#畫輔助線看有沒有落在正負1範圍內(若不需要這段可以拿掉)</span></span><br><span class="line">    data = []</span><br><span class="line">    dataLength = len(file[title[<span class="number">0</span>]])</span><br><span class="line">    resTitle = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree)<span class="comment">#紅線目標溫度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"target"</span>)</span><br><span class="line">    </span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree - <span class="number">1</span>)<span class="comment">#綠線正負一度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"lower"</span>)</span><br><span class="line">    </span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree + <span class="number">1</span>)<span class="comment">#綠線正負一度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"upper"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#讀取每一行的資料並放到list中</span></span><br><span class="line">    <span class="keyword">for</span> number, title_ <span class="keyword">in</span> enumerate(title):</span><br><span class="line">        data = []</span><br><span class="line">        resTitle.append(title_)</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> enumerate(file[title_]):</span><br><span class="line">            data.append(content)</span><br><span class="line">            </span><br><span class="line">        result_data.append(data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#繪製圖形</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(result_data)):</span><br><span class="line">        plotData(plt, result_data[n], color[n], input_file.strip(<span class="string">".csv"</span>),resTitle[n])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/oyxIPhi.png" alt title="畫出溫度變化折線圖與正負1度輔助線"></p>
<p><img src="https://i.imgur.com/lqJi6MH.png" alt title="溫度變化折線圖與目標溫度無輔助線"></p>
<h2 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h2><p>關於溫度如何收斂呢?我們可以透過用PID控制器的方式達到數據收斂，PID控制器（比例-積分-微分控制器），由比例單元（P）、積分單元（I）和微分單元（D）組成。可以透過調整這三個單元的增益Kp，Ki和Kd來調定其特性。PID控制器主要適用於基本上線性，且動態特性不隨時間變化的系統。<br>P控制器: Kp * Error(誤差)<br>PI控制器: Kp * Error(誤差) + Ki * SumOfError(N組)<br>​PID 的​參數​調整​指​的是​通過​設定 P、​I 與 D 的​最佳​增益來達成<br>這穩定的控制方式在​業界​受到​廣泛​使用，這項​演算法​彈性​十足，​能夠​在​各式各樣​的​應用​中​能有良好的​結果<br>還可以運用在股票運算K線呢!不說了趕快繼續練習猜測與檢查找到最佳的PID</p>
<h2 id="網路笑話一則"><a href="#網路笑話一則" class="headerlink" title="網路笑話一則"></a>網路笑話一則</h2><p>上面既然提到了股票那麼來一則關於股票的笑話吧!</p>
<p>Q:猜猜誰不需要股票??</p>
<p>A:東尼史塔克</p>
<p>因為(don’t need stock)</p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.itread01.com/articles/1476166832.html" target="_blank" rel="noopener">簡單掌握Python中glob模塊查找文件路徑的用法</a><br><a href="https://tree.rocks/python/python-matplotlib-simple-linechart/" target="_blank" rel="noopener">Python Matplotlib 簡單繪制圖表教學 ( 折線圖 )</a><br><a href="https://zh.wikipedia.org/zh-tw/PID%E6%8E%A7%E5%88%B6%E5%99%A8" target="_blank" rel="noopener">PID控制器- 维基百科，自由的百科全书</a><br><a href="http://www.ni.com/zh-tw/innovations/white-papers/06/pid-theory-explained.html" target="_blank" rel="noopener">PID 控制原理教學- National Instruments</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>csv</tag>
        <tag>資料視覺化</tag>
        <tag>Data Visualization</tag>
        <tag>折線圖</tag>
        <tag>matplotlib</tag>
        <tag>PID控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 資料比對</title>
    <url>/2019/03/19/Python-%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如我們有兩個大型Excel(各四萬筆)要比對，要做三種資料(A∩B)、(A-A∩B)、(B-A∩B)那麼如果用excel篩選後複製貼上反覆操作後有錯誤風險且速度較慢，透過篩選複製貼上繁瑣且難發現有重複資料或是資料不全的項目，這一篇記錄了我去年前幫忙公務員解決的問題，想當初有公務員周期性的每個月需要做好幾筆，後來喝杯咖啡執行這程式資料就出來了輕鬆了不少呢</p>
<p>此篇使用的測試資料內容皆為亂掰的不是真實資料~</p>
<h2 id="舉例"><a href="#舉例" class="headerlink" title="舉例"></a>舉例</h2><p>一開始我們有兩份excel名單，一份名單內容是三月住宿而另一份是四月住宿的名單，那麼我們要產出新的三份excel且不同欄位需合併</p>
<ul>
<li>三月住宿四月皆住宿者</li>
<li>三月住宿四月沒住宿者</li>
<li>三月沒住四月新住宿者</li>
</ul>
<p>下圖為三月住宿名單(紅色為與四月相同的部分)<br><img src="https://i.imgur.com/FnymF99.png" alt title="三月住宿者"></p>
<p>下圖為三月住宿名單(紅色為與三月相同的部分)<br><img src="https://i.imgur.com/Q8gdJpq.png" alt title="四月住宿者"></p>
<p>那麼接下來我們的目標是要產出以下三種excel(兩份資料欄位需合併)</p>
<p>第一種(三月住宿四月皆住宿者)<br><img src="https://i.imgur.com/0fQqhx3.png" alt></p>
<p>第二種(三月住宿四月沒住宿者)<br><img src="https://i.imgur.com/1ajI0F6.png" alt></p>
<p>第三種(三月沒住四月新住宿者)<br><img src="https://i.imgur.com/WO5yICC.png" alt></p>
<h2 id="實作Excel交叉比對"><a href="#實作Excel交叉比對" class="headerlink" title="實作Excel交叉比對"></a>實作Excel交叉比對</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">input_file1 = <span class="string">"a.csv"</span></span><br><span class="line">input_file2 = <span class="string">"b.csv"</span></span><br><span class="line">write_data = <span class="string">''</span></span><br><span class="line">result_title = []</span><br><span class="line">result_titlea = []</span><br><span class="line">result_titleb = []</span><br><span class="line">same = []</span><br><span class="line">diffa= []</span><br><span class="line">diffb = []</span><br><span class="line">IDb = []</span><br><span class="line"><span class="comment">#read two files</span></span><br><span class="line">file1 = pd.read_csv(input_file1,encoding = <span class="string">'utf8'</span>)</span><br><span class="line">file2 = pd.read_csv(input_file2,encoding = <span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">with</span> open(input_file1,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> filex1:</span><br><span class="line">    filereadera = csv.reader(filex1)</span><br><span class="line">    headera = next(filereadera)</span><br><span class="line"><span class="comment">#counting header and write headercontent</span></span><br><span class="line">titlea = [ n <span class="keyword">for</span> n <span class="keyword">in</span> headera <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_headera = len(titlea)      </span><br><span class="line"><span class="keyword">with</span> open(input_file2,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> filex2:</span><br><span class="line">    filereaderb = csv.reader(filex2)</span><br><span class="line">    headerb = next(filereaderb)</span><br><span class="line"><span class="comment">#counting header and write headercontent</span></span><br><span class="line">titleb = [ n <span class="keyword">for</span> n <span class="keyword">in</span> headerb <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_headerb = len(titleb)   </span><br><span class="line">l_a = len(file1[titlea[<span class="number">0</span>]])</span><br><span class="line">l_b = len(file2[titleb[<span class="number">0</span>]])</span><br><span class="line">count_a = <span class="number">0</span></span><br><span class="line">count_b = <span class="number">0</span></span><br><span class="line"><span class="comment">#diffb檔案的title</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">    result_titleb.append(b)</span><br><span class="line">diffb.append(result_titleb)</span><br><span class="line"><span class="comment">#a跟b title若重複,刪除重複者</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">del</span> titleb[n]</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"><span class="comment">#ab相同檔案title,diffa檔案title</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    result_title.append(a)</span><br><span class="line">    result_titlea.append(a)</span><br><span class="line">diffa.append(result_titlea)</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="string">'身分證號'</span><span class="keyword">or</span> b ==<span class="string">'身分證'</span><span class="keyword">or</span> b ==<span class="string">'身份證'</span><span class="keyword">or</span> b ==<span class="string">'身份證號'</span> <span class="keyword">or</span> b ==<span class="string">'id'</span><span class="keyword">or</span> b ==<span class="string">'ID'</span><span class="keyword">or</span> b ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> b ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result_title.append(b)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    <span class="keyword">if</span> a ==<span class="string">'身分證號'</span><span class="keyword">or</span> a ==<span class="string">'身分證'</span><span class="keyword">or</span> a ==<span class="string">'身份證'</span><span class="keyword">or</span> a ==<span class="string">'身份證號'</span> <span class="keyword">or</span> a ==<span class="string">'id'</span><span class="keyword">or</span> a ==<span class="string">'ID'</span><span class="keyword">or</span> a ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> a ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        IDa = [content <span class="keyword">for</span> content <span class="keyword">in</span> file1[a]]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count_a += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> result_titleb:</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="string">'身分證號'</span><span class="keyword">or</span> b ==<span class="string">'身分證'</span><span class="keyword">or</span> b ==<span class="string">'身份證'</span><span class="keyword">or</span> b ==<span class="string">'身份證號'</span> <span class="keyword">or</span> b ==<span class="string">'id'</span><span class="keyword">or</span> b ==<span class="string">'ID'</span><span class="keyword">or</span> b ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> b ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        IDb = [content <span class="keyword">for</span> content <span class="keyword">in</span> file2[b]]     </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count_b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">same.append(result_title)</span><br><span class="line">count_ac = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> IDa:</span><br><span class="line">    count_bc = <span class="number">0</span></span><br><span class="line">    same_temp = []</span><br><span class="line">    diff_temp = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> IDb:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">for</span> ta <span class="keyword">in</span> titlea:</span><br><span class="line">                <span class="keyword">if</span> type(file1[ta][count_ac]) != str <span class="keyword">and</span> np.isnan(float(file1[ta][count_ac])):</span><br><span class="line">                    same_temp.append(<span class="string">'none'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    same_temp.append(str(file1[ta][count_ac]))</span><br><span class="line">            bc = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> titleb:</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> type(file2[tb][count_bc]) != str <span class="keyword">and</span> np.isnan(float(file2[tb][count_bc])):</span><br><span class="line">                    same_temp.append(<span class="string">'none'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    same_temp.append(str(file2[tb][count_bc]))</span><br><span class="line">                bc += <span class="number">1</span></span><br><span class="line">            same.append(same_temp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> a!= b <span class="keyword">and</span> count_bc+<span class="number">1</span> == l_b:</span><br><span class="line">            <span class="keyword">for</span> ta <span class="keyword">in</span> titlea:</span><br><span class="line">                diff_temp.append(str(file1[ta][count_ac]))</span><br><span class="line">            diffa.append(diff_temp)</span><br><span class="line">        count_bc += <span class="number">1</span></span><br><span class="line">    count_ac += <span class="number">1</span></span><br><span class="line">count_bc = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> IDb:</span><br><span class="line">    count_ac = <span class="number">0</span></span><br><span class="line">    same_temp = []</span><br><span class="line">    diff_temp = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> IDa:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> a!= b <span class="keyword">and</span> count_ac+<span class="number">1</span> == l_a:</span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> result_titleb:</span><br><span class="line">                diff_temp.append(str(file2[tb][count_bc]))</span><br><span class="line">            diffb.append(diff_temp)</span><br><span class="line">        count_ac += <span class="number">1</span></span><br><span class="line">    count_bc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ab檔案皆存在者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    filewriter = csv.writer(file)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> same:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'僅存在a檔案者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file2:</span><br><span class="line">    filewriter = csv.writer(file2)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> diffa:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'僅存在b檔案者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file3:</span><br><span class="line">    filewriter = csv.writer(file3)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> diffb:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'感謝seafood 讚嘆seafood'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h2 id="可能遇到的問題"><a href="#可能遇到的問題" class="headerlink" title="可能遇到的問題"></a>可能遇到的問題</h2><p>將excel轉成csv的格式可能會遇到編碼問題</p>
<p>解決方法:<br>1.excel檔案另存新檔為類型csv<br>2.再用Notepad++編輯csv<br>3.上方選項&gt;&gt;編碼&gt;&gt;轉換至UTF-8碼格式(檔首無BOM)<br>4.存檔<br>5.執行程式<br>6.Notepad++編輯csv<br>7.上方選項&gt;&gt;編碼&gt;&gt;轉換至ANSI碼格式<br>8.存檔</p>
<p>因為要處理中文字時需轉為UTF-8格式，處理完後因為csv的顯示需要用ANSI所以回覆他為ANSI編碼</p>
<h2 id="笑話一則"><a href="#笑話一則" class="headerlink" title="笑話一則"></a>笑話一則</h2><p>哪個藝人很會阻擋人?</p>
<p>周杰倫<br>因為周董(台語:阻擋)</p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>資料比對</tag>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title>透過Callback Function達到偵測裝置狀態</title>
    <url>/2019/03/13/Callback-Function/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要記錄的是一直覺得很難的Callback Function這次是第三次跟這難纏傢伙交手，事不過三我這次要好好來了解一下這東東的使用方式了，我們可以透過Callback Function 在底層polling裝置的狀態，例如:裝置斷線、裝置重新連結或是裝置溫度之類的訊息，從底層傳回給上層介面發出信號與接收信號並作適當處理</p>
<h2 id="Callback使用時機"><a href="#Callback使用時機" class="headerlink" title="Callback使用時機"></a>Callback使用時機</h2><p>何時會用到Callback機制呢?<br>1.如果某個函式不確定完成時間點的時候就可以使用callback，讓函式完成時通知，以利繼續後續動作<br>2.類別持續輪詢各狀態內容透過Callback傳送給另一個類別,讓另一個類別得以掌握這些狀態值</p>
<h2 id="Callback示範"><a href="#Callback示範" class="headerlink" title="Callback示範"></a>Callback示範</h2><p>在這一篇我會舉例以持續輪詢的ThreadFunction不斷的將A類別的資料透過Callback傳送給B類別</p>
<h2 id="A類別"><a href="#A類別" class="headerlink" title="A類別"></a>A類別</h2><h3 id="步驟一"><a href="#步驟一" class="headerlink" title="步驟一"></a>步驟一</h3><p>創建回傳值結構<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StatusCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> currentTemperature[ <span class="number">3</span> ];</span><br><span class="line">    <span class="keyword">bool</span> overTemperature;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="步驟二"><a href="#步驟二" class="headerlink" title="步驟二"></a>步驟二</h3><p>函式創建一個別名(需寫在類別之外,不包在類別內)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">( *StatusCallBack )</span><span class="params">( <span class="keyword">void</span> *param, StatusCtx ctx )</span></span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="步驟三"><a href="#步驟三" class="headerlink" title="步驟三"></a>步驟三</h3><p>創建Callback初始化結構(需寫在類別之外,不包在類別內)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StatusCallbackInitCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    StatusCallBack cb;</span><br><span class="line">    <span class="keyword">void</span> *param;</span><br><span class="line"></span><br><span class="line">    StatusCallbackInitCtx()</span><br><span class="line">    &#123;</span><br><span class="line">        cb = <span class="literal">NULL</span>;</span><br><span class="line">        param = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="步驟四"><a href="#步驟四" class="headerlink" title="步驟四"></a>步驟四</h3><p>當B類別中步驟一與步驟二完成後來完成這一步<br>Initiate函式 將B類別傳送過來的cb, param接收</p>
<p>.h檔<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//步驟一</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StatusCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> currentTemperature[ <span class="number">3</span> ];</span><br><span class="line">    <span class="keyword">bool</span> overTemperature;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步驟二</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">( *StatusCallBack )</span><span class="params">( <span class="keyword">void</span> *param, StatusCtx ctx )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步驟三</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StatusCallbackInitCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    StatusCallBack cb;</span><br><span class="line">    <span class="keyword">void</span> *param;</span><br><span class="line"></span><br><span class="line">    StatusCallbackInitCtx()</span><br><span class="line">    &#123;</span><br><span class="line">        cb = <span class="literal">NULL</span>;</span><br><span class="line">        param = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A();</span><br><span class="line">    <span class="comment">//步驟四    </span></span><br><span class="line">    <span class="function">RetCode <span class="title">Initiate</span><span class="params">( StatusCtx context )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    StatusCallbackInitCtx context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">    bInitiated = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::RetCode A::Initiate( StatusCallbackInitCtx ctx )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( bInitiated ) <span class="keyword">return</span> Ok;</span><br><span class="line">    </span><br><span class="line">    context.cb = ctx.cb;</span><br><span class="line">    context.param = ctx.param;</span><br><span class="line">    </span><br><span class="line">    bInitiated = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    StartThread();</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::ThreadFunction()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> ( isThreadFuncStarted )</span><br><span class="line">    &#123;</span><br><span class="line">        tic = clock();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * dosomething</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//callback 將StatusCallbackInitCtx結構中的資料往B的onStatusChanged()函式中傳送</span></span><br><span class="line">        <span class="keyword">if</span> ( context.cb != <span class="literal">NULL</span> ) <span class="comment">//一定要檢測是否為NULL, 且一開始必須先清成NULL否則這邊會錯誤 (初始為NULL後，若有值則代表B類別有給他函式位置這樣便可以將值正確的送至對應位置)</span></span><br><span class="line">            context.cb( context.param, temperatureGetCtx );</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            toc = clock();</span><br><span class="line">            <span class="keyword">if</span> ( toc - tic &gt;= loopInterval )<span class="comment">//管控往B送資料的速度</span></span><br><span class="line">            &#123;</span><br><span class="line">                Logger( LOGTRACE, <span class="string">"toc - tic = %d"</span>, toc - tic );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Sleep( <span class="number">30</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::Stop()</span><br><span class="line">&#123;   </span><br><span class="line">    isThreadFuncStarted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="B類別"><a href="#B類別" class="headerlink" title="B類別"></a>B類別</h2><h3 id="步驟一-1"><a href="#步驟一-1" class="headerlink" title="步驟一"></a>步驟一</h3><p>編寫一個Initiate函式，將欲指向的函式assign給cb,<br>param則傳入當下類別</p>
<p>.h檔<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"A.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> QObject </span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B();</span><br><span class="line">    ~B();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Initiate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onStatusChanged</span><span class="params">( <span class="keyword">void</span> *param, StatusCtx ctx)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStatusChanged</span><span class="params">( StatusCtx cb )</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    StatusCtx statusCtx;</span><br><span class="line">    </span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">overheat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">B::B()</span><br><span class="line">&#123;</span><br><span class="line">    Initiate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> B::Initiate()</span><br><span class="line">&#123;</span><br><span class="line">    statusCtx.cb = onStatusChanged;</span><br><span class="line">    statusCtx.param = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="步驟二-1"><a href="#步驟二-1" class="headerlink" title="步驟二"></a>步驟二</h3><p>實作兩個onStatusChanged()函式<br>一個是Static的接收A類別傳過來的並轉型成Non-Static的值才能進行操作<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//將Static的函式轉為non-static的函式,操作內部的值</span></span><br><span class="line"><span class="keyword">void</span> B::onStatusChanged( <span class="keyword">void</span> *param, StatusCtx cb )</span><br><span class="line">&#123;</span><br><span class="line">    B *p = (B *) param;</span><br><span class="line">    p-&gt;onStatusChanged( cb );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> B::onStatusChanged( StatusCtx cb )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//更新溫度</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        currentTemperature = cb.currentTemperature[ i ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以用來判斷callback回來的值並發送信號給需要被通知的地方</span></span><br><span class="line">    <span class="keyword">if</span>( cb.overTemperature )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">overheat</span><span class="params">()</span></span>;</span><br><span class="line">        Logger( LOGDEBUG, <span class="string">"Overheat"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>struct</tag>
        <tag>enum</tag>
        <tag>Callback Function</tag>
      </tags>
  </entry>
  <entry>
    <title>專案_介面與動態連結檔架構</title>
    <url>/2019/03/12/%E5%B0%88%E6%A1%88-%E4%BB%8B%E9%9D%A2%E8%88%87%E5%8B%95%E6%85%8B%E9%80%A3%E7%B5%90%E6%AA%94%E6%9E%B6%E6%A7%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一個專案的架構編寫是非常重要的，若是架構不太好，事隔多時回來看程式碼，應該都忘光光了，所以好的架構可以讓維護更方便，並且除錯也比較快速，今天所紀錄的是介面與<a href="https://teddybearfp.github.io/2018/11/02/C-dll/#more">動態連結檔</a>溝通的架構方法之一，而整個專案架構是遵守Model-View-ViewModel(MVVM)</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>透過上層介面MyProj(project)呼叫MyCore(dll)使用底層函式，這樣做的好處有</p>
<ul>
<li>可以將前端與底層分開進行開發(開發速度快與分工詳細)</li>
<li>函式呼叫正確與否就知道dll正確性(除錯與責任歸屬快速)</li>
</ul>
<h2 id="動態連結檔概述"><a href="#動態連結檔概述" class="headerlink" title="動態連結檔概述"></a>動態連結檔概述</h2><p><img src="https://i.imgur.com/nIgtepD.png" alt></p>
<h2 id="動態連結檔各檔描述"><a href="#動態連結檔各檔描述" class="headerlink" title="動態連結檔各檔描述"></a>動態連結檔各檔描述</h2><h3 id="MyCore-h-MyCore-cpp"><a href="#MyCore-h-MyCore-cpp" class="headerlink" title="MyCore.h / MyCore.cpp"></a>MyCore.h / MyCore.cpp</h3><p>提供純C介面給上層呼叫<br>純C的目的是之後這個動態連結檔的相容性很高</p>
<p>函式內參數為下方例子<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> “C” Initiate(<span class="keyword">void</span> *dev);</span><br></pre></td></tr></table></figure></p>
<p>在此接收到void *dev只有一個目的就是為了轉成Core呼叫Core內部函式*dev = new Core(獲得Core的Class得予再往下呼叫)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Core *core = (Core*)*dev;</span><br><span class="line">CoreRetCide ret = core-&gt;initiate(dev,ctx);</span><br></pre></td></tr></table></figure></p>
<p>編寫結構與列舉<br>enum, struct<br>在此注意要導入其它的.h(例如core.h, TBFP03.h)</p>
<h3 id="Core-h-Core-cpp"><a href="#Core-h-Core-cpp" class="headerlink" title="Core.h / Core.cpp"></a>Core.h / Core.cpp</h3><p>這一層就是整台機器</p>
<p>增加所有板子、Sensor函式<br>    (例如:目前有TBFP03板子往後可能新增TBFP04…)</p>
<p>函式呼叫板子與Sensor功能</p>
<h3 id="Controlboard-h-Controlboard-cpp"><a href="#Controlboard-h-Controlboard-cpp" class="headerlink" title="Controlboard.h / Controlboard.cpp"></a>Controlboard.h / Controlboard.cpp</h3><p>基類，用來讓類似的新板子有同個雛形</p>
<p>Virtual Function = 0 的要實作</p>
<p>Virtual Function { do Something }可實作可不實作</p>
<p>Protected的內容，繼承者才可以使用其他人無法使用</p>
<h3 id="TBFP03-h-TBFP03-cpp"><a href="#TBFP03-h-TBFP03-cpp" class="headerlink" title="TBFP03.h / TBFP03.cpp"></a>TBFP03.h / TBFP03.cpp</h3><p>繼承Controlboard並實作</p>
<p>用到基類的enum,struct需加class(告訴編譯器屬於哪個class)<br>例如:<br>Controlboard.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> MotorID</span><br><span class="line">&#123;</span><br><span class="line">    MotorA,</span><br><span class="line">    MotorB,</span><br><span class="line">    MotorC,</span><br><span class="line">    MotorALL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MotorParam</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> id;</span><br><span class="line">    <span class="keyword">float</span> steps;</span><br><span class="line">    <span class="keyword">float</span> hz;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pace;</span><br><span class="line">    MotorParam()</span><br><span class="line">    &#123;</span><br><span class="line">        steps = <span class="number">1</span>;</span><br><span class="line">        hz = <span class="number">20</span>;</span><br><span class="line">        pace = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>TBFP03.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Controlboard::MotorID</span><br></pre></td></tr></table></figure></p>
<h2 id="動態連結檔實作"><a href="#動態連結檔實作" class="headerlink" title="動態連結檔實作"></a>動態連結檔實作</h2><h3 id="MyCore-h-MyCore-cpp-1"><a href="#MyCore-h-MyCore-cpp-1" class="headerlink" title="MyCore.h / MyCore.cpp"></a>MyCore.h / MyCore.cpp</h3><p>MyCore.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYCORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYCORE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(MYCORE_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> MYCORE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> MYCORE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* CoreDev;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoreMotorCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> moveSteps[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">float</span> moveSpeed[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">float</span> stopTime;</span><br><span class="line">    CoreMotorCtx()</span><br><span class="line">    &#123;</span><br><span class="line">        moveSteps[<span class="number">0</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        moveSpeed[<span class="number">0</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        stopTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">MYCORE_API CoreRetCode <span class="title">CoreMotorMove</span><span class="params">(CoreDev dev, CoreMotorCtx motorCtx)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>MyCore.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tbfp03.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"core.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">CVCORE_API CoreRetCode <span class="title">CoreMotorMove</span><span class="params">( CoreDev dev, CoreMotorCtx motorCtx )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( dev == <span class="literal">NULL</span> ) <span class="keyword">return</span> CoreFailed;</span><br><span class="line"></span><br><span class="line">    Core *core = (Core *)dev;</span><br><span class="line">    CoreRetCode ret = core-&gt;MotorMove(motorCtx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ret != CoreOk )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Core-h-Core-cpp-1"><a href="#Core-h-Core-cpp-1" class="headerlink" title="Core.h / Core.cpp"></a>Core.h / Core.cpp</h3><p>Core.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CORE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tbfp03.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Core</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Core();</span><br><span class="line">    </span><br><span class="line">    <span class="function">CoreRetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span></span>;</span><br><span class="line">    </span><br><span class="line">    TBFP03 tbfp03;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Core.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CoreRetCode Core::MotorMove(CoreMotorCtx motorCtx)</span><br><span class="line">&#123;</span><br><span class="line">    ControlBoard::RetCode status = tbfp03.MotorMove(motorCtx);</span><br><span class="line">    <span class="keyword">if</span>( status == ControlBoard::Failed)</span><br><span class="line">        <span class="keyword">return</span> CoreFailed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CoreOk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Controlboard-h-Controlboard-cpp-1"><a href="#Controlboard-h-Controlboard-cpp-1" class="headerlink" title="Controlboard.h / Controlboard.cpp"></a>Controlboard.h / Controlboard.cpp</h3><p>Controlboard.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONTROLBOARD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTROLBOARD_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlBoard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ControlBoard();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONTROLBOARD_H</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="TBFP03-h-TBFP03-cpp-1"><a href="#TBFP03-h-TBFP03-cpp-1" class="headerlink" title="TBFP03.h / TBFP03.cpp"></a>TBFP03.h / TBFP03.cpp</h3><p>TBFP03.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBFP03_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBFP03_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"controlboard.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBFP03</span>:</span> <span class="keyword">public</span> ControlBoard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TBFP03();</span><br><span class="line">    <span class="function">CoreRetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<p>TBFP03.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CoreRetCode status;</span><br><span class="line">status = doSomeThing;</span><br><span class="line"><span class="keyword">if</span>(status != CoreRetCode::Ok)&#123;</span><br><span class="line">    <span class="keyword">return</span> Failed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Ok</span><br></pre></td></tr></table></figure></p>
<h2 id="可能遇到的問題"><a href="#可能遇到的問題" class="headerlink" title="可能遇到的問題"></a>可能遇到的問題</h2><h3 id="問題一"><a href="#問題一" class="headerlink" title="問題一"></a>問題一</h3><p>Q  Complier Error C3646的定義為unknown override specifier</p>
<p>A   此次的解決方法是因為a.h include “c.h”了，這時候再用b.h include “a.h”又同時include “c.h”<br>        所以發生重複導入問題，應該只要include “a.h”</p>
<pre><code>專業解答:循環引用
在分離式編譯中，我們往往習慣將不同的類或者函數分別寫在不同的函數中，提高工作效率。
但如果在使用時出現兩個類分別在兩個不同的文件中編寫，並且相互引用，則會出現循環引用，引發此錯誤。
原文網址：https://read01.com/J6k0yz.html
</code></pre><h3 id="問題二"><a href="#問題二" class="headerlink" title="問題二"></a>問題二</h3><p>Q     使用別的class中的enum程式不認得，例如Class A中的enum MotorID<br>        在使用時MotorID不被認得</p>
<p>A       因為使用其他的class中的member需要在前面表示是屬於哪個class<br>        A::MotorID這樣就OK囉!</p>
<h3 id="問題三"><a href="#問題三" class="headerlink" title="問題三"></a>問題三</h3><p>Q      Qml中不能使用dll中的 enum  例如:enum MotorID</p>
<p>A      在main.cpp中註冊 qRegisterMetaType<motorid>(“MotorID”);</motorid></p>
<h3 id="問題四"><a href="#問題四" class="headerlink" title="問題四"></a>問題四</h3><p>Q       找不到內部library的 .lib</p>
<p>A       將pro的lib路徑檢查導入正確位置</p>
]]></content>
      <categories>
        <category>架構</category>
      </categories>
      <tags>
        <tag>架構</tag>
      </tags>
  </entry>
  <entry>
    <title>Cyconsole</title>
    <url>/2019/03/11/Cyconsole/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在研發過程中，軟硬體與韌體都非常重要，某一個的錯誤都會導致異常現象，有時候檢驗不出軟體問題的時候我們就需要檢查韌體與硬體的問題，最近認識這個工具Cyconsole，可以透過Cyconsole下指令給firmware或是硬體，可以驗證Cypress或是FPGA Code正確性，這一篇記錄一下這個我很少用到的工具</p>
<h2 id="Cyconsole"><a href="#Cyconsole" class="headerlink" title="Cyconsole"></a>Cyconsole</h2><h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><p>是Cypress公司釋出的軟體，可以用來下指令到底層，來驅動韌體或是硬體，<br>用來檢測，Cyconsole它的Icon如下圖<br><img src="https://i.imgur.com/2ovPmIF.png" alt></p>
<h3 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h3><p>在連結裝置後，我們開Cyconsole並點選到Misc.可以找到我們的USB連結裝置，接著點選上方Options內的Ez-USB會跳出下方第二張圖<br><img src="https://i.imgur.com/NqQ8BbT.png" alt></p>
<h3 id="EZ-USB"><a href="#EZ-USB" class="headerlink" title="EZ-USB"></a>EZ-USB</h3><p><img src="https://i.imgur.com/GnrVAc0.png" alt></p>
<h4 id="逐一輸入的方式-通常是直接下給FPGA"><a href="#逐一輸入的方式-通常是直接下給FPGA" class="headerlink" title="逐一輸入的方式(通常是直接下給FPGA)"></a>逐一輸入的方式(通常是直接下給FPGA)</h4><ul>
<li>Req輸入request方式</li>
<li>Value輸入計算出來的16進制值</li>
<li>Index輸入位置</li>
</ul>
<p>一組一組的輸入例如:<br>第一二組輸入的value為十進制4000<br>用兩個Byte表示十六進制為FA0</p>
<p>第三四組輸入的value為十進制1500<br>用兩個Byte表示十六進制為5DC<br>皆輸入完成後動作</p>
<p>第一組(HiByte)<br>req: 0x6e<br>value: 0x000f<br>index: 0x0a<br>Vend Req</p>
<p>第二組(LoByte)<br>req: 0x6e<br>value: 0x00a0<br>index: 0x0b<br>Vend Req</p>
<p>第三組(HiByte)<br>req: 0x6e<br>value: 0x0005<br>index: 0x0c<br>Vend Req</p>
<p>第四組(LoByte)<br>req: 0x6e<br>value: 0x00dc<br>index: 0x0d<br>Vend Req</p>
<h4 id="一整組buffer傳入-通常可能是先傳給Firmware處理"><a href="#一整組buffer傳入-通常可能是先傳給Firmware處理" class="headerlink" title="一整組buffer傳入(通常可能是先傳給Firmware處理)"></a>一整組buffer傳入(通常可能是先傳給Firmware處理)</h4><ul>
<li>request: Firmware定義的request</li>
<li>Length: buffer長度</li>
<li>Dir: 資料的方向性</li>
<li>Hex Byte: 照順序輸入值</li>
</ul>
<p>跟上方的輸入的值一樣但式輸入的request不一樣<br>req: 0x50<br>length: 5<br>dir: 0<br>Hex Byte: 00 0f a0 05 dc<br>Vend Req</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Cyconsole</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 筆記</title>
    <url>/2019/03/04/LeetCode/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Leetcode裡面有許多有趣的題目，在作答過程中可以腦力激盪，答題完後還可以參考大家是怎麼來解決問題的，因為會發現程式不僅功能要正確，還要考慮到Runtime與Memory的消耗，所以此篇記錄了一些不錯的解題方法</p>
<h2 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136_Single Number"></a>136_Single Number</h2><p>這個題目是要從一個元素皆出現兩次的整數陣列中，找尋唯一出現過一次的整數<br>下面我們利用XOR互斥的概念解析這個題目<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e: nums) a ^= e;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Runtime: 16 ms<br>Memory: 9.7MB</p>
<h2 id="461-Hamming-Distance"><a href="#461-Hamming-Distance" class="headerlink" title="461_Hamming Distance"></a>461_Hamming Distance</h2><p>Hamming Distance指的是將2個數字轉二進位數字後計算漢明距離<br>ex:<br>Input: 1, 4<br>0 0 0 1<br>0 1 0 0</p>
<p>Output: 2<br>解題辦法:我們用XOR得到兩個數的互斥值取得漢明距離<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = x ^ y;</span><br><span class="line">    <span class="keyword">int</span> hd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">1</span>) hd++;</span><br><span class="line">        i &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="二元樹題型"><a href="#二元樹題型" class="headerlink" title="二元樹題型"></a>二元樹題型</h2><h3 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104_Maximum Depth of Binary Tree"></a>104_Maximum Depth of Binary Tree</h3><p>這題要求二元樹的深度<br>所謂二元樹的深度就是從 根節點(root) 到 葉節點(leaf) 的距離。 (沒有子節點的節點稱做葉節點)<br>解題關鍵遞迴呼叫maxDepth()函式<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    TreeNode* tmp = root-&gt;left;</span><br><span class="line">    root-&gt;left = invertTree(root-&gt;right);</span><br><span class="line">    root-&gt;right = invertTree(tmp);</span><br><span class="line">    <span class="keyword">return</span> max(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="226-Invert-Binary-Tree"><a href="#226-Invert-Binary-Tree" class="headerlink" title="226_Invert Binary Tree"></a>226_Invert Binary Tree</h3><p>用遞迴的方式二元樹以root為中心左右反轉<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    TreeNode* right = invertTree(root-&gt;right);</span><br><span class="line">    TreeNode* left = invertTree(root-&gt;left);</span><br><span class="line">    root-&gt;left = right;</span><br><span class="line">    root-&gt;right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>StateMachine 狀態機</title>
    <url>/2019/02/26/StateMachine/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們程式越寫越大型，可呼叫的函式越來越多的時候，就應該來做函式的控管，某些時候不能呼叫某些函式，否則可能導致不可預期的結果，例如:還沒Initial控制面板，卻呼叫函式要求馬達移動，這樣會有錯誤發生。所以我們可以編寫狀態機來解決這問題。</p>
<h2 id="狀態機舉例"><a href="#狀態機舉例" class="headerlink" title="狀態機舉例"></a>狀態機舉例</h2><p>可以透過這一篇<a href="http://nthucad.cs.nthu.edu.tw/~yyliu/personal/nou/04ds/fsm.html" target="_blank" rel="noopener">有限狀態機 (finite state machine)</a>舉例的販賣機行為了解狀態機的控管</p>
<h2 id="狀態機名詞簡介"><a href="#狀態機名詞簡介" class="headerlink" title="狀態機名詞簡介"></a>狀態機名詞簡介</h2><p>狀態<br>組成狀態機器的基本單位。 狀態機器可在任何特定時間進入一種狀態。</p>
<p>進入動作<br>進入狀態時所執行的動作</p>
<p>結束動作<br>結束狀態時所執行的動作</p>
<p>轉換<br>兩個狀態之間的定向關係，代表狀態機器對於發生特定事件類型的完整回應。</p>
<p>共用轉換<br>與一個或多個轉換共用來源狀態及觸發程序的轉換，但每個轉換各有其唯一的條件和動作。</p>
<p>觸發程序<br>會導致轉換發生的觸發活動。</p>
<p>條件<br>在發生觸發之後，條件約束必須評估為 true，才能使轉換完成。</p>
<p>轉換動作<br>在執行特定轉換時所執行的活動。</p>
<p>條件轉換<br>有明確條件的轉換。</p>
<p>自行轉換<br>從某狀態轉換成該狀態本身的轉換。</p>
<p>起始狀態<br>代表狀態機器起點的狀態。</p>
<p>最終狀態<br>代表狀態機器完成的狀態。</p>
<h2 id="狀態機設定"><a href="#狀態機設定" class="headerlink" title="狀態機設定"></a>狀態機設定</h2><ul>
<li><p>狀態可以有 Entry 和 Exit 動作。 (設定為最終狀態的狀態只能有一個進入動作)。</p>
</li>
<li><p>所有狀態都至少要有一個轉換，但最終狀態不能有任何轉換。</p>
</li>
</ul>
<h2 id="QState函式"><a href="#QState函式" class="headerlink" title="QState函式"></a>QState函式</h2><p>以下舉例為在statemachine.cpp中編寫的情況<br>statemachine為單例Inst()</p>
<h3 id="添加狀態"><a href="#添加狀態" class="headerlink" title="添加狀態"></a>添加狀態</h3><p>addState 添加狀態</p>
<p>ex:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">InitState stateInit;</span><br><span class="line">addState(&amp;stateInit);</span><br></pre></td></tr></table></figure></p>
<h3 id="添加移轉狀態"><a href="#添加移轉狀態" class="headerlink" title="添加移轉狀態"></a>添加移轉狀態</h3><p>利用 QState::addTransition做state machine間的切換</p>
<p>ex:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line"><span class="comment">//上面這一句表示在stateNone狀態時接收到statemachine傳出的init()信號後會將state切換到stateInit狀態</span></span><br><span class="line"></span><br><span class="line">stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( move(<span class="keyword">float</span>, <span class="keyword">float</span>)), &amp;stateMotorMove );</span><br><span class="line"><span class="comment">//上面這一句表示在stateIdle狀態時接收到statemachine傳出的move(float, float)信號後會將state切換到stateMotorMove狀態</span></span><br></pre></td></tr></table></figure></p>
<h3 id="連結進入狀態與錯誤狀態"><a href="#連結進入狀態與錯誤狀態" class="headerlink" title="連結進入狀態與錯誤狀態"></a>連結進入狀態與錯誤狀態</h3><p>第一句將QAbstractState的entered信號跟自己創的on_state_entered信號槽連結<br>第二句是將每個狀態添加移轉狀態到errorstate<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> StateMachine::SetupState(BaseState *state)</span><br><span class="line">&#123;</span><br><span class="line">    connect( state, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()) );</span><br><span class="line">    state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</p>
<h3 id="設定初始狀態"><a href="#設定初始狀態" class="headerlink" title="設定初始狀態"></a>設定初始狀態</h3><p>透過setInitialState設定初始狀態</p>
<p>ex:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">NoneState stateNone;</span><br><span class="line">setInitialState( &amp;stateNone );</span><br></pre></td></tr></table></figure></p>
<h3 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h3><p>在主執行緒(gui)中執行<br>start();</p>
<p>可以使用QObject的moveToThread將QObject的class創另一條新開的執行緒執行</p>
<p>statemachine.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QThread thd;</span><br></pre></td></tr></table></figure></p>
<p>statemachine.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">moveToThread(&amp;thd);</span><br><span class="line">connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line">thd.start();</span><br></pre></td></tr></table></figure></p>
<h2 id="狀態機流程"><a href="#狀態機流程" class="headerlink" title="狀態機流程"></a>狀態機流程</h2><h3 id="創建StateMachine-Class"><a href="#創建StateMachine-Class" class="headerlink" title="創建StateMachine Class"></a>創建StateMachine Class</h3><p>StateMachine class繼承QStateMachine並使用Q_OBJECT巨集，將class設為單例模式Static</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> :</span> <span class="keyword">public</span> QStateMachine</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    StateMachine();</span><br><span class="line">    ~StateMachine();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> StateMachine *<span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;sm; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> StateMachine sm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="創建BuildGraph-函式"><a href="#創建BuildGraph-函式" class="headerlink" title="創建BuildGraph()函式"></a>創建BuildGraph()函式</h3><p>接著在cpp內創建BuildGraph()函式新增狀態addState()、新增轉移addTrasition()、connect進入後的signal與slot<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> StateMachine::BuildGraph()</span><br><span class="line">&#123;</span><br><span class="line">    addState( &amp;stateNone );</span><br><span class="line">    addState( &amp;stateInit );</span><br><span class="line">    addState( &amp;stateHome );</span><br><span class="line">    addState( &amp;stateIdle );</span><br><span class="line"></span><br><span class="line">    stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line">    statePause.addTransition( <span class="keyword">this</span>, SIGNAL(cancel()), &amp;stateIdle );</span><br><span class="line"></span><br><span class="line">    SetupState(&amp;stateNone);</span><br><span class="line">    SetupState(&amp;stateInit);</span><br><span class="line"></span><br><span class="line">    setInitialState( &amp;stateNone );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the state machine with thread</span></span><br><span class="line">    moveToThread(&amp;thd);</span><br><span class="line">    connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line"></span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), QCoreApplication::instance(), SLOT(quit()));</span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), &amp;thd, SLOT(quit()));</span><br><span class="line"></span><br><span class="line">    connect(&amp;stateMotorMove, SIGNAL(moveOk()), <span class="keyword">this</span>, SLOT(onMoveOk()));</span><br><span class="line"></span><br><span class="line">    thd.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面步驟都完成後使用moveToThread將屬於QObject的class在新開的執行緒中執行<br>最後再透過ViewChanger呼叫BuildGraph()函式讓狀態機創建、連結與執行<br>例如:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">StateMachine::Inst()-&gt;BuildGraph();</span><br></pre></td></tr></table></figure></p>
<h2 id="程式關閉處理"><a href="#程式關閉處理" class="headerlink" title="程式關閉處理"></a>程式關閉處理</h2><p>為了避免程式運作時，按右上角的X終止程式<br>我們可以在qml中更改關閉行為<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">onClosing&#123;</span><br><span class="line">    close.accept =<span class="literal">false</span></span><br><span class="line">    mainWindow.closing()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改由C++內的狀態機去處理<br>運用connect的方式指定某些狀態可以關閉<br>某些狀態不可關閉(ex:RunningState、MotorMove…)</p>
<h2 id="實作狀態機"><a href="#實作狀態機" class="headerlink" title="實作狀態機"></a>實作狀態機</h2><p><img src="https://i.imgur.com/hSsomJS.png" alt title="馬達控制狀態機圖"></p>
<h3 id="檔案名稱簡介"><a href="#檔案名稱簡介" class="headerlink" title="檔案名稱簡介"></a>檔案名稱簡介</h3><p>StateMachine: 定義狀態機、build graph<br>BaseState: 所有狀態的基類<br>InitialState: 初始化狀態<br>HomeState: 馬達歸位狀態<br>MotorMoveState: 馬達移動狀態<br>ErrorState: 錯誤狀態<br>Uninitial: 最終狀態</p>
<h3 id="StateMachine"><a href="#StateMachine" class="headerlink" title="StateMachine"></a>StateMachine</h3><p>statemachine.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STATEMACHINE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATEMACHINE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/nonestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/initstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/homestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/idlestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/motormovestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/errorstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/uninitstate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> :</span> <span class="keyword">public</span> QStateMachine</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    StateMachine();</span><br><span class="line">    ~StateMachine();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> StateMachine *<span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;sm; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildGraph</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">StopSMThread</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> StateMachine sm;</span><br><span class="line"></span><br><span class="line">    NoneState stateNone;</span><br><span class="line">    InitState stateInit;</span><br><span class="line">    HomeState stateHome;</span><br><span class="line">    IdleState stateIdle;</span><br><span class="line">    MotorMoveState stateMotorMove;</span><br><span class="line">    ErrorState stateError;</span><br><span class="line">    UninitState stateUninit;</span><br><span class="line"></span><br><span class="line">    QThread thd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch to next state by idle state</span></span><br><span class="line">    QString nextState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetupState</span><span class="params">(BaseState *state)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">//CommonState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uninit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">state_changed</span><span class="params">( QString )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MoveState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//HomeState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">home</span><span class="params">(CoreMotorID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STATEMACHINE_H</span></span></span><br></pre></td></tr></table></figure>
<p>statemachine.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line">StateMachine StateMachine::sm;</span><br><span class="line"></span><br><span class="line">StateMachine::StateMachine()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">StateMachine::~StateMachine()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::BuildGraph()</span><br><span class="line">&#123;</span><br><span class="line">    addState( &amp;stateNone );</span><br><span class="line">    addState( &amp;stateInit );</span><br><span class="line">    addState( &amp;stateHome );</span><br><span class="line">    addState( &amp;stateIdle );</span><br><span class="line">    addState( &amp;stateMotorMove);</span><br><span class="line">    addState( &amp;stateError );</span><br><span class="line">    addState( &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line"></span><br><span class="line">    stateInit.addTransition( &amp;stateInit, SIGNAL(ok()), &amp;stateHome );</span><br><span class="line">    stateInit.addTransition( &amp;stateInit, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line"></span><br><span class="line">    stateHome.addTransition( &amp;stateHome, SIGNAL(ok()), &amp;stateIdle );</span><br><span class="line">    stateHome.addTransition( &amp;stateHome, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">    stateHome.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( move(<span class="keyword">float</span> , <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)), &amp;stateMotorMove );</span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( home(CoreMotorID)), &amp;stateHome );</span><br><span class="line">    stateIdle.addTransition( &amp;stateIdle, SIGNAL( error(QState *)), &amp;stateError );</span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateMotorMove.addTransition( &amp;stateMotorMove, SIGNAL(ok()), &amp;stateIdle );</span><br><span class="line">    stateMotorMove.addTransition( &amp;stateMotorMove, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">    stateMotorMove.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateInit.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line">    stateError.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    SetupState(&amp;stateNone);</span><br><span class="line">    SetupState(&amp;stateInit);</span><br><span class="line">    SetupState(&amp;stateHome);</span><br><span class="line">    SetupState(&amp;stateIdle);</span><br><span class="line">    SetupState(&amp;stateMotorMove);</span><br><span class="line">    SetupState(&amp;stateError);</span><br><span class="line"></span><br><span class="line">    setInitialState( &amp;stateNone );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the state machine with thread</span></span><br><span class="line">    moveToThread(&amp;thd);</span><br><span class="line">    connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line"></span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), QCoreApplication::instance(), SLOT(quit()));</span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), &amp;thd, SLOT(quit()));</span><br><span class="line">    </span><br><span class="line">    thd.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::SetupState(BaseState *state)</span><br><span class="line">&#123;</span><br><span class="line">    connect( state, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()) );</span><br><span class="line">    state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    QString state = (*configuration().begin())-&gt;objectName();</span><br><span class="line">        </span><br><span class="line">    <span class="function">emit <span class="title">state_changed</span><span class="params">( state )</span></span>;</span><br><span class="line">    qDebug() &lt;&lt; state;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="BaseState"><a href="#BaseState" class="headerlink" title="BaseState"></a>BaseState</h3><p>basestate.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BASESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BASESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QState&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTimer&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseState</span> :</span> <span class="keyword">public</span> QState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BaseState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">GetErrMsg</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> errMessage; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    QList&lt;QVariant&gt; arguments;</span><br><span class="line"></span><br><span class="line">    QString errMessage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">entering</span><span class="params">(QState *)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(QState *)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BASESTATE_H</span></span></span><br></pre></td></tr></table></figure></p>
<p>basestate.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line">BaseState::BaseState(QObject *parent)</span><br><span class="line">&#123;</span><br><span class="line">    setParent(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BaseState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    arguments.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( objectName() != <span class="string">"NoneState"</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( (*(QStateMachine::SignalEvent *)event).sender() != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">                (*(QStateMachine::SignalEvent *)event).arguments().size() &gt; <span class="number">0</span> )</span><br><span class="line">            arguments = (*(QStateMachine::SignalEvent *)event).arguments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    connect( <span class="keyword">this</span>, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()), Qt::UniqueConnection );</span><br><span class="line"></span><br><span class="line">    entering( <span class="keyword">this</span> );</span><br><span class="line"></span><br><span class="line">    QState::onEntry( event );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="InitialState"><a href="#InitialState" class="headerlink" title="InitialState"></a>InitialState</h3><p>initialstate.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INITSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QState&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">InitState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// INITSTATE_H</span></span></span><br></pre></td></tr></table></figure></p>
<p>initialstate.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"initstate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"models/db.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">InitState::InitState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"InitState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InitState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InitState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. check DB  &amp; open DB        =&gt; emit error(this ) if fail</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Open db</span></span><br><span class="line">    DB::Inst()-&gt;connectToDataBase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. check HW base board       =&gt; emit error( this ) if fail</span></span><br><span class="line"></span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;Initiate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ret != Device::Ok )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( ret == Device::CtrlboardCommError )</span><br><span class="line">        &#123;</span><br><span class="line">            errMessage = <span class="string">"Cannot initiate the Device device ("</span> + QString::number(ret).rightJustified(<span class="number">3</span>, <span class="string">'0'</span>) + <span class="string">") "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//emit error(this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="HomeState"><a href="#HomeState" class="headerlink" title="HomeState"></a>HomeState</h3><p>homestate.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HOMESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HOMESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">HomeState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorsHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorXHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorYHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorZHome</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// HOMESTATE_H</span></span></span><br></pre></td></tr></table></figure></p>
<p>homestate.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"homestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line">HomeState::HomeState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"HomeState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( !arguments.isEmpty() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorALL )</span><br><span class="line">            MotorsHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorX )</span><br><span class="line">            MotorXHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorY )</span><br><span class="line">            MotorYHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorZ )</span><br><span class="line">            MotorZHome();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MotorsHome();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorsHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorALL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorXHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorX);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorYHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorZHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorZ);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MotorMoveState"><a href="#MotorMoveState" class="headerlink" title="MotorMoveState"></a>MotorMoveState</h3><p>motormovestate.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MOTORMOVESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTORMOVESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotorMoveState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MotorMoveState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorMove</span><span class="params">(<span class="keyword">float</span> motorXDis, <span class="keyword">float</span> motorYDis, <span class="keyword">float</span> motorZDis,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">float</span> motorXSpeed, <span class="keyword">float</span> motorYSpeed, <span class="keyword">float</span> motorZSpeed)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MOTORMOVESTATE_H</span></span></span><br></pre></td></tr></table></figure></p>
<p>motormovestate.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"motormovestate.h"</span></span></span><br><span class="line"></span><br><span class="line">MotorMoveState::MotorMoveState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"MotorMoveState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    MotorMove(arguments[<span class="number">0</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">1</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">2</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">3</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">4</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">5</span>].toFloat());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::MotorMove(<span class="keyword">float</span> motorXDis, <span class="keyword">float</span> motorYDis, <span class="keyword">float</span> motorZDis,<span class="keyword">float</span> motorXSpeed, <span class="keyword">float</span> motorYSpeed, <span class="keyword">float</span> motorZSpeed)</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorMove(motorXDis,motorYDis,motorZDis,motorXSpeed,motorYSpeed,motorZSpeed);</span><br><span class="line">    <span class="keyword">if</span>(ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="ErrorState"><a href="#ErrorState" class="headerlink" title="ErrorState"></a>ErrorState</h3><p>errorstate.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ERRORSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERRORSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ErrorState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">BaseState *<span class="title">GetErrorState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    BaseState *errState;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ERRORSTATE_H</span></span></span><br></pre></td></tr></table></figure></p>
<p>errorstate.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"errorstate.h"</span></span></span><br><span class="line"></span><br><span class="line">ErrorState::ErrorState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"ErrorState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ErrorState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line"></span><br><span class="line">    errState = qvariant_cast&lt;BaseState *&gt;(arguments[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ErrorState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"InitialState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"HomeState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"MotorMoveState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">        </span><br><span class="line">    emit ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BaseState *ErrorState::GetErrorState()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> errState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="UninitialState"><a href="#UninitialState" class="headerlink" title="UninitialState"></a>UninitialState</h3><p>uninitialstate.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNINITSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNINITSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFinalState&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UninitState</span> :</span> <span class="keyword">public</span> QFinalState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">UninitState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// UNINITSTATE_H</span></span></span><br></pre></td></tr></table></figure></p>
<p>uninitialstate.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uninitstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"models/db.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line">UninitState::UninitState()</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"UninitState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> UninitState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. close DB</span></span><br><span class="line">    DB::Inst()-&gt;closeDataBase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. uniniate HW base board</span></span><br><span class="line">    Device::Inst()-&gt;Uninitate();</span><br><span class="line"></span><br><span class="line">    QFinalState::onEntry(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://docs.microsoft.com/zh-tw/dotnet/framework/windows-workflow-foundation/state-machine-workflows" target="_blank" rel="noopener">狀態機器工作流程</a><br><a href="https://www.itread01.com/content/1548857553.html" target="_blank" rel="noopener">Qt圖元，場景，檢視，狀態機，狀態轉移，動畫設定等的示列（備忘）</a><br><a href="http://sevensavants.blogspot.com/2015/02/2015-02-11-qt-animation.html" target="_blank" rel="noopener">竹林七賢-2015-02-11-Qt-Animation</a><br><a href="https://pyqt4doc.appspot.com/qstate.html" target="_blank" rel="noopener">QState Class Reference</a><br><a href="https://pyqt4doc.appspot.com/qstatemachine.html#configuration" target="_blank" rel="noopener">QStateMachine Class Reference</a></p>
]]></content>
      <categories>
        <category>架構</category>
      </categories>
      <tags>
        <tag>StateMachine</tag>
      </tags>
  </entry>
  <entry>
    <title>Signal &amp; Slot</title>
    <url>/2019/02/23/Signal-Slot/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這次編寫State Machine的時候遇到一個問題，如果先呼叫QState的函式再呼叫主執行緒的函式，得到的結果會是主執行緒得先完成跟預期順序不一致，因為QState本身也是一條執行緒所以導致這結果，所以我們運用Signal跟Slot機制傳遞事件完成信號，讓主執行緒知道QState內的函式完成函式內容了</p>
<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><h3 id="檔案簡介"><a href="#檔案簡介" class="headerlink" title="檔案簡介"></a>檔案簡介</h3><p>A檔案: 狀態機某狀態(ex: Class MotorMoveState)<br>B檔案: 狀態機(Static) (Class StateMachine)<br>C檔案: UI介面cpp (Class FunctionTester)</p>
<h3 id="錯誤實例"><a href="#錯誤實例" class="headerlink" title="錯誤實例"></a>錯誤實例</h3><p>在C檔案中<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> FunctionTester::MotorMove(<span class="keyword">float</span> steps, <span class="keyword">float</span> speed)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> xPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> yPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> zPosition = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    StateMachine::Inst()-&gt;move(steps, speed); <span class="comment">//move為StateMachine內的Signal, prototype為move(float, float);</span></span><br><span class="line">    GetMotorsPosition(&amp;xPosition, &amp;yPosition, &amp;zPosition);</span><br><span class="line">    </span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"xPosition:"</span>&lt;&lt;xPosition;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"yPosition:"</span>&lt;&lt;yPosition;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"zPosition:"</span>&lt;&lt;zPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上程式碼原本期許是馬達移動完後，將三組int記憶體位置傳下去，收到時會得到x,y,z的位置。<br>但是因為StateMachine的編寫是QState透過另一條執行緒達成的，所以會在馬達移動的同時繼續往下執行，先執行了取得馬達位置GetMotorsPosition(int*, int*, int*)，這樣取得的位置都會是上一次馬達移動完成後的位置，如上x,y,z第一次執行時會得到0,0,0</p>
<h2 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h2><p>我們要馬達移動完成後，數據自動更新的辦法就是要用，Signal跟Slot，這樣即使StateMachine自身為一條執行緒依舊會在完成時告訴我們上層UI.cpp完成事件</p>
<h3 id="Signal-amp-Slot"><a href="#Signal-amp-Slot" class="headerlink" title="Signal &amp; Slot"></a>Signal &amp; Slot</h3><p>Qt管理的物件必須繼承QObject類別，以提供Qt物件的Meta訊息，若要實作Signal與Slot機制，則必須包括Q_OBJECT巨集，moc會處理Qt的C++擴充（Meta-Object System），使用moc讀取C++標頭檔案，若發現類別定義中包括Q_OBJECT巨集，就會產生Qt meta-object相關的C++程式碼。</p>
<ul>
<li><p>一個Signal可以多次使用connect函式與多個Slot連結,但是Signal送出後這些Slot不能保證接收到的順序,但都會執行一次</p>
</li>
<li><p>多個Signal可以連結同一個Slot</p>
</li>
<li><p>Signal皆為void型態所以不能回傳值，只能放在參數中傳遞</p>
</li>
</ul>
<p>Signal與Slot的簽名是對應的，若Signal帶有參數，則對應的Slot也要帶有參數。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">valueChanged</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>Signal命名: 過去式動詞(ex: captured)<br>Slot命名: on大寫開頭的signal(ex:onCaptured)</p>
<h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>傳接球的概念</p>
<p>connect(恰恰, SIGNAL(丟球), 大師兄, SLOT(接球));</p>
<p>恰恰丟球給大師兄接到後再作後續處理</p>
<p>接球 {<br>    對接到的球做處理;<br>    }</p>
<h4 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h4><p>有connect就要disconnect才不會讓記憶體釋放的時候有異常</p>
<p>disconnect(恰恰, SIGNAL(丟球), 大師兄, SLOT(接球));</p>
<h4 id="簡易傳遞"><a href="#簡易傳遞" class="headerlink" title="簡易傳遞"></a>簡易傳遞</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span><span class="keyword">public</span> QObject <span class="comment">//Qt管理的物件必須繼承QObject類別</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//必須包括Q_OBJECT巨集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A();</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">received</span><span class="params">()</span></span>; <span class="comment">//負責送出</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">emit <span class="title">received</span><span class="params">()</span></span>; <span class="comment">//建構子完成時送出信號</span></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="comment">//B.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"A.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> QObject <span class="comment">//Qt管理的物件必須繼承QObject類別</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//必須包括Q_OBJECT巨集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onReceived</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.cpp</span></span><br><span class="line">B::B()</span><br><span class="line">&#123;</span><br><span class="line">    connect(&amp;a,SIGNAL(received()),<span class="keyword">this</span>,SLOT(onReceived()), Qt::DirectConnection);  <span class="comment">//DirectConnection指的是用同一條執行緒執行完才繼續</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> B::onReceived() &#123;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Received!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解決辦法實作"><a href="#解決辦法實作" class="headerlink" title="解決辦法實作"></a>解決辦法實作</h3><p>使用signal跟slot讓QState完成時得到通知<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A.h</span></span><br><span class="line">signal:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">movedOk</span><span class="params">()</span></span>;</span><br><span class="line">A.cpp    </span><br><span class="line">    function &#123;</span><br><span class="line">        <span class="comment">//完成時</span></span><br><span class="line">        <span class="function">emit <span class="title">movedOk</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.h</span></span><br><span class="line">signal:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">positionChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onMovedOk</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.cpp    </span></span><br><span class="line">    <span class="comment">//build graph內部寫 (創狀態機時)</span></span><br><span class="line">    connect(&amp;A, movedOk(), <span class="keyword">this</span>, OnMovedOk());</span><br><span class="line">    <span class="keyword">void</span> B::onMovedOk &#123;</span><br><span class="line">        <span class="function">emit <span class="title">positionChanged</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.h</span></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPositionChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.cpp    </span></span><br><span class="line">    C::C &#123;</span><br><span class="line">        connect(B::Inst(), positionChanged(), <span class="keyword">this</span>, onPositionChanged()); </span><br><span class="line">        <span class="comment">//特別注意B::Inst()本身就為記憶體位置所以不用加上&amp;</span></span><br><span class="line">    &#125;</span><br><span class="line">    C::~C &#123;</span><br><span class="line">        disconnect(B::Inst(), positionChanged(), <span class="keyword">this</span>, onPositionChanged()); </span><br><span class="line">        <span class="comment">//要刪除否則會記憶體有問題</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> C::onPositionChanged &#123;</span><br><span class="line">        <span class="comment">//收到完成狀態 </span></span><br><span class="line">        dosomething;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p><a href="https://openhome.cc/Gossip/Qt4Gossip/CustomSignalSlot.html" target="_blank" rel="noopener">自訂Signal 與Slot - OpenHome.cc</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Signal</tag>
        <tag>Slot</tag>
      </tags>
  </entry>
  <entry>
    <title>USB傳輸型態</title>
    <url>/2019/02/20/USB%E5%82%B3%E8%BC%B8%E5%9E%8B%E6%85%8B-USB-Data-Transfer-Types/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇大致了解<a href="https://teddybearfp.github.io/2019/01/31/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94/#more">步進馬達</a>後，當我們要對步進馬達給予指令時，需要透過USB傳輸資料，而USB傳輸資料的型態有四種，這一篇我們來了解一下這四種型態的功用與相對應的產品</p>
<h2 id="USB傳輸型態-USB-Data-Transfer-Types"><a href="#USB傳輸型態-USB-Data-Transfer-Types" class="headerlink" title="USB傳輸型態 (USB Data Transfer Types)"></a>USB傳輸型態 (USB Data Transfer Types)</h2><p>由於USB最初在設計時，為了傳輸率，響應時間以及錯誤偵錯等特性之許多不同的週邊類型來加以考量的。而其中，四種資料傳輸的每一個能夠掌握不同的需求。因應不同的周邊裝置的類型與應用，訂定了以下四種傳輸類型</p>
<ul>
<li>控制型傳輸(Control Transfer)</li>
<li>中斷型傳輸(Interrupt Transfer)</li>
<li>巨量型傳輸(Bulk Transfer)</li>
<li>同步型傳輸(Isochronous Transfer)</li>
</ul>
<p>注意:低速裝置僅支援控制型傳輸與中斷型傳輸而已</p>
<h3 id="控制型傳輸-Control-Transfer"><a href="#控制型傳輸-Control-Transfer" class="headerlink" title="控制型傳輸(Control Transfer)"></a>控制型傳輸(Control Transfer)</h3><p>是USB傳輸中最重要的傳輸類型，唯有正確的執行完控制傳輸，才能進一步地執行其他的傳輸模式。這種傳輸是用來提供給主機與裝置之間的配置</p>
<ul>
<li>注意:所有的USB裝置必須支援控制傳輸。</li>
</ul>
<h3 id="中斷型傳輸-Interrupt-Transfer"><a href="#中斷型傳輸-Interrupt-Transfer" class="headerlink" title="中斷型傳輸(Interrupt Transfer)"></a>中斷型傳輸(Interrupt Transfer)</h3><p>原本是屬於單向傳輸，並且僅從裝置輸入到PC主機，作輸入的傳送模式，現在已改為雙向傳輸，增加了輸出的傳送模式<br>早期是因為資料僅需輸入所以為單向例如:滑鼠、鍵盤</p>
<h3 id="巨量型傳輸-Bulk-Transfer"><a href="#巨量型傳輸-Bulk-Transfer" class="headerlink" title="巨量型傳輸(Bulk Transfer)"></a>巨量型傳輸(Bulk Transfer)</h3><p>是屬於單向或雙向的傳輸。這類型的傳輸是用來傳送大量的資料。由於這些大量的資料必須準確地傳輸，但相對的卻無傳輸速度上的限制(即沒有固定傳輸的速率)。</p>
<h3 id="同步型傳輸-Isochronous-Transfer"><a href="#同步型傳輸-Isochronous-Transfer" class="headerlink" title="同步型傳輸(Isochronous Transfer)"></a>同步型傳輸(Isochronous Transfer)</h3><p>可以是單向或雙向的傳輸。此種傳輸需要維持一定的傳輸速度，因此相對的就需犧牲些微錯誤的發生，就算發生了傳輸上的錯誤，也不會重新傳送。<br>應用這類型的傳輸裝置例如：USB麥克風、喇叭</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://blog.sina.com.tw/william_liao/article.php?entryid=659545" target="_blank" rel="noopener">USB傳輸型態(USB Data Transfer Types) - 阿威阿獠のNotepad</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>USB傳輸型態</tag>
      </tags>
  </entry>
  <entry>
    <title>用NSIS製作軟體安裝程式</title>
    <url>/2019/02/01/%E7%94%A8NSIS%E8%A3%BD%E4%BD%9C%E8%BB%9F%E9%AB%94%E5%AE%89%E8%A3%9D%E7%A8%8B%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過NSIS腳本可以將程式打包成安裝檔，提供給他人使用，這樣就可以把自己寫好的程式碼，給別人安裝與使用，好像很厲害的感覺，接下來了解一下如何看起來好像很厲害吧!</p>
<h2 id="生成需要的檔案"><a href="#生成需要的檔案" class="headerlink" title="生成需要的檔案"></a>生成需要的檔案</h2><p>在pro檔中，加上下列程式碼，並以Release去編譯。<br>目的是將所有需要的檔案集中到OUT_PWD(資料夾、執行檔、dll、vcredist_x86.exe)<br>vcredist_x86:可轉散發套件<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">isEmpty(TARGET_EXT) &#123;</span><br><span class="line">    win32 &#123;</span><br><span class="line">        TARGET_CUSTOM_EXT = .exe</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    TARGET_CUSTOM_EXT = $$&#123;TARGET_EXT&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win32 &#123;</span><br><span class="line">    DEPLOY_COMMAND = windeployqt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win32:CONFIG(debug, debug|release): DEPLOY_TARGET = $$shell_quote($$shell_path($$OUT_PWD/debug/$$&#123;TARGET&#125;$$&#123;TARGET_CUSTOM_EXT&#125;))</span><br><span class="line">win32:CONFIG(release, debug|release): DEPLOY_TARGET = $$shell_quote($$shell_path($$OUT_PWD/release/$$&#123;TARGET&#125;$$&#123;TARGET_CUSTOM_EXT&#125;))</span><br><span class="line"></span><br><span class="line">  # Uncomment the following line to help debug the deploy command when running qmake</span><br><span class="line">  warning($$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;)</span><br><span class="line"></span><br><span class="line">contains(QMAKE_TARGET.arch, x86) &#123;</span><br><span class="line">    QMAKE_POST_LINK = $$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;  --qmldir C:\Qt\Qt5<span class="number">.10</span><span class="number">.1</span>\<span class="number">5.10</span><span class="number">.1</span>\msvc2015\qml</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contains(QMAKE_TARGET.arch, x86_64) &#123;</span><br><span class="line">    QMAKE_POST_LINK = $$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;  --qmldir C:\Qt\Qt5<span class="number">.10</span><span class="number">.1</span>\<span class="number">5.10</span><span class="number">.1</span>\msvc2015_64\qml</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="NSIS-程式碼"><a href="#NSIS-程式碼" class="headerlink" title="NSIS 程式碼"></a>NSIS 程式碼</h2><p>如果沒有driver要安裝可以拿掉driver相關程式碼<br><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="keyword">!include</span> x64.nsh</span><br><span class="line"><span class="keyword">!include</span> WordFunc.nsh</span><br><span class="line"><span class="keyword">!include</span> <span class="string">"MUI.nsh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;!insertmacro MUI_PAGE_DIRECTORY ;path selection page</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UninstPage</span> <span class="literal">uninstConfirm</span></span><br><span class="line"><span class="keyword">UninstPage</span> <span class="literal">instfiles</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> NAME <span class="string">"TeddyBearFP"</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_PUBLISHER <span class="string">"G.C.L."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> MAIN_FILE <span class="string">"release.zip"</span></span><br><span class="line"><span class="keyword">!define</span> UNINSTALL <span class="string">"Uninstall.exe"</span></span><br><span class="line"><span class="keyword">!define</span> DRIVER_INSTALL <span class="string">"win7DriverInstall.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> DRIVER_X64 <span class="string">"DriverX64"</span></span><br><span class="line"><span class="keyword">!define</span> DRIVER_X86 <span class="string">"DriverX86"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> MAIN_PROGRAM_PATH <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The name of the installer</span></span><br><span class="line"><span class="keyword">Name</span> <span class="string">"<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The file to write</span></span><br><span class="line"><span class="keyword">OutFile</span> <span class="string">"<span class="variable">$&#123;NAME&#125;</span>.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The default installation directory</span></span><br><span class="line"><span class="keyword">InstallDir</span> <span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span></span><br><span class="line"><span class="comment">;InstallDir $PROGRAMFILES\$&#123;NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Request application privileges for Windows Vista</span></span><br><span class="line"><span class="keyword">RequestExecutionLevel</span> <span class="literal">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Pages</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Page</span> <span class="literal">directory</span></span><br><span class="line"><span class="keyword">Page</span> <span class="literal">instfiles</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Var</span> DriverPath</span><br><span class="line"><span class="comment">;--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Install Section</span></span><br><span class="line"><span class="function"><span class="keyword">Section</span> "Install"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">; Set output path to the installation directory.</span></span><br><span class="line">	<span class="keyword">SetOutPath</span> <span class="variable">$INSTDIR</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">; Put file there</span></span><br><span class="line">	<span class="keyword">File</span> <span class="string">"<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span></span><br><span class="line">	<span class="keyword">CreateDirectory</span> <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line">	<span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span> <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">;File "$&#123;MAIN_PROGRAM_PATH&#125;\vcredist_x86.exe"</span></span><br><span class="line">	<span class="keyword">ExecWait</span> <span class="string">'"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>\vcredist_x86.exe" /q /norestart'</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="variable">$&#123;If&#125;</span> <span class="variable">$&#123;RunningX64&#125;</span></span><br><span class="line">		<span class="keyword">File</span> <span class="string">"DriverX64.zip"</span></span><br><span class="line">		<span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>"</span></span><br><span class="line">		<span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span> <span class="variable">$INSTDIR</span>  </span><br><span class="line">	<span class="variable">$&#123;Else&#125;</span></span><br><span class="line">		<span class="keyword">File</span> <span class="string">"DriverX86.zip"</span></span><br><span class="line">		<span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>"</span></span><br><span class="line">		<span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span> <span class="variable">$INSTDIR</span> </span><br><span class="line">	<span class="variable">$&#123;EndIf&#125;</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">DetailPrint</span> <span class="string">"Driver Setup..."</span></span><br><span class="line">	<span class="keyword">ExecWait</span> <span class="string">"<span class="variable">$DriverPath</span>\<span class="variable">$&#123;DRIVER_INSTALL&#125;</span>"</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">WriteUninstaller</span> <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span></span><br><span class="line">  </span><br><span class="line">	<span class="keyword">CreateDirectory</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line">	<span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.exe"</span> </span><br><span class="line">	<span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>"</span> </span><br><span class="line">	<span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.exe"</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\dotNetFx40_Full_x86_x64.exe"</span></span><br><span class="line">	<span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span></span><br><span class="line">	<span class="keyword">Delete</span> <span class="variable">$DriverPath</span></span><br><span class="line">	<span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span></span><br><span class="line">	<span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span></span><br><span class="line">  </span><br><span class="line">	<span class="keyword">RMDir</span> /r <span class="variable">$DriverPath</span></span><br><span class="line">  </span><br><span class="line">	<span class="keyword">MessageBox</span> <span class="params">MB_YESNO</span>|<span class="params">MB_ICONQUESTION</span>|<span class="params">MB_TOPMOST</span> <span class="string">"Please reboot computer"</span> <span class="params">IDNO</span> noreboot</span><br><span class="line">	<span class="keyword">Reboot</span></span><br><span class="line">  </span><br><span class="line">	noreboot:</span><br><span class="line"><span class="keyword">SectionEnd</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Section</span> "Uninstall"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Var</span> /GLOBAL INFNameBrard</span><br><span class="line"> </span><br><span class="line">  <span class="variable">$&#123;If&#125;</span> <span class="variable">$&#123;RunningX64&#125;</span></span><br><span class="line">    <span class="keyword">File</span> <span class="string">"DriverX64.zip"</span></span><br><span class="line">    <span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$TEMP</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>"</span></span><br><span class="line">	<span class="keyword">StrCpy</span> <span class="variable">$INFNameBrard</span> <span class="string">"Usb_iCamBase64.inf"</span></span><br><span class="line">    <span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span> <span class="variable">$TEMP</span>  </span><br><span class="line">  <span class="variable">$&#123;Else&#125;</span></span><br><span class="line">    <span class="keyword">File</span> <span class="string">"DriverX86.zip"</span></span><br><span class="line">    <span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$TEMP</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>"</span></span><br><span class="line">	<span class="keyword">StrCpy</span> <span class="variable">$INFNameBrard</span> <span class="string">"Usb_iCamBase86.inf"</span></span><br><span class="line">    <span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span> <span class="variable">$TEMP</span>   </span><br><span class="line">  <span class="variable">$&#123;EndIf&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">ExecWait</span> <span class="string">"<span class="variable">$DriverPath</span>\<span class="variable">$&#123;DRIVER_INSTALL&#125;</span> /S /U <span class="variable">$DriverPath</span>\<span class="variable">$INFNameBrard</span>"</span></span><br><span class="line">  <span class="comment">;ExecWait "$DriverPath\$&#123;DRIVER_INSTALL&#125; /S /U $DriverPath\RtsUVC.inf"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> /r <span class="variable">$DriverPath</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> /r <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line">  <span class="keyword">RMDir</span> <span class="variable">$INSTDIR</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>.lnk"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SectionEnd</span> <span class="comment">; end the section</span></span><br></pre></td></tr></table></figure></p>
<h2 id="壓縮需要的檔案"><a href="#壓縮需要的檔案" class="headerlink" title="壓縮需要的檔案"></a>壓縮需要的檔案</h2><p>Pro添加上述程式碼後，用release編譯後，將OUT_PWD(資料夾、執行檔、dll、vcredist_x86.exe)壓縮成release.zip</p>
<h2 id="產出安裝檔"><a href="#產出安裝檔" class="headerlink" title="產出安裝檔"></a>產出安裝檔</h2><h3 id="放在NSIS腳本同一層中"><a href="#放在NSIS腳本同一層中" class="headerlink" title="放在NSIS腳本同一層中"></a>放在NSIS腳本同一層中</h3><p><img src="https://i.imgur.com/deBS9pw.png" alt></p>
<h3 id="執行NSIS"><a href="#執行NSIS" class="headerlink" title="執行NSIS"></a>執行NSIS</h3><p><img src="https://i.imgur.com/mkezjdE.png" alt></p>
<h3 id="選擇腳本-gt-編譯"><a href="#選擇腳本-gt-編譯" class="headerlink" title="選擇腳本 -&gt; 編譯"></a>選擇腳本 -&gt; 編譯</h3><h3 id="產出安裝檔-1"><a href="#產出安裝檔-1" class="headerlink" title="產出安裝檔"></a>產出安裝檔</h3><p><img src="https://i.imgur.com/hra0lkL.png" alt></p>
<h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p><img src="https://i.imgur.com/MfgFhLs.png" alt></p>
<p><img src="https://i.imgur.com/gjAMGPI.png" alt></p>
<h3 id="開始使用應用程式"><a href="#開始使用應用程式" class="headerlink" title="開始使用應用程式!"></a>開始使用應用程式!</h3><p><img src="https://i.imgur.com/as4ytXy.png" alt></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>NSIS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬取Google學術網頁PDF</title>
    <url>/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近身邊朋友有爬取Google 學術搜尋需求，燃起我心中想挑戰這次的爬蟲任務，他的需求是要搜尋某個學術論文然後把所有搜尋到的PDF載下，這一篇紀錄開啟網頁自動爬取並換頁直到爬取完成所有搜尋，後續使用textract剖析PDF快速地分析內容。</p>
<p><img src="https://i.imgur.com/MfufauM.gif" alt title="自動搜尋爬取"></p>
<h2 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h2><p>透過selenium webdriver <a href="https://chromedriver.storage.googleapis.com/index.html?path=2.45/" target="_blank" rel="noopener">ChromeDriver</a>的方式爬取動態目標，首先設定Chromedriver跟user agent、session id偽裝，開啟網頁並自動搜尋目標，需要的檔案網址放進List中，自動換頁直到頁尾，爬取完所有檔案網址後，檢查是否有目標資料夾，再利用多進程(multiprocessing)分散式爬蟲，加速下載。<br>爬取完成後，使用textract剖析PDF快速地分析內容。</p>
<h2 id="創建資料夾"><a href="#創建資料夾" class="headerlink" title="創建資料夾"></a>創建資料夾</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:                   </span><br><span class="line">        os.makedirs(path)            </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  created Scholar folder...  ---"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  Scholar folder has already exist!  ---"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="建立Chromedriver"><a href="#建立Chromedriver" class="headerlink" title="建立Chromedriver"></a>建立Chromedriver</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search_scholar = <span class="string">"Teece"</span></span><br><span class="line">chrome_driver_path = <span class="string">"D:\chromedriver\chromedriver.exe"</span></span><br><span class="line">google_scholar = <span class="string">"https://scholar.google.com.tw/schhp?hl=zh-TW&amp;as_sdt=0,5"</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">prefs = &#123;<span class="string">'profile.default_content_settings.popups'</span>: <span class="number">0</span>, <span class="string">'download.default_directory'</span>: path&#125;</span><br><span class="line">option.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">option.add_argument(<span class="string">'headless'</span>)</span><br><span class="line"><span class="comment">#driver = webdriver.Chrome(chrome_driver_path,chrome_options=option) </span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">'D:\chromedriver\chromedriver.exe'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OpenSearchIndex</span><span class="params">()</span>:</span></span><br><span class="line">    driver.get(google_scholar)</span><br><span class="line">    session_id = driver.session_id</span><br><span class="line">    print(<span class="string">'session_id:'</span>,session_id)</span><br></pre></td></tr></table></figure>
<h2 id="自動輸入"><a href="#自動輸入" class="headerlink" title="自動輸入"></a>自動輸入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SearchScolar</span><span class="params">(searchTarget)</span>:</span></span><br><span class="line">    target = searchTarget</span><br><span class="line">    q = driver.find_element_by_name(<span class="string">'q'</span>)</span><br><span class="line">    q.send_keys(target)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">    q.send_keys(Keys.RETURN)</span><br></pre></td></tr></table></figure>
<h2 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Parse</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">    soup = BeautifulSoup(driver.page_source,<span class="string">'html.parser'</span>)</span><br><span class="line">    lis = []</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.select(<span class="string">'.gs_or_ggsm a'</span>):</span><br><span class="line">        <span class="comment">#title = item.select('gs_rt a').text</span></span><br><span class="line">        ref = item.text</span><br><span class="line">        ref_href = item.get(<span class="string">'href'</span>)</span><br><span class="line">        dic = &#123;<span class="string">'ref'</span>:ref,<span class="string">'ref_href'</span>:ref_href&#125;</span><br><span class="line">        lis.append(dic)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span>(c[<span class="string">'ref_href'</span>].endswith(<span class="string">'.pdf'</span>)):</span><br><span class="line">            file_name = c[<span class="string">'ref'</span>].strip(<span class="string">"[PDF]"</span>).strip(<span class="string">" "</span>)</span><br><span class="line">            Download(file_name, c[<span class="string">'ref_href'</span>])</span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="下載"><a href="#下載" class="headerlink" title="下載"></a>下載</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Download</span><span class="params">(file_name, url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">        d = urllib.request.URLopener()</span><br><span class="line">        d.retrieve(url, <span class="string">"D://Scholar/"</span> + file_name + <span class="string">".pdf"</span>)</span><br><span class="line">        print(file_name , url)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"HTTPError"</span>,e.code,url)</span><br></pre></td></tr></table></figure>
<h2 id="自動換頁"><a href="#自動換頁" class="headerlink" title="自動換頁"></a>自動換頁</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NextPage</span><span class="params">()</span>:</span></span><br><span class="line">    driver.find_element_by_link_text(<span class="string">"下一頁"</span>).click()</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/PFKZG3w.gif" alt title="自動換頁爬取"></p>
<h2 id="關閉Chromedriver"><a href="#關閉Chromedriver" class="headerlink" title="關閉Chromedriver"></a>關閉Chromedriver</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">End</span><span class="params">()</span>:</span></span><br><span class="line">    driver.close()</span><br></pre></td></tr></table></figure>
<h2 id="剖析PDF"><a href="#剖析PDF" class="headerlink" title="剖析PDF"></a>剖析PDF</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> textract, re</span><br><span class="line">text = textract.process(<span class="string">"sample.pdf"</span>)</span><br><span class="line">words = re.findall(<span class="string">r"[^\W_]+"</span>, text, re.MULTILINE)</span><br><span class="line">print(len(words))</span><br><span class="line">print(words)</span><br></pre></td></tr></table></figure>
<h2 id="完整實作"><a href="#完整實作" class="headerlink" title="完整實作"></a>完整實作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Empty</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process ,Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:                   </span><br><span class="line">        os.makedirs(path)            </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  created Scholar folder...  ---"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  Scholar folder has already exist!  ---"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Download</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        file_name = <span class="keyword">None</span></span><br><span class="line">        url = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = q.get(block=<span class="keyword">False</span>)</span><br><span class="line">            file_name = info[<span class="string">"file_name"</span>]</span><br><span class="line">            url = info[<span class="string">"url"</span>]</span><br><span class="line">            ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">            d = urllib.request.URLopener()</span><br><span class="line">            d.retrieve(url, <span class="string">"D://Scholar/"</span> + file_name + <span class="string">".pdf"</span>)</span><br><span class="line">            print(file_name , url)</span><br><span class="line">        <span class="keyword">except</span> Empty:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPARSE</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.search_scholar = <span class="string">"Teece"</span></span><br><span class="line">        self.chrome_driver_path = <span class="string">"D:\chromedriver\chromedriver.exe"</span></span><br><span class="line">        self.google_scholar = <span class="string">"https://scholar.google.com.tw/schhp?hl=zh-TW&amp;as_sdt=0,5"</span></span><br><span class="line">        self.path = os.path.join(<span class="string">'D:'</span>,<span class="string">'Scholar'</span>)</span><br><span class="line">        self.driver = self.Setdriver()</span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line">        self.needDownloadUrls = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.OpenSearchIndex()</span><br><span class="line">        self.SearchScolar(self.search_scholar)</span><br><span class="line">        self.Parse()</span><br><span class="line">        self.End()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Setdriver</span><span class="params">(self)</span>:</span></span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        prefs = &#123;<span class="string">'profile.default_content_settings.popups'</span>: <span class="number">0</span>, <span class="string">'download.default_directory'</span>: self.path&#125;</span><br><span class="line">        option.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">        option.add_argument(<span class="string">'headless'</span>)</span><br><span class="line">        driver = webdriver.Chrome(<span class="string">'D:\chromedriver\chromedriver.exe'</span>)</span><br><span class="line">        <span class="comment">#driver = webdriver.Chrome(self.chrome_driver_path, chrome_options=option)</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OpenSearchIndex</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.get(self.google_scholar)</span><br><span class="line">        session_id = self.driver.session_id</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">'session_id:'</span>,session_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SearchScolar</span><span class="params">(self, searchTarget)</span>:</span></span><br><span class="line">        target = searchTarget</span><br><span class="line">        q = self.driver.find_element_by_name(<span class="string">'q'</span>)</span><br><span class="line">        q.send_keys(target)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">        q.send_keys(Keys.RETURN)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NextPage</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.counter &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.driver.find_element_by_link_text(<span class="string">"下一頁"</span>).click()</span><br><span class="line">            self.counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Parse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">            soup = BeautifulSoup(self.driver.page_source,<span class="string">'html.parser'</span>)</span><br><span class="line">            lis = []</span><br><span class="line">            dic = &#123;&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> soup.select(<span class="string">'.gs_or_ggsm a'</span>):</span><br><span class="line">                <span class="comment">#title = item.select('gs_rt a').text</span></span><br><span class="line">                ref = item.text</span><br><span class="line">                ref_href = item.get(<span class="string">'href'</span>)</span><br><span class="line">                dic = &#123;<span class="string">'ref'</span>:ref,<span class="string">'ref_href'</span>:ref_href&#125;</span><br><span class="line">                lis.append(dic)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> lis:</span><br><span class="line">                <span class="keyword">if</span>(c[<span class="string">'ref_href'</span>].endswith(<span class="string">'.pdf'</span>)):</span><br><span class="line">                    file_name = c[<span class="string">'ref'</span>].strip(<span class="string">"[PDF]"</span>).strip(<span class="string">" "</span>)</span><br><span class="line">                    _info = &#123;&#125;</span><br><span class="line">                    _info[<span class="string">"file_name"</span>] = file_name</span><br><span class="line">                    _info[<span class="string">"url"</span>] = c[<span class="string">'ref_href'</span>]</span><br><span class="line">                    self.needDownloadUrls.append(_info)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.NextPage():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">End</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.close()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDownloadList</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.needDownloadUrls</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    path = os.path.join(<span class="string">'D:'</span>,<span class="string">'Scholar'</span>)</span><br><span class="line">    mkdir(path)</span><br><span class="line">    </span><br><span class="line">    pOBJ = URLPARSE()</span><br><span class="line">    pOBJ.start()</span><br><span class="line">    downloadList = pOBJ.getDownloadList()</span><br><span class="line">    </span><br><span class="line">    downloadQueue = Queue()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> downloadList:</span><br><span class="line">        print(d)</span><br><span class="line">        downloadQueue.put(d, block=<span class="keyword">False</span>)</span><br><span class="line">    </span><br><span class="line">    Processes = [Process(target=Download, args=(downloadQueue,)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">        p.join()</span><br><span class="line">     </span><br><span class="line">    print(<span class="string">"Scholar download Finished!"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>分散式爬蟲</tag>
        <tag>換頁爬取</tag>
      </tags>
  </entry>
  <entry>
    <title>步進馬達</title>
    <url>/2019/01/31/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94/</url>
    <content><![CDATA[<h2 id="步進馬達"><a href="#步進馬達" class="headerlink" title="步進馬達"></a>步進馬達</h2><p>步進馬達步級角構造，黃色部分為每次脈波行走量<br>步進馬達（Stepper motor; Step motor）是直流無刷馬達的一種，為具有如齒輪狀突起（小齒）相鍥合的定子和轉子，可藉由切換流向定子線圈中的電流，以一定角度逐步轉動的馬達。</p>
<p>步進馬達的特徵是採用開迴路控制（Open-loop control）處理，不需要運轉量檢知器（sensor）或編碼器，且切換電流觸發器的是脈波信號，不需要位置檢出和速度檢出的回授裝置，所以步進馬達可正確地依比例追隨脈波信號而轉動，因此就能達成精確的位置和速度控制，且穩定性佳。</p>
<h2 id="移動指令-Write"><a href="#移動指令-Write" class="headerlink" title="移動指令(Write)"></a>移動指令(Write)</h2><h3 id="Hz"><a href="#Hz" class="headerlink" title="Hz"></a>Hz</h3><p>一秒幾圈</p>
<h3 id="Step-Method"><a href="#Step-Method" class="headerlink" title="Step Method"></a>Step Method</h3><p>微步進方式(Full,二分之一,四分之一,八分之一…)影響移動流暢度，更換步進方式時Step與Hz也需一併變化</p>
<h3 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h3><p>假如預設馬達轉一圈為200 Step<br><img src="https://i.imgur.com/ASkUv6Y.png" alt="以四分之一微步如上面表格"></p>
<h2 id="檢測狀態-Read-Status"><a href="#檢測狀態-Read-Status" class="headerlink" title="檢測狀態(Read Status)"></a>檢測狀態(Read Status)</h2><h3 id="運作方式"><a href="#運作方式" class="headerlink" title="運作方式"></a>運作方式</h3><p>看當前設計以下為舉例<br>第一個bit表示是否在Home<br>第三個bit表示Task是否完成</p>
<p><img src="https://i.imgur.com/qW2oH3M.png" alt></p>
<p>馬達在Home且還沒下任何指令時，讀取時值應該為5(0101)<br>移動時有未完成任務並且不在Home，讀取值應該為0(0000)<br>完成移動並且不在Home，讀取值應為4(0100)</p>
<p>一個在Home的馬達移動的過程為<br><img src="https://i.imgur.com/sCW8dPD.png" alt></p>
<h2 id="資料傳遞方式"><a href="#資料傳遞方式" class="headerlink" title="資料傳遞方式"></a>資料傳遞方式</h2><p>1byte = 8bits<br>若是2 byte的16進制資料傳遞(Max = 二進制: 1111 1111 1111 1111  十進制: 65535  十六進制: FFFF)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> buffer = reg;</span><br><span class="line"><span class="keyword">int</span> loByte = buffer % <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> hiByte = buffer / <span class="number">256</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="檢測16進制資料"><a href="#檢測16進制資料" class="headerlink" title="檢測16進制資料"></a>檢測16進制資料</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> hexLoByte[<span class="number">33</span>];</span><br><span class="line">itoa(loByte, hexLoByte, <span class="number">16</span>);</span><br></pre></td></tr></table></figure>
<p>這樣印出的hexLoByte就會以16進制顯示</p>
<ul>
<li>注意:以上方式只是改變<strong>顯示方式</strong>，事實上直接把原本所看到的10進制的數字傳入運算即可，因為電腦終究是以2進制去做運算</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94" target="_blank" rel="noopener">步進馬達- 维基百科</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>步進馬達</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 解析ts檔(XML)</title>
    <url>/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用Qt Creator生成多國語言，步驟為生成ts檔，再生成qm檔，最後通過QTranslator類來載入qm文檔，實現多國語言的切換。那我們來看看怎麼處理ts檔呢</p>
<h2 id="ts-file"><a href="#ts-file" class="headerlink" title="ts file"></a>ts file</h2><p>ts file內容是XML編寫的，我們用python parsing的方式將特定內容取代達到目的</p>
<p>將默認為英文的應用程式，要翻譯成繁體中文，我們在XML內容中，要尋找並取代的地方就是<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;source&gt;尋找&lt;/source&gt;</span><br><span class="line">&lt;translation&gt;取代&lt;/translation&gt;</span><br></pre></td></tr></table></figure></p>
<p>例如:<br>下面範例我們先找到一樣的來源<source><br>並將csv檔中對應的<translation></translation>內容取代成翻譯過的文字</p>
<p>en-US.ts 英文<br>zh-TW.ts 繁體中文<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translation</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translation</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding: utf-8-*-</span></span><br><span class="line"><span class="comment">#Multi-Language</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> glob  <span class="comment">#取得所有同副檔名檔案</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree <span class="keyword">as</span> ET</span><br><span class="line">reference_file = <span class="string">"Multi-Language.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#取得所有ts檔名稱</span></span><br><span class="line">tsFile = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> glob.glob(<span class="string">'*.ts'</span>):</span><br><span class="line">    tsFile.append(file)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#讀取Multi-Language.csv檔案</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = pd.read_csv(reference_file,encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(reference_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf-8'</span>) <span class="keyword">as</span> filex:</span><br><span class="line">        filereader = csv.reader(filex)</span><br><span class="line">        header = next(filereader)</span><br><span class="line">    headers = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">    count_header = len(headers)</span><br><span class="line"><span class="comment">#確認編碼</span></span><br><span class="line"><span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'\n請檢查csv檔編碼是否改為UTF-8並再試一次!'</span>)</span><br><span class="line">    input(<span class="string">'請按任意鍵繼續。。。'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#將csv欄位名稱寫定</span></span><br><span class="line">csv_headers = [<span class="string">'German'</span>,<span class="string">'en-US'</span>,<span class="string">'Spanish'</span>,<span class="string">'French'</span>,<span class="string">'Italian'</span>,<span class="string">'Japanese'</span>,<span class="string">'zh-CN'</span>,<span class="string">'zh-TW'</span>]</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment">#讀取ts檔 XML內容</span></span><br><span class="line"><span class="keyword">for</span> inputFile <span class="keyword">in</span> tsFile:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(inputFile, <span class="string">'r'</span>,encoding =<span class="string">'utf-8'</span>) <span class="keyword">as</span> xml_file:</span><br><span class="line">            updateTree = ET.parse(xml_file)</span><br><span class="line">        root = updateTree.getroot()</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'\n請檢查xml檔編碼是否改為UTF-8並再試一次!'</span>)</span><br><span class="line">        input(<span class="string">'請按任意鍵繼續。。。'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'\n-------------------------------------------------'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'====================='</span>,inputFile,<span class="string">'====================='</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'-------------------------------------------------\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> context <span class="keyword">in</span> root.findall(<span class="string">'context'</span>):</span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> context.findall(<span class="string">'message'</span>):</span><br><span class="line">            <span class="keyword">for</span> index, content <span class="keyword">in</span> enumerate(file[<span class="string">'Source'</span>]):</span><br><span class="line">                <span class="keyword">if</span> type(file[csv_headers[count]][index]) == str:</span><br><span class="line">                    <span class="keyword">if</span> message.find(<span class="string">'source'</span>).text.lower() == content.lower():</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">'source:'</span>,message.find(<span class="string">'source'</span>).text,<span class="string">' content:'</span> ,content)</span><br><span class="line">                        print(<span class="string">'match:'</span>, file[csv_headers[count]][index],<span class="string">'\n'</span>)</span><br><span class="line">                        message.find(<span class="string">'translation'</span>).text = file[csv_headers[count]][index]</span><br><span class="line">                        <span class="keyword">if</span>(message.find(<span class="string">'translation'</span>).attrib):</span><br><span class="line">                            <span class="keyword">del</span> message.find(<span class="string">'translation'</span>).attrib[<span class="string">'type'</span>]</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> message.find(<span class="string">'source'</span>).text.lower() == content.lower():</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">'source:'</span>,message.find(<span class="string">'source'</span>).text,<span class="string">' content:'</span> ,content)</span><br><span class="line">                        print(<span class="string">'match:'</span>, file[csv_headers[count]][index],<span class="string">'\n'</span>)</span><br><span class="line">                        message.find(<span class="string">'translation'</span>).text = <span class="string">' '</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#寫檔</span></span><br><span class="line">    updateTree.write(inputFile,encoding =<span class="string">'utf-8'</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'完成～ 已生成所有翻譯檔!!!'</span>)</span><br><span class="line"><span class="comment">#input('請按任意鍵繼續。。。')</span></span><br></pre></td></tr></table></figure>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 滑鼠事件偵測</title>
    <url>/2019/01/09/Qt-%E6%BB%91%E9%BC%A0%E4%BA%8B%E4%BB%B6%E5%81%B5%E6%B8%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過事件的攔截，並且重新賦予事件的行為，這一篇記錄滑鼠相關的事件與處理<br>例如:</p>
<ul>
<li>滑鼠按鍵點擊與移動達到物體旋轉</li>
<li>滾輪滾動達到物體縮放效果</li>
</ul>
<h2 id="滑鼠事件偵測實作"><a href="#滑鼠事件偵測實作" class="headerlink" title="滑鼠事件偵測實作"></a>滑鼠事件偵測實作</h2><h3 id="h-標頭檔-宣告"><a href="#h-標頭檔-宣告" class="headerlink" title=".h 標頭檔(宣告)"></a>.h 標頭檔(宣告)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPoint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWheelEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> :</span> <span class="keyword">public</span> QDialog</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Dialog</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *object, QEvent *event)</span></span>; <span class="comment">//虛擬函式</span></span><br><span class="line">    ~Dialog();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Dialog *ui;</span><br><span class="line">    QPoint startPoint;</span><br><span class="line">    QPoint endPoint;</span><br><span class="line">    QPoint curPoint;</span><br><span class="line">    QPoint disPoint;</span><br><span class="line">    QPoint preDisPoint;</span><br><span class="line">    <span class="keyword">bool</span> isFirstTime;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="cpp-實作檔-定義"><a href="#cpp-實作檔-定義" class="headerlink" title=".cpp 實作檔(定義)"></a>.cpp 實作檔(定義)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//實作eventFilter虛擬函式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Dialog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_Dialog.h"</span></span></span><br><span class="line"></span><br><span class="line">Dialog::Dialog(QWidget *parent) :</span><br><span class="line">    QDialog(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::Dialog)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;installEventFilter(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Dialog::eventFilter(QObject *obj, QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//偵測滑鼠press事件</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseButtonPress) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime)</span><br><span class="line">            startPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            startPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseButtonPress";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"startPoint:"&lt;&lt;startPoint;</span></span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠移動事件</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseMove) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime) &#123;</span><br><span class="line">            curPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            disPoint = curPoint - startPoint;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            curPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            disPoint = curPoint - startPoint + preDisPoint;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseMove";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"curPoint:"&lt;&lt;curPoint;</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"disPoint:"&lt;&lt;disPoint;</span></span><br><span class="line">        ui-&gt;sceneWidget-&gt;mouseRotate(disPoint.x(),disPoint.y());</span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠Release</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseButtonRelease) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime) &#123;</span><br><span class="line">            endPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            isFirstTime = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            endPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        preDisPoint = disPoint;</span><br><span class="line">        isSetPreDisPoint = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseButtonRelease";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"endPoint: "&lt;&lt;endPoint;</span></span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠滾輪變化</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::QEvent::Wheel) &#123;</span><br><span class="line">        QWheelEvent *wheelEvent = <span class="keyword">static_cast</span>&lt;QWheelEvent*&gt;(event);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(wheelEvent-&gt;delta() &gt; <span class="number">0</span>)</span><br><span class="line">            ui-&gt;sceneWidget-&gt;wheelScale -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ui-&gt;sceneWidget-&gt;wheelScale += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QObject::eventFilter(obj, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/zzwdkxx/article/details/71169361" target="_blank" rel="noopener">QPushButton的鼠標事件處理及EventFilter事件過濾器的用法</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>滑鼠事件</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV 邊緣偵測</title>
    <url>/2019/01/09/OpenCV-%E9%82%8A%E7%B7%A3%E5%81%B5%E6%B8%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些圖片數據需要將多餘的值去除或是透明化，需要先把邊緣<del>人</del>偵測出來，這樣才能掌握圖形<br>此篇文章記錄如何找出下方圖片的第一條曲線的上方邊緣<br><img src="https://i.imgur.com/CAXPWZx.png" alt title="原圖"></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><p>載入圖片(imread) -&gt; 高斯模糊(GaussianBlur) -&gt; 計算梯度(gradient) -&gt; 找出邊緣後影像處理(imgProc) -&gt; 存取圖片(imwrite)</p>
<h2 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h2><ul>
<li>src：輸入可以為多通道圖，會單獨處理各通道，但是通常使用單通道灰階圖，例如CV_8U或CV_16U。</li>
<li>dst：輸出圖會和輸入圖尺寸、型態相同。</li>
<li>ksize：模板大小，長寬可以不同，但是都必須為正的奇數。(幾個長寬分別幾個pixel去做平均)</li>
<li>sigmaX：x方向的標準差。</li>
<li>sigmaY：y方向的標準差。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//寬做25個pixel平均、高做25個pixel平均</span></span><br><span class="line">GaussianBlur(src, gaussianBlurImg, Size(<span class="number">25</span>,<span class="number">25</span>) ,<span class="number">0</span> ,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://i.imgur.com/BvW6p3Z.png" alt title="高斯模糊後的圖形"></p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>將一個512 * 512的影像垂直從上往下找到的第一條直線邊緣記錄起來</p>
<h3 id="讀取影像-gt-高斯模糊"><a href="#讀取影像-gt-高斯模糊" class="headerlink" title="讀取影像 -&gt; 高斯模糊"></a>讀取影像 -&gt; 高斯模糊</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">gradientImg = QImage(imgWidth, imgHeight, QImage::Format_RGB888);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> currentNumber = <span class="number">0</span>; currentNumber &lt; <span class="number">10</span>; currentNumber++) &#123;</span><br><span class="line">    Mat src = imread(<span class="string">"D:/Frame/Test_"</span> + QString::number(currentNumber).toStdString() +<span class="string">".jpg"</span>);<span class="comment">//以迴圈讀取多張(其中必須把int轉成QString再轉乘stdString)</span></span><br><span class="line">    <span class="keyword">if</span> (src.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Load file failed!"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat gaussianBlurImg;</span><br><span class="line">    cvtColor(src, gaussianBlurImg,CV_BGR2RGB); <span class="comment">//將讀取出來的圖片轉成RGB</span></span><br><span class="line">    GaussianBlur(src, gaussianBlurImg, Size(<span class="number">25</span>,<span class="number">25</span>) ,<span class="number">0</span> ,<span class="number">0</span>);<span class="comment">//ksize：模板大小，長寬可以不同，但是都必須為正的奇數。</span></span><br><span class="line">    <span class="function">QImage <span class="title">gradientImg</span><span class="params">((uchar *) gaussianBlurImg.data, <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888)</span></span>;</span><br><span class="line">    gradient(gradientImg);<span class="comment">//做梯度跟其他處理...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>以這次範例來說是以垂直的方式去找變化量大的地方，找到並存入陣列中，這個陣列所存的是512個邊緣的Y座標</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>下一個pixel減掉上一個pixel得到梯度變化量，最後一個數給0不比較</p>
<p><img src="https://i.imgur.com/Of9gCbF.png" alt title="梯度垂直變化量"><br>取得512個變化量，而這個範例來說會有兩次變化量較大的正數值與兩次較小的負數值</p>
<blockquote>
<p>取得單獨的每筆梯度可以知道變化量(這個範例就是找到第一次變化最大的地方)<br>梯度 = (G2-G1) </p>
</blockquote>
<blockquote>
<p>(全部的梯度相加，可以簡易判斷影像清晰度)<br>梯度 = ((G1-G2)+(G1-G4))+((G2-G3)+(G2-G5))+… </p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> FindBoundary::gradient(QImage gradientImg) &#123;</span><br><span class="line">    <span class="keyword">int</span> imgWidth = <span class="number">512</span>;</span><br><span class="line">    <span class="keyword">int</span> imgHeight = <span class="number">512</span>;</span><br><span class="line">    gradientBits = <span class="keyword">new</span> <span class="keyword">int</span>[imgWidth * imgHeight];</span><br><span class="line">    uchar *bits = gradientImg.bits();<span class="comment">//從上方高斯模糊後傳入的圖</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; imgWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgHeight; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = i*<span class="number">3</span> + j * imgWidth * <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">int</span> idx2 = i*<span class="number">3</span> + (j + <span class="number">1</span>)* imgWidth * <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(j == imgHeight - <span class="number">1</span>)</span><br><span class="line">                gradientBits[count] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                gradientBits[count] = (<span class="keyword">int</span>)(bits[idx2] - bits[idx]);</span><br><span class="line">            <span class="comment">//verify</span></span><br><span class="line"><span class="comment">//            if(i == 254) &#123;</span></span><br><span class="line"><span class="comment">//                //cout&lt;&lt;"gradientBits["&lt;&lt;i&lt;&lt;"]["&lt;&lt;j&lt;&lt;"]:"&lt;&lt;gradientBits[count]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//                cout&lt;&lt;gradientBits[count]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過上面方式得到512組(從X = 0開始掃512次一直到X = 511掃512次)的Y變化量，而我們要取的是第一個變化量最大的地方<br><img src="https://i.imgur.com/ikWyKvv.png" alt="第一組(X=0)的Y(0~511)變化量折線圖"></p>
<p>找到第一次最大變化量後將其記錄起來，再將它改pixel顏色或是其他處理得到下面的完成圖<br><img src="https://i.imgur.com/jFXT8SP.png" alt title="找到邊緣人啦!!"></p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>針對圖片邊緣的操作可以讓光學取得的資料轉換成有效數據，例如:將已知道小的銅幣透過光學拍照，再用邊緣偵測取得到數據與真實大小去做scale，即可做光學校正，另外在3D疊圖時，先將2D圖做些邊緣偵測並處理後再拿去疊圖，可以讓可讀性更高，所以邊緣偵測是個重要的技巧</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://monkeycoding.com/?p=570" target="_blank" rel="noopener">影像平滑(blur、GaussianBlur) | 阿洲的程式教學</a></p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
        <tag>邊緣偵測</tag>
      </tags>
  </entry>
  <entry>
    <title>標準化(Normalize)</title>
    <url>/2019/01/08/normalize/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在將數據轉換至RGB時，時常會用到標準化的方式讓數值落在0~255之中</p>
<h2 id="標準化公式"><a href="#標準化公式" class="headerlink" title="標準化公式"></a>標準化公式</h2><p>需要以下幾組資料</p>
<h3 id="第一組"><a href="#第一組" class="headerlink" title="第一組"></a>第一組</h3><ul>
<li>newMax</li>
<li>newMin</li>
</ul>
<h3 id="第二組"><a href="#第二組" class="headerlink" title="第二組"></a>第二組</h3><ul>
<li>oldMax</li>
<li>oldMin</li>
<li>denominator = oldMax - oldMin</li>
</ul>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> output = newMin + ((<span class="keyword">float</span>)(value - oldMin)/(<span class="keyword">float</span>)denominator) * (newMax - newMin)</span><br></pre></td></tr></table></figure>
<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>下面的例子將傳入的數值標準化成100~255<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">normalize</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123; <span class="comment">//value 是介於oldMax與oldMin之間的值</span></span><br><span class="line">    <span class="keyword">int</span> newMax = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">int</span> newMin = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldMax = <span class="number">219</span>;</span><br><span class="line">    <span class="keyword">int</span> oldMin = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">int</span> denominator = oldMax - oldMin</span><br><span class="line">    <span class="keyword">float</span> output = newMin + ((<span class="keyword">float</span>)(value - oldMin)/(<span class="keyword">float</span>)denominator) * (newMax - newMin)</span><br><span class="line">    <span class="keyword">return</span>  output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述例子傳入211的話輸出為241.5<br>透過上面公式可以將數值標準化到某一區間</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Normalize</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenGL 3D 立體渲染</title>
    <url>/2018/12/23/3D-Volume-Rendering/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子使用的QImage都是處理二維圖形，最近研究起3D的領域，透過OpenGL來實作立體渲染(Volume Rendering)，立體渲染簡單來說，就是將2D圖形數張疊成一個3D立體圖形，這立體渲染的技術可以運用在醫學上的CT與MRI斷層掃描中。這篇所寫的頂點與紋理處理搭配上一篇所編寫的<a href="https://teddybearfp.github.io/2018/12/22/OpenGL-GLSL%E8%91%97%E8%89%B2%E5%99%A8/#more">OpenGL GLSL著色器</a>就可以達到下圖3D立體渲染效果囉!</p>
<p><img src="https://media.giphy.com/media/fxCrCjSXyJBR83AFPb/giphy.gif" alt></p>
<h2 id="名詞概述"><a href="#名詞概述" class="headerlink" title="名詞概述"></a>名詞概述</h2><h3 id="Volume-Rendering"><a href="#Volume-Rendering" class="headerlink" title="Volume Rendering"></a>Volume Rendering</h3><p>立體渲染是一種用於顯示離散三維採樣數據集的二維投影的技術。一個典型的三維數據集是CT或者MRI採集的一組二維切面圖像。通常這些數據是按照一定規則如每毫米一個切面，並且通常有一定數目的圖像像素。為了渲染三維數據集的二維投影，首先需要定義相機相對於幾何體的空間位置。另外，需要定義每個點即體素的不透明性以及顏色，這通常使用RGBA（red, green, blue, alpha）傳遞函數定義每個體素可能值對應的RGBA值。</p>
<h2 id="Volume-Rendering原理"><a href="#Volume-Rendering原理" class="headerlink" title="Volume Rendering原理"></a>Volume Rendering原理</h2><p>目前已知有兩種方式達到Volume Rendering</p>
<ul>
<li>2D Array</li>
<li>3D Texture</li>
</ul>
<h3 id="2D-Array"><a href="#2D-Array" class="headerlink" title="2D Array"></a>2D Array</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>用一組2D QImage紋理數與頂點組伴隨著z軸的變化達到疊圖效果</p>
<p><img src="https://i.imgur.com/4oruPUN.png" alt></p>
<h4 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h4><p>用2D Array疊成的3D模型會有個問題，就是在模型轉到90度與180度時從側面來看會是有間隙的甚至直接穿透看不到畫面，原因是這種畫法在yz軸上並沒有繪製圖形<br><img src="https://i.imgur.com/OLIFyss.png" alt></p>
<h4 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h4><p>為了解決上述的YZ軸未繪製圖形，導致側邊觀看會沒有畫面甚至穿透，我們的解決辦法是使用3組的2D array去做立體渲染，<br><img src="https://i.imgur.com/RfWnq0N.png" alt><br>準備好以上三組2D Array做出來的3D圖形在XY平面、YZ平面與XZ平面上都有像素資料，這樣解決了90度與180度沒畫面或是穿透的問題了，但是我們怎麼知道在哪種角度時顯示顯示哪組2D Array呢?<br><img src="https://i.imgur.com/7CMSI0T.png" alt><br>透過上述方式可以切換平面，正確顯示數據但是在側面時會發生Popping Effect所以更正確的是在旋轉時就以當下面向我們的當作切面是最好的辦法!<br><img src="https://i.imgur.com/XfOt45s.png" alt></p>
<h3 id="3D-Texture"><a href="#3D-Texture" class="headerlink" title="3D Texture"></a>3D Texture</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>接下來講述的就是這篇繪製Volume Rendering的方式，將數組2D QImage以Buffer的方式放到3D Texture中進行處理，首先先將2D QImage的陣列存成一個buffer，迴圈執行共幾張QImage然後內容取RGBA存放，得到一個3D紋理，接下來準備個3D容器來準備放進這個3D紋理</p>
<p><img src="https://i.imgur.com/IOZtLcu.png" alt title="3D容器貼上3D紋理示意圖"></p>
<p>最後是最重要的環節，當旋轉時我們旋轉的不是容器，而是3D紋理!<br>這樣的話我們容器永遠是XY平面面對攝影機，而選轉的3D紋理不像2D紋理有側邊透視問題，並且是做過Alpha test跟Blending的紋理。</p>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>使用Qt編寫3D相關程式時，我們需要在安裝Qt的時候就要勾選Qt 3D選項透過OpenGL編寫。</p>
<h3 id="無法使用gl-相關函式"><a href="#無法使用gl-相關函式" class="headerlink" title="無法使用gl_相關函式"></a>無法使用gl_相關函式</h3><p>即使安裝了Qt 3D相關函式庫，在使用時也可能無法呼叫gl_相關函式，這時候我們只要在pro檔中，增加LIBS += -lopengl32</p>
<h3 id="無法使用glTexImage3D"><a href="#無法使用glTexImage3D" class="headerlink" title="無法使用glTexImage3D"></a>無法使用glTexImage3D</h3><p>如果在pro檔中已經增加了LIBS += -lopengl32卻還是無法使用glTexImage3D的時候，我們可以在使用glTexImage3D之前加上<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">PFNGLTEXIMAGE3DPROC glTexImage3D;</span><br><span class="line">glTexImage3D = (PFNGLTEXIMAGE3DPROC) wglGetProcAddress(<span class="string">"glTexImage3D"</span>);</span><br></pre></td></tr></table></figure></p>
<p>加入上面這兩句指令後再使用就可以囉<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">glTexImage3D(GL_TEXTURE_3D, <span class="number">0</span>, GL_RGBA, <span class="number">512</span>, <span class="number">512</span> , <span class="number">52</span>, <span class="number">0</span>,</span><br><span class="line">GL_RGBA, GL_UNSIGNED_BYTE, bits3D );</span><br></pre></td></tr></table></figure></p>
<h2 id="Volume-Rendering實作"><a href="#Volume-Rendering實作" class="headerlink" title="Volume Rendering實作"></a>Volume Rendering實作</h2><p>我們要在C++端配置頂點跟紋理的座標與屬性再傳送給著色器去渲染在畫面上</p>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>在編寫Volume Rendering需要先了解三個虛擬函式initializeGL() 、resizeGL() 和 paintGL()，透過這三個函式去render OpenGL的圖形。<br>它們三個的運作順序是initializeGL() -&gt; resizeGL() -&gt; paintGL() 。</p>
<ul>
<li><p>initializeGL() 會最先呼叫並初始設定 rendering 的預設參數。</p>
</li>
<li><p>resizeGL()設定OpenGL的觀看位置、矩陣型態、視野角度以及 OpenGL drawing 的範圍…等等。除了第一次 widget 被 create 時會被呼叫，之後只要 widget 有被 resized 時都會重新被呼叫。</p>
</li>
<li><p>paintGL() Rendering OpenGL 的畫面，你所畫的物件都應該在這個 function 裡定義。</p>
</li>
</ul>
<h3 id="Scene-h"><a href="#Scene-h" class="headerlink" title="Scene.h"></a>Scene.h</h3><p>首先我們先創建個類別繼承QOpenGLWidget宣告上面介紹的虛擬函式並覆寫<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLShaderProgram&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLTexture&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scene</span> :</span> <span class="keyword">public</span> QOpenGLWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Scene( QWidget *parent = <span class="number">0</span> );</span><br><span class="line">    ~Scene();</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">slotUpdate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initializeGL</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintGL</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resizeGL</span><span class="params">( <span class="keyword">int</span> w, <span class="keyword">int</span> h )</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//頂點與紋理的相關配置</span></span><br><span class="line">    <span class="keyword">int</span> m_vertexAttr;</span><br><span class="line">    <span class="keyword">int</span> m_texCoordAttr;</span><br><span class="line">    <span class="keyword">int</span> m_modelUniform;</span><br><span class="line">    <span class="keyword">int</span> m_viewUniform;</span><br><span class="line">    <span class="keyword">int</span> m_projUniform;</span><br><span class="line">    QOpenGLTexture *m_texture;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="Scene-cpp"><a href="#Scene-cpp" class="headerlink" title="Scene.cpp"></a>Scene.cpp</h3><h4 id="initializeGL"><a href="#initializeGL" class="headerlink" title="initializeGL()"></a>initializeGL()</h4><p>initializeGL()主要做的幾個動作</p>
<ul>
<li>清空畫布</li>
<li>將數個2D QImage存入3D buffer中</li>
<li>設置QOpenGLTexture目標圖形與寬、高、張數</li>
<li>設置3D Texture</li>
<li>連結著色器<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::initializeGL()</span><br><span class="line">&#123;</span><br><span class="line">    glClearColor( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span> );</span><br><span class="line"></span><br><span class="line">    QImage imgXY = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888);</span><br><span class="line">    QImage checkBits3D = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGBA8888);</span><br><span class="line">    uchar* bits3D = <span class="keyword">new</span> uchar[<span class="number">512</span> * <span class="number">4</span> * <span class="number">512</span> * <span class="number">52</span>];<span class="comment">//width * RGBA * height * count</span></span><br><span class="line">    <span class="comment">//multi-QImage to 3Dbuffer</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; m_triangle.numbers ;n++) &#123;</span><br><span class="line">        imgXY = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888);</span><br><span class="line">        imgXY.load(<span class="string">"D:/dn40_50_100_01.png"</span>,<span class="string">"PNG"</span>);</span><br><span class="line">        <span class="comment">//imgXY.load("D:/testpic.png","PNG");</span></span><br><span class="line">        imgXY = imgXY.scaled(<span class="number">512</span>,<span class="number">512</span>);</span><br><span class="line">        imgXY = imgXY.convertToFormat(QImage::Format_RGBA8888);</span><br><span class="line">        bits = imgXY.bits();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">512</span> * <span class="number">512</span> * <span class="number">4</span> ; i += <span class="number">4</span>) &#123;</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i] = bits[i];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">1</span>] = bits[i+<span class="number">1</span>];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">2</span>] = bits[i+<span class="number">2</span>];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">3</span>] = bits[i+<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setQOpenGLTexture Target3D</span></span><br><span class="line">    m_texture = <span class="keyword">new</span> QOpenGLTexture( QOpenGLTexture::Target3D );</span><br><span class="line">    m_texture-&gt;setSize(<span class="number">512</span>,<span class="number">512</span>,<span class="number">52</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Target3D</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="number">0</span> != m_nTexId )</span><br><span class="line">    &#123;</span><br><span class="line">        glDeleteTextures( <span class="number">1</span>, (GLuint*)&amp;m_nTexId );</span><br><span class="line">    &#125;</span><br><span class="line">    glGenTextures(<span class="number">1</span>,(GLuint*)&amp;m_nTexId );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">    glBindTexture( GL_TEXTURE_3D, m_nTexId );</span><br><span class="line">    glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line">    PFNGLTEXIMAGE3DPROC glTexImage3D;</span><br><span class="line">    glTexImage3D = (PFNGLTEXIMAGE3DPROC) wglGetProcAddress(<span class="string">"glTexImage3D"</span>);</span><br><span class="line">    glTexImage3D(GL_TEXTURE_3D, <span class="number">0</span>, GL_RGBA, <span class="number">512</span>, <span class="number">512</span> , <span class="number">52</span>, <span class="number">0</span>,</span><br><span class="line">        GL_RGBA, GL_UNSIGNED_BYTE, (GLvoid *)bits3D );</span><br><span class="line">    glBindTexture( GL_TEXTURE_3D, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setShader</span></span><br><span class="line">    <span class="function">QOpenGLShader <span class="title">vShader</span><span class="params">( QOpenGLShader::Vertex )</span></span>;</span><br><span class="line">    vShader.compileSourceFile( <span class="string">":/Shaders/vShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="function">QOpenGLShader <span class="title">fShader</span><span class="params">( QOpenGLShader::Fragment )</span></span>;</span><br><span class="line">    fShader.compileSourceFile( <span class="string">":/Shaders/fShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">    m_program.addShader( &amp;vShader );</span><br><span class="line">    m_program.addShader( &amp;fShader );</span><br><span class="line">    m_program.link();</span><br><span class="line"></span><br><span class="line">    m_vertexAttr = m_program.attributeLocation( <span class="string">"vertex"</span> );</span><br><span class="line">    m_texCoordAttr = m_program.attributeLocation( <span class="string">"texCoord"</span> );</span><br><span class="line">    m_verMatrixUniform = m_program.uniformLocation( <span class="string">"verMatrix"</span> );</span><br><span class="line">    m_toMatrixUniform = m_program.uniformLocation( <span class="string">"toMatrix"</span> );</span><br><span class="line">    m_toTexMatrixUniform = m_program.uniformLocation( <span class="string">"toTexMatrix"</span> );</span><br><span class="line">    m_backMatrixUniform = m_program.uniformLocation( <span class="string">"backMatrix"</span> );</span><br><span class="line">    m_texMatrixUniform = m_program.uniformLocation( <span class="string">"texMatrix"</span> );</span><br><span class="line">    m_modelUniform = m_program.uniformLocation( <span class="string">"model"</span> );</span><br><span class="line">    m_viewUniform = m_program.uniformLocation( <span class="string">"view"</span> );</span><br><span class="line">    m_projUniform = m_program.uniformLocation( <span class="string">"proj"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//m_texUniform = m_program.uniformLocation( "tex" ); //2D</span></span><br><span class="line">    m_texUniform = m_program.uniformLocation( <span class="string">"tex3D"</span> ); <span class="comment">//3D</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="paintGL"><a href="#paintGL" class="headerlink" title="paintGL()"></a>paintGL()</h4><p>paintGL()主要做個幾個動作</p>
<ul>
<li>設置MVP</li>
<li>呼叫:drawTriangle()配置頂點與紋理<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::paintGL()</span><br><span class="line">&#123;</span><br><span class="line">    QMatrix4x4 modelViewVertex; <span class="comment">//vertex</span></span><br><span class="line">    QMatrix4x4 modeltoVertex;</span><br><span class="line">    QMatrix4x4 modeltoTexVertex;</span><br><span class="line">    QMatrix4x4 modelbackVertex;</span><br><span class="line"></span><br><span class="line">    QMatrix4x4 modelUniform;</span><br><span class="line">    QMatrix4x4 viewUniform;</span><br><span class="line">    QMatrix4x4 projUniform;</span><br><span class="line">    modeltoVertex.translate( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-0.5f</span> ); viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br><span class="line"></span><br><span class="line">    QMatrix4x4 modelViewTexture; <span class="comment">//texture</span></span><br><span class="line">    modeltoTexVertex.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    <span class="keyword">if</span> (direction == <span class="number">0</span>)   <span class="comment">//horizontal 0 / vertical 1</span></span><br><span class="line">        modelViewTexture.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        modelViewTexture.rotate( m_angle, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    modelbackVertex.translate(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !m_program.bind() )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    m_program.setUniformValue( m_verMatrixUniform, modelViewVertex );</span><br><span class="line">    m_program.setUniformValue( m_texMatrixUniform, modelViewTexture );</span><br><span class="line">    m_program.setUniformValue( m_toMatrixUniform, modeltoVertex );</span><br><span class="line">    m_program.setUniformValue( m_toTexMatrixUniform, modeltoTexVertex );</span><br><span class="line">    m_program.setUniformValue( m_backMatrixUniform, modelbackVertex );</span><br><span class="line"></span><br><span class="line">    m_program.setUniformValue( m_modelUniform, modelUniform );</span><br><span class="line">    m_program.setUniformValue( m_viewUniform, viewUniform );</span><br><span class="line">    m_program.setUniformValue( m_projUniform, projUniform );</span><br><span class="line">    drawTriangle();<span class="comment">//存放頂點與紋理的座標位置</span></span><br><span class="line"></span><br><span class="line">    m_program.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="resizeGL"><a href="#resizeGL" class="headerlink" title="resizeGL()"></a>resizeGL()</h4><ul>
<li>resize<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::resizeGL( <span class="keyword">int</span> w, <span class="keyword">int</span> h )</span><br><span class="line">&#123;</span><br><span class="line">    glViewport( <span class="number">0</span>, <span class="number">0</span>, w, h );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="drawTriangle"><a href="#drawTriangle" class="headerlink" title="drawTriangle()"></a>drawTriangle()</h4><ul>
<li>配置頂點與紋理並以三角形繪製<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::drawTriangle()</span><br><span class="line">&#123;</span><br><span class="line">    m_texture-&gt;bind();</span><br><span class="line"></span><br><span class="line">    m_program.setAttributeArray( m_vertexAttr, m_triangle.vertices.data(), <span class="number">3</span> );</span><br><span class="line">    m_program.setAttributeArray( m_texCoordAttr, m_triangle.texCoords.data(), <span class="number">3</span> );</span><br><span class="line">    m_program.setUniformValue( m_texUniform, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    m_program.enableAttributeArray( m_vertexAttr );</span><br><span class="line">    m_program.enableAttributeArray( m_texCoordAttr );</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0f</span> / m_triangle.numbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2D</span></span><br><span class="line">    <span class="comment">//glEnable(GL_TEXTURE_2D);</span></span><br><span class="line">    <span class="comment">//3D </span></span><br><span class="line">    glClear( GL_COLOR_BUFFER_BIT  | GL_DEPTH_BUFFER_BIT );</span><br><span class="line"></span><br><span class="line">    glEnable(GL_TEXTURE_3D);</span><br><span class="line">    glBindTexture(GL_TEXTURE_3D, m_nTexId);</span><br><span class="line">    glEnable( GL_ALPHA_TEST );</span><br><span class="line">    glAlphaFunc( GL_GREATER, <span class="number">0.03f</span> );</span><br><span class="line"></span><br><span class="line">    glEnable(GL_BLEND);</span><br><span class="line">    glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );</span><br><span class="line"></span><br><span class="line">    glMatrixMode( GL_TEXTURE );</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_triangle.numbers ; i++) &#123;</span><br><span class="line">        <span class="comment">//3D</span></span><br><span class="line">        glDrawArrays( GL_TRIANGLE_STRIP, <span class="number">0</span> + <span class="number">4</span> * i, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    glBindTexture(GL_TEXTURE_3D, <span class="number">0</span>);</span><br><span class="line">    m_program.disableAttributeArray( m_vertexAttr );</span><br><span class="line">    m_program.disableAttributeArray( m_texCoordAttr );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Triangle-h"><a href="#Triangle-h" class="headerlink" title="Triangle.h"></a>Triangle.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Triangle();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVertices</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initTexCoords</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; vertices;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; texCoords;</span><br><span class="line">    <span class="keyword">int</span> numbers;</span><br><span class="line">    <span class="keyword">int</span> texcStep;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Triangle-cpp"><a href="#Triangle-cpp" class="headerlink" title="Triangle.cpp"></a>Triangle.cpp</h3><ul>
<li>存放頂點與紋理的座標<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Triangle::initVertices()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//2D array</span></span><br><span class="line">    numbers = <span class="number">52</span>;</span><br><span class="line">    vertices.clear();</span><br><span class="line">    vertices.resize( <span class="number">12</span> * numbers );</span><br><span class="line">    <span class="keyword">float</span> z = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0</span> / <span class="keyword">float</span>(numbers);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers ; i++) &#123;</span><br><span class="line">        vertices[<span class="number">0</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">1</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">2</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">3</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">4</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">5</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">6</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">7</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">8</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">9</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">10</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">11</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Triangle::initTexCoords()</span><br><span class="line">&#123;</span><br><span class="line">    texCoords.clear();</span><br><span class="line">    texCoords.resize( <span class="number">12</span> * numbers );</span><br><span class="line">    <span class="keyword">float</span> z = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0</span> / <span class="keyword">float</span>(numbers);</span><br><span class="line">    <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers ; i++) &#123;</span><br><span class="line">        texCoords[<span class="number">0</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">1</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">2</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">        <span class="comment">// 1</span></span><br><span class="line">        texCoords[<span class="number">3</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">4</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">5</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        texCoords[<span class="number">6</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">7</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">8</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        texCoords[<span class="number">9</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">10</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">11</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>透過這次的3D Volume Rendering對於圖形上的處理與3D觀念有了更深刻的理解，像是3D世界中物體的移動通常並非是物體真的在移動而是攝影機的移動使觀察畫面有變化，還有頂點與紋理傳遞給著色器Shader處理的運作，更特別是容器不動紋理去做旋轉這個想法也是讓我有新的思維。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%AB%8B%E4%BD%93%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">立體渲染- 維基百科，自由的百科全書 - Wikipedia</a><br><a href="https://tw.news.yahoo.com/%E7%9C%BC%E7%A7%91%E6%AA%A2%E6%9F%A5%E5%88%A9%E5%99%A8%E3%80%8Coct%E3%80%8D%E8%A7%A3%E6%9E%90%E5%BA%A6%E8%B6%85%E9%AB%98%E3%80%80%E6%8F%AA%E5%87%BA%E7%9C%BC%E7%96%BE%E5%8F%AA%E9%9C%803%E7%A7%92-070029677.html" target="_blank" rel="noopener">眼科檢查利器「OCT」解析度超高</a> OCT文獻參考<br><a href="https://www.codeproject.com/Articles/352270/%2FArticles%2F352270%2FGetting-started-with-Volume-Rendering" target="_blank" rel="noopener">Getting started with Volume Rendering using OpenGL</a> 主要觀念與程式邏輯參考處<br><a href="http://aboutdada.com/?p=1739" target="_blank" rel="noopener">Rendering OpenGL Graphics in Qt</a></p>
]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
        <tag>Volume Rendering</tag>
        <tag>3D</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenGL GLSL著色器</title>
    <url>/2018/12/22/OpenGL-GLSL%E8%91%97%E8%89%B2%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>3D是結合容器與紋理呈現在畫面上，透過著色器我們就可以把現有的每點位置與該點像素顏色精準的繪製在其中，接下來我們就來了解一下GLSL這語言，其變數型態與傳遞方式需要先有所了解才能跟c++端資料互相傳遞，此篇文章將會記錄如何使用這兩種著色器處理字串集傳送到驅動中。</p>
<h2 id="GLSL-OpenGL-Shading-Language"><a href="#GLSL-OpenGL-Shading-Language" class="headerlink" title="GLSL(OpenGL Shading Language)"></a>GLSL(OpenGL Shading Language)</h2><ul>
<li>OpenGL繪製圖形是透過GLSL(OpenGL Shading Language)也稱作 GLslang，是一個以C語言為基礎的高階著色語言。</li>
<li>GLSL 著色器不是獨立的應用程式；其需要使用 OpenGL API 的應用程式。C、C++、C#、Delphi 和 Java 皆支援 OpenGL API，且支援 OpenGL 著色語言。</li>
<li>GLSL 著色器本身只是簡單的字串集，這些字串集會傳送到硬體廠商的驅動程式，並從程式內部的 OpenGL API 進入點編譯。</li>
</ul>
<h2 id="著色器-shader"><a href="#著色器-shader" class="headerlink" title="著色器(shader)"></a>著色器(shader)</h2><p>透過著色器可以透過glsl這個語言來將vertex與texture繪製呈現在program中，著色器的檔案格式為glsl<br>繪製成圖形基本上會運用到以下兩個檔案</p>
<ul>
<li>頂點著色器(vertex shader.glsl)</li>
<li>片段著色器(fragment shader.glsl)</li>
</ul>
<h3 id="著色器執行順序"><a href="#著色器執行順序" class="headerlink" title="著色器執行順序"></a>著色器執行順序</h3><p>著色器的執行順序會由vertex shader.glsl先執行再執行fragment shader.glsl<br><img src="https://i.imgur.com/dRpccHC.png" alt title="vertex shader.glsl -&gt; fragment shader.glsl"></p>
<h3 id="頂點著色器-vertex-shader"><a href="#頂點著色器-vertex-shader" class="headerlink" title="頂點著色器(vertex shader)"></a>頂點著色器(vertex shader)</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>頂點著色器目的return gl_Position</p>
<h4 id="運作原理"><a href="#運作原理" class="headerlink" title="運作原理"></a>運作原理</h4><p><img src="https://i.imgur.com/Oyh5P1d.png" alt title="Model,View,Projection matrix是三種不同的變換矩陣"></p>
<h5 id="Model-matrix"><a href="#Model-matrix" class="headerlink" title="Model matrix"></a>Model matrix</h5><p>將模型自己的座標系對應到空間座標系(針對空間座標處理縮放、旋轉、平移)<br><img src="https://i.imgur.com/Z2sOgQl.png" alt></p>
<h6 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h6><p>translate(x位移, y位移, z位移)<br>下面這個例子是向量(10,10,10,1)沿著X軸平移3個單位<br><img src="https://i.imgur.com/Z2sOgQl.png" alt><br>經過上述運算就得到了(13,10,10,1)的齊次座標，其中的1代表的是這向量為一個點而不是一個方向，即使經過變換矩陣點還是點</p>
<h6 id="縮放"><a href="#縮放" class="headerlink" title="縮放"></a>縮放</h6><p>scale(2.0f, 2.0f ,2.0f);<br><img src="https://i.imgur.com/ETRSfRP.png" alt></p>
<h6 id="example"><a href="#example" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//translate(x位移-0.5, y位移-0.5, z位移0.0)</span></span><br><span class="line">modelUniform.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="comment">//rotate(旋轉角度, 0.0, 1.0, 0.0) 以y軸做旋轉 </span></span><br><span class="line">modelUniform.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br></pre></td></tr></table></figure>
<h5 id="View-matrix"><a href="#View-matrix" class="headerlink" title="View matrix"></a>View matrix</h5><p>將空間座標系對應到攝影機所看到的座標系(將世界的視野重新定義)<br>設定鏡頭位置、世界中心位置、觀看方向<br><img src="https://i.imgur.com/Q1cexe3.png" alt></p>
<h6 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lookAt(鏡頭位置, 世界中心位置, 觀看角度)</span></span><br><span class="line">viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<h5 id="Projection-matrix"><a href="#Projection-matrix" class="headerlink" title="Projection matrix"></a>Projection matrix</h5><p>確定了物體的形狀位置和攝影機的位置以後，最後還要確定攝影機的攝影區域。<br>設定視野跟最近處與最遠處，若是物體小於最近處或是大於最遠處將會看不到物體<br><img src="https://i.imgur.com/KWobbmi.png" alt title="設定視野跟最近處與最遠處"></p>
<h6 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//perspective (視角多大, 螢幕長寬比, 最近處, 最遠處)</span></span><br><span class="line">projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br></pre></td></tr></table></figure>
<p>頂點著色器主要將頂點vertex去做變換矩陣(model縮放、旋轉、平移)與世界視角變化(view)，最後乘上投影機設定(projector)得到最終的gl_Position回傳</p>
<h4 id="運作順序"><a href="#運作順序" class="headerlink" title="運作順序"></a>運作順序</h4><p>將Vertex乘上變化矩陣後得到齊次座標(Homogeneous Coordinates)後賦值給gl_Position回傳<br><img src="https://i.imgur.com/Z2sOgQl.png" alt><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">gl_Position = P * (V * (M * vertex));</span><br></pre></td></tr></table></figure></p>
<p>Model coordinates - (<em>Model Matrix) &gt; World coordinates - (</em>View Matrix) &gt; Camera coordinates</p>
<h5 id="example-3"><a href="#example-3" class="headerlink" title="example"></a>example</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">attribute highp vec4 vertex;</span><br><span class="line">uniform mediump mat4 toMatrix;<span class="comment">//平移要比旋轉先處理否則結果不同(因為旋轉會比較先處理所以拉到glsl自行設定)</span></span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = proj *(view *(model * vertex))) ;</span><br><span class="line">    <span class="comment">//equal to (proj * view * model) * vertex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>proj <em>(view </em>(model <em>(toMatrix </em> vertex)))<br>equal to<br>(proj <em> view </em> model) * vertex</p>
</blockquote>
<h3 id="片段著色器-fragment-shader"><a href="#片段著色器-fragment-shader" class="headerlink" title="片段著色器(fragment shader)"></a>片段著色器(fragment shader)</h3><p>片段著色器最主要的return值為原生變數gl_FragColor來決定最終的像素顏色，而gl_FragColor會把值傳去做透明度(Alpha test)跟混合(Blending)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_FragColor = vec4(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//把輸出變量設置為紅色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://i.imgur.com/nfcqO7k.png" alt></p>
<h2 id="變數型態"><a href="#變數型態" class="headerlink" title="變數型態"></a>變數型態</h2><p>較常使用到的有以下幾種變數型態</p>
<ul>
<li>attribute</li>
<li>vec2, vec3, vec4</li>
<li>mat2, mat3, mat4</li>
<li>Uniform</li>
<li>varying</li>
<li>sampler2D, sampler3D<h3 id="Vec-向量"><a href="#Vec-向量" class="headerlink" title="Vec 向量"></a>Vec 向量</h3>glsl中的向量分為以下三種</li>
<li>vec2 二分量的浮點向量</li>
<li>vec3 三分量的浮點向量</li>
<li>vec4 四分量的浮點向量</li>
</ul>
<p>值可以為空間座標(x,y,z,w)或是顏色(r,g,b,a)或是紋理座標(s,t,p,q)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vec4 <span class="built_in">vector</span>;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">0</span>] = <span class="built_in">vector</span>.r = <span class="built_in">vector</span>.x = <span class="built_in">vector</span>.s;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">1</span>] = <span class="built_in">vector</span>.g = <span class="built_in">vector</span>.y = <span class="built_in">vector</span>.t;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">2</span>] = <span class="built_in">vector</span>.b = <span class="built_in">vector</span>.z = <span class="built_in">vector</span>.p;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">3</span>] = <span class="built_in">vector</span>.a = <span class="built_in">vector</span>.w = <span class="built_in">vector</span>.q;</span><br></pre></td></tr></table></figure>
<h4 id="分量與向量與純量差異"><a href="#分量與向量與純量差異" class="headerlink" title="分量與向量與純量差異"></a>分量與向量與純量差異</h4><blockquote>
<p>向量具有方向以及不為零的值，而純量只有值，一向量可分解成x,y分量，而x,y分量還是向量，因為它依然還是有方向，只是一個方向會垂直於x軸，另一個方向會垂直於y軸。</p>
</blockquote>
<h4 id="空間座標"><a href="#空間座標" class="headerlink" title="空間座標"></a>空間座標</h4><p>這裡我們所講述的四分量浮點向量為齊次座標因為齊次座標了方便將空間的平移、縮放、旋轉等轉換使用矩陣來記錄。<br>所以空間座標為(x,y,z,w)</p>
<h5 id="齊次座標"><a href="#齊次座標" class="headerlink" title="齊次座標"></a>齊次座標</h5><p>在3D世界中(x,y,z)可能是一個點也可能是一個向量，點只有位置，向量則是沒有位置只有大小與方向，當(x,y,z,0)時我們規定他為向量，而(x,y,z,1)或(x,y,z,2)當w不為0時我們稱為位置。</p>
<blockquote>
<p>補充說明<br>齊次座標除了能夠區分點和向量，在3D圖形學中還有重要的意義。齊次座標系使得我們可以在一中特殊的方程組中求出解，這個方程組中每一個方程都表示一個與系統中其他直線平行的直線。我們知道在歐幾里得空間中，對這種方程組是無解的，因爲他們沒有交點。然而在現實世界中我們是可以看到兩條平行線相交的。<br>三維點的齊次座標爲（X, Y, Z, w）,那麼它的3D空間座標爲：<br>x = X / w<br>y = Y / w<br>z = Z / w<br>我們可以看到的齊次座標(1, 2, 3, 1)與(2, 4, 6, 2)表示的都是3d空間中的點（1， 2， 3）；所以通常在程序設計中我們都取w爲1.</p>
</blockquote>
<h4 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h4><p>顏色(r,g,b,a)<br>r代表的是紅色<br>g代表的是綠色<br>b代表的是藍色<br>a代表的是透明度<br>值介於0~1</p>
<h3 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a>attribute</h3><p>這個屬性只能存在於頂點著色器中，所以一般只存放vertex(頂點座標)與texCoord(紋理座標)</p>
<p>example<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">attribute highp vec4 vertex;  <span class="comment">//頂點座標</span></span><br><span class="line">attribute highp vec4 texCoord;<span class="comment">//紋理座標</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Uniforms"><a href="#Uniforms" class="headerlink" title="Uniforms"></a>Uniforms</h3><p>CPU給每個線程輸入數據所有線程的輸入值必須統一（uniform），而且必須設為只讀。也就是說，每條線程接收相同的數據，並且是不可改變的數據。shader在運行的時候是無法改變Unifroms的數值。<br>資料型態通常為：float、vec2、vec3、vec4、mat2、mat3、mat4、，sampler2D、sampler3D和samplerCube。</p>
<blockquote>
<p>一般用來存放變換矩陣(縮放、旋轉、位移),與光照</p>
</blockquote>
<h4 id="example-4"><a href="#example-4" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">uniform mediump mat4 model;<span class="comment">//處理縮放、旋轉、位移</span></span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br></pre></td></tr></table></figure>
<h3 id="varying"><a href="#varying" class="headerlink" title="varying"></a>varying</h3><p>從vertex shader傳遞給fragment shader的媒介，在vertex shader修改完然後給fragment shader使用，但是在fragment shader中並不能修改它。</p>
<h4 id="example-5"><a href="#example-5" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">attribute highp vec4 vertex;   <span class="comment">//頂點座標</span></span><br><span class="line">attribute highp vec4 texCoord; <span class="comment">//紋理座標</span></span><br><span class="line">varying highp vec4 texc;       <span class="comment">//將紋理座標傳送給片段著色器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = MVP * vertex;</span><br><span class="line">    texc = texCoord; <span class="comment">//透過varying傳送給片段著色器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><p>float型態在shader中扮演重要角色，所以精度非常重要，低的精度可以加快渲染速度，但是質量就差，相對的高精度的質量較好，渲染速度則較慢，glsl光柵著色時，會有大量的浮點運算，設備可能不一定能承受，glsl提供了三種浮點數的精度，我們可以在變數前面加上highp, mediump, lowp達到該變數的精度聲明</p>
<h4 id="設定默認精度"><a href="#設定默認精度" class="headerlink" title="設定默認精度"></a>設定默認精度</h4><p>可以直接統一設定，在片段著色器最開始時，直接加上precision mediump float;這樣就默認了所有精度，若是變數沒特別聲明則會以默認精度來處理。</p>
<h4 id="精度套用"><a href="#精度套用" class="headerlink" title="精度套用"></a>精度套用</h4><p>在運算時會套用已知最高的精度參數為運算精度，若沒有已知最高的則會套用默認精度或是更高的精度。</p>
<h4 id="example-6"><a href="#example-6" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">lowp <span class="keyword">float</span> color;</span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line">varying highp vec4 texc;</span><br></pre></td></tr></table></figure>
<h2 id="矩陣"><a href="#矩陣" class="headerlink" title="矩陣"></a>矩陣</h2><p>矩陣乘法講究次序<br>矩陣運算A * B != B * A<br>所以先後順序很重要</p>
<h3 id="example-7"><a href="#example-7" class="headerlink" title="example"></a>example</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">transformedVector = translateMatrix * rotationMatrix * scaleMatrix * originalVector;</span><br></pre></td></tr></table></figure>
<p>上述的程式碼會先執行縮放再執行旋轉最後才執行平移，這就是矩陣乘法的運算方式</p>
<h2 id="GLSL好用的函式"><a href="#GLSL好用的函式" class="headerlink" title="GLSL好用的函式"></a>GLSL好用的函式</h2><h3 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h3><p>step() 插值函數需要輸入兩個參數。第一個是極限或閥值，第二個是我們想要檢測或通過的值。<br>對任何小於閥值的值，返回 0.0，大於閥值，則返回 1.0。</p>
<h4 id="example-8"><a href="#example-8" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//若是st.x &gt; 0.5則回傳1.0否則回傳0.0</span></span><br><span class="line"><span class="keyword">float</span> y = step(<span class="number">0.5</span>,st.x);</span><br></pre></td></tr></table></figure>
<h3 id="Smoothstep"><a href="#Smoothstep" class="headerlink" title="Smoothstep"></a>Smoothstep</h3><p>smoothstep()當給定一個範圍的上下限和一個數值，這個函數會在已有的範圍內給出插值。<br>前兩個參數規定轉換的開始和結束點，第三個是給出一個值用來插值。</p>
<h4 id="example-9"><a href="#example-9" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Smooth interpolation between 0.1 and 0.9</span></span><br><span class="line"><span class="keyword">float</span> y = smoothstep(<span class="number">0.1</span>,<span class="number">0.9</span>,st.x);</span><br></pre></td></tr></table></figure>
<h3 id="其他有用函式"><a href="#其他有用函式" class="headerlink" title="其他有用函式"></a>其他有用函式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">y = mod(x,<span class="number">0.5</span>); <span class="comment">// 返回 x 對 0.5 取mod的值</span></span><br><span class="line">y = fract(x); <span class="comment">// 僅僅返回數的小數部分</span></span><br><span class="line">y = <span class="built_in">ceil</span>(x); <span class="comment">// 向正無窮取整</span></span><br><span class="line">y = <span class="built_in">floor</span>(x); <span class="comment">// 向負無窮取整</span></span><br><span class="line">y = <span class="built_in">abs</span>(x); <span class="comment">// 返回 x 的絕對值</span></span><br><span class="line">y = clamp(x,<span class="number">0.0</span>,<span class="number">1.0</span>); <span class="comment">// 把 x 的值限制在 0.0 到 1.0</span></span><br><span class="line">y = min(<span class="number">0.0</span>,x); <span class="comment">// 返回 x 和 0.0 中的較小值</span></span><br><span class="line">y = max(<span class="number">0.0</span>,x); <span class="comment">// 返回 x 和 0.0 中的較大值</span></span><br></pre></td></tr></table></figure>
<h2 id="實作著色器"><a href="#實作著色器" class="headerlink" title="實作著色器"></a>實作著色器</h2><p>以下是3D Volume Rendering的著色器編寫</p>
<h3 id="vertexShader-glsl"><a href="#vertexShader-glsl" class="headerlink" title="vertexShader.glsl"></a>vertexShader.glsl</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">attribute highp vec4 vertex;</span><br><span class="line">attribute highp vec4 texCoord;</span><br><span class="line">uniform mediump mat4 verMatrix;</span><br><span class="line">uniform mediump mat4 toMatrix;</span><br><span class="line">uniform mediump mat4 toTexMatrix;</span><br><span class="line">uniform mediump mat4 backMatrix;</span><br><span class="line">uniform mediump mat4 texMatrix;</span><br><span class="line"><span class="comment">//MVP</span></span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line">varying highp vec4 texc; <span class="comment">//varying傳送給fragment shader</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = proj *(view *(model *(toMatrix * vertex))) ;<span class="comment">//equal to (proj * view * model) * vertex</span></span><br><span class="line">    texc = backMatrix* (texMatrix * (toTexMatrix * texCoord)) ;<span class="comment">//texture rotate</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="fragmentShader-glsl"><a href="#fragmentShader-glsl" class="headerlink" title="fragmentShader.glsl"></a>fragmentShader.glsl</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">varying highp vec4 texc;</span><br><span class="line">uniform sampler2D tex2D;</span><br><span class="line">uniform sampler3D tex3D;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//2D</span></span><br><span class="line">    <span class="comment">//highp vec4 color = texture2D( tex2D , texc.st ).rgba;</span></span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">    highp vec4 color = texture3D( tex3D , texc.stp ).rgba;<span class="comment">//紋理的格式為(s,t,p,q)</span></span><br><span class="line">    <span class="keyword">if</span> (color.a &gt; <span class="number">0.1</span>) &#123; <span class="comment">//把透明度太低的丟棄(用來過濾的閥值)</span></span><br><span class="line">        gl_FragColor = color;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        discard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Scene-h"><a href="#Scene-h" class="headerlink" title="Scene.h"></a>Scene.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QOpenGLShaderProgram m_program;</span><br><span class="line"><span class="keyword">int</span> m_vertexAttr;</span><br><span class="line"><span class="keyword">int</span> m_texCoordAttr;</span><br><span class="line"><span class="keyword">int</span> m_verMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_toMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_toTexMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_backMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_texMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_texUniform;</span><br><span class="line"><span class="keyword">int</span> m_modelUniform;</span><br><span class="line"><span class="keyword">int</span> m_viewUniform;</span><br><span class="line"><span class="keyword">int</span> m_projUniform;</span><br></pre></td></tr></table></figure>
<h3 id="Scene-cpp"><a href="#Scene-cpp" class="headerlink" title="Scene.cpp"></a>Scene.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QOpenGLShader <span class="title">vShader</span><span class="params">( QOpenGLShader::Vertex )</span></span>;</span><br><span class="line">vShader.compileSourceFile( <span class="string">":/Shaders/vertexShader.glsl"</span> );</span><br><span class="line"><span class="function">QOpenGLShader <span class="title">fShader</span><span class="params">( QOpenGLShader::Fragment )</span></span>;</span><br><span class="line">fShader.compileSourceFile( <span class="string">":/Shaders/fragmentShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">m_program.addShader( &amp;vShader );</span><br><span class="line">m_program.addShader( &amp;fShader );</span><br><span class="line">m_program.link();</span><br><span class="line"></span><br><span class="line">m_vertexAttr = m_program.attributeLocation( <span class="string">"vertex"</span> );</span><br><span class="line">m_texCoordAttr = m_program.attributeLocation( <span class="string">"texCoord"</span> );</span><br><span class="line">m_verMatrixUniform = m_program.uniformLocation( <span class="string">"verMatrix"</span> );</span><br><span class="line">m_toMatrixUniform = m_program.uniformLocation( <span class="string">"toMatrix"</span> );</span><br><span class="line">m_toTexMatrixUniform = m_program.uniformLocation( <span class="string">"toTexMatrix"</span> );</span><br><span class="line">m_backMatrixUniform = m_program.uniformLocation( <span class="string">"backMatrix"</span> );</span><br><span class="line">m_texMatrixUniform = m_program.uniformLocation( <span class="string">"texMatrix"</span> );</span><br><span class="line">m_modelUniform = m_program.uniformLocation( <span class="string">"model"</span> );</span><br><span class="line">m_viewUniform = m_program.uniformLocation( <span class="string">"view"</span> );</span><br><span class="line">m_projUniform = m_program.uniformLocation( <span class="string">"proj"</span> );</span><br><span class="line">m_texUniform = m_program.uniformLocation( <span class="string">"tex3D"</span> ); <span class="comment">//3D</span></span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelViewVertex; <span class="comment">//vertex</span></span><br><span class="line">QMatrix4x4 modeltoVertex;</span><br><span class="line">QMatrix4x4 modeltoTexVertex;</span><br><span class="line">QMatrix4x4 modelbackVertex;</span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelUniform;</span><br><span class="line">QMatrix4x4 viewUniform;</span><br><span class="line">QMatrix4x4 projUniform;</span><br><span class="line">modeltoVertex.translate( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-0.5f</span> );</span><br><span class="line">viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelViewTexture; <span class="comment">//texture</span></span><br><span class="line">modeltoTexVertex.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="keyword">if</span> (direction == <span class="number">0</span>)   <span class="comment">//horizontal 0 / vertical 1</span></span><br><span class="line">    modelViewTexture.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    modelViewTexture.rotate( m_angle, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">modelbackVertex.translate(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span> );</span><br><span class="line">m_program.setUniformValue( m_verMatrixUniform, modelViewVertex );</span><br><span class="line">m_program.setUniformValue( m_texMatrixUniform, modelViewTexture );</span><br><span class="line">m_program.setUniformValue( m_toMatrixUniform, modeltoVertex );</span><br><span class="line">m_program.setUniformValue( m_toTexMatrixUniform, modeltoTexVertex );</span><br><span class="line">m_program.setUniformValue( m_backMatrixUniform, modelbackVertex );</span><br><span class="line"></span><br><span class="line">m_program.setUniformValue( m_modelUniform, modelUniform );</span><br><span class="line">m_program.setUniformValue( m_viewUniform, viewUniform );</span><br><span class="line">m_program.setUniformValue( m_projUniform, projUniform );</span><br><span class="line"></span><br><span class="line">m_program.release();</span><br></pre></td></tr></table></figure>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>GLSL就是透過從C++端取得到的頂點座標與紋理座標用頂點著色器得到gl_Position齊次座標與片段著色器得到gl_FragColor最終像素顏色繪製圖形，有了這些認知後下一篇我們將繼續看C++端如何建立頂點、紋理座標資訊建立與著色器連結繪製出3D Volume Rendering達到下圖的3D渲染效果<br><img src="https://i.imgur.com/zafnspQ.png" alt></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/GLSL" target="_blank" rel="noopener">GLSL - 维基百科</a><br><a href="https://thebookofshaders.com/02/?lan=ch" target="_blank" rel="noopener">The Book of Shaders by Patricio Gonzalez Vivo &amp; Jen Lowe</a><br><a href="https://github.com/wshxbqq/GLSL-Card" target="_blank" rel="noopener">GitHub - wshxbqq/GLSL-Card: 着色器语言GLSL</a><br><a href="https://www.smwenku.com/a/5b87a23d2b71775d1cd837c7/" target="_blank" rel="noopener">https://www.smwenku.com/a/5b87a23d2b71775d1cd837c7/</a> 齊次座標相關文獻<br><a href="http://www.opengl-tutorial.org/cn/beginners-tutorials/tutorial-3-matrices/" target="_blank" rel="noopener">第三课：矩阵</a> MVP觀念<br><a href="https://www.smwenku.com/a/5c1c72febd9eee5e4184bcb7" target="_blank" rel="noopener">OpenGL學習——第5天（着色器）</a> 純粹覺得寫得好的文章</p>
]]></content>
      <categories>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL著色器</tag>
        <tag>shader</tag>
        <tag>GLSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬蟲幫你掌握氣象!(動態網頁爬取)</title>
    <url>/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇<a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/#more">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a>寫的是如何擷取靜態網頁內容，只能單純爬取HTML內容，但是如果網頁是用JS渲染的我們透過F12 select element是看不到內容的，像是下方這張圖<br><img src="https://i.imgur.com/mDpDHxw.png" alt><br>選擇了元素，但看不到內容(今天(15日)桃園市天氣晴時多雲，平均溫度…)<br>因為這段代碼是由JS渲染，所以我們需要用PhantomJS來幫助我們爬取中央氣象局今天的天氣訊息</p>
<h2 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h2><p>PhantomJS是無介面瀏覽器(Headless browser)，背後的渲染引擎為 WebKit，適合進行自動化測試、捕捉截圖或監測網頁效能。因為沒有圖形介面，很容易整合至現有的測試框架，另一個特點是他能直接控制 DOM，方便你提取網頁中的元素內容</p>
<p>下載PhantomJS(<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">Download PhantomJS</a>)</p>
<h2 id="實作爬取氣象"><a href="#實作爬取氣象" class="headerlink" title="實作爬取氣象"></a>實作爬取氣象</h2><h3 id="導入函式庫"><a href="#導入函式庫" class="headerlink" title="導入函式庫"></a>導入函式庫</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br></pre></td></tr></table></figure>
<h3 id="編寫爬取桃園天氣函式"><a href="#編寫爬取桃園天氣函式" class="headerlink" title="編寫爬取桃園天氣函式"></a>編寫爬取桃園天氣函式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Taoyuan</span><span class="params">()</span>:</span></span><br><span class="line">    target_url = <span class="string">'https://www.cwb.gov.tw/V7/forecast/taiwan/Taoyuan_City.htm'</span></span><br><span class="line">    driver = webdriver.PhantomJS(executable_path=<span class="string">r'D:\phantomjs\bin\phantomjs.exe'</span>)<span class="comment">#導入PhantomJS路徑</span></span><br><span class="line">    driver.get(target_url)</span><br><span class="line">    soup = BeautifulSoup(driver.page_source, <span class="string">'html.parser'</span>)</span><br><span class="line">    content = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> soup.select(<span class="string">'#ftext'</span>):</span><br><span class="line">        title = str(data)</span><br><span class="line">        content = title.split(<span class="string">"&lt;br/&gt;&lt;br/&gt;"</span>)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure>
<p>檢視beautifulSoup解析HTML代碼後的內容並觀察欲爬取位置<br><img src="https://i.imgur.com/91rgnyI.png" alt><br>將id為ftext的內容找出(#ftext)</p>
<ul>
<li>#id</li>
<li>.class<br><img src="https://i.imgur.com/GbpRNQC.png" alt></li>
</ul>
<h3 id="呼叫函式"><a href="#呼叫函式" class="headerlink" title="呼叫函式"></a>呼叫函式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(Taoyuan())</span><br></pre></td></tr></table></figure>
<p>成功爬取今日天氣概述<br><img src="https://i.imgur.com/mHhLbQZ.png" alt></p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>PhantomJS還蠻多問題的例如:使用Multi-thread，讓多個網頁能同時 Loading，可是 PhantomJS 同時開很容易就會陣亡。掛掉後會變成一個 Zombie Process。<br>Headless Google 的出現，能取代 PhantomJS 功能且更快更穩，讓 PhantomJS 作者決定停止辛苦的獨力維護工作，PhantomJS 的Github 專案也已封存，改用 Headless Chrome 已成定局。改天來玩看看Google Chrome Headless，到時候再來寫一篇Headless Chrome的爬取</p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hiskio.com/courses/76/lectures/1883" target="_blank" rel="noopener">PhantomJS的用法</a><br><a href="https://jerrynest.io/phantomjs-screenshot/" target="_blank" rel="noopener">使用PhantomJS 抓取網頁截圖- 傑瑞窩在這</a><br><a href="https://blog.darkthread.net/blog/headless-chrome/" target="_blank" rel="noopener">使用 Headless Chrome 擷圖、轉存PDF、爬資料</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>動態網頁爬取</tag>
        <tag>網頁爬蟲</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>優質小工具</title>
    <url>/2018/11/15/%E5%84%AA%E8%B3%AA%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>俗話說的好，工欲善其事必先利其器，在工作上常常需要一些小工具來輔佐達到目的，可能會製作UI或是拍攝教學影片，或是使用些跟程式相關的軟體，這時候若沒有一組好工具就還要花費時間在搜尋你的工具時間上，尤其一堆要付費，都出來上班工作了還要用付費軟體太哀傷了，所以記錄了目前覺得不錯的免費軟體收錄在工具箱中，這樣下次使用就快狠準啦!</p>
<h2 id="GetColor-取得色碼"><a href="#GetColor-取得色碼" class="headerlink" title="GetColor 取得色碼"></a>GetColor 取得色碼</h2><p>製做UI的時候，顏色要很精準，GetColor可以將任一pixel的顏色代碼清楚寫出，是個製做UI的好幫手!<br><img src="https://i.imgur.com/ZY8i183.png" alt title="滴管取得色碼"></p>
<h2 id="ActivePresenter-製作影片"><a href="#ActivePresenter-製作影片" class="headerlink" title="ActivePresenter 製作影片"></a>ActivePresenter 製作影片</h2><p>製做影片時，不外乎就是調整影片長度與加字幕，這套ActivePresenter可以很輕鬆的達到這些需求，好操作又免費，讚!<br><img src="https://i.imgur.com/7KLoXkz.png" alt></p>
<h2 id="ReIcon-圖示定位"><a href="#ReIcon-圖示定位" class="headerlink" title="ReIcon 圖示定位"></a>ReIcon 圖示定位</h2><p>如果你也跟我一樣有接雙螢幕的習慣，開會時插拔HDMI/DSub線，排列好的桌布圖示順序跑掉，那就很需要這套軟體了，將排序好的桌布環境使用這套軟體記憶，亂掉的時候點兩下通通歸位~<br><img src="https://i.imgur.com/KxPtiqS.png" alt></p>
<h2 id="NSIS-程式打包"><a href="#NSIS-程式打包" class="headerlink" title="NSIS 程式打包"></a>NSIS 程式打包</h2><p><a href="http://nsis.sourceforge.net/Download" target="_blank" rel="noopener">Download NSIS 3.03</a><br>將寫好的程式碼透過編寫NSIS &gt; compile NSI Scripts / load scripts就會產生安裝檔，這樣可以給其他人安裝妳寫好的程式囉<br><img src="https://i.imgur.com/ku1cqn1.png" alt></p>
<h2 id="rufus-製做可開機硬碟"><a href="#rufus-製做可開機硬碟" class="headerlink" title="rufus 製做可開機硬碟"></a>rufus 製做可開機硬碟</h2><p>我在<a href="https://teddybearfp.github.io/2018/11/15/%E5%A6%82%E4%BD%95%E5%B0%87Windows%E5%AE%89%E8%A3%9D%E5%88%B0%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%A2%9F%E7%B5%A6Mac%E4%BD%BF%E7%94%A8/#more">如何將Windows安裝到外接硬碟給Mac使用</a>有編寫rufus相關製作方式</p>
<h2 id="clonezilla-製做可開機硬碟"><a href="#clonezilla-製做可開機硬碟" class="headerlink" title="clonezilla 製做可開機硬碟"></a>clonezilla 製做可開機硬碟</h2><p>類似rufus的功能，可以製作還原碟，在開機時什麼都不操作的情況下直接進行還原的動作</p>
<h2 id="paint-NET-圖片處理"><a href="#paint-NET-圖片處理" class="headerlink" title="paint.NET 圖片處理"></a>paint.NET 圖片處理</h2><p>有時候我們需要個去背或是圖形相關處理，用paint.NET是個好選擇，免費的paint.NET可以用筆刷將不要的地方用橡皮擦擦掉並存成png檔，去背的圖片在觀看疊圖趨勢的時候是很重要的</p>
<h2 id="tourtoiseHg-版本控制"><a href="#tourtoiseHg-版本控制" class="headerlink" title="tourtoiseHg 版本控制"></a>tourtoiseHg 版本控制</h2><p>下載<a href="https://tortoisehg.bitbucket.io/" target="_blank" rel="noopener">TortoiseHg</a></p>
<h3 id="TortoiseHg-vs-git"><a href="#TortoiseHg-vs-git" class="headerlink" title="TortoiseHg vs git"></a>TortoiseHg vs git</h3><h4 id="優勢"><a href="#優勢" class="headerlink" title="優勢"></a>優勢</h4><ul>
<li>workbench 功能強大, 可以給revision打tag/bookmark和導出patch和導出archive, 可以對repository做sync/purge操作.</li>
<li>操作比git簡單多</li>
<li>和windows版的git相比, 非常小巧</li>
<li>集成Issue Tracking和Review Board<h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4></li>
<li>不支持針對單個文件夾的分支.</li>
<li>thgw.exe佔用內存較多</li>
</ul>
<h2 id="bitBucket-版本控制"><a href="#bitBucket-版本控制" class="headerlink" title="bitBucket 版本控制"></a>bitBucket 版本控制</h2><p>好用的版本控制</p>
<h2 id="Cmake"><a href="#Cmake" class="headerlink" title="Cmake"></a>Cmake</h2><p>cmake 目的: 將source資料編譯成sln檔 讓c++可以編譯產生dll與lib</p>
<p>1.開啟cmake gui<br>2.選擇source(例如:C:/opencv/sources)<br>3.選擇目的資料夾<br>4.configure<br>5.configure完成後(例如opencv選擇build&gt;&gt;opencv_world打勾)<br>6.search找尋prefix(cmake&gt;&gt;cmake_install_prefix) 更改路徑<br>7.generate完成後 點擊open project<br>8.開啟sln後build需要的檔案(例如module內的opencv_world)<br>9.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>10.至install設定的資料夾即可找到.h  , .dll , .lib<br>11.此時只有debug版所以還要再編一次release版<br>12.切換成release再次build需要的檔案(例如module內的opencv_world)<br>13.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>14.步驟完成後 就有debug版跟release版了!</p>
<p><img src="https://i.imgur.com/SvyQStu.png" alt></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hk.saowen.com/a/cd02fa3aa2d452856d27734e5a08e21a0e877c95717d10841a8d6340975abde4" target="_blank" rel="noopener">https://hk.saowen.com/a/cd02fa3aa2d452856d27734e5a08e21a0e877c95717d10841a8d6340975abde4</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>優質小工具</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>如何將Windows安裝到外接硬碟給Mac使用</title>
    <url>/2018/11/15/%E5%A6%82%E4%BD%95%E5%B0%87Windows%E5%AE%89%E8%A3%9D%E5%88%B0%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%A2%9F%E7%B5%A6Mac%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>雖然Mac十分好用也非常流暢，但是有些程式在Mac上是無法使用或是還沒支援的，於是懷念起我們熟悉的Windows，除了bootcamp方式外，透過rufus這套軟體置作windows外接硬碟，可以很輕鬆的能在Mac裝置上看到Windows的身影</p>
<h2 id="rufus"><a href="#rufus" class="headerlink" title="rufus"></a>rufus</h2><p>可開機USB製作軟體 - Rufus，將一般的USB格式化，並製作成可以用於電腦重灌的可開機USB，支援各式ISO光碟映像檔及MS-DOS、FreeDOS的匯入，映像檔的匯入支援Windows 8/7/XP/Vista/2003R2等作業系統光碟、Hiren’s Boot CD等多功能開機片、CentOS等Linux作業系統光碟、LiveXP等Live CD。<br>可以至<a href="https://www.azofreeware.com/2013/12/rufus-141-usb.html" target="_blank" rel="noopener">阿榮福利味</a>下載</p>
<h2 id="製作步驟"><a href="#製作步驟" class="headerlink" title="製作步驟"></a>製作步驟</h2><h3 id="下載Windows-iso檔"><a href="#下載Windows-iso檔" class="headerlink" title="下載Windows iso檔"></a>下載Windows iso檔</h3><p>首先先取得Windows的映像檔(Windows 10 Pro/Windows 10 Home…)</p>
<h3 id="製做Windows環境外接硬碟"><a href="#製做Windows環境外接硬碟" class="headerlink" title="製做Windows環境外接硬碟"></a>製做Windows環境外接硬碟</h3><p>執行rufus將第一步驟的Windows.iso寫入外接硬碟(建議為SSD效能有時甚至可差距到十倍以上)</p>
<h3 id="Mac執行外接硬碟"><a href="#Mac執行外接硬碟" class="headerlink" title="Mac執行外接硬碟"></a>Mac執行外接硬碟</h3><p>將Mac開機(option + 開機)，然後選擇EFI boot進入安裝介面安裝，此時需準備滑鼠跟鍵盤，因為還沒安裝驅動mac的軌跡版與鍵盤將會無法使用</p>
<h3 id="安裝完後回到Mac-OS"><a href="#安裝完後回到Mac-OS" class="headerlink" title="安裝完後回到Mac OS"></a>安裝完後回到Mac OS</h3><p>回到Mac OS開啟boot camp選擇動作並下載Windows支援軟體(mac driver)，放到外接硬碟中</p>
<h3 id="設定Windows並安裝支援軟體"><a href="#設定Windows並安裝支援軟體" class="headerlink" title="設定Windows並安裝支援軟體"></a>設定Windows並安裝支援軟體</h3><p>將Mac開機(option + 開機)，然後選擇EFI boot進入已經安裝好的Windows，此時會跑一些Windows基本設定，設定完後就進入Windows介面了，但是有些功能尚未齊全，像是充電功能或是聲音、fn鍵等功能…，把剛剛從bootcamp下載到的driver執行，安裝成功後，跟一般的Windows沒什麼兩樣了!</p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/03/19/Python-%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D/#more">Python 資料比對</a><br><a href="https://teddybearfp.github.io/2018/11/15/%E5%84%AA%E8%B3%AA%E5%B0%8F%E5%B7%A5%E5%85%B7/">優質小工具</a></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://applealmond.com/posts/15795" target="_blank" rel="noopener">如何將Windows安裝到外接硬碟上給Mac使用（非Bootcamp/虛擬 …</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>rufus</tag>
        <tag>WinToGo</tag>
      </tags>
  </entry>
  <entry>
    <title>梯度計算影像清晰度</title>
    <url>/2018/11/15/%E6%A2%AF%E5%BA%A6%E8%A8%88%E7%AE%97%E5%BD%B1%E5%83%8F%E6%B8%85%E6%99%B0%E5%BA%A6-gradient/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相機提供的訊息影響接下來對圖的運算，所以對焦有沒有清楚很重要，藉由梯度計算出來的數值，簡易的判別出是否屬於良好的對焦</p>
<h2 id="梯度計算"><a href="#梯度計算" class="headerlink" title="梯度計算"></a>梯度計算</h2><p>像素與右方、下方的差累加，可以得出一組梯度值(gradient)，<br>對焦清晰的圖像相比對焦模糊的圖像，它的數據之間的灰度差異應該更大，即它的方差應該較大，可以通過圖像灰度數據的方差來衡量圖像的清晰度，方差越大，表示清晰度越好。</p>
<ul>
<li>RGB圖用綠色的像素去做，因為綠色對光的反應是最靈敏的</li>
<li>每個G跟右邊、下方的比較</li>
<li>最右排跟最下排不做</li>
</ul>
<p>由左上至右下</p>
<p><img src="https://i.imgur.com/HktcuD6.png" alt title="左上到右下計算"></p>
<blockquote>
<p>梯度 = ((G1-G2)+(G1-G4))+((G2-G3)+(G2-G5))+…<br>數值越大代表清晰度越好</p>
</blockquote>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>640 x 480的圖梯度計算處理<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> gradient = <span class="number">0</span>;</span><br><span class="line">uchar* buf = canvas.bits()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">639</span>; i++) &#123;<span class="comment">//略過最右排</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">479</span>; j++) &#123;<span class="comment">//略過最下排</span></span><br><span class="line">        <span class="keyword">int</span> idx = i * <span class="number">3</span> + j * canvas.bytePerline();</span><br><span class="line">        <span class="keyword">int</span> idxRight = (i + <span class="number">1</span>) * <span class="number">3</span> + j * bytePerLine();</span><br><span class="line">        <span class="keyword">int</span> idxBottom = i * <span class="number">3</span> + (j + <span class="number">1</span>) * canvas.bytePerLine();</span><br><span class="line">        gradient += <span class="built_in">abs</span>(buf[idx + <span class="number">1</span>] - buf[idxRight + <span class="number">1</span>]) + <span class="built_in">abs</span>(buf[idx +<span class="number">1</span>] - buf[idxBottom +<span class="number">1</span>])<span class="comment">//梯度等於綠色像素跟右方與下方比較</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="水波紋現象"><a href="#水波紋現象" class="headerlink" title="水波紋現象"></a>水波紋現象</h2><p>頻率不一致造成水波紋，室內拍攝時會造成水波紋，主要的原因是日光燈的閃爍頻率所致。一般常見的T9日光燈管是種氣體電燈，燈管內有低壓氬氣或氬氖混合氣體及水銀蒸氣，燈管的光線與色溫會隨著交流電的頻率（60Hz）變化，也就造成閃爍的現象。但因為閃爍的頻率很高，因此肉眼難以辨識，會覺得燈管放出的是連續光。但對於電子儀器來說，日光燈的閃爍頻率並不算高。因此造成手機、相機在拍攝上的波紋現象，關鍵就在於光源、快門、感光元件的頻率不一所致。</p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在工業應用中，最清晰的對焦拍攝出來的圖像不一定是最好的，有可能出現摩爾紋（水波紋）現象，一般需要在最清晰對焦位置做微調。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/dcrmg/article/details/53543341" target="_blank" rel="noopener">OpenCV 图像清晰度评价（相机自动对焦） - 牧野的博客- CSDN博客</a><br><a href="https://www.techbang.com/posts/17861-principle-analysis-of-cell-phone-camera-water-ripples-all-fluorescent-lamp-frequency-labranche" target="_blank" rel="noopener">解決手機、相機水波紋現象，全是日光燈頻率在搞鬼| T客邦</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>清晰度</tag>
        <tag>Focus</tag>
        <tag>梯度</tag>
        <tag>gradient</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 執行緒(QThread)</title>
    <url>/2018/11/12/Qt-%E5%9F%B7%E8%A1%8C%E7%B7%92/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>繼上一篇<a href="https://teddybearfp.github.io/2018/11/12/%E5%9F%B7%E8%A1%8C%E7%B7%92/#more">C 執行緒</a>我們來看看Qt怎麼編寫執行緒，在Qt中能很方便的使用QThread達到執行緒功能，這一篇我們來記錄一下怎麼使用QThread</p>
<h2 id="QThread"><a href="#QThread" class="headerlink" title="QThread"></a>QThread</h2><p>因為Qt中所有界面都是在UI執行緒中(也被稱為主執行緒，就是執行QApplication::exec()的線程)，在這個線程中執行耗時的操作，UI就會阻塞，而讓介面停止回應，為了避免這一問題，我們改寫程式，使用QThread開啟一個新的執行緒，由這新的執行緒進行耗時的工作，而主執行緒可繼續進行使用者介面的響應</p>
<h2 id="QThread實作"><a href="#QThread實作" class="headerlink" title="QThread實作"></a>QThread實作</h2><h3 id="編寫WorkThread-class"><a href="#編寫WorkThread-class" class="headerlink" title="編寫WorkThread class"></a>編寫WorkThread class</h3><p>我們將QThread功能包裝成Function呼叫<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> :</span> <span class="keyword">public</span> QThread</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     WorkThread();</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">StartThread</span><span class="params">( <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member )</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">IsAlive</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">public</span> slots:</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">SetThreadEnd</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">     <span class="keyword">bool</span> bIsThreadAlive;</span><br><span class="line"> signals:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">EndPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">```cpp</span><br><span class="line"><span class="comment">//WorkThread.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"workthread.h"</span></span></span><br><span class="line"></span><br><span class="line">WorkThread::WorkThread()</span><br><span class="line">&#123;</span><br><span class="line">    bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> WorkThread::StartThread(<span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        bIsThreadAlive = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;disconnect();</span><br><span class="line"></span><br><span class="line">        connect( <span class="keyword">this</span>,SIGNAL( DoSomething() ),receiver,member,Qt::DirectConnection );</span><br><span class="line">        connect( <span class="keyword">this</span>,SIGNAL( EndPoint() ),<span class="keyword">this</span>,SLOT( quit() ));</span><br><span class="line">        <span class="keyword">this</span>-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> WorkThread::run()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">emit <span class="title">DoSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">    <span class="function">emit <span class="title">EndPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::Stop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        SetThreadEnd();</span><br><span class="line">        <span class="keyword">this</span>-&gt;wait();</span><br><span class="line"></span><br><span class="line">        QThread::quit();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !bIsThreadAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::SetThreadEnd()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !bIsThreadAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::IsAlive()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> bIsThreadAlive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="使用WorkThread"><a href="#使用WorkThread" class="headerlink" title="使用WorkThread"></a>使用WorkThread</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用端.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"workthread.h"</span></span></span><br><span class="line">WorkThread thd4Rander;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用端.cpp</span></span><br><span class="line"><span class="keyword">void</span> DataProc::~DataProc() &#123;</span><br><span class="line">    thd4Rander.Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::FrameProcess() &#123;</span><br><span class="line">    <span class="keyword">while</span>(thd4Rander.IsAlive()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!GetCameraData(rawData, &amp;width, &amp;height)) &#123;</span><br><span class="line">            thd4Rander.Stop();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            dosomething...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::startRender() <span class="comment">//可以製作成button來切換</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(thd4Rander.IsAlive())</span><br><span class="line">    &#123;</span><br><span class="line">        thd4Rander.Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        thd4Rander.StartThread(<span class="keyword">this</span>, SLOT(FrameProcess()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>QThread</tag>
        <tag>執行緒</tag>
      </tags>
  </entry>
  <entry>
    <title>C 執行緒</title>
    <url>/2018/11/12/%E5%9F%B7%E8%A1%8C%E7%B7%92/</url>
    <content><![CDATA[<h2 id="執行緒"><a href="#執行緒" class="headerlink" title="執行緒"></a>執行緒</h2><p>執行緒（thread）是作業系統能夠進行運算排程的最小單位。它被包含在行程之中，是行程中的實際運作單位。一條執行緒指的是行程中一個單一順序的控制流，一個行程中可以並行多個執行緒，每條執行緒並列執行不同的任務。</p>
<ul>
<li>擁有多CPU的電腦系統可以同時處理多項程序或將單一程序平行處理。</li>
<li>一個程序被執行時至少要有一個執行緒，但也可同時擁有多個執行緒來進行處理。</li>
</ul>
<h2 id="CreateThread-vs-beginthread"><a href="#CreateThread-vs-beginthread" class="headerlink" title="CreateThread  vs _beginthread"></a>CreateThread  vs _beginthread</h2><h3 id="兩者差異"><a href="#兩者差異" class="headerlink" title="兩者差異"></a>兩者差異</h3><p>CreateThread 是一個<strong>Win 32API</strong> 函數,_beginthread 是一個<strong>CRT(C Run-Time)</strong> 函式<br>使用上不會有太大的差異，但是如果在CreateThread創建的thread中使用CRT函式的話，會產生一些<strong>Memory Leak</strong>，(例如:<strong>_getptd</strong> )</p>
<p>CreateThread()和_beginthreadex()在Jeffrey的《Windows核心編程》中講的很清楚，應當儘量避免使用CreateThread()。<br>事實上，_beginthreadex()在內部先爲線程創建一個線程特有的tiddata結構，然後調用CreateThread()。在某些非線程安全的CRT函數中會請求這個結構。如果直接使用CreateThread()的話，那些函數發現請求的tiddata爲NULL，就會在現場爲該線程創建該結構，此後調用EndThread()時會引起內存泄漏。_endthreadex()可以釋放由CreateThread()創建的線程，實際上，在它的內部會先釋放由_beginthreadex()創建的tiddata結構，然後調用EndThread()。<br>因此，應當使用_beginthreadex() 和_endthreadex() ，而避免使用CreateThread()和EndThread()。當然，_beginthread()和_endthread()也是應當避免使用的。 </p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>使用_beginthreadex()!!!</p>
<h3 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h3><p>CRT(C/C++ Runtime Library)是支持C/C++運行的一系列函式和代碼的總稱。雖然沒有一個很精確的定義，但是可以知道，你的main就是它負責調用的，你平時調用的諸如strlen、strtok、time、atoi之類的函式也是它提供的。</p>
<h2 id="beginthread-vs-beginthreadex"><a href="#beginthread-vs-beginthreadex" class="headerlink" title="_beginthread vs _beginthreadex"></a>_beginthread vs _beginthreadex</h2><p>_beginthread 和 _beginthreadex 各有兩種多載版本，一個接受原生呼叫慣例函式指標，另一個接受 __clrcall 函式指標。 第一個多載版本不是應用程式定義域安全的，而且永遠不會是。 如果您要撰寫混合程式碼或純程式碼，就必須確保新的執行緒會在存取 Managed 資源前進入正確的應用程式定義域。 您可以執行這項操作，例如，使用call_in_appdomain 函式。 第二個多載版本是應用程式定義域安全的；新建立的執行緒永遠都會在 _beginthread 或 _beginthreadex呼叫端的應用程式定義域中結束。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uintptr_t</span> _beginthread( <span class="comment">// NATIVE CODE  </span></span><br><span class="line">   <span class="keyword">void</span>( __cdecl *start_address )( <span class="keyword">void</span> * ),  </span><br><span class="line">   <span class="keyword">unsigned</span> stack_size,  </span><br><span class="line">   <span class="keyword">void</span> *arglist   </span><br><span class="line">);  </span><br><span class="line"><span class="keyword">uintptr_t</span> _beginthread( <span class="comment">// MANAGED CODE  </span></span><br><span class="line">   <span class="keyword">void</span>( __clrcall *start_address )( <span class="keyword">void</span> * ),  </span><br><span class="line">   <span class="keyword">unsigned</span> stack_size,  </span><br><span class="line">   <span class="keyword">void</span> *arglist   </span><br><span class="line">);  </span><br><span class="line"><span class="keyword">uintptr_t</span> _beginthreadex( <span class="comment">// NATIVE CODE  </span></span><br><span class="line">   <span class="keyword">void</span> *security,  </span><br><span class="line">   <span class="keyword">unsigned</span> stack_size,  </span><br><span class="line">   <span class="keyword">unsigned</span> ( __stdcall *start_address )( <span class="keyword">void</span> * ),  </span><br><span class="line">   <span class="keyword">void</span> *arglist,  </span><br><span class="line">   <span class="keyword">unsigned</span> initflag,  </span><br><span class="line">   <span class="keyword">unsigned</span> *thrdaddr   </span><br><span class="line">);  </span><br><span class="line"><span class="keyword">uintptr_t</span> _beginthreadex( <span class="comment">// MANAGED CODE  </span></span><br><span class="line">   <span class="keyword">void</span> *security,  </span><br><span class="line">   <span class="keyword">unsigned</span> stack_size,  </span><br><span class="line">   <span class="keyword">unsigned</span> ( __clrcall *start_address )( <span class="keyword">void</span> * ),  </span><br><span class="line">   <span class="keyword">void</span> *arglist,  </span><br><span class="line">   <span class="keyword">unsigned</span> initflag,  </span><br><span class="line">   <span class="keyword">unsigned</span> *thrdaddr   </span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<h2 id="beginthreadex"><a href="#beginthreadex" class="headerlink" title="_beginthreadex"></a>_beginthreadex</h2><h3 id="beginthreadex-1"><a href="#beginthreadex-1" class="headerlink" title="_beginthreadex"></a>_beginthreadex</h3><p>創執行緒</p>
<h3 id="WaitForSingleObject"><a href="#WaitForSingleObject" class="headerlink" title="WaitForSingleObject"></a>WaitForSingleObject</h3><p>WaitForSingleObject 函式用來檢測 hHandle 事件的信號狀態，當函數的執行時間超過 dwMilliseconds 就返回，但如果參數 dwMilliseconds 爲 INFINITE 時函數將直到相應時間事件變成有信號狀態才返回，否則就一直等待下去，直到 WaitForSingleObject 有返回值才執行後面的代碼。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">WaitForSingleObject(</span><br><span class="line">    HANDLE hHandle, </span><br><span class="line">    DWORDd wMilliseconds                                </span><br><span class="line">);</span><br><span class="line">WaitForSingleObject<span class="comment">//會等執行緒執行完才結束程式</span></span><br><span class="line"><span class="comment">//WaitForSingleObject( hThread, INFINITE ); //這樣在主執行緒關閉的時候，若這條執行緒剛好卡到無窮迴圈會導致deadlock所以我們應該以下方設有Timeout的方式去編寫</span></span><br><span class="line">    WaitForSingleObject( hThread, <span class="number">5000</span> ); <span class="comment">//    等到thread完成, 第二個參數為Timeout以millisecond為單位</span></span><br></pre></td></tr></table></figure></p>
<h3 id="CloseHandle-hThread"><a href="#CloseHandle-hThread" class="headerlink" title="CloseHandle( hThread );"></a>CloseHandle( hThread );</h3><p>結束執行緒(CloseHandle是關閉建立者跟被建立之thread的連結而已)<br>創建的thread可以透過ExitThread或是return來結束執行緒</p>
<h3 id="stdcall-呼叫慣例用於呼叫-Win32-API-函式。"><a href="#stdcall-呼叫慣例用於呼叫-Win32-API-函式。" class="headerlink" title="__stdcall 呼叫慣例用於呼叫 Win32 API 函式。"></a>__stdcall 呼叫慣例用於呼叫 Win32 API 函式。</h3><p>語法-return-type __stdcall function-name[(argument-list)]</p>
<h2 id="beginthreadex實作"><a href="#beginthreadex實作" class="headerlink" title="_beginthreadex實作"></a>_beginthreadex實作</h2><h3 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> icounter=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">unsigned</span> icounterMax = <span class="number">100000</span>;  </span><br><span class="line"><span class="keyword">unsigned</span>  __<span class="function">stdcall <span class="title">secondThreadFunc</span><span class="params">(<span class="keyword">void</span>* argu)</span> </span>&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"In second thread...\n"</span>);  </span><br><span class="line">    <span class="keyword">while</span>(icounter &lt; icounterMax)  </span><br><span class="line">        icounter++;  </span><br><span class="line">    _endthreadex(<span class="number">0</span>);          </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    HANDLE hThread;   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Create second thread...\n"</span>);  </span><br><span class="line">    <span class="comment">//createThreadEx(&amp;hThread, (void*) &amp;secondThreadFunc, NULL, 0, 0);  </span></span><br><span class="line">    <span class="keyword">unsigned</span> threadID;  </span><br><span class="line">    hThread = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;secondThreadFunc, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadID);  </span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Counter should be %d, it is %d now!\n"</span>, icounterMax, icounter);  </span><br><span class="line">    CloseHandle(hThread);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="example2-beginthreadex"><a href="#example2-beginthreadex" class="headerlink" title="example2 _beginthreadex"></a>example2 _beginthreadex</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;process.h&gt; /* _beginthread, _endthread */  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DataProc</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DataProc();</span><br><span class="line">    ~DataProc(); </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">threadProc</span><span class="params">()</span></span>; <span class="comment">//static內部不能更改member變數所以要轉到non-static的函式內處理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Trigger</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> __<span class="function">stdcall <span class="title">threadProc</span><span class="params">(<span class="keyword">void</span> *param)</span></span>;</span><br><span class="line">    <span class="keyword">bool</span> isStarted;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line">DataProc::DataProc() &#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">    hThread = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">DataProc::~DataProc() &#123;</span><br><span class="line">    Stop();</span><br><span class="line">&#125;</span><br><span class="line">DataProc::Trigger(<span class="keyword">bool</span> isOn)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( isOn )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( !hThread )</span><br><span class="line">            Start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::Start()</span><br><span class="line">&#123;</span><br><span class="line">    hThread = (HANDLE)_beginthreadex( <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadProc, <span class="keyword">this</span>, <span class="number">0</span>, <span class="literal">NULL</span> );</span><br><span class="line">    isStarted = <span class="literal">true</span>;</span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"DataProc::Start() Polling thread start"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> __stdcall DataProc::threadProc(<span class="keyword">void</span>* pArguments) &#123; </span><br><span class="line">    DataProc *DataProcPtr = (DataProc*)pArguments; <span class="comment">//將值轉型為class再呼叫函式</span></span><br><span class="line">    DataProcPtr-&gt;threadProc(); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//return是結束執行緒(這條執行緒就沒了)也可以呼叫ExitThread來結束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::Stop()</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">    WaitForSingleObject( hThread, <span class="number">5000</span> );<span class="comment">//timeout</span></span><br><span class="line">    <span class="keyword">if</span>( hThread != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        CloseHandle( hThread );</span><br><span class="line">        hThread = <span class="literal">NULL</span>;</span><br><span class="line">        Logger(LOGDEBUG,<span class="string">"DataProc::Stop() CloseHandle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::threadProc() &#123; </span><br><span class="line">    <span class="keyword">while</span>( isStarted )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//dosomething...</span></span><br><span class="line">        Sleep(<span class="number">200</span>); <span class="comment">//200 milliseconds</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>example1 secondThreadFunc的寫法不可以是class的member所以無法使用成員變數需加上static的方式再以function pointer使成員函式被呼叫</p>
<h3 id="example3-std-thread較精簡用法-推薦"><a href="#example3-std-thread較精簡用法-推薦" class="headerlink" title="example3 std::thread較精簡用法(推薦)"></a>example3 std::thread較精簡用法(推薦)</h3><p>這方法不需要將函式從static轉成non-static</p>
<h4 id="DataProc-h"><a href="#DataProc-h" class="headerlink" title="DataProc.h"></a>DataProc.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DataProc</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DataProc();</span><br><span class="line">    ~DataProc(); </span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::thread mThread;	<span class="comment">//執行緒物件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Polling</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">bool</span> isStarted;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="DataProc-cpp"><a href="#DataProc-cpp" class="headerlink" title="DataProc.cpp"></a>DataProc.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DataProc::DataProc() &#123;</span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"Main thread"</span>);</span><br><span class="line">    isStarted = <span class="literal">true</span>;</span><br><span class="line">    mThread = <span class="built_in">std</span>::thread(&amp;DataProc::Polling, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataProc::~DataProc() &#123;</span><br><span class="line">    stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::PollingVideoCanvas()</span><br><span class="line">&#123;</span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"Polling thread"</span>);</span><br><span class="line">    <span class="keyword">while</span>( isStarted )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">        Logger(LOGDEBUG,<span class="string">"Polling"</span>);</span><br><span class="line">        Sleep(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::start()</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::stop()</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">    mThread.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="QtConcurrent"><a href="#QtConcurrent" class="headerlink" title="QtConcurrent"></a>QtConcurrent</h2><p>在Qt viewmodel與model中可以運用這個QtConcurrent產生執行緒，底層動態連結檔可以用上面幾種方式_beginthreadex, std::thread</p>
<h3 id="DataProc-h-1"><a href="#DataProc-h-1" class="headerlink" title="DataProc.h"></a>DataProc.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFuture&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtConcurrent/QtConcurrent&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DataProc</span> :</span> <span class="keyword">public</span> QQuickItem &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DataProc();</span><br><span class="line">    ~DataProc(); </span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QMutex mutex;</span><br><span class="line">    QFuture&lt;<span class="keyword">void</span>&gt; future;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Polling</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">bool</span> isStarted;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="DataProc-cpp-1"><a href="#DataProc-cpp-1" class="headerlink" title="DataProc.cpp"></a>DataProc.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DataProc::DataProc() &#123;</span><br><span class="line">    isStarted = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataProc::~DataProc() &#123;</span><br><span class="line">    stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::start()</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">true</span>;</span><br><span class="line">    future = QtConcurrent::run( <span class="keyword">this</span>, &amp;DataProc::Polling );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::Polling()</span><br><span class="line">&#123;</span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"Polling thread"</span>);</span><br><span class="line">    <span class="keyword">while</span>( isStarted )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">        Logger(LOGDEBUG,<span class="string">"Polling"</span>);</span><br><span class="line">        Sleep(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::stop()</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">    future.waitForFinished();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="QThread"><a href="#QThread" class="headerlink" title="QThread"></a>QThread</h2><p>因為Qt中所有界面都是在UI執行緒中(也被稱為主執行緒，就是執行QApplication::exec()的線程)，在這個線程中執行耗時的操作，UI就會阻塞，而讓介面停止響應，為了避免這一問題，我們改寫程式，使用QThread開啟一個新的執行緒，由這新的執行緒進行耗時的工作，而主執行緒可繼續進行使用者介面的響應。</p>
<h2 id="QThread實作"><a href="#QThread實作" class="headerlink" title="QThread實作"></a>QThread實作</h2><h3 id="編寫WorkThread-class"><a href="#編寫WorkThread-class" class="headerlink" title="編寫WorkThread class"></a>編寫WorkThread class</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> :</span> <span class="keyword">public</span> QThread</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     WorkThread();</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">StartThread</span><span class="params">( <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member )</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">IsAlive</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">public</span> slots:</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">SetThreadEnd</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">     <span class="keyword">bool</span> bIsThreadAlive;</span><br><span class="line"> signals:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">EndPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//WorkThread.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"workthread.h"</span></span></span><br><span class="line"></span><br><span class="line">WorkThread::WorkThread()</span><br><span class="line">&#123;</span><br><span class="line">    bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> WorkThread::StartThread(<span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        bIsThreadAlive = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;disconnect();</span><br><span class="line"></span><br><span class="line">        connect( <span class="keyword">this</span>,SIGNAL( DoSomething() ),receiver,member,Qt::DirectConnection );</span><br><span class="line">        connect( <span class="keyword">this</span>,SIGNAL( EndPoint() ),<span class="keyword">this</span>,SLOT( quit() ));</span><br><span class="line">        <span class="keyword">this</span>-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> WorkThread::run()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">emit <span class="title">DoSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">    <span class="function">emit <span class="title">EndPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::Stop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        SetThreadEnd();</span><br><span class="line">        <span class="keyword">this</span>-&gt;wait();</span><br><span class="line"></span><br><span class="line">        QThread::quit();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !bIsThreadAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::SetThreadEnd()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !bIsThreadAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::IsAlive()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> bIsThreadAlive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用WorkThread"><a href="#使用WorkThread" class="headerlink" title="使用WorkThread"></a>使用WorkThread</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用端.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"workthread.h"</span></span></span><br><span class="line">WorkThread thd4Rander;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用端.cpp</span></span><br><span class="line"><span class="keyword">void</span> DataProc::~DataProc() &#123;</span><br><span class="line">    thd4Rander.Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::FrameProcess() &#123;</span><br><span class="line">    <span class="keyword">while</span>(thd4Rander.IsAlive()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!GetCameraData(rawData, &amp;width, &amp;height)) &#123;</span><br><span class="line">            thd4Rander.Stop();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            dosomething...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::startRender() <span class="comment">//可以製作成button來切換</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(thd4Rander.IsAlive())</span><br><span class="line">    &#123;</span><br><span class="line">        thd4Rander.Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        thd4Rander.StartThread(<span class="keyword">this</span>, SLOT(FrameProcess()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="pragma-once"><a href="#pragma-once" class="headerlink" title="#pragma once"></a>#pragma once</h3><p>#pragma once是一個非標準但是被廣泛支援的前置處理符號，會讓所在的檔案在一個單獨的編譯中只被包含一次</p>
<h4 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h4><p>使用#pragma once代替include防範將加快編譯速度，因為這是一種高階的機制；編譯器會自動比對檔案名稱或inode而不需要在標頭檔去判斷#ifndef和#endif。 </p>
<h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4><p>#pragma once有好也有壞，設計者必須依賴編譯器正確的管理#pragma once。編譯器如果犯錯，例如沒有辨認出在相同檔案中的兩個不同符號連結名稱指標，此時編譯會錯誤。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://msdn.microsoft.com/zh-tw/library/kdzttdcb.aspx" target="_blank" rel="noopener">_beginthread、_beginthreadex - MSDN - Microsoft</a><br><a href="http://puremonkey2010.blogspot.com/2010/08/c-windows-thread-beginthread.html" target="_blank" rel="noopener">在Windows下建立Thread(使用_beginthread,_beginthreadex)</a><br><a href="https://www.smwenku.com/a/5b8659722b71775d1cd50531/" target="_blank" rel="noopener">CreateThread和_beginthread區別及使用</a><br><a href="http://monkeycoding.com/?p=826" target="_blank" rel="noopener">程序、執行緒、多執行緒| 阿洲的程式教學</a><br><a href="https://zh.wikipedia.org/wiki/Pragma_once" target="_blank" rel="noopener">#pragma once - 维基百科，自由的百科全書</a></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>執行緒</tag>
        <tag>_beginthreadex</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>C 計時器</title>
    <url>/2018/11/09/%E8%A8%88%E6%99%82%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>演算法執行速度，影響整個程式的執行體感，最近體會到演算法的重要性，對圖片的處理運算如果不夠快，則很難變成video形式呈現即時畫面，所以在演算法裡面要找出比較耗時的程式碼去優化，這時候就需要用計時器clock的功能，簡易地達到分析程式碼耗時</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>時間複雜度：衡量演算法執行好壞的工具<br>大 O 符號：用來描述演算法在輸入 n 個東西時，總執行時間與 n 的關係<br>在 n 非常大時，好的演算法設計可以省下非常多時間<br>演算法的速度不是以秒計算，而是以步驟次數</p>
<h2 id="clock"><a href="#clock" class="headerlink" title="clock"></a>clock</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">algorism</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> tic, toc1, toc2;</span><br><span class="line">    tic = clock();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dosomething_1...</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    toc1 = clock();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dosomething_2...</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    toc2 = clock();</span><br><span class="line">    </span><br><span class="line">    deltaToc1 = toc1 - tic;<span class="comment">//deltaToc1為執行dosomething_1的時間</span></span><br><span class="line">    deltaToc2 = toc2 - tic;<span class="comment">//deltaToc2為執行dosomething_1+dosomething_2的時間</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E8%AB%87%E4%BB%80%E9%BA%BC%E6%98%AF%E6%BC%94%E7%AE%97%E6%B3%95%E5%92%8C%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6-b1f6908e4b80" target="_blank" rel="noopener">初學者學演算法｜談什麼是演算法和時間複雜度– AppWorks School …</a><br><a href="http://edisonx.pixnet.net/blog/post/52113788-%5Bc%5D-%E8%A8%88%E6%99%82%E5%99%A8%E6%95%B4%E7%90%86" target="_blank" rel="noopener">[C] 計時器整理@ Edison.X. Blog :: 痞客邦::</a></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>計時器</tag>
        <tag>clock</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt QImage &amp; QQuickPaintedItem操作</title>
    <url>/2018/11/08/QImage-%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過圖片呈現資料是個視覺化的讓人更容易、快速且有效地理解。研究顯示，人腦處理圖像的速度比處理文字快6萬倍。</p>
<h2 id="QImage應用"><a href="#QImage應用" class="headerlink" title="QImage應用"></a>QImage應用</h2><h3 id="彩色圖"><a href="#彩色圖" class="headerlink" title="彩色圖"></a>彩色圖</h3><p>RGB / RGBA<br>每一張圖片都是由pixel組成，每一個pixel都有三個通道：紅，綠，藍，還有一個alpha通道來保存透明度（JPEG格式的圖片不支持透明）。每個通道的值是0-255，三個通道都是255表示白色，都是0的話，表示黑色</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage canvas1 = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB32); <span class="comment">//儲存格式為B,G,R,A 對應0,1,2,3</span></span><br><span class="line">QImage canvas2 = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);<span class="comment">//儲存格式為R,G,B 對應0,1,2</span></span><br></pre></td></tr></table></figure>
<h3 id="灰階圖"><a href="#灰階圖" class="headerlink" title="灰階圖"></a>灰階圖</h3><p>標準的灰階圖就是每個pixel的三個通道的值一樣或者近似，我們的策略就是將每個像素的每個通道的值都調成一樣，取R,G,B值爲三者的平均，像是下面<strong>操作QImage(double* to QImage)</strong> 的例子就是製作一個灰階圖</p>
<h3 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">uchar* <span class="title">bits</span><span class="params">()</span></span>;          <span class="comment">//取得影像第一個指標位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">byteCount</span><span class="params">()</span></span>;        <span class="comment">//取得影像占用位置數量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bytesPerLine</span><span class="params">()</span></span>;     <span class="comment">//取得影像每一行的占用位置數量</span></span><br><span class="line"><span class="function">uchar* <span class="title">scanLine</span><span class="params">(<span class="keyword">int</span>)</span></span>;   <span class="comment">//取得每行的指標位置</span></span><br></pre></td></tr></table></figure>
<h3 id="畫布操作"><a href="#畫布操作" class="headerlink" title="畫布操作"></a>畫布操作</h3><p>藉由操作buffer的方式達到對QImage的操作<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage canvas = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);</span><br><span class="line">uchar* bits = canvas.bits();<span class="comment">//QImage.bits()取得影像記憶體起始位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">640</span> * <span class="number">480</span> * <span class="number">3</span>; i++) &#123;</span><br><span class="line">    bits[i] = <span class="number">255</span>;<span class="comment">//將畫布變為白色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="操作QImage-double-to-QImage"><a href="#操作QImage-double-to-QImage" class="headerlink" title="操作QImage(double* to QImage)"></a>操作QImage(double* to QImage)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage canvas = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);<span class="comment">//寬640,高480的畫布</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>* ptrImg;<span class="comment">//儲存1024*1024筆資料</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    for(int i = 0; i &lt; 1024; i++) &#123;</span></span><br><span class="line"><span class="comment">        for(int j = 0; j &lt; 1024; j++) &#123;</span></span><br><span class="line"><span class="comment">            ptrImg[i][j] dosomething...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">uchar* bits = canvas.bits();<span class="comment">//QImage.bits()取得影像記憶體起始位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">1024</span> ; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> idx = i * <span class="number">3</span>;</span><br><span class="line">    bits[idx] = ptrImg[i];  <span class="comment">//R 紅色</span></span><br><span class="line">    bits[idx+<span class="number">1</span>] = ptrImg[i];<span class="comment">//G 綠色</span></span><br><span class="line">    bits[idx+<span class="number">2</span>] = ptrImg[i];<span class="comment">//B 藍色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="存取QImage"><a href="#存取QImage" class="headerlink" title="存取QImage"></a>存取QImage</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage canvas;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    dosomething...</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">canvas.save(<span class="string">"Img.jpg"</span>,<span class="string">"JPG"</span>);</span><br><span class="line">canvas.load(<span class="string">"D:/Img.png"</span>,<span class="string">"PNG"</span>); <span class="comment">//&lt;非常重要!!!&gt; 使用load方式讀出來的格式為RGBA8888四通道</span></span><br></pre></td></tr></table></figure>
<h3 id="調整大小"><a href="#調整大小" class="headerlink" title="調整大小"></a>調整大小</h3><p>在縮放時需要注意線條是否有被丟棄的現象，此時可以將1 pixel的線條畫成3 pixel之類…<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">canvasResize</span><span class="params">(QImage canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;canvas = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);<span class="comment">//Class member canvas</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;canvas = canvas.scaled(<span class="number">480</span>,<span class="number">360</span>);<span class="comment">//將640x480的畫布調整成480x360</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="旋轉"><a href="#旋轉" class="headerlink" title="旋轉"></a>旋轉</h3><p>資料處理矩陣轉置或是旋轉，用QImage處理會快很多<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage srcImg = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);</span><br><span class="line">QMatirx matrix;</span><br><span class="line">matrix.rotate(<span class="number">90</span>);<span class="comment">//順時針方向旋轉度數</span></span><br><span class="line"></span><br><span class="line">QImage dstImg = srcImg.transformed(matrix);</span><br></pre></td></tr></table></figure></p>
<h3 id="轉換格式"><a href="#轉換格式" class="headerlink" title="轉換格式"></a>轉換格式</h3><p>將24位元的三通道轉換成32位元的四通道<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage Img = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888);</span><br><span class="line">Img = Img.convertToFormat(QImage::Format_RGBA8888);</span><br></pre></td></tr></table></figure></p>
<h2 id="QQuickPaintedItem畫圖"><a href="#QQuickPaintedItem畫圖" class="headerlink" title="QQuickPaintedItem畫圖"></a>QQuickPaintedItem畫圖</h2><p>繼承QQuickPaintedItem在C++端可以使用QPainter特性</p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickPaintedItem&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagePresenter</span> :</span> <span class="keyword">public</span> QQuickPaintedItem &#123; </span><br><span class="line">	Q_OBJECT</span><br><span class="line">	<span class="keyword">public</span>: </span><br><span class="line">		ImagePresenter(QQuickItem* parent = <span class="literal">nullptr</span>); </span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter* painter)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">drawImg</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">private</span>: </span><br><span class="line">		QImage canvas;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ImagePresenter::ImagePresenter(QQuickItem* parent) : QQuickPaintedItem(parent) &#123;</span><br><span class="line">    canvas = QImage(<span class="number">640</span>,<span class="number">480</span>, QImage::Format_RGB888);<span class="comment">//寫固定</span></span><br><span class="line">    canvas2 = QImage(<span class="keyword">this</span>-&gt;width(),<span class="keyword">this</span>-&gt;height(), QImage::Format_RGB888);<span class="comment">//寫動態跟著qml端</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> ImagePresenter::paint(QPainter *painter) &#123;</span><br><span class="line">    painter-&gt;drawLine(QPointF(<span class="number">10</span>,<span class="number">50</span>),QPointF(<span class="number">100</span>,<span class="number">100</span>));<span class="comment">//畫線</span></span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>)</span></span>; <span class="comment">//目標畫布大小</span></span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, canvas.width(),canvas.height())</span></span>; <span class="comment">//來源大小</span></span><br><span class="line">    painter-&gt;drawImage(target, canvas, source); <span class="comment">//將Qimage傳入畫圖source);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> ImagePresenter::drawImg() &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        canvas dosomething...</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    update();<span class="comment">//此時會呼叫paint將QImage畫上去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="將QList畫到畫面上"><a href="#將QList畫到畫面上" class="headerlink" title="將QList畫到畫面上"></a>將QList<qpointf>畫到畫面上</qpointf></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> ImagePresenter::drawQList(QList&lt;QPointF&gt; data) &#123;</span><br><span class="line">    QImage canvas = QImage(<span class="number">640</span>,<span class="number">480</span>, QImage::Format_RGB888);</span><br><span class="line">    <span class="function">QPainter <span class="title">p</span><span class="params">(&amp;canvas)</span></span>;<span class="comment">//運用QPainter特性處理QPointF</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;listDataSet;<span class="comment">//清空方式listDataSet.clear();</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">        listDataSet.push_back(data.at(i).y());<span class="comment">//剖析QList&lt;QPointF&gt;取得第幾組的QPointF的y點</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        p.drawLine(QPointF(i,(listDataSet[i]+yOffset)/yScale), QPointF((i+<span class="number">1</span>),(listDataSet[i+<span class="number">1</span>]+yOffset)/yScale));</span><br><span class="line">    &#125;</span><br><span class="line">    p.end ();</span><br><span class="line">    canvas = canvas.mirrored(<span class="literal">false</span>,<span class="literal">true</span>); <span class="comment">//鏡像反轉</span></span><br><span class="line">    update();<span class="comment">//呼叫paint將QImage畫上去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="數據調整"><a href="#數據調整" class="headerlink" title="數據調整"></a>數據調整</h2><h3 id="0-255"><a href="#0-255" class="headerlink" title="0 ~ 255"></a>0 ~ 255</h3><p>因為針對QImage的記憶體位置操作時存取的RGB數值需在0~255，有時候資料可能為小數0.00xxx1之類的數字而極值可能又超過255，此時需要做個放大或縮小</p>
<blockquote>
<p>例如:<br>資料為0.000345 ~ 60 or 20 ~ 120<br>需要讓他調整為<strong>0 ~ 255</strong> 區間</p>
</blockquote>
<h3 id="取最大最小值"><a href="#取最大最小值" class="headerlink" title="取最大最小值"></a>取最大最小值</h3><p>首先取得最大最小值<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;//特殊情況使用log10</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doublePtrScaled</span><span class="params">(<span class="keyword">double</span>* ptrImg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Max = <span class="number">-99999</span>,</span><br><span class="line">           Min = <span class="number">999999</span>;</span><br><span class="line">    <span class="keyword">double</span> Scale = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++) &#123;<span class="comment">//nRow = 1024</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;<span class="comment">//nCol = 1024        </span></span><br><span class="line">            ptrImg[r*<span class="number">1024</span>+c] = <span class="built_in">log10</span>(ptrImg[r*<span class="number">1024</span>+c]);<span class="comment">//如果值差異非常大，例如:Max = 1234,Min = 0.00000012;做Log以10為底(差異沒很大就不需要做此指令)  </span></span><br><span class="line">            <span class="keyword">if</span>(ptrImg[r*<span class="number">1024</span>+c] &lt; Min)<span class="comment">//Size: ptrImg[1024][1024]</span></span><br><span class="line">                Min = ptrImg[r*<span class="number">1024</span>+c];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ptrImg[r*<span class="number">1024</span>+c] &lt; Max)</span><br><span class="line">                Max = ptrImg[r*<span class="number">1024</span>+c];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="將欲縮放的值起始位置設為0-與0-255起始位置一樣"><a href="#將欲縮放的值起始位置設為0-與0-255起始位置一樣" class="headerlink" title="將欲縮放的值起始位置設為0(與0 ~ 255起始位置一樣)"></a>將欲縮放的值起始位置設為0(與0 ~ 255起始位置一樣)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> Offset = Min - <span class="number">0</span>;<span class="comment">//如果位移到30 ~ 255則減30</span></span><br><span class="line"><span class="keyword">double</span> Scale = Max - Min / <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++) &#123;<span class="comment">//nRow = 1024</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;<span class="comment">//nCol = 1024         </span></span><br><span class="line">        ptrImg[r*<span class="number">1024</span>+c] -= Offset<span class="comment">//全部位移Offset</span></span><br><span class="line">        <span class="keyword">if</span>(ptrImg[r*<span class="number">1024</span>+c]/Scale &gt; <span class="number">255</span>)<span class="comment">//若大於255定為255否則預設會取mod255</span></span><br><span class="line">            ptrImg[r*<span class="number">1024</span>+c] = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ptrImg[r*<span class="number">1024</span>+c] /= Scale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完成數據調整"><a href="#完成數據調整" class="headerlink" title="完成數據調整"></a>完成數據調整</h3><p>完成以上步驟，此時的數據接落在0~255區間這樣就可以進行QImage與QQuickPaintedItem畫圖囉!</p>
<h2 id="QML端"><a href="#QML端" class="headerlink" title="QML端"></a>QML端</h2><p>在QML端畫圖時容器長寬需要跟畫布長寬一致，否則內容會超出畫布</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.merit-times.com.tw/NewsPage.aspx?Unid=420189" target="_blank" rel="noopener">資料視覺化魔法 用圖說故事 數據變珍寶</a><br><a href="https://www.smwenku.com/a/5b7c8cdc2b71770a43db84ec/" target="_blank" rel="noopener">基於Qt的圖像處理技術和算法- 神馬文庫</a><br><a href="https://ccw1986.blogspot.com/2013/11/qtqimage.html" target="_blank" rel="noopener">QImage 操作方式~ Marc Talk</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>QImage</tag>
        <tag>QPainter</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</title>
    <url>/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在朋友都是鄉民的情況下，在這一兩年才加入鄉民的行列，開始看一些八卦版、笑話版、科技版、薪資版…，逛各大板的同時，總覺得各版有不少廢文，一頁一頁慢慢滑，要看到優質好文章，實在有點耗時，這時就動手寫了個幫忙精選PTT文章的爬蟲，五樓有了這爬蟲之後考試都一百分了</p>
<h2 id="名詞概述"><a href="#名詞概述" class="headerlink" title="名詞概述"></a>名詞概述</h2><h3 id="靜態頁面爬取"><a href="#靜態頁面爬取" class="headerlink" title="靜態頁面爬取"></a>靜態頁面爬取</h3><p>所謂靜態頁面是指純粹的HTML格式的頁面，這樣的頁面在瀏覽器中呈現的內容都在HTML原始碼中。</p>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>session，自動保存cookies，可以設置請求參數，下次請求自動帶上請求參數<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">res = requests.Session()</span><br></pre></td></tr></table></figure></p>
<h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>requests是一個很實用的Python HTTP客户端庫，編寫爬蟲和測試服務器響應數據時經常會用到。可以説，Requests 完全滿足如今網絡的需求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res  = requests.get(<span class="string">'https://www.google.com/'</span>)</span><br><span class="line">res.encoding = <span class="string">'utf-8'</span><span class="comment">#支援中文</span></span><br><span class="line">res.text <span class="comment">#返回get到的編碼解析的結果</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以透過cmd輸入指令 pip3 install requests 安裝</p>
</blockquote>
<h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h3><p>解析網頁 HTML 碼<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)   <span class="comment">#用beautifulSoup解析HTML代碼並存入變數“soup”中</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>可以透過cmd輸入指令 pip3 install beautifulsoup4 安裝</p>
</blockquote>
<h2 id="實作精選PTT文章爬蟲"><a href="#實作精選PTT文章爬蟲" class="headerlink" title="實作精選PTT文章爬蟲"></a>實作精選PTT文章爬蟲</h2><p><img src="https://i.imgur.com/sDLxb0K.png" alt title="將圖中爆與十位數推文文章篩選出來"></p>
<h3 id="導入函式庫"><a href="#導入函式庫" class="headerlink" title="導入函式庫"></a>導入函式庫</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br></pre></td></tr></table></figure>
<h3 id="找出該版頁數"><a href="#找出該版頁數" class="headerlink" title="找出該版頁數"></a>找出該版頁數</h3><p>找出該版現在有幾頁<br>content傳入的內容: /bbs/joke/index6148.html   此函式目的將頁數6148取出<br><img src="https://i.imgur.com/Z9Pd6I9.png" alt title="6148+1為最新頁"><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPageNumber</span><span class="params">(content)</span>:</span></span><br><span class="line">    startIndex = content.find(<span class="string">'index'</span>) <span class="comment">#找尋index起始位置</span></span><br><span class="line">    endIndex = content.find(<span class="string">'.html'</span>)   <span class="comment">#找尋.html起始位置</span></span><br><span class="line">    pageNumber = content[startIndex + <span class="number">5</span>: endIndex]</span><br><span class="line">    <span class="comment">#print(content)                    #傳入的參數    </span></span><br><span class="line">    <span class="comment">#print(int(pageNumber) + 1)        #取得到的頁數+1(為最新的一頁)</span></span><br><span class="line">    <span class="keyword">return</span> int(pageNumber) + <span class="number">1</span>         <span class="comment">#回傳最新一頁</span></span><br></pre></td></tr></table></figure></p>
<h3 id="抓取網頁數據"><a href="#抓取網頁數據" class="headerlink" title="抓取網頁數據"></a>抓取網頁數據</h3><p>將欲爬的版當參數傳入 例如:”movie”、”NBA”…<br><img src="https://i.imgur.com/Zgn0Hjk.png" alt><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawPtt</span><span class="params">(plate)</span>:</span></span><br><span class="line">    hotArticle = []                   <span class="comment">#將熱門文章串列清空以便每次重取</span></span><br><span class="line">    rs = requests.session()            <span class="comment">#幫助我們把這一次的request都算在同一個session裡，這樣我們第二次對登入頁面發request時，csrfmiddlewaretoken value才不會又重新產生。</span></span><br><span class="line">    load = &#123;</span><br><span class="line">        <span class="string">'from'</span>: <span class="string">'/bbs/'</span>+plate+<span class="string">'/index.html'</span>,</span><br><span class="line">        <span class="string">'yes'</span>: <span class="string">'yes'</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = rs.post(<span class="string">'https://www.ptt.cc/ask/over18'</span>, verify=<span class="keyword">False</span>, data=load) <span class="comment">#用post方式過入口驗證</span></span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)   <span class="comment">#用beautifulSoup解析HTML代碼並存入變數“soup”中</span></span><br><span class="line">    allPageURL = soup.select(<span class="string">'.btn.wide'</span>)[<span class="number">1</span>][<span class="string">'href'</span>]<span class="comment">#取得最新頁面的上一頁網址 例如: /bbs/joke/index6148.html</span></span><br><span class="line">    startPage = getPageNumber(allPageURL)          <span class="comment">#呼叫函式將/bbs/joke/index6148.html字串處理成6149</span></span><br><span class="line">    indexList = []                                   <span class="comment">#將網址串列清空                      </span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(startPage, startPage - <span class="number">9</span>, <span class="number">-1</span>):<span class="comment">#將最新一頁往前8頁都放入搜尋網址串列</span></span><br><span class="line">        pageURL = <span class="string">'https://www.ptt.cc/bbs/'</span>+plate+<span class="string">'/index&#123;&#125;.html'</span>.format(page)<span class="comment">#爬取的版加上頁數形成的網址</span></span><br><span class="line">        indexList.append(pageURL)                   <span class="comment">#放入網址串列(9頁欲爬取的網址)</span></span><br><span class="line">    content = <span class="string">''</span>   <span class="comment">#內容清空</span></span><br><span class="line">    count = <span class="number">0</span>      <span class="comment">#計算文章數</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 抓取 文章標題 網址 推文數</span></span><br><span class="line">    <span class="keyword">while</span> indexList:</span><br><span class="line">        index = indexList.pop(<span class="number">0</span>)  <span class="comment">#取出最新一頁的網址</span></span><br><span class="line">        res = rs.get(index, verify=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">if</span> res.status_code != <span class="number">200</span>:<span class="comment">#如網頁忙線中,則先將網頁加入 indexList 並休息0.5秒後再連接</span></span><br><span class="line">            indexList.append(index)</span><br><span class="line">             <span class="comment">#print (u'error_URL:',index)</span></span><br><span class="line">             <span class="comment">#time.sleep(0.5)</span></span><br><span class="line">        <span class="keyword">else</span>:<span class="comment">#順利連到網址則</span></span><br><span class="line">            hotArticle += crawlHotActicle(res)</span><br><span class="line">             <span class="comment">#print (u'OK_URL:', index)</span></span><br><span class="line">             <span class="comment">#time.sleep(0.06)</span></span><br><span class="line"></span><br><span class="line">    hotArticle = sorted(hotArticle, key=sortHot,reverse =<span class="keyword">True</span>)<span class="comment">#將文章以推文數排列</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> hotArticle:<span class="comment">#將文章依序印出</span></span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">15</span>:       <span class="comment">#僅列出前15筆</span></span><br><span class="line">            <span class="keyword">return</span> content</span><br><span class="line">        data = <span class="string">'&#123;&#125;.&#123;&#125;\n人氣:&#123;&#125;\n&#123;&#125;\n\n'</span>.format(count+<span class="number">1</span>,article.get(<span class="string">'title'</span>, <span class="keyword">None</span>), article.get(<span class="string">'hot'</span>, <span class="keyword">None</span>), article.get(<span class="string">'url_link'</span>, <span class="keyword">None</span>))</span><br><span class="line">        content += data</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure></p>
<h3 id="熱門文章篩選"><a href="#熱門文章篩選" class="headerlink" title="熱門文章篩選"></a>熱門文章篩選</h3><p>將推文數爆與十位數的文章篩出<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawlHotActicle</span><span class="params">(res)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)<span class="comment">#用beautifulSoup解析HTML代碼並存入變數“soup”中</span></span><br><span class="line">    articleList = []                             <span class="comment">#文章串列清空</span></span><br><span class="line">    <span class="keyword">for</span> r_ent <span class="keyword">in</span> soup.find_all(class_=<span class="string">"r-ent"</span>):  <span class="comment">#找出這個網址內所有class_="r-ent"找出每篇文章(在這裡我們用class過濾，不過class是python的關鍵詞，這樣該怎麼辦？加個下劃線就可以)</span></span><br><span class="line">        <span class="keyword">if</span> r_ent.find(class_=<span class="string">"hl f1"</span>) <span class="keyword">or</span> r_ent.find(class_=<span class="string">"hl f3"</span>):<span class="comment">#找出每篇文章後在看這篇文章的推文數(hl f1為爆,hl f3十位數)</span></span><br><span class="line">            <span class="keyword">if</span> (r_ent.find(class_=<span class="string">"hl f1"</span>)):     <span class="comment">#如果文章是爆</span></span><br><span class="line">                hot = r_ent.find(class_=<span class="string">"hl f1"</span>).text.strip()<span class="comment">#取得推文"爆"</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 先得到每篇文章的url</span></span><br><span class="line">                    link = r_ent.find(<span class="string">'a'</span>)[<span class="string">'href'</span>]</span><br><span class="line">                    <span class="keyword">if</span> link:</span><br><span class="line">                        <span class="comment"># 確定得到url再去抓 標題 以及 推文數</span></span><br><span class="line">                        title = r_ent.find(class_=<span class="string">"title"</span>).text.strip() <span class="comment">#取得標題</span></span><br><span class="line">                        url_link = <span class="string">'https://www.ptt.cc'</span> + link          <span class="comment">#取得連結</span></span><br><span class="line">                        articleList.append(&#123; </span><br><span class="line">                            <span class="string">'url_link'</span>: url_link,                       <span class="comment">#將連結放到串列中</span></span><br><span class="line">                            <span class="string">'title'</span>: title,                             <span class="comment">#將標題放在串列中</span></span><br><span class="line">                            <span class="string">'hot'</span> :  hot                                <span class="comment">#推文數放到串列中</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    <span class="comment">#print(url_link)</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:                                  <span class="comment">#如果連不上這網址可能被刪文了</span></span><br><span class="line">                    <span class="comment"># print u'crawPage function error:',r_ent.find(class_="title").text.strip()</span></span><br><span class="line">                    <span class="comment"># print('本文已被刪除')</span></span><br><span class="line">                    print(<span class="string">'delete'</span>, e)</span><br><span class="line">                <span class="comment">#print(r_ent.find(class_="hl f1"))</span></span><br><span class="line">            <span class="keyword">if</span> (r_ent.find(class_=<span class="string">"hl f3"</span>)):                            <span class="comment">#如果文章十位數的推文</span></span><br><span class="line">                hot = r_ent.find(class_=<span class="string">"hl f3"</span>).text.strip()           <span class="comment">#取得推文數</span></span><br><span class="line">                <span class="comment">#print(r_ent.find(class_="hl f3"))</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 先得到每篇文章的篇url</span></span><br><span class="line">                    link = r_ent.find(<span class="string">'a'</span>)[<span class="string">'href'</span>]                     </span><br><span class="line">                    <span class="keyword">if</span> link:</span><br><span class="line">                        <span class="comment"># 確定得到url再去抓 標題 以及 推文數</span></span><br><span class="line">                        title = r_ent.find(class_=<span class="string">"title"</span>).text.strip() <span class="comment">#取得標題</span></span><br><span class="line">                        url_link = <span class="string">'https://www.ptt.cc'</span> + link          <span class="comment">#取得連結</span></span><br><span class="line">                        articleList.append(&#123;  </span><br><span class="line">                            <span class="string">'url_link'</span>: url_link,                       <span class="comment">#將連結放到串列中</span></span><br><span class="line">                            <span class="string">'title'</span>: title,                             <span class="comment">#將標題放在串列中</span></span><br><span class="line">                            <span class="string">'hot'</span> :  hot                                <span class="comment">#推文數放到串列中</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    <span class="comment">#print(url_link)</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:                                  <span class="comment">#如果連不上這網址可能被刪文了</span></span><br><span class="line">                    <span class="comment"># print u'crawPage function error:',r_ent.find(class_="title").text.strip()</span></span><br><span class="line">                    <span class="comment"># print('本文已被刪除')</span></span><br><span class="line">                    print(<span class="string">'delete'</span>, e)</span><br><span class="line">                    </span><br><span class="line">    <span class="comment">#print(articleList)</span></span><br><span class="line">    <span class="keyword">return</span> articleList</span><br></pre></td></tr></table></figure></p>
<h3 id="依照推文數排序"><a href="#依照推文數排序" class="headerlink" title="依照推文數排序"></a>依照推文數排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortHot</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> content[<span class="string">'hot'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="使用爬蟲"><a href="#使用爬蟲" class="headerlink" title="使用爬蟲"></a>使用爬蟲</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(crawPtt(<span class="string">'joke'</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/w1Vx4nF.png" alt title="篩選出推文數高的文章了!"></p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>
<p>參考資料<br><a href="https://ithelp.ithome.com.tw/articles/10193266" target="_blank" rel="noopener">Day8：Python requests + bs4 實作模擬登入網站並爬取資料｜Kearch …</a><br><a href="https://buzzorange.com/techorange/2017/08/04/python-scraping/" target="_blank" rel="noopener">附範例與完整程式碼！手把手帶著你用Python 做出爬蟲、抓取網頁資料 …</a><br><a href="https://hk.saowen.com/a/49234987b4cf92d8a81fa2499e790438d15851ab7a1e63a474633961c8ce1f08" target="_blank" rel="noopener">python requests用法總結- 掃文資訊</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬蟲</tag>
        <tag>靜態網頁爬取</tag>
      </tags>
  </entry>
  <entry>
    <title>讀寫檔</title>
    <url>/2018/11/06/%E8%AE%80%E5%AF%AB%E6%AA%94/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>讀寫檔驗證資料正確性與存取參數是很方便且常用的，寫成CSV，用excel繪圖看圖形趨勢是否如預期，二進位檔則是速度較快</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">文字檔</th>
<th style="text-align:center">二進位檔</th>
</tr>
</thead>
<tbody>
<tr>
<td>資料可讀性</td>
<td style="text-align:center">易</td>
<td style="text-align:center">難</td>
</tr>
<tr>
<td>資料輸入／輸出效率</td>
<td style="text-align:center">差</td>
<td style="text-align:center">佳</td>
</tr>
<tr>
<td>檔案空間大小</td>
<td style="text-align:center">相較大</td>
<td style="text-align:center">相較小</td>
</tr>
<tr>
<td>浮點數存取誤差</td>
<td style="text-align:center">有</td>
<td style="text-align:center">無</td>
</tr>
</tbody>
</table>
<h2 id="Qt取得檔案路徑"><a href="#Qt取得檔案路徑" class="headerlink" title="Qt取得檔案路徑"></a>Qt取得檔案路徑</h2><h3 id="到application同層中"><a href="#到application同層中" class="headerlink" title="到application同層中"></a>到application同層中</h3><p>取得application(exe)路徑</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line">QString path = QGuiApplication::applicationDirPath(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//可以用加的方式為檔案命名:</span></span><br><span class="line">path += <span class="string">"/"</span> +serialNumber;</span><br></pre></td></tr></table></figure>
<h3 id="到application上一層"><a href="#到application上一層" class="headerlink" title="到application上一層"></a>到application上一層</h3><p>取得application(exe)上一層路徑</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line">QString currentPath = QDir::currentPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以用加的方式為檔案命名:</span></span><br><span class="line">currentPath += <span class="string">"/"</span> +serialNumber;</span><br></pre></td></tr></table></figure>
<h3 id="檢查檔案是否存在"><a href="#檢查檔案是否存在" class="headerlink" title="檢查檔案是否存在"></a>檢查檔案是否存在</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QDir dir; </span><br><span class="line">QString currentPath = QDir::currentPath();</span><br><span class="line"><span class="keyword">if</span> (!serialNumber.isEmpty())&#123;    <span class="comment">//如果這個路徑不為空</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists(currentPath)) &#123;      <span class="comment">//如果不存在這個檔案位置</span></span><br><span class="line">        dir.mkpath(currentPath);        <span class="comment">//創資料夾</span></span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"directory now exists"</span>; </span><br><span class="line">        currentPath += <span class="string">"teddyBear.jpg"</span>;</span><br><span class="line">        QImage.save(currentPath,<span class="string">"JPG"</span>); <span class="comment">//將某個QImage存成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="寫檔"><a href="#寫檔" class="headerlink" title="寫檔"></a>寫檔</h2><h3 id="Qt-截圖存檔-Timestamp"><a href="#Qt-截圖存檔-Timestamp" class="headerlink" title="Qt 截圖存檔(Timestamp)"></a>Qt 截圖存檔(Timestamp)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//videocanvas.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCanvas</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    VideoCanvas();</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">screenshot</span><span class="params">(QQuickWindow *quic)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//videocanvas.cpp</span></span><br><span class="line"><span class="keyword">void</span> VideoCanvas::makedir(QString serialNumber) &#123;   <span class="comment">//傳欲創建資料夾名稱</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;serialNumber = serialNumber;</span><br><span class="line">    path = QGuiApplication::applicationDirPath();</span><br><span class="line">    currentPath =  QDir::currentPath();</span><br><span class="line">    QDir dir;</span><br><span class="line">    <span class="keyword">if</span> (!serialNumber.isEmpty()) &#123;</span><br><span class="line">        path += <span class="string">"/"</span> +serialNumber;</span><br><span class="line">        currentPath += <span class="string">"/"</span> +serialNumber +<span class="string">"/"</span>;</span><br><span class="line">        <span class="comment">//printf("the string path will be:%s\n", str);</span></span><br><span class="line">        <span class="keyword">if</span> (viewLog) &#123;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">"applicationDirPath:"</span>&lt;&lt;path;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">"currentPath:"</span>&lt;&lt;currentPath;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">"currentPathArray:"</span>&lt;&lt;currentPath;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists(currentPath)) <span class="comment">//如果沒有這個資料夾</span></span><br><span class="line">        &#123;</span><br><span class="line">            dir.mkpath(currentPath); <span class="comment">//創建資料夾</span></span><br><span class="line">            <span class="keyword">if</span>(viewLog)</span><br><span class="line">                qDebug()&lt;&lt;<span class="string">"make directory successed!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> VideoCanvas::screenshot(QQuickWindow *quic) &#123;  <span class="comment">//存取截圖檔名為Screenshot_時間</span></span><br><span class="line">    QImage img =quic-&gt;grabWindow();</span><br><span class="line">    <span class="keyword">time_t</span> t;</span><br><span class="line">    tm* local;</span><br><span class="line">    tm* gmt;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    t = time(<span class="literal">NULL</span>);</span><br><span class="line">    local = localtime(&amp;t);</span><br><span class="line">    strftime(buf, <span class="number">64</span>, <span class="string">"%Y%m%d_%H%M%S"</span>, local);</span><br><span class="line">    <span class="built_in">strcat</span>(buf,<span class="string">".jpg"</span>);</span><br><span class="line">    <span class="keyword">char</span> fileName[<span class="number">128</span>]= &#123;<span class="string">"Screenshot_"</span>&#125;;</span><br><span class="line">    TempPath = currentPath;              <span class="comment">//makedir function中的currentPath</span></span><br><span class="line">    <span class="built_in">strcat</span>(fileName,buf);</span><br><span class="line">    <span class="keyword">if</span> (!serialNumber.isEmpty()) &#123;       <span class="comment">//放到創建的資料夾中</span></span><br><span class="line">        TempPath += (QString)fileName;</span><br><span class="line">        img.save(TempPath,<span class="string">"JPG"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        img.save(fileName,<span class="string">"JPG"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Screenshot.qml</span></span><br><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> VideoRenderView <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    id:window</span><br><span class="line">    VideoRenderView &#123;</span><br><span class="line">        id: videoRenderView</span><br><span class="line">        Button &#123;</span><br><span class="line">            width: <span class="number">160</span></span><br><span class="line">            height: <span class="number">65</span></span><br><span class="line">            Text &#123;</span><br><span class="line">                anchors.centerIn: parent</span><br><span class="line">                text: <span class="string">"Screen Shot"</span></span><br><span class="line">                font.pixelSize: <span class="number">16</span></span><br><span class="line">            &#125;</span><br><span class="line">            onclicked: &#123;</span><br><span class="line">                videoRenderView.screenshot(window)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-Write-CSV"><a href="#C-Write-CSV" class="headerlink" title="C Write CSV"></a>C Write CSV</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* fileName = <span class="string">"teddyBear.csv"</span>;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">fp=fopen(fileName,<span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fp)                            <span class="comment">//如果檔案已經存在，則刪掉</span></span><br><span class="line">&#123;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	remove(fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fp=fopen(fileName,<span class="string">"w"</span>);           <span class="comment">//寫檔w</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%s,%s\n"</span>,<span class="string">"X"</span>,<span class="string">"Y"</span>);    <span class="comment">//將第一列給個欄位名稱(以,表示換格 以\n表示換行)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; dataLength ; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(fp,<span class="string">"%f,%f"</span>,X[i],Y[i]);</span><br><span class="line">	<span class="built_in">fprintf</span>(fp,<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp);                       <span class="comment">//寫完關檔</span></span><br></pre></td></tr></table></figure>
<h3 id="Qt-Write-CSV"><a href="#Qt-Write-CSV" class="headerlink" title="Qt Write CSV"></a>Qt Write CSV</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString path = qApp-&gt;applicationDirPath() + <span class="string">"//"</span>+<span class="string">"ContoursXY.csv"</span>;</span><br><span class="line"><span class="function">QFile <span class="title">Rfile</span><span class="params">(path)</span></span>;</span><br><span class="line">QString line;</span><br><span class="line">Rfile.open(QIODevice::WriteOnly);</span><br><span class="line"><span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;Rfile)</span></span>;</span><br><span class="line">out &lt;&lt; <span class="string">"X,Y\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; dataLength ; i++) &#123;</span><br><span class="line">    qDebug()&lt;&lt;i;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"(X["</span>&lt;&lt;i&lt;&lt;<span class="string">"],Y["</span>&lt;&lt;i&lt;&lt;<span class="string">"]):"</span>&lt;&lt; X[i] &lt;&lt;<span class="string">","</span>&lt;&lt; Y[i];</span><br><span class="line">    line += QString::number(X[i])+<span class="string">","</span>+QString::number(Y[i]) + <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">out &lt;&lt; line;</span><br><span class="line">Rfile.close();</span><br></pre></td></tr></table></figure>
<h3 id="Qt-Read-Write-Binary"><a href="#Qt-Read-Write-Binary" class="headerlink" title="Qt Read/Write Binary"></a>Qt Read/Write Binary</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">uchar* binBits= <span class="keyword">new</span> uchar[<span class="number">256</span> * <span class="number">256</span> * <span class="number">109</span>];</span><br><span class="line"><span class="keyword">int</span> dataLength = <span class="number">256</span>*<span class="number">256</span>*<span class="number">109</span>;</span><br><span class="line"></span><br><span class="line">FILE *outFile;</span><br><span class="line">outFile = fopen(<span class="string">"outFile.bin"</span>,<span class="string">"wb"</span>);</span><br><span class="line">fwrite(binBits,<span class="keyword">sizeof</span>(uchar)*dataLength,<span class="number">1</span>,outFile);</span><br><span class="line">fclose(outFile);</span><br><span class="line"></span><br><span class="line">FILE *inFile;</span><br><span class="line">inFile = fopen(<span class="string">"outFile.bin"</span>, <span class="string">"rb"</span>);</span><br><span class="line">uchar *check = <span class="keyword">new</span> uchar[dataLength];</span><br><span class="line">fread(check, <span class="keyword">sizeof</span>(uchar)*dataLength, <span class="number">1</span>, inFile);</span><br><span class="line">fclose(inFile);</span><br><span class="line">uchar *check2 = checkBits3D.bits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//========以上步驟為讀寫binary檔案========</span></span><br><span class="line"><span class="comment">//========以下步驟為驗證binary檔案========</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="number">256</span> * <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">256</span> * <span class="number">256</span>; i++) &#123;</span><br><span class="line">    check2[a] = binBits[<span class="number">0</span> * length + i];</span><br><span class="line">    check2[a + <span class="number">1</span>] = binBits[<span class="number">0</span> * length + i];</span><br><span class="line">    check2[a + <span class="number">2</span>] = binBits[<span class="number">0</span> * length + i];</span><br><span class="line">    a += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">checkBits3D.save(<span class="string">"checkbinBits.png"</span>,<span class="string">"PNG"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">256</span> * <span class="number">256</span> ; i++) &#123;</span><br><span class="line">    check2[a] = check[<span class="number">0</span> * length + i];</span><br><span class="line">    check2[a + <span class="number">1</span>] = check[<span class="number">0</span> * length + i + <span class="number">1</span>];</span><br><span class="line">    check2[a + <span class="number">2</span>] = check[<span class="number">0</span> * length + i + <span class="number">2</span>];</span><br><span class="line">    a += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">checkBits3D.save(<span class="string">"checkOutFile.png"</span>,<span class="string">"PNG"</span>);</span><br></pre></td></tr></table></figure>
<p>建新檔<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readYOffset</span><span class="params">(QString filename)</span> </span>&#123; <span class="comment">//filename = xxx.csv</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;filename = filename;</span><br><span class="line">    currentPath = QDir::currentPath();</span><br><span class="line">    currentPath += <span class="string">'/'</span> + filename;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(currentPath)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.open(QIODevice::ReadOnly)) &#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Cannot Open File!"</span>;</span><br><span class="line">        file.open((QIODevice::WriteOnly)) ;</span><br><span class="line">        <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">        out &lt;&lt; <span class="string">"YOffset\n"</span>;</span><br><span class="line">        out &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        file.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    data = file.readAll();</span><br><span class="line">    data.split(<span class="string">"\r\n"</span>);</span><br><span class="line">    yOffset = data.split(<span class="string">"\r\n"</span>)[<span class="number">1</span>].toInt();</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"yOffset:"</span>&lt;&lt;yOffset;</span><br><span class="line">    <span class="keyword">return</span> yOffset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="C-Read-dat-txt"><a href="#C-Read-dat-txt" class="headerlink" title="C++ Read dat/txt"></a>C++ Read dat/txt</h3><p>C++ 讀取文字檔(一次讀一行)<br>將文字檔放在OUTPWD專案看的到Release與Debug那一層<br>若是打包後的應用程式則放在與執行檔同一層</p>
<p>例如: 文字檔內容為<br>0<br>598<br>1920<br>434<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TBReader.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TBReader::ReadLayoutFile()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">80</span>];</span><br><span class="line">    ifstream fin;</span><br><span class="line">    fin.open(<span class="string">"LayoutSize.dat"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fin) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Can't open LayoutSize.dat\n"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法一:文字檔一次讀一行讀到檔案結尾</span></span><br><span class="line">    <span class="keyword">while</span>(!fin.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        fin.getline(buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;buffer&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法二:已知4行並且呼叫不同函式</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        fin.getline(buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">            SetX(atoi(buffer));</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">            SetY(atoi(buffer));</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">2</span>)</span><br><span class="line">            SetWidth(atoi(buffer));</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">3</span>)</span><br><span class="line">            SetHeight(atoi(buffer));</span><br><span class="line">    &#125;</span><br><span class="line">    Logger(LOGINFO, <span class="string">L"x:%d y:%d width:%d height:%d"</span>, x, y, width, height);</span><br><span class="line">    </span><br><span class="line">    fin.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>輸出結果</p>
<pre><code>2019-05-29 10:27:48.852,[INFO ],ThreadID:6304,x:0 y:598 width:1920 height:434
</code></pre><h3 id="C-Read-Write-Binary"><a href="#C-Read-Write-Binary" class="headerlink" title="C++ Read/Write Binary"></a>C++ Read/Write Binary</h3><p>istream &amp;read(char buf, streamsize num);</p>
<blockquote>
<p>istream::read<br>讀取物件.read(資料區塊的指標, 長度);</p>
</blockquote>
<p>ostream &amp;write(const char buf, streamsize num);</p>
<blockquote>
<p>ostream::write<br>輸出物件.write(資料區塊的指標, 長度);</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"teddybear.dat"</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fout) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    fout.write((<span class="keyword">char</span>*)arr, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">    fout.close();</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"teddybear.dat"</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fin) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr2[<span class="number">3</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    fin.read((<span class="keyword">char</span>*)arr2, <span class="keyword">sizeof</span>(arr2));</span><br><span class="line">    fin.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-Read-Write-Binary-1"><a href="#C-Read-Write-Binary-1" class="headerlink" title="C Read/Write Binary"></a>C Read/Write Binary</h3><p>區塊 I/O 函式fwrite</p>
<blockquote>
<p>int fread(char <em>buffer, int size, int count, FILE </em>fp);<br>buffer 參數為讀入的資料所要存放的地方，size是指讀入的每一筆資料長度（byte），count 是指讀入的筆數<br>int fwrite(char <em>buffer, int size, int count, FILE </em>fp);<br>buffer 參數為寫入的資料所要存放的地方，size是指讀入的每一筆資料長度（byte），count 是指讀入的筆數</p>
</blockquote>
<p>Example_1<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    FILE *file = fopen(<span class="string">"temp"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can't open file!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    fwrite((<span class="keyword">char</span>*) arr, <span class="keyword">sizeof</span>(arr), <span class="number">1</span>, file);</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    file = fopen(<span class="string">"temp"</span>, <span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can't open file!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fread((<span class="keyword">char</span>*) arr, <span class="keyword">sizeof</span>(arr), <span class="number">1</span>, file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"arr: "</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Example_2<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt; stdio.h &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> data[N];	</span><br><span class="line">	<span class="keyword">int</span> get[N];</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	FILE *file=fopen(<span class="string">"data.bin"</span>,<span class="string">"wb"</span>); <span class="comment">//開啟檔案來寫</span></span><br><span class="line">	<span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		data[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	fwrite(data,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),N,file);</span><br><span class="line">	<span class="comment">// fwrite可以一次把數個bytes的資料寫入檔案</span></span><br><span class="line">	fclose(file);</span><br><span class="line"></span><br><span class="line">	file=fopen(<span class="string">"data.bin"</span>,<span class="string">"rb"</span>); <span class="comment">// 開啟檔案來讀</span></span><br><span class="line">	fread(get, <span class="keyword">sizeof</span>(<span class="keyword">int</span>),N,file);</span><br><span class="line">	<span class="comment">// fread可以一次把數個bytes的資料讀入記憶體中</span></span><br><span class="line">	<span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,get[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	fclose(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="讀檔"><a href="#讀檔" class="headerlink" title="讀檔"></a>讀檔</h2><h3 id="Qt將資料夾所有特定檔案讀出-例如所有-csv"><a href="#Qt將資料夾所有特定檔案讀出-例如所有-csv" class="headerlink" title="Qt將資料夾所有特定檔案讀出(例如所有.csv)"></a>Qt將資料夾所有特定檔案讀出(例如所有.csv)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> CSVReader::traverse(<span class="keyword">const</span> QString &amp;pattern, <span class="keyword">const</span> QString &amp;dirname, <span class="keyword">int</span> level)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QDir <span class="title">dir</span><span class="params">(dirname)</span></span>;</span><br><span class="line">    dir.setFilter(QDir::Dirs | QDir::Files | QDir::NoSymLinks | QDir::NoDot | QDir::NoDotDot);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> QStringList stringList = pattern.split(<span class="string">'/'</span>);</span><br><span class="line">    foreach (QFileInfo fileInfo, dir.entryInfoList(stringList.mid(level, <span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileInfo.isDir() &amp;&amp; fileInfo.isReadable())</span><br><span class="line">            traverse(pattern, fileInfo.filePath(), level+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stringList.size() == (level + <span class="number">1</span>))</span><br><span class="line">            qDebug() &lt;&lt; fileInfo.filePath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    traverse(<span class="string">"*/*.csv"</span>, <span class="string">"."</span>, <span class="number">0</span>); <span class="comment">//讀所有資料夾內是否有csv檔</span></span><br><span class="line">    traverse(<span class="string">"ProgramData/*.csv"</span>, <span class="string">"."</span>, <span class="number">0</span>); <span class="comment">//讀ProgramData資料夾內是否有csv檔</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output情況:<br>“./ProgramData/Program_01.csv”<br>“./ProgramData/Program_02.csv”<br>“./ProgramData/Program_03.csv”<br>“./ProgramData/Program_04.csv”</p>
<h3 id="Qt剖析CSV"><a href="#Qt剖析CSV" class="headerlink" title="Qt剖析CSV"></a>Qt剖析CSV</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStringList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDir&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIEWLOG true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CSVReader::parsing() &#123;</span><br><span class="line">    QString fileName;</span><br><span class="line">    QString currentPath;</span><br><span class="line">    QString data;	 <span class="comment">//用來接收檔案中所有內容</span></span><br><span class="line">    QString str;        <span class="comment">//用來接收需要的值</span></span><br><span class="line">    QStringList <span class="built_in">list</span>;	 <span class="comment">//用來接收data   以"行"為單位切割後的值</span></span><br><span class="line">    QStringList listval;<span class="comment">//用來接收list  以"個"為單位切割後的值</span></span><br><span class="line">    </span><br><span class="line">    fileName = <span class="string">"Program_01.csv"</span>;</span><br><span class="line">    currentPath = QDir::currentPath();</span><br><span class="line">    currentPath += <span class="string">"/ProgramData/"</span> +fileName;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(currentPath)</span></span>;            <span class="comment">//讀取檔案</span></span><br><span class="line">    <span class="keyword">if</span>(!file.open(QIODevice::ReadOnly))&#123;<span class="comment">//若開檔失敗則顯示錯誤訊息</span></span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"Cannot open file!"</span> ;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    data = file.readAll();		  <span class="comment">//用來接收file檔案中的所有內容</span></span><br><span class="line">    <span class="built_in">list</span> = data.split(<span class="string">"\r\n"</span>);	          <span class="comment">//切割以"行"為單位存入list中</span></span><br><span class="line">    <span class="comment">//if (VIEWLOG)</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"list: "&lt;&lt;list &lt;&lt;"\nlist.count(): "&lt;&lt;list.count();</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.count()<span class="number">-1</span> ;i++)&#123;	<span class="comment">//執行list.count()-1組迴圈 (代表有幾"行")</span></span><br><span class="line">        listval = <span class="built_in">list</span>.at(i).split(<span class="string">","</span>); <span class="comment">//存入整行中的值 並以","劃分開來</span></span><br><span class="line">        <span class="comment">//if (VIEWLOG)</span></span><br><span class="line">            <span class="comment">//qDebug()&lt;&lt;"listval: "&lt;&lt;listval;</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        listval.at(i)</span></span><br><span class="line"><span class="comment">        dosomething...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    file.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高彈性的讀取方式"><a href="#高彈性的讀取方式" class="headerlink" title="高彈性的讀取方式"></a>高彈性的讀取方式</h3><p>將上述的讀取資料檔案路徑與剖析資料結合<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//單一檔案讀取剖析</span></span><br><span class="line"><span class="keyword">void</span> CSVReader::read(QString filename) &#123;</span><br><span class="line">    parse(filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//將某個資料夾內特定檔案讀取剖析</span></span><br><span class="line"><span class="keyword">void</span> CSVReader::readAll(QString directory) &#123;</span><br><span class="line">    traverse( directory + <span class="string">"/*.csv"</span>, <span class="string">"."</span>, <span class="number">0</span>);</span><br><span class="line">    fileNumbers = fileNames.length();</span><br><span class="line">    <span class="keyword">if</span> (VIEWLOG) &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"fileNames"</span>&lt;&lt;fileNames;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"fileNumbers"</span>&lt;&lt;fileNumbers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; fileNumbers ; i++) &#123;</span><br><span class="line">        parse(fileNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="刪除資料夾"><a href="#刪除資料夾" class="headerlink" title="刪除資料夾"></a>刪除資料夾</h2><p>包含資料夾內的所有檔案一併刪除<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> FileHandler::RemoveFile(QString completePath) &#123; <span class="comment">//傳入完整路徑(包含檔案位置 D://Test/01.jpg)</span></span><br><span class="line">    <span class="function">QFileInfo <span class="title">info</span><span class="params">( completePath )</span></span>;</span><br><span class="line">    <span class="keyword">if</span> ( !completePath.isEmpty() ) </span><br><span class="line">    &#123;</span><br><span class="line">        QDir dir;</span><br><span class="line">        <span class="keyword">if</span> ( dir.exists( info.dir().path() ) ) <span class="comment">//檢查是否有該路徑 (D://Test/)</span></span><br><span class="line">        &#123;</span><br><span class="line">            dir.setPath( info.dir().path() );</span><br><span class="line">            dir.removeRecursively(); <span class="comment">// 將(D://Test/)資料夾刪除並且把該資料夾內的檔案一併刪除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>參考資料:</p>
<p>讀寫二進位相關:<br><a href="http://monkeycoding.com/?p=956" target="_blank" rel="noopener">阿洲的程式教學二進位檔案操作(read、write)</a><br><a href="https://openhome.cc/Gossip/CppGossip/BinaryFileIO.html" target="_blank" rel="noopener">二進位檔案I/O - OpenHome.cc</a><br><a href="https://blog.xuite.net/fredxxx123/wretch/93422509-%E6%AA%94%E6%A1%88%E8%BC%B8%E5%85%A5%E8%88%87%E8%BC%B8%E5%87%BA%EF%BC%88%E4%B8%8B%EF%BC%89" target="_blank" rel="noopener">檔案輸入與輸出（下） @ NaCl :: 隨意窩Xuite日誌</a><br><a href="https://www.cmlab.csie.ntu.edu.tw/~perng/course/chap8/chap8.html" target="_blank" rel="noopener">第八章:檔案 - CMLab</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>讀寫檔</tag>
        <tag>read/write</tag>
      </tags>
  </entry>
  <entry>
    <title>型態轉換</title>
    <url>/2018/11/04/%E5%9E%8B%E6%85%8B%E8%BD%89%E6%8F%9B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候第一次處理的型態間轉換不一定那麼容易，將處理過的型態轉換紀錄在這篇文章，這樣就可以很快的能參照。</p>
<h2 id="char-to-QString"><a href="#char-to-QString" class="headerlink" title="char to QString"></a>char to QString</h2><p>用法<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(QString)charA</span><br></pre></td></tr></table></figure></p>
<p>example<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">128</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">t = time(<span class="literal">NULL</span>);</span><br><span class="line">local = localtime(&amp;t);</span><br><span class="line">strftime(buf, <span class="number">64</span>, <span class="string">"%Y%m%d_%H%M%S"</span>, local);</span><br><span class="line"><span class="built_in">strcat</span>(buf,<span class="string">".jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> LensXY[<span class="number">128</span>]= &#123;<span class="string">"Lens XY_"</span>&#125;;</span><br><span class="line">QString currentPath;</span><br><span class="line">QString TempPath;</span><br><span class="line"><span class="built_in">strcat</span>(LensXY,buf);</span><br><span class="line">TempPath += (QString)LensXY;</span><br><span class="line">canvasRotated.save(TempPath,<span class="string">"JPG"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="int-to-QString"><a href="#int-to-QString" class="headerlink" title="int to QString"></a>int to QString</h2><p>用法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 42;</span><br><span class="line">QString s = QString::number(i);</span><br></pre></td></tr></table></figure></p>
<p>example int搭配QString處理檔案的路徑<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    QString path = <span class="string">"D:/Projects/file"</span> + QString::number(i) + <span class="string">".csv"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="int-to-stdString"><a href="#int-to-stdString" class="headerlink" title="int to stdString"></a>int to stdString</h2><p>先將int轉為QString再轉成StdString<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">3</span>;</span><br><span class="line">QString::number(value).toStdString();</span><br></pre></td></tr></table></figure></p>
<h2 id="int-to-char-in-C"><a href="#int-to-char-in-C" class="headerlink" title="int to char[] in C"></a>int to char[] in C</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得時間</span></span><br><span class="line">SYSTEMTIME time;</span><br><span class="line">GetSystemTime(&amp;time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得毫秒DWORD型態</span></span><br><span class="line"><span class="keyword">char</span> ms[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> time_ms = time.wMilliseconds;</span><br><span class="line"><span class="built_in">sprintf</span>(ms, <span class="string">"%d"</span>, time_ms); <span class="comment">//將int轉為char[]</span></span><br></pre></td></tr></table></figure>
<h2 id="QString-to-Int"><a href="#QString-to-Int" class="headerlink" title="QString to Int"></a>QString to Int</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString str = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">int</span> n = str.toInt();</span><br></pre></td></tr></table></figure>
<h2 id="QString-to-QByteArray"><a href="#QString-to-QByteArray" class="headerlink" title="QString to QByteArray"></a>QString to QByteArray</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QByteArray ba = key.toLocal8Bit();</span><br></pre></td></tr></table></figure>
<h2 id="QString-to-char"><a href="#QString-to-char" class="headerlink" title="QString to char*"></a>QString to char*</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QString轉char*的中間過程需先轉為QByteArray</span></span><br><span class="line">QByteArray ba = key.toLocal8Bit();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *c_str2 = ba.data();</span><br><span class="line">CString str;</span><br></pre></td></tr></table></figure>
<h2 id="QString-to-const-char"><a href="#QString-to-const-char" class="headerlink" title="QString to const char*"></a>QString to const char*</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString path</span><br><span class="line">path.toLatin1().data()</span><br></pre></td></tr></table></figure>
<h2 id="QImage-to-uchar"><a href="#QImage-to-uchar" class="headerlink" title="QImage to uchar*"></a>QImage to uchar*</h2><p>取得QImage起始位置再去操作<br>用法<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QImage <span class="title">canvas</span><span class="params">(<span class="number">2592</span>, <span class="number">1944</span>, QImage::Format_RGB888)</span></span>;<span class="comment">//寬高為2592*1944的畫布</span></span><br><span class="line">uchar* bits = canvas.bits();    <span class="comment">//canvas記憶體起始位置</span></span><br></pre></td></tr></table></figure></p>
<p>example</p>
<ul>
<li>以buffer處理資料需除了長寬需乘上3(stride)，因為rgb</li>
<li>有時候畫布大小跟處理的QImage大小不一，畫出來的線不見了，可以檢查是不是被扔掉，將要畫得線加粗或是畫布調整大小</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage canvas</span><br><span class="line">uchar* bits = canvas.bits(); <span class="comment">//QImage的記憶體起始位置</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2592</span>; i++ ) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">1944</span>; j++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2592</span> / <span class="number">2</span> || j == <span class="number">1944</span> /<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = i * <span class="number">3</span> + j * canvas.bytesPerLine();</span><br><span class="line">            bits[idx] = <span class="number">255</span>;</span><br><span class="line">            bits[idx+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            bits[idx+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="QImage-to-Mat-OpenCV-cv-Mat"><a href="#QImage-to-Mat-OpenCV-cv-Mat" class="headerlink" title="QImage to Mat (OpenCV cv::Mat)"></a>QImage to Mat (OpenCV cv::Mat)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QImage contours = QImage(<span class="number">2592</span>, <span class="number">1944</span>, QImage::Format_RGB888);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    取得contours影像; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* bits = contours.bits();</span><br><span class="line">src = Mat(<span class="number">1944</span>, <span class="number">2592</span>, CV_8UC3, (<span class="keyword">void</span>*)bits, <span class="number">2592</span>*<span class="number">3</span>);<span class="comment">//RGB 3通道 8UC3</span></span><br><span class="line">src_gray = Mat(<span class="number">1944</span>, <span class="number">2592</span>, CV_8UC1); <span class="comment">//灰階 單通道 8UC1</span></span><br><span class="line">cvtColor(src, src_gray, CV_RGB2GRAY);</span><br></pre></td></tr></table></figure>
<h2 id="Mat-to-QImage-OpenCV-cv-Mat"><a href="#Mat-to-QImage-OpenCV-cv-Mat" class="headerlink" title="Mat to QImage (OpenCV cv::Mat)"></a>Mat to QImage (OpenCV cv::Mat)</h2><p>OpenCV讀取圖像再將圖像轉為3通道RGB格式的Mat，這個Mat可以呼叫些OpenCV函式使用，例如:高斯模糊，完成OpenCV函式處理存到QImage中<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Mat src = imread(<span class="string">"D:/Test.jpg"</span>);</span><br><span class="line"><span class="keyword">if</span> (src.empty()) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Load file failed!"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Mat gaussianBlurImg; <span class="comment">// make the same cv::Mat</span></span><br><span class="line">cvtColor(src, gaussianBlurImg,CV_BGR2RGB);</span><br><span class="line">GaussianBlur(src, gaussianBlurImg, Size(<span class="number">15</span>,<span class="number">15</span>) ,<span class="number">0</span> ,<span class="number">0</span>);</span><br><span class="line"><span class="function">QImage <span class="title">gradientImg</span><span class="params">((uchar *) gaussianBlurImg.data, <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888)</span></span>;</span><br><span class="line">gradient(gradientImg);</span><br></pre></td></tr></table></figure></p>
<h2 id="QPainter-to-QImage"><a href="#QPainter-to-QImage" class="headerlink" title="QPainter to QImage"></a>QPainter to QImage</h2><ul>
<li>將資料處理在畫布後，可以呼叫QImage的函式(鏡像、scale…)畫出</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">canvas = QImage(<span class="number">480</span>,<span class="number">360</span>, QImage::Format_RGB888);</span><br><span class="line"><span class="function">QPainter <span class="title">p</span><span class="params">(&amp;canvas)</span></span>;</span><br><span class="line">p.drawLine(QPointF(x1,y1),QPointF(x2,y2));</span><br><span class="line">p.end ();</span><br><span class="line"><span class="keyword">void</span> ImageBox::paint(QPainter *painter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height())</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, canvas.width(),canvas.height())</span></span>;</span><br><span class="line">    painter-&gt;drawImage(target, canvas, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>example</p>
<ul>
<li>利用QPainter操作QImage達到鏡像與繪圖</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">canvas = QImage(<span class="number">480</span>,<span class="number">360</span>, QImage::Format_RGB888);</span><br><span class="line"><span class="function">QPainter <span class="title">p</span><span class="params">(&amp;canvas)</span></span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; data.size() ; i++ ) &#123;</span><br><span class="line">    listDataSet.push_back(data.at(i).y());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; dataWidth<span class="number">-1</span> ; i++ ) &#123;</span><br><span class="line">    p.drawLine(QPointF(i/xScale,(listDataSet[i]+yOffset)/yScale), QPointF((i+<span class="number">1</span>)/xScale,(listDataSet[i+<span class="number">1</span>]+yOffset)/yScale));</span><br><span class="line">&#125;</span><br><span class="line">p.end ();</span><br><span class="line">canvas = canvas.mirrored(<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ImageBox::paint(QPainter *painter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height())</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, canvas.width(),canvas.height())</span></span>;</span><br><span class="line">    painter-&gt;drawImage(target, canvas, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>型態轉換</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ 動態連結函式庫</title>
    <url>/2018/11/02/C-dll/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>專案合作上，經常使用到動態連結函式庫，因為它可以將記憶體浪費的情形將可大幅降低，並且很適合協作開發，一直都沒很了解extern “C”真正意義，而且導入的時候或是連結的時候有時候都會發生問題，所以紀錄了這一篇一探究竟並且避免錯誤重複發生。</p>
<h2 id="動態連結函式庫"><a href="#動態連結函式庫" class="headerlink" title="動態連結函式庫"></a>動態連結函式庫</h2><p><strong>動態連結函式庫Dynamic-link library</strong> ，縮寫為DLL所謂動態連結，就是把一些經常會共用的程式碼（靜態連結的OBJ程式庫）製作成DLL檔，當執行檔呼叫到DLL檔內的函式時，Windows作業系統才會把DLL檔載入記憶體內，DLL檔本身的結構就是可執行檔，<strong>當程式有需求時函式才進行連結</strong> 。透過動態連結方式，<strong>記憶體浪費的情形將可大幅降低</strong> 。<strong>靜態連結函式庫則是直接連結到執行檔</strong> 。透過dll製作，在專案的協作上是必備的技能</p>
<h2 id="關於-ifdef-cplusplus-endif-cplusplus-很重要"><a href="#關於-ifdef-cplusplus-endif-cplusplus-很重要" class="headerlink" title="關於#ifdef cplusplus/#endif cplusplus(很重要)"></a>關於#ifdef <strong>cplusplus/#endif </strong>cplusplus(很重要)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DATAPROC_HEADER_INCLUDED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    DATAPROC_HEADER_INCLUDED</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*.................................</span></span><br><span class="line"><span class="comment"> * do something here</span></span><br><span class="line"><span class="comment"> *.................................</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* DATAPROC_HEADER_INCLUDED */</span></span></span><br></pre></td></tr></table></figure>
<p>ifndef/endif條件編譯<br>上面程式碼，ifndef/endif的作用是<strong>避免重複包含header</strong> ，在#include上面這段程式碼時如果DEFINE __cplusplus則會進ifdef__cplusplus以extern “C”編譯</p>
<ul>
<li><p>假設多個source都會include上面這個DataProc_global.h對於一個大型專案來說可能會導致錯誤，原因是一個head file的類(class)或函式可能被重複定義用到了兩次以上，例如a.h裡頭#include “DataProc_global.h”而b.h #include “b.h”跟#include “DataProc_global.h”這樣就會發生錯誤在同個source中會有兩個以上重複的類(class)或函式定義</p>
</li>
<li><p>透過#ifndef/#endif可以將這些冗餘去除更可以<strong>保證類與函式的獨立避免被重複宣告了</strong></p>
</li>
</ul>
<p>解決上述問題<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DATAPROC_HEADER_INCLUDED </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATAPROC_HEADER_INCLUDED </span></span><br><span class="line"><span class="comment">/*……………………………*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* DATAPROC_HEADER_INCLUDED */</span></span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>如果第一次使用這份header，它的內容會被執行並且定義DATAPROC_HEADER_INCLUDED，之後再次看到這份header內容將不再讀取。</li>
</ul>
<h2 id="編寫類C-dll"><a href="#編寫類C-dll" class="headerlink" title="編寫類C dll"></a>編寫類C dll</h2><p>用類C去編寫的dll彈性比較高，在各語言導入比較沒有相容性問題</p>
<p>先在專案new subproject中選擇library新增</p>
<p>將TBLog_global.h內容複製到TBLog.h</p>
<p>TBLog.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma once是一個非標準但是被廣泛支援的前置處理符號，會讓所在的檔案在一個單獨的編譯中只被包含一次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBLog_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBLog_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TBLog_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLog_API __declspec(dllexport) <span class="comment">//使用 __declspec(dllexport) 從 DLL 匯出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLog_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> LogLevels</span><br><span class="line">&#123;</span><br><span class="line">    LOGTRACE,</span><br><span class="line">    LOGDEBUG,</span><br><span class="line">    LOGINFO,</span><br><span class="line">    LOGWARN,</span><br><span class="line">    LOGERROR,</span><br><span class="line">    LOGFATAL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">CVLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level = LOGINFO)</span></span>; <span class="comment">//將LOGLEVEL閥值預設為LOGINFO,表示LOGINFO以上的層級才會顯示與寫檔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">CVLOG_API <span class="keyword">void</span> <span class="title">MyLog</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">char</span>* message, ...)</span></span>; <span class="comment">//不定參數函式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TBLog_H</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><h3 id="簡述"><a href="#簡述" class="headerlink" title="簡述"></a>簡述</h3><p><strong>extern “C”</strong> 是C++特有的組合關鍵字，但是在<strong>C裡並沒有這個的組合</strong> ，僅有extern這個關鍵字<br>為什麼C++會需要這樣的關鍵字組呢? 原因是C++它有一個<strong>重載(Overloaded)</strong> 的功能<strong>Mangling</strong><br>透過extern “C”這個關鍵字組，請C++不要將重載的函式偷偷改名，請它保留原名，這樣類C語言就看得懂了。<br>如果C語言要使用，必需要把C++的header檔裡的extern “C” { } 移除後才可以讓C編譯器使用。</p>
<h3 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h3><ul>
<li>extern是C/C++語言中表明函式和全局變量作用範圍（可見性）的關鍵字，該關鍵字告訴編譯器，其宣告的函式和變量可以在本module或其它module中使用。</li>
<li>可以透過header宣告<strong>關鍵字extern</strong> 函式或是全局變數提供給其他的module使用。如果moduleB欲引用該moduleA中定義的全局變量和函式時只需包含moduleA的header即可。這樣，moduleB中呼叫moduleA中的函式時，在編譯階段，moduleB雖然找不到該函式，但是並不會報錯；它會在連接階段中從moduleA編譯生成的目標代碼中找到此函式。</li>
<li>與extern對應的關鍵字是static，被它修飾的全局變量和函式只能在本module中使用。因此，一個函式或變量只可能被本module使用時，其不可能被extern “C”修飾。</li>
</ul>
<h3 id="“C”"><a href="#“C”" class="headerlink" title="“C”"></a>“C”</h3><ul>
<li>典型的，一個C++程序包含其它語言編寫的部分代碼。類似的，C++編寫的代碼片段可能被使用在其它語言編寫的代碼中。不同語言編寫的代碼互相呼叫是困難的，甚至是同一種編寫的代碼但不同的編譯器編譯的代碼。例如，不同語言和同種語言的不同實現可能會在註冊變量保持參數和參數在棧上的佈局，這個方面不一樣。為了使它們遵守統一規則，可以使用extern指定一個編譯和連接規約。</li>
</ul>
<h3 id="extern-“C”-1"><a href="#extern-“C”-1" class="headerlink" title="extern “C”"></a>extern “C”</h3><ul>
<li>extern “C”指令非常有用，因為C和C++的近親關係。注意：extern “C”指令中的C，表示的一種編譯和連接規約，而不是一種語言。C是表示符合C語言的編譯和連接規約的任何語言，例如Fortran、assembler等。<br>還有要說明的是，extern “C”不會改變語義，但是會改變它的編譯和連接方式。例如在函式宣告中，指定了extern “C”，仍然要遵守C++的類型檢測、參數轉換規則。</li>
</ul>
<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><blockquote>
<p>如果你有很多語言要加上extern “C”，你可以將它們放到extern “C”{ }中。<br>C語言中不支持extern “C”宣告<br>在.c文件中包含了extern “C”時會出現編譯時錯誤</p>
</blockquote>
<p>TBLog.cpp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tblog.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//設定閥值</span></span><br><span class="line">    logThreshold = level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">CVLOG_API <span class="keyword">void</span> <span class="title">MyLog</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//dosomething...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">若是dll中有使用include其他的第三方檔案，則需在使用端也一併在pro檔中導入這個第三方檔案</span><br><span class="line"></span><br><span class="line">例如:dll中include &lt;opencv2/core.hpp&gt;</span><br><span class="line">在dll專案中需要導入opencv_core2413</span><br><span class="line">在使用dll的專案中也需要在pro檔中導入opencv_core2413否則會說讀不到opencv2/core.hpp</span><br></pre></td></tr></table></figure></p>
<h2 id="導入dll"><a href="#導入dll" class="headerlink" title="導入dll"></a>導入dll</h2><p><img src="https://i.imgur.com/dUHM5uj.png" alt></p>
<blockquote>
<p>Library file: lib位置<br>INCLUDEPATH: .h檔位置</p>
</blockquote>
<p>$$OUT_PWD : build出來的資料夾中主程式的位置(看的到debug/release那一層)<br>$$PWD : 專案.pro檔的位置</p>
<p>將編譯好的dll導入到與exe同一層寫法如下<br>Debug:DESTDIR = ../DataProc(專案名稱)/debug<br>Release:DESTDIR = ../DataProc(專案名稱)/release</p>
<p>搭配上述寫法的話$$OUT_PWD/release/此段要注意不需切換到別層<br>win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/release/ -lfindContours<br>else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/debug/ -lfindContours</p>
<p>INCLUDEPATH += $$PWD/../findContours<br>DEPENDPATH += $$PWD/../findContours</p>
<hr>
<p><img src="https://i.imgur.com/IvpSeee.png" alt></p>
<h3 id="外部導入-第三方或協作的dll"><a href="#外部導入-第三方或協作的dll" class="headerlink" title="外部導入(第三方或協作的dll)"></a>外部導入(第三方或協作的dll)</h3><p>一般dll導入 add library &gt;&gt; external library &gt;&gt; 選擇路徑<br>win32: LIBS += -L$$PWD/../CVCamera/ -lCVCamera</p>
<p>INCLUDEPATH += $$PWD/../CVCamera<br>DEPENDPATH += $$PWD/../CVCamera</p>
<hr>
<h3 id="內部導入-自己編寫或是有原始碼的dll"><a href="#內部導入-自己編寫或是有原始碼的dll" class="headerlink" title="內部導入(自己編寫或是有原始碼的dll)"></a>內部導入(自己編寫或是有原始碼的dll)</h3><p>自己寫的dll導入 add library &gt;&gt; internal library &gt;&gt; 選擇名稱<br>win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/release/ -lDataProc<br>else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/debug/ -lDataProc</p>
<p>INCLUDEPATH += $$PWD/../DataProc<br>DEPENDPATH += $$PWD/../fDataProc</p>
<hr>
<h2 id="dll放置位置"><a href="#dll放置位置" class="headerlink" title="dll放置位置"></a>dll放置位置</h2><p>External Library(第三方或是協作的DLL)<br>放在與專案.pro同層中的SDKs裡面</p>
<p>Internal Library(自行建立的DLL)<br>放在與專案.pro同層中的檔案夾內</p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/04/08/C-logger/">C logger | 泰迪熊的程式足跡</a></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93" target="_blank" rel="noopener">維基百科動態連結函式庫</a><br><a href="http://aftcast.pixnet.net/blog/post/22457055-c%2B%2B%E4%B8%AD%E9%97%9C%E6%96%BCextern-%22c%22%E7%9A%84%E6%84%8F%E7%BE%A9" target="_blank" rel="noopener">C++中關於extern “C”的意義@ 蕭沖的書房:: 痞客邦::</a><br><a href="https://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html" target="_blank" rel="noopener">C++项目中的extern “C” {} - 吴秦- 博客园</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>DLL</tag>
        <tag>動態連結函式庫</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ 編譯流程</title>
    <url>/2018/11/02/C-compile/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做專案整合的時候，要將他人編寫的程式碼整合在一起，有時會有錯誤發生，這時如果很清楚問題所在，就能將問題迎刃而解，像是清楚的了解是在編譯時就發生錯誤是語法錯誤還是語意錯誤，產生obj檔了嗎?或是DLL導入時才發生錯誤呢?<br>所以我趁這個機會來好好複習一下之前所學的程式語言，將發生的錯誤歸類一下，了解來龍去脈更能有效率的除錯!</p>
<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>建置(build)執行檔的過程包括編譯和連結。<br>編譯器(compiler)把原始碼變成機械碼。<br>連結器(linker)把多份機械碼合併成執行檔，並更正檔案內的參考位址(address)。<br>程式庫檔案(.lib)是一些機械碼檔案(.obj)的集合體。</p>
<h2 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h2><p><img src="https://i.imgur.com/Sems83E.png" alt></p>
<h2 id="編譯步驟"><a href="#編譯步驟" class="headerlink" title="編譯步驟"></a>編譯步驟</h2><h3 id="編譯器"><a href="#編譯器" class="headerlink" title="編譯器"></a>編譯器</h3><h4 id="檢查語法錯誤-SyntaxError"><a href="#檢查語法錯誤-SyntaxError" class="headerlink" title="檢查語法錯誤(SyntaxError)"></a>檢查語法錯誤(SyntaxError)</h4><p>例如多打了符號或括號數目不平衡等，那麼編譯器就看不懂你的程式。</p>
<h4 id="檢查語義錯誤-SemanticError"><a href="#檢查語義錯誤-SemanticError" class="headerlink" title="檢查語義錯誤(SemanticError)"></a>檢查語義錯誤(SemanticError)</h4><p>例如你用了未經宣告的變數，就算編譯器看得懂，但是也不懂得如何編譯你的程式。</p>
<h4 id="檢查宣告與型態"><a href="#檢查宣告與型態" class="headerlink" title="檢查宣告與型態"></a>檢查宣告與型態</h4><p>如果有變數是透過 include 而來的，在檢查過程中也會去參考其他有 include 到的檔案該變數是否被宣告過或是變數型態錯誤</p>
<h4 id="通過編譯"><a href="#通過編譯" class="headerlink" title="通過編譯"></a>通過編譯</h4><p>當沒有任何錯誤後，編譯器會把程式內每個句子轉成更低階的語言，一般來說是指「組合語言」(Assembly)方式。</p>
<h3 id="組譯器"><a href="#組譯器" class="headerlink" title="組譯器"></a>組譯器</h3><h4 id="轉成「目的碼」-ObjectCode"><a href="#轉成「目的碼」-ObjectCode" class="headerlink" title="轉成「目的碼」(ObjectCode)"></a>轉成「目的碼」(ObjectCode)</h4><p>組譯過程就會把每個組合語言句子轉成「機械語言」(MachineCode)這種方式稱為「目的碼」(ObjectCode)，產生檔案”file.obj”。<br>後端的工作就是產生目標程式碼和優化程式碼。</p>
<h3 id="連結器"><a href="#連結器" class="headerlink" title="連結器"></a>連結器</h3><h4 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h4><p>最後到了「連結」(Link)過程，就會把你的程式、有關的程式和程式庫所產生出來的*.obj，<br>轉成可以在電腦上執行的方式。</p>
<h4 id="產出執行檔"><a href="#產出執行檔" class="headerlink" title="產出執行檔"></a>產出執行檔</h4><p>產生另一個檔”file.exe”，這個檔案就可以執行了。</p>
<h2 id="執行程式分成兩階段"><a href="#執行程式分成兩階段" class="headerlink" title="執行程式分成兩階段"></a>執行程式分成兩階段</h2><h3 id="編譯階段"><a href="#編譯階段" class="headerlink" title="編譯階段"></a>編譯階段</h3><p>編譯器(Compile)</p>
<ul>
<li>1.檢查語法錯誤(SyntaxError)</li>
<li>2.檢查語義錯誤(SemanticError)</li>
</ul>
<p>組譯器(Assemble)</p>
<ul>
<li>1.產出目的檔file.obj</li>
<li>2.產出其他目的檔*.obj</li>
<li>3.產出程式庫.lib</li>
</ul>
<p>連結(Link)</p>
<ul>
<li>產出執行檔exe</li>
</ul>
<pre><code>沒找到Link函式入口則會有LINKERROR
</code></pre><blockquote>
<p>解決辦法:<br>常見的LINKERROR是在.h宣告了卻未在cpp中未定義，所以可以檢查是不是有宣告並且定義了<br>或是檢查pro檔有沒有正確導入lib與header,同時檢查使用的地方有沒有#include “header”<br>若是找不到lib則可以先單獨將欲導入的dll專案重新build過讓他先正確產生lib檔</p>
</blockquote>
<h3 id="執行階段"><a href="#執行階段" class="headerlink" title="執行階段"></a>執行階段</h3><p>執行程式</p>
<pre><code>缺少DLL執行時會crash
</code></pre><blockquote>
<p>解決辦法:可以直接至產出的exe雙擊執行，此時會跳出少了哪個dll的錯誤訊息</p>
</blockquote>
<h2 id="C-C-特性"><a href="#C-C-特性" class="headerlink" title="C/C++特性"></a>C/C++特性</h2><p>在 C/C++ 語言裡都要明確地指定，程式中必須明確指定每一筆資料的型態和儲存方式，所以 C/C++ 語言被稱為強型別(strong type)語言。</p>
<p>參考資料:<br><a href="http://shukaiyang.myweb.hinet.net/cpp/concept.zhtw.htm" target="_blank" rel="noopener">編譯器與連結器的基本概念</a><br><a href="http://lagunawang.pixnet.net/blog/post/9743288-compiler%E4%BB%8B%E7%B4%B9" target="_blank" rel="noopener">Compiler介紹@ Amin’s Note :: 痞客邦::</a><br><a href="http://www2.lssh.tp.edu.tw/~hlf/class-1/lang-c/compile.htm" target="_blank" rel="noopener">程式編譯過程</a><br><a href="https://cwchen.tw/c-prog/the-process-of-compiling/" target="_blank" rel="noopener">C 語言程式設計教學：編譯 C 程式碼的過程</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>編譯流程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 如何打造專屬的LineBot呢</title>
    <url>/2018/10/26/Python-LineBot/</url>
    <content><![CDATA[<blockquote>
<p><strong> 此為個人練習非商業用途</strong></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>服役期間很喜歡寫爬蟲程式，取得各種資料加以處理很有趣，但都在當地端運用，有天突然發現有趣的LineBot程式可以把爬蟲搭載在其中，在這人人都有Line的時代透過LineBot可以使親朋好友不用刻意裝別的app即可使用，更能融入生活中</p>
</blockquote>
<h2 id="整體流程"><a href="#整體流程" class="headerlink" title="整體流程"></a>整體流程</h2><ul>
<li>運用Python編寫LineBot透過一些LineApi實現介面</li>
<li>運用爬蟲技術將網路上的資源爬取下來供機器人使用</li>
<li>優化: 編寫排程定時去抓取線上資料存取在資料庫</li>
<li>將編寫好的程式佈署在heroku上面</li>
</ul>
<h2 id="LineApi-Layout簡介"><a href="#LineApi-Layout簡介" class="headerlink" title="LineApi Layout簡介"></a>LineApi Layout簡介</h2><h2 id="泰迪熊展示"><a href="#泰迪熊展示" class="headerlink" title="泰迪熊展示"></a>泰迪熊展示</h2><h3 id="如何使用泰迪熊"><a href="#如何使用泰迪熊" class="headerlink" title="如何使用泰迪熊"></a>如何使用泰迪熊</h3><h4 id="可以輸入關鍵字或是專有名詞"><a href="#可以輸入關鍵字或是專有名詞" class="headerlink" title="可以輸入關鍵字或是專有名詞"></a>可以輸入關鍵字或是專有名詞</h4><p><img src="https://i.imgur.com/VsziQIf.png" alt="link text" title="自我介紹"></p>
<h4 id="也可以用精選功能快捷鍵"><a href="#也可以用精選功能快捷鍵" class="headerlink" title="也可以用精選功能快捷鍵"></a>也可以用精選功能快捷鍵</h4><p><img src="https://i.imgur.com/dcWJwUP.png" alt="link text" title="除了輸入外還有精選功能快捷鍵使用"></p>
<h3 id="天氣"><a href="#天氣" class="headerlink" title="天氣"></a>天氣</h3><p>出門前隨手一按，不用下班當水手<br><img src="https://i.imgur.com/ZxNW4yu.png" alt="link text" title="呼叫天氣"></p>
<p><img src="https://i.imgur.com/baR4MTv.png" alt="link text" title="貼心小提醒天氣概況"></p>
<h3 id="餐廳"><a href="#餐廳" class="headerlink" title="餐廳"></a>餐廳</h3><p>還在煩惱出門不知道吃甚麼嗎?<br>這時候打開泰迪熊無論你身處何地一搜馬上有推薦餐廳(保證不雷!?)<br><img src="https://i.imgur.com/bzgnphE.png" alt="link text" title="傳送位置"></p>
<p><img src="https://i.imgur.com/aMeTUtp.png" alt="link text" title="發送位置"></p>
<p><img src="https://i.imgur.com/6hAv3jk.png" alt="link text" title="將評分4分以上的附近餐廳傳送給您"></p>
<h3 id="電影"><a href="#電影" class="headerlink" title="電影"></a>電影</h3><p>隨時留意電影話題，不怕跟人沒話題<br><img src="https://i.imgur.com/QRPEg0e.png" alt="link text" title="電影選單"></p>
<p><img src="https://i.imgur.com/BUUtDDi.png" alt="link text" title="近期上映的電影上映日期與期待度"></p>
<p><img src="https://i.imgur.com/wd5nK3R.png" alt="link text" title="現正熱映的電影上映日期與評分"></p>
<h3 id="新聞"><a href="#新聞" class="headerlink" title="新聞"></a>新聞</h3><p><img src="https://i.imgur.com/C9kBMPB.png" alt="link text" title="新聞選單"></p>
<p><img src="https://i.imgur.com/eeaOYiE.png" alt="link text" title="即時新聞 了解時事"></p>
<p><img src="https://i.imgur.com/ndvZvpM.png" alt="link text" title="科技新聞"></p>
<h3 id="PTT"><a href="#PTT" class="headerlink" title="PTT"></a>PTT</h3><p>輸入各大板泰迪熊幫你找文章節省時間與觀看精選好文<br>例如:Joke,八卦,NBA,表特…<br><img src="https://i.imgur.com/nLJqfK3.png" alt="link text" title="鄉民爬文囉"></p>
<p>可以爬PTT各大板的最近10頁的熱門文章(由人氣排序)<br>這樣就可以不用花時間自己看文，泰迪熊嚴選文章給您<br><img src="https://i.imgur.com/LVxj2VU.png" alt="link text" title="人氣前15篇"></p>
<h3 id="對話"><a href="#對話" class="headerlink" title="對話"></a>對話</h3><p>除了聊天之外，遇到不懂得事情可以問泰迪熊，只要輸入專有名詞，給你專業的回答<br><img src="https://i.imgur.com/9YOSeDI.png" alt="link text" title="互動功能"></p>
<p><img src="https://i.imgur.com/YSFdvFK.png" alt="link text" title="輸入專有名詞會告訴你相關知識"></p>
<h3 id="貼圖"><a href="#貼圖" class="headerlink" title="貼圖"></a>貼圖</h3><p><img src="https://i.imgur.com/kAGoPxx.png" alt="link text" title="還可以跟她玩圖戰喔!"></p>
<h2 id="Python編寫"><a href="#Python編寫" class="headerlink" title="Python編寫"></a>Python編寫</h2><h2 id="爬蟲概述"><a href="#爬蟲概述" class="headerlink" title="爬蟲概述"></a>爬蟲概述</h2><p>我在<a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a>有編寫靜態網頁爬取的相關內容</p>
<h2 id="heroku佈署"><a href="#heroku佈署" class="headerlink" title="heroku佈署"></a>heroku佈署</h2><h2 id="快來試試我們的機器人吧"><a href="#快來試試我們的機器人吧" class="headerlink" title="快來試試我們的機器人吧"></a>快來試試我們的機器人吧</h2><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ul>
<li>在編輯Python時 <strong>四格空格不等於一個Tab</strong> ，如果使用的是Notepad++在編輯檔案時，千萬要把Tab轉換成空白鍵，不然會肉眼怎麼看都找不到錯誤</li>
</ul>
<pre><code>可以至設定 &gt; 使用者自訂 &gt; 程式語言 &gt; 以空格取代打勾
</code></pre><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>heroku</tag>
        <tag>LineBot</tag>
        <tag>爬蟲</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 如何製作Windows多國輸入法的虛擬鍵盤</title>
    <url>/2018/10/26/Qt-Virtual-Keyboard/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/wcl9mNq.png" alt="泰迪熊的Qt小鍵盤" title="泰迪熊的Qt小鍵盤"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>運用GPL的Qt小鍵盤，進階使其可以像Windows On-Screen Keyboard對任何程式進行輸入，並且有多國輸入法的特性，把鍵盤與程式分離有個好處就是鍵盤比較彈性也比較萬用</p>
</blockquote>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><blockquote>
<p>藉由Qt寫好的虛擬鍵盤加以改造成將輸入傳送給系統，在app端中埋一個看不到的EditField在默默輔助，因為是偵測EditField，所以必須透過些許方式處理無法掌握的按鍵，例如:BackSpace退格、Enter輸入，來看看怎麼處理的吧</p>
</blockquote>
<h2 id="整體流程"><a href="#整體流程" class="headerlink" title="整體流程"></a>整體流程</h2><ul>
<li>首先搭載Qt Virtual Keyboard並使其擁有多國輸入法</li>
<li>設置hook攔截事件</li>
<li>再取得當前視窗的 <strong>Window handle</strong></li>
<li>取得後利用Windows的 <strong>SendInput</strong></li>
<li>釋放hook</li>
</ul>
<h2 id="Qt-Virtual-Keyboard搭載"><a href="#Qt-Virtual-Keyboard搭載" class="headerlink" title="Qt Virtual Keyboard搭載"></a>Qt Virtual Keyboard搭載</h2><h3 id="安裝qt-virtual-keyboard套件"><a href="#安裝qt-virtual-keyboard套件" class="headerlink" title="安裝qt virtual keyboard套件"></a>安裝qt virtual keyboard套件</h3><p><strong>請先確認Qt是否有安裝Qt Virtual Keyboard套件</strong><br>沒安裝的話至Qt的MaintenanceTool.exe新增</p>
<blockquote>
<p>安裝完套件後在pro檔中加入</p>
</blockquote>
<pre><code>QT_IM_MODULE=qtvirtualkeyboard myapp
</code></pre><blockquote>
<p>並在main.cpp中加入,要加在<strong>QGuiApplication app(argc, argv);</strong> 之前</p>
</blockquote>
<pre><code>qputenv(&quot;QT_IM_MODULE&quot;, QByteArray(&quot;qtvirtualkeyboard&quot;));
</code></pre><p>main.qml<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.VirtualKeyboard <span class="number">2.3</span></span><br><span class="line">Window &#123;</span><br><span class="line">    id:root</span><br><span class="line">    title: qsTr(<span class="string">"Virtual Keyboard"</span>)</span><br><span class="line">    x:Screen.width/<span class="number">2</span> - <span class="number">320</span></span><br><span class="line">    y:Screen.desktopAvailableHeight<span class="number">-300</span></span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">220</span></span><br><span class="line">    Rectangle &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        color: <span class="string">"black"</span></span><br><span class="line">    &#125;</span><br><span class="line">    TextField &#123;</span><br><span class="line">        id:key</span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        focus: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    InputPanel &#123;</span><br><span class="line">        <span class="comment">//虛擬鍵盤</span></span><br><span class="line">        id: vkb</span><br><span class="line">        visible: <span class="literal">true</span></span><br><span class="line">        active: <span class="literal">true</span></span><br><span class="line">        anchors.fill:parent</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="注意-尚未完成"><a href="#注意-尚未完成" class="headerlink" title="注意 尚未完成"></a>注意 尚未完成</h4><blockquote>
<p>完成上述步驟(此時只有<strong>預設的英文</strong>)</p>
</blockquote>
<h3 id="編寫虛擬鍵盤增加多國輸入法"><a href="#編寫虛擬鍵盤增加多國輸入法" class="headerlink" title="編寫虛擬鍵盤增加多國輸入法"></a>編寫虛擬鍵盤增加多國輸入法</h3><p>有了鍵盤後要加入各國語言 <strong>lang-all</strong></p>
<ul>
<li>下載<a href="&quot;http://download.qt.io/official_releases/qt/5.10/5.10.1/single/qt-everywhere-src-5.10.1.zip&quot;">Qt 5.10.1 source.zip</a></li>
<li>解壓縮並將<strong>qtvirtualkeyboard</strong>資料夾放置桌面</li>
<li><p>用<strong>Qt的cmd(Qt 5.10.1 32-bit for desktop)</strong> 切換到qtvirtualkeyboard目錄層(C:\Users\Administrator\Desktop\qtvirtualkeyboard)輸入下面指令加入各國輸入法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qmake CONFIG+=&quot;lang-all&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接著我們開啟VC的命令提示字元(<strong>VC2015 x86 Native Tools Command Prompt</strong>)<br>輸入 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmake</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成後再輸入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmake install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="注意-cl-exe問題"><a href="#注意-cl-exe問題" class="headerlink" title="注意 cl.exe問題"></a>注意 cl.exe問題</h4><blockquote>
<p>到這一步基本上是完成了，但是我的環境找不到<strong>cl.exe</strong>此時搜尋<strong>cl.exe</strong>並將所在位置貼在path環境路徑中</p>
</blockquote>
<h3 id="設置特定多國語言"><a href="#設置特定多國語言" class="headerlink" title="設置特定多國語言"></a>設置特定多國語言</h3><p>設置多國語言我們會在<strong>Qt 5.10.1 32-bit for Desktop (MSVC 2015)</strong>中輸入qmake CONFIG+=”lang-all”<br>上面這句指令會把所有語言加進去，如果我們只要特定幾種語言的話</p>
<p>在qtvirtualkeyboard中要看版本例如Qt為5.10.1那就得找5.10.1版本的鍵盤<br>qtvirtualkeyboard -&gt; src -&gt; virtualkeyboard -&gt; config -&gt; config.pri檔案中<br>將需要加入的語言留下其餘刪除或註解<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">lang-all: CONFIG += \</span><br><span class="line">        #lang-ar_AR \</span><br><span class="line">        #lang-bg_BG \</span><br><span class="line">        #lang-cs_CZ \</span><br><span class="line">        #lang-da_DK \</span><br><span class="line">        lang-de_DE \ #Geomy</span><br><span class="line">        #lang-el_GR \</span><br><span class="line">        lang-en_GB \ #English</span><br><span class="line">        lang-es_ES \ #Spain</span><br><span class="line">        #lang-et_EE \</span><br><span class="line">        #lang-fa_FA \</span><br><span class="line">        #lang-fi_FI \</span><br><span class="line">        lang-fr_FR \ #French</span><br><span class="line">        #lang-he_IL \</span><br><span class="line">        #lang-hi_IN \</span><br><span class="line">        #lang-hr_HR \</span><br><span class="line">        #lang-hu_HU \</span><br><span class="line">        lang-it_IT \ #Italy</span><br><span class="line">        lang-ja_JP \ #Japan</span><br><span class="line">        #lang-ko_KR \ #Korea</span><br><span class="line">        #lang-nb_NO \</span><br><span class="line">        #lang-nl_NL \</span><br><span class="line">        #lang-pl_PL \</span><br><span class="line">        #lang-pt_PT \</span><br><span class="line">        #lang-ro_RO \</span><br><span class="line">        #lang-ru_RU \</span><br><span class="line">        #lang-sr_SP \</span><br><span class="line">        #lang-sv_SE \</span><br><span class="line">        lang-zh_CN \#China</span><br><span class="line">        lang-zh_TW  #Taiwan</span><br></pre></td></tr></table></figure></p>
<p>開啟Qt 5.10.1 32-bit for Desktop (MSVC 2015)</p>
<pre><code>輸入qmake CONFIG+=&quot;lang-all&quot;
</code></pre><p>接著再開啟Visual Studio 2015 x86 Native Tools Command Prompt</p>
<pre><code>輸入nmake
輸入nmake install
</code></pre><p>完成後再次打開編寫的Virtual Keyboard會發現多個小地球可以選擇多國輸入法囉 ~</p>
<p><img src="https://i.imgur.com/PwXHHs8.png" alt="泰迪熊的Qt小鍵盤" title="語言可以選擇"></p>
<h3 id="Qt-Virtual-Keyboard"><a href="#Qt-Virtual-Keyboard" class="headerlink" title="Qt Virtual Keyboard"></a>Qt Virtual Keyboard</h3><blockquote>
<p>此時你的鍵盤已經可以在app當中使用並且可以輸入各國輸入法但是想要像Windows On-Screen Keyboard在各個視窗中任意編輯呢??</p>
<p>讓我們繼續看下去…</p>
</blockquote>
<h2 id="設置hook攔截事件"><a href="#設置hook攔截事件" class="headerlink" title="設置hook攔截事件"></a>設置hook攔截事件</h2><h3 id="hook設定"><a href="#hook設定" class="headerlink" title="hook設定"></a>hook設定</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> VirtualKeyboard::setHook() &#123;</span><br><span class="line">    HINSTANCE hinst = GetModuleHandle( <span class="literal">NULL</span> );</span><br><span class="line">    <span class="comment">//if (!(_hook = SetWindowsHookEx(WH_CBT ,CBTProc, hinst, GetCurrentThreadId()))) &#123;</span></span><br><span class="line">    <span class="comment">//設置mouse事件</span></span><br><span class="line">    <span class="keyword">if</span> (!(_hook = SetWindowsHookEx(WH_MOUSE_LL ,HookCallback, hinst, <span class="number">0</span>))) &#123;</span><br><span class="line">        Logger(LOGTRACE, <span class="string">L"%d\n"</span>,GetLastError());</span><br><span class="line">        Logger(LOGTRACE, <span class="string">L"Failed to install hook!\n"</span>);</span><br><span class="line">        <span class="comment">//return false;</span></span><br><span class="line">    &#125;</span><br><span class="line">    Logger(LOGTRACE, <span class="string">L"Install hook successed!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="攔截時跳到這"><a href="#攔截時跳到這" class="headerlink" title="攔截時跳到這"></a>攔截時跳到這</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LRESULT __<span class="function">stdcall <span class="title">HookCallback</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//先找Virtual Keyboard的window handle</span></span><br><span class="line">    HWND hookVkWindow= FindWindow( <span class="literal">NULL</span>,<span class="string">L"Virtual Keyboard"</span>);</span><br><span class="line">    <span class="keyword">if</span> (nCode &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//hook左鍵事件進入後尋找當下window handle</span></span><br><span class="line">        <span class="keyword">if</span> (wParam == WM_LBUTTONDOWN)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!isGetVirtualKeyBoardHandle)</span><br><span class="line">            &#123;</span><br><span class="line">                Logger(LOGTRACE, <span class="string">L"Virtual Keyboard's window handle:%p\n"</span>,hookVkWindow);</span><br><span class="line">                isGetVirtualKeyBoardHandle = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取得當前window handle</span></span><br><span class="line">            HWND hookCurrentHWND = GetForegroundWindow();</span><br><span class="line">            <span class="comment">//如果現在的window handle不等於鍵盤的window handle則將現在的window handle給先前的window handle</span></span><br><span class="line">            <span class="keyword">if</span> (hookCurrentHWND != hookVkWindow) &#123;</span><br><span class="line">                <span class="keyword">if</span>(hookPreviousHWND != hookCurrentHWND)</span><br><span class="line">                    Logger(LOGTRACE, <span class="string">L"current window handle:%p\n"</span>,GetForegroundWindow());</span><br><span class="line"></span><br><span class="line">                hookPreviousHWND = hookCurrentHWND;</span><br><span class="line">                vkWindow = hookVkWindow;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            hookCurrentHWND = hookPreviousHWND;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hookCurrentHWND == hookVkWindow) &#123;</span><br><span class="line">                hookCurrentHWND = hookPreviousHWND;</span><br><span class="line">                <span class="keyword">return</span> CallNextHookEx(_hook, nCode, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// lParam is the pointer to the struct containing the data needed, so cast and assign it to kdbStruct.</span></span><br><span class="line">            kbdStruct = *((KBDLLHOOKSTRUCT*)lParam);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// call the next hook in the hook chain. This is nessecary or your hook chain will break and the hook stops</span></span><br><span class="line">    <span class="keyword">return</span> CallNextHookEx(_hook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="取得Window-handle-HWND"><a href="#取得Window-handle-HWND" class="headerlink" title="取得Window handle(HWND)"></a>取得Window handle(HWND)</h2><h3 id="取得當前Window-handle"><a href="#取得當前Window-handle" class="headerlink" title="取得當前Window handle"></a>取得當前Window handle</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">HWND currentHWND = GetForegroundWindow();</span><br></pre></td></tr></table></figure>
<h3 id="讓handle掌控權不會再回到鍵盤身上"><a href="#讓handle掌控權不會再回到鍵盤身上" class="headerlink" title="讓handle掌控權不會再回到鍵盤身上"></a>讓handle掌控權不會再回到鍵盤身上</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::setHWNDNoActive() &#123;</span><br><span class="line">    <span class="comment">//取得Handler</span></span><br><span class="line">    window = FindWindow( <span class="literal">NULL</span>,<span class="string">L"Virtual Keyboard"</span>);</span><br><span class="line">    <span class="comment">//WS_EX_NOACTIVATE讓app不會得到focus</span></span><br><span class="line">    SetWindowLong(window, GWL_EXSTYLE,GetWindowLong(window, GWL_EXSTYLE) | WS_EX_NOACTIVATE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="置頂"><a href="#置頂" class="headerlink" title="置頂"></a>置頂</h3><blockquote>
<p>將app置頂、不可移動、不可調整大小<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::setHWNDTopmost() &#123;</span><br><span class="line">    <span class="comment">//將傳入的handle置頂、不能移動、不能調整大小,四個數字參數分別為X, Y , width, height</span></span><br><span class="line">    SetWindowPos(window,HWND_TOPMOST, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="SendInput送出"><a href="#SendInput送出" class="headerlink" title="SendInput送出"></a>SendInput送出</h2><blockquote>
<p>上述的步驟掌握到當前的handle，也處理了鍵盤的相關設定接著我們把拿到的handle傳值給他吧<br>這次編寫的小鍵盤不適合<a href="https://teddybearfp.github.io/2018/10/24/%E5%85%A9%E7%A8%8B%E5%BC%8F%E9%96%93%E6%BA%9D%E9%80%9A/#more">兩個獨立執行檔溝通</a>介紹的SendMessage(hwnd, WM_COPYDATA, (WPARAM)GetSafeHwnd(), (LPARAM)&amp;copydata)<br>因為這樣寫的話接收端也要編寫，只能在特定的程式使用</p>
</blockquote>
<h3 id="SendInput傳遞Virtual-Keyboard輸入的值"><a href="#SendInput傳遞Virtual-Keyboard輸入的值" class="headerlink" title="SendInput傳遞Virtual Keyboard輸入的值"></a>SendInput傳遞Virtual Keyboard輸入的值</h3><blockquote>
<p>我的方法是將整個EditField整個字串的變化量的字數，傳遞給Virtual Keyboard，用UNICODE將各國語言直接送出，這樣就不用再判斷是否為中文字或是由2個byte組成的字，一律以2個byte存取並送出。</p>
</blockquote>
<h3 id="BackSpace解法"><a href="#BackSpace解法" class="headerlink" title="BackSpace解法"></a>BackSpace解法</h3><blockquote>
<p>因為這篇我利用TextField方式偵測字數變化傳遞Key的缺點是刪到最後TextField已經清空了所以怎麼按BackSpace都沒有反應因為沒有字數變化，所以對於使用者看來就是BackSpace無反應，我的解決辦法是當有字數變化TextField長度卻為1的時候(代表TextField已經被清空)，將TextField偷偷鍵入值”~”但不會送給系統的值<br>也就是犧牲一個”~”字不給輸入用來，解決BackSpace</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::sendKey(QString key) &#123;<span class="comment">//QString本身以UNICODE存資料</span></span><br><span class="line">    <span class="comment">//取得當下Window handle</span></span><br><span class="line">    HWND hWndTarget = currentHWND;</span><br><span class="line">    QString previousKey;</span><br><span class="line">    CString str = key.toStdWString().c_str();<span class="comment">//寬字串</span></span><br><span class="line">    CString logStr = str;</span><br><span class="line">    CString result;</span><br><span class="line"></span><br><span class="line">    logStr.Remove(L'!');</span><br><span class="line">    logStr.Remove(L'~');</span><br><span class="line">    Logger(LOGDEBUG, <span class="string">L"Whole input Key:%ls\n"</span>, logStr);</span><br><span class="line">    <span class="comment">//如果檢測值大於等於1且比key.length小(代表有輸入值)(將檢測值取代)</span></span><br><span class="line">    <span class="keyword">if</span>(previousKeyLength &gt;= <span class="number">1</span> &amp;&amp; previousKeyLength &lt; key.length() &amp;&amp; key != <span class="string">"~"</span>) &#123;</span><br><span class="line">        <span class="comment">//將字串送去處理並透過SendInput達成傳送功能</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = key.length() - previousKeyLength; i &gt; <span class="number">0</span>; i-- )</span><br><span class="line">        &#123;</span><br><span class="line">            result = str[str.GetLength()-i];</span><br><span class="line">            SendKeys(result);</span><br><span class="line">        &#125;</span><br><span class="line">        Logger(LOGDEBUG, <span class="string">L"current input Key:%ls\n"</span>, str.Right(key.length() - previousKeyLength));</span><br><span class="line">        previousKeyLength = key.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果檢測值大於等於1且key.length比檢測值大(代表有做BackSpace動作)(將檢測值取代)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(previousKeyLength &gt;= <span class="number">1</span> &amp;&amp; previousKeyLength &gt; key.length() &amp;&amp; key.length() != <span class="number">0</span> &amp;&amp; previousKey != <span class="string">"~"</span>) &#123;</span><br><span class="line">        previousKeyLength = key.length();</span><br><span class="line">        sendBackSpaceKey();</span><br><span class="line"></span><br><span class="line">        Logger(LOGDEBUG, <span class="string">L"current input Key:BackSpace\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果檢測值等於1且key.length等於0(代表edit空了但繼續做BackSpace動作)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(previousKeyLength &gt;= <span class="number">1</span> &amp;&amp; key.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(key.length() == <span class="number">0</span>)</span><br><span class="line">            previousKeyLength = <span class="number">1</span>;</span><br><span class="line">        sendBackSpaceKey();</span><br><span class="line">        <span class="function">emit <span class="title">textFieldChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        Logger(LOGDEBUG, <span class="string">L"current input Key:still BackSpace\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    previousKey = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="傳送的判斷"><a href="#傳送的判斷" class="headerlink" title="傳送的判斷"></a>傳送的判斷</h3><blockquote>
<p>兩個Byte的傳送</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendUnicode</span><span class="params">(<span class="keyword">wchar_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    INPUT input[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="number">2</span> * <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line"></span><br><span class="line">    input[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">    input[<span class="number">0</span>].ki.wVk = <span class="number">0</span>;</span><br><span class="line">    input[<span class="number">0</span>].ki.wScan = data;</span><br><span class="line">    input[<span class="number">0</span>].ki.dwFlags = <span class="number">0x4</span>;<span class="comment">//KEYEVENTF_UNICODE;</span></span><br><span class="line">    input[<span class="number">1</span>].type = INPUT_KEYBOARD;</span><br><span class="line">    input[<span class="number">1</span>].ki.wVk = <span class="number">0</span>;</span><br><span class="line">    input[<span class="number">1</span>].ki.wScan = data;</span><br><span class="line">    input[<span class="number">1</span>].ki.dwFlags = KEYEVENTF_KEYUP | <span class="number">0x4</span>;<span class="comment">//KEYEVENTF_UNICODE;</span></span><br><span class="line"></span><br><span class="line">    SendInput(<span class="number">2</span>, input, <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ASCII</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendAscii</span><span class="params">(<span class="keyword">wchar_t</span> data, BOOL shift)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    INPUT input[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="number">2</span> * <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (shift)</span><br><span class="line">    &#123;</span><br><span class="line">        input[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">        input[<span class="number">0</span>].ki.wVk = VK_SHIFT;</span><br><span class="line">        SendInput(<span class="number">1</span>, input, <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    input[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">    input[<span class="number">0</span>].ki.wVk = data;</span><br><span class="line">    </span><br><span class="line">    input[<span class="number">1</span>].type = INPUT_KEYBOARD;</span><br><span class="line">    input[<span class="number">1</span>].ki.wVk = data;</span><br><span class="line">    input[<span class="number">1</span>].ki.dwFlags = KEYEVENTF_KEYUP;</span><br><span class="line">    </span><br><span class="line">    SendInput(<span class="number">2</span>, input, <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (shift)</span><br><span class="line">    &#123;</span><br><span class="line">        input[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">        input[<span class="number">0</span>].ki.wVk = VK_SHIFT;</span><br><span class="line">        input[<span class="number">0</span>].ki.dwFlags = KEYEVENTF_KEYUP;</span><br><span class="line">        SendInput(<span class="number">1</span>, input, <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>偵測到字數變化傳送</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::sendKey(QString key) &#123;</span><br><span class="line">    <span class="comment">//取得當下Window handle</span></span><br><span class="line">    HWND hWndTarget = currentHWND;</span><br><span class="line">    QString previousKey;</span><br><span class="line">    CString str = key.toStdWString().c_str();</span><br><span class="line">    CString logStr = str;</span><br><span class="line">    CString result;</span><br><span class="line"></span><br><span class="line">    logStr.Remove(L'!');</span><br><span class="line">    logStr.Remove(L'~');</span><br><span class="line">    Logger(LOGDEBUG, <span class="string">L"Whole input Key:%ls\n"</span>, logStr);</span><br><span class="line">    <span class="comment">//如果檢測值大於等於1且比key.length小(代表有輸入值)(將檢測值取代)</span></span><br><span class="line">    <span class="keyword">if</span>(previousKeyLength &gt;= <span class="number">1</span> &amp;&amp; previousKeyLength &lt; key.length() &amp;&amp; key != <span class="string">"~"</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//將字串送去處理並透過SendInput達成傳送功能</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = key.length() - previousKeyLength; i &gt; <span class="number">0</span>; i-- )</span><br><span class="line">        &#123;</span><br><span class="line">            result = str[str.GetLength()-i];</span><br><span class="line">            SendKeys(result);</span><br><span class="line">        &#125;</span><br><span class="line">        Logger(LOGDEBUG, <span class="string">L"current input Key:%ls\n"</span>, str.Right(key.length() - previousKeyLength));</span><br><span class="line">        previousKeyLength = key.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果檢測值大於等於1且key.length比檢測值大(代表有做BackSpace動作)(將檢測值取代)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(previousKeyLength &gt;= <span class="number">1</span> &amp;&amp; previousKeyLength &gt; key.length() &amp;&amp; key.length() != <span class="number">0</span> &amp;&amp; previousKey != <span class="string">"~"</span>) &#123;</span><br><span class="line">        previousKeyLength = key.length();</span><br><span class="line">        sendBackSpaceKey();</span><br><span class="line"></span><br><span class="line">        Logger(LOGDEBUG, <span class="string">L"current input Key:BackSpace\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果檢測值等於1且key.length等於0(代表edit空了但繼續做BackSpace動作)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(previousKeyLength &gt;= <span class="number">1</span> &amp;&amp; key.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(key.length() == <span class="number">0</span>)</span><br><span class="line">            previousKeyLength = <span class="number">1</span>;</span><br><span class="line">        sendBackSpaceKey();</span><br><span class="line">        <span class="function">emit <span class="title">textFieldChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        Logger(LOGDEBUG, <span class="string">L"current input Key:still BackSpace\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    previousKey = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Enter的部分"><a href="#Enter的部分" class="headerlink" title="Enter的部分"></a>Enter的部分</h3><blockquote>
<p>因為在TextField是不會有字數變化的，但是Enter相較起來比較單純我們直接把一個Button覆蓋在上面，但是下面會有怎麼直接用Qt虛擬鍵盤本身的Enter方式</p>
</blockquote>
<p>onClicked的時候執行sendEnterKey()<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::sendEnterKey() &#123;</span><br><span class="line">    keybd_event(<span class="number">13</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    keybd_event(<span class="number">13</span>,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="釋放hook"><a href="#釋放hook" class="headerlink" title="釋放hook"></a>釋放hook</h2><p>大功告成!!! 我們把hook這大功臣放生吧<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::releaseHook()</span><br><span class="line">&#123;</span><br><span class="line">    UnhookWindowsHookEx(_hook); <span class="comment">//掰~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="完整Qml端-main-qml"><a href="#完整Qml端-main-qml" class="headerlink" title="完整Qml端(main.qml)"></a>完整Qml端(main.qml)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.VirtualKeyboard <span class="number">2.3</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.VirtualKeyboard.Settings <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> virtualKeyboard <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">ApplicationWindow  &#123;</span><br><span class="line">    id:application</span><br><span class="line">    <span class="comment">//無框、置頂、不會被active</span></span><br><span class="line">    property double dpi: Screen.pixelDensity * <span class="number">25.4</span></span><br><span class="line">    property double dpiScale: dpi / <span class="number">72</span></span><br><span class="line">    property double widthScale: Screen.width / <span class="number">1920</span></span><br><span class="line">    property double heightScale: Screen.height / <span class="number">1080</span></span><br><span class="line">    property double whScale: (Screen.width / <span class="number">1920</span>) / dpiScale</span><br><span class="line">    color: <span class="string">"transparent"</span> <span class="comment">//!!!將背景的部分設為透明化(解決候選字後方背景問題)</span></span><br><span class="line">    flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鍵盤置中</span></span><br><span class="line">    title: qsTr(<span class="string">"Virtual Keyboard"</span>)</span><br><span class="line">    x: <span class="number">0</span></span><br><span class="line">    y: Screen.height - application.height</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: Screen.width</span><br><span class="line">    height: Screen.height / <span class="number">3</span> + ( <span class="number">75</span> * heightScale)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//*** Systemtray begin ***</span></span><br><span class="line">    property bool ignoreCheck: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    Connections &#123;</span><br><span class="line">        target: systemTray</span><br><span class="line">        onSignalShow: &#123;</span><br><span class="line">            application.show();</span><br><span class="line">        &#125;</span><br><span class="line">        onSignalQuit: &#123;</span><br><span class="line">            ignoreCheck = <span class="literal">true</span></span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">        onSignalIconActivated: &#123;</span><br><span class="line">             <span class="keyword">if</span>(application.visibility === Window.Hidden) &#123;</span><br><span class="line">                 application.show()</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 application.hide()</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CheckBox &#123;</span><br><span class="line">        id: checkTray</span><br><span class="line">        anchors.centerIn: parent</span><br><span class="line">        text: qsTr(<span class="string">"Enable minimizing to system tray during the window closing"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onClosing: &#123;</span><br><span class="line">        <span class="keyword">if</span>(checkTray.checked === <span class="literal">true</span> &amp;&amp; ignoreCheck === <span class="literal">false</span>)&#123;</span><br><span class="line">            close.accepted = <span class="literal">false</span></span><br><span class="line">            application.hide()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Qt.quit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//*** Systemtray end ***</span></span><br><span class="line"></span><br><span class="line">    VirtualKeyboard &#123;</span><br><span class="line">        id:virtualKeyboard</span><br><span class="line">        onTextFieldChanged: &#123;</span><br><span class="line">            key.text = key.text + <span class="string">"~"</span></span><br><span class="line">        &#125;</span><br><span class="line">        onWindowFocusChanged: &#123;</span><br><span class="line">            application.height = <span class="number">700</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Component.onCompleted: &#123;</span><br><span class="line">        <span class="comment">//取得handle</span></span><br><span class="line">        virtualKeyboard.setHWNDNoActive()</span><br><span class="line">        <span class="comment">//將找到的handle置頂</span></span><br><span class="line">        virtualKeyboard.setHWNDTopmost()</span><br><span class="line">        <span class="comment">//設置hook攔截事件</span></span><br><span class="line">        virtualKeyboard.setHook()</span><br><span class="line">        vkb.visible = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    TextField &#123;</span><br><span class="line">        id:key</span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        focus: <span class="literal">true</span></span><br><span class="line">        text:<span class="string">"!"</span></span><br><span class="line">        onTextChanged: &#123;</span><br><span class="line">            virtualKeyboard.sendKey(key.text)</span><br><span class="line">        &#125;</span><br><span class="line">        visible: <span class="literal">false</span></span><br><span class="line">        EnterKeyAction.enabled: key.text.length &gt; <span class="number">0</span> || key.inputMethodComposing</span><br><span class="line">        EnterKeyAction.label: <span class="string">"Next"</span></span><br><span class="line">        Keys.onReleased: &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.key === Qt.Key_Return) &#123;</span><br><span class="line">                virtualKeyboard.sendEnterKey()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    InputPanel &#123;</span><br><span class="line">        <span class="comment">//虛擬鍵盤</span></span><br><span class="line">        id: vkb</span><br><span class="line">        visible: Qt.inputMethod.visible</span><br><span class="line">        active: <span class="literal">true</span></span><br><span class="line">        anchors.fill: parent</span><br><span class="line"></span><br><span class="line">        Component.onCompleted: &#123;</span><br><span class="line">            <span class="keyword">if</span>(!InputContext.shiftHandler.toggleShiftEnabled)</span><br><span class="line">                InputContext.shiftHandler.toggleShiftEnabled = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        states: State &#123;</span><br><span class="line">            name: <span class="string">"visible"</span></span><br><span class="line">            when: Qt.inputMethod.visible</span><br><span class="line">            PropertyChanges</span><br><span class="line">            &#123;</span><br><span class="line">                target: vkb</span><br><span class="line">                y: parent.height - vkb.height</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        transitions: Transition</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">from</span>: <span class="string">""</span></span><br><span class="line">            to: <span class="string">"visible"</span></span><br><span class="line">            reversible: <span class="literal">true</span></span><br><span class="line">            ParallelAnimation</span><br><span class="line">            &#123;</span><br><span class="line">                NumberAnimation</span><br><span class="line">                &#123;</span><br><span class="line">                    properties: <span class="string">"y"</span></span><br><span class="line">                    duration: <span class="number">150</span></span><br><span class="line">                    easing.type: Easing.InOutQuad</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Button &#123;</span><br><span class="line">            id:closeBtn</span><br><span class="line">            z:<span class="number">1</span></span><br><span class="line">            anchors.left: parent.left</span><br><span class="line">            anchors.leftMargin: <span class="number">1670</span> * widthScale</span><br><span class="line">            anchors.top: parent.top</span><br><span class="line">            anchors.topMargin: <span class="number">342</span> * heightScale</span><br><span class="line">            focusPolicy: Qt.NoFocus <span class="comment">//不取得Focus</span></span><br><span class="line">            width: <span class="number">280</span> * widthScale</span><br><span class="line">            height: <span class="number">90</span> * heightScale</span><br><span class="line">            onClicked: application.visible = <span class="literal">false</span></span><br><span class="line">            background: Rectangle&#123;</span><br><span class="line">                color: <span class="string">"transparent"</span></span><br><span class="line">                <span class="comment">//opacity: 0.5</span></span><br><span class="line">                <span class="comment">//color: "red"</span></span><br><span class="line">                anchors.fill: parent</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="現在你有了自己的小鍵盤囉"><a href="#現在你有了自己的小鍵盤囉" class="headerlink" title="現在你有了自己的小鍵盤囉"></a>現在你有了自己的小鍵盤囉</h2><p>可以在各種程式使用(網頁、記事本、Word、Line…)<br><img src="https://i.imgur.com/FDRDlUr.png" alt="泰迪熊的Qt小鍵盤" title="這就是我要的鍵盤啦!"></p>
<p><img src="https://i.imgur.com/XLK7MBR.png" alt></p>
<h2 id="客制化鍵盤樣式"><a href="#客制化鍵盤樣式" class="headerlink" title="客制化鍵盤樣式"></a>客制化鍵盤樣式</h2><p><img src="https://i.imgur.com/Mo66FvY.png" alt></p>
<h3 id="下載Source-code"><a href="#下載Source-code" class="headerlink" title="下載Source code"></a>下載Source code</h3><p>首先我們可以先下載qt-everywhere-src-5.10.1.zip(版本要跟編譯環境相同)<br>接著解壓縮完後我們只需要qtvirtualkeyboard這個資料夾內的資料</p>
<h3 id="修改Style-qml"><a href="#修改Style-qml" class="headerlink" title="修改Style.qml"></a>修改Style.qml</h3><p>開啟qtvirtualkeyboard.pro並至下方路徑</p>
<pre><code>qtvirtualkeyboard -&gt; src -&gt; virtualkeyboard -&gt; QML -&gt; content -&gt; styles -&gt; default -&gt; style.qml
</code></pre><p>修改為自己想要的鍵盤樣式</p>
<h3 id="套用變更"><a href="#套用變更" class="headerlink" title="套用變更"></a>套用變更</h3><p>更改完成後透過<br>1.Qt 5.10.1 32-bit for Desktop (MSVC 2015) 輸入以下指令<br>告訴編譯器有更動到qml</p>
<pre><code>qmake
</code></pre><p>2.Visual Studio 2015 x86 Native Tools Command Prompt 輸入以下指令</p>
<p>用VC編譯</p>
<pre><code>nmake

nmake install
</code></pre><p>這時候重新編譯我們編寫的虛擬鍵盤後就會發現更改的地方會有所變化</p>
<h3 id="程式打包"><a href="#程式打包" class="headerlink" title="程式打包"></a>程式打包</h3><p>如果要把dll放在執行檔同一層的話<br>可以在pro檔案中加上這段程式碼重新編譯，系統會把需要的檔案放置與執行檔同一層的資料夾中<br>VirtualKeyboard.pro<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">isEmpty(TARGET_EXT) &#123;</span><br><span class="line">    win32 &#123;</span><br><span class="line">        TARGET_CUSTOM_EXT = .exe</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    TARGET_CUSTOM_EXT = $$&#123;TARGET_EXT&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win32 &#123;</span><br><span class="line">    DEPLOY_COMMAND = windeployqt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win32:CONFIG(debug, debug|release): DEPLOY_TARGET = $$shell_quote($$shell_path($$OUT_PWD/debug/$$&#123;TARGET&#125;$$&#123;TARGET_CUSTOM_EXT&#125;))</span><br><span class="line">win32:CONFIG(release, debug|release): DEPLOY_TARGET = $$shell_quote($$shell_path($$OUT_PWD/release/$$&#123;TARGET&#125;$$&#123;TARGET_CUSTOM_EXT&#125;))</span><br><span class="line"></span><br><span class="line">  # Uncomment the following line to help debug the deploy command when running qmake</span><br><span class="line">  warning($$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;)</span><br><span class="line"></span><br><span class="line">contains(QMAKE_TARGET.arch, x86) &#123;</span><br><span class="line">    QMAKE_POST_LINK = $$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;  --qmldir C:\Qt\Qt5<span class="number">.10</span><span class="number">.1</span>\<span class="number">5.10</span><span class="number">.1</span>\msvc2015\qml</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contains(QMAKE_TARGET.arch, x86_64) &#123;</span><br><span class="line">    QMAKE_POST_LINK = $$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;  --qmldir C:\Qt\Qt5<span class="number">.10</span><span class="number">.1</span>\<span class="number">5.10</span><span class="number">.1</span>\msvc2015_64\qml</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>除了在pro檔中撈所有需要的檔案方式外，還須手動添加以下幾個檔案要取得以下幾個檔案</p>
<p>1.qtvirtualkeyboardplugin相關動態連結檔<br>找到C:\Qt\Qt5.10.1\5.10.1\msvc2015\plugins\platforminputcontexts將資料夾內部的動態連結檔dll放到專案Release或debug的platforminputcontexts資料夾中</p>
<p>2.qtvirtualkeyboardstylesplugin相關動態連結檔<br>找到C:\Qt\Qt5.10.1\5.10.1\msvc2015\qml\QtQuick\VirtualKeyboard將整個資料夾放到專案Release或debug的QtQuick資料夾中</p>
<p>3.pinyin,tcime<br>將C:\Qt\Qt5.10.1\5.10.1\msvc2015\qtvirtualkeyboard複製到<br>專案Release或debug中<br>缺少這一項的話除了英文與符號外都不能打因為少了pinyin,tcime</p>
<p>參考網址:<br><a href="https://blog.csdn.net/cqltbe131421/article/details/69951924" target="_blank" rel="noopener">QT虚拟键盘中拼音输入法的使用</a></p>
<h3 id="非常重要"><a href="#非常重要" class="headerlink" title="非常重要"></a><strong>非常重要</strong></h3><p>客制特定語言鍵盤<br>例如修改繁體中文鍵盤<br>則到<br>qtvirtualkeyboard -&gt; src -&gt; virtualkeyboard -&gt; virtualkeyboard.pro中</p>
<p>contains(CONFIG, lang-zh(_TW)?) {<br>    LAYOUT_FILES += \<br>        content/layouts/zh_TW/main.qml \<br>        content/layouts/zh_TW/symbols.qml<br>t9write-cjk: LAYOUT_FILES += \<br>        content/layouts/zh_TW/handwriting.qml<br>}<br>更改symbols.qml與main.qml</p>
<p>更改完成後透過<br>1.Qt 5.10.1 32-bit for Desktop (MSVC 2015) 輸入以下指令<br>告訴編譯器有更動到qml<br>qmake</p>
<p>2.Visual Studio 2015 x86 Native Tools Command Prompt 輸入以下指令</p>
<p>用VC編譯<br>nmake</p>
<p>nmake install</p>
<p>完成圖如下</p>
<p><img src="https://i.imgur.com/Mo66FvY.png" alt title="客製化後的繁體中文介面"></p>
<p><img src="https://i.imgur.com/XLK7MBR.png" alt title="客製化後的特殊符號介面"></p>
<h2 id="可能遇到的問題"><a href="#可能遇到的問題" class="headerlink" title="可能遇到的問題"></a>可能遇到的問題</h2><h3 id="無法切換字母大小寫"><a href="#無法切換字母大小寫" class="headerlink" title="無法切換字母大小寫"></a>無法切換字母大小寫</h3><p>以上方式可能會使我們一開始用的5.10.1虛擬鍵盤是無法切換字母大小寫<br>而鍵盤無法切換大小寫字母問題解法如下:</p>
<p>我們在qtvirtualkeyboard的src中開啟shifthandler.h<br>shifthandler.h<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Q_PROPERTY(<span class="keyword">bool</span> toggleShiftEnabled READ toggleShiftEnabled WRITE setToggleShiftEnabled NOTIFY toggleShiftEnabledChanged)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setToggleShiftEnabled</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>test.qml<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">InputPanel &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    Component.onCompleted: &#123;</span><br><span class="line">    <span class="keyword">if</span>(!InputContext.shiftHandler.toggleShiftEnabled)</span><br><span class="line">        InputContext.shiftHandler.toggleShiftEnabled = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>感謝大神解答:<br><a href="https://bugreports.qt.io/browse/QTBUG-60841" target="_blank" rel="noopener">Shift/caps-lock state in virtual keyboard is random</a></p>
<h3 id="虛擬鍵盤Enter鍵無效"><a href="#虛擬鍵盤Enter鍵無效" class="headerlink" title="虛擬鍵盤Enter鍵無效"></a>虛擬鍵盤Enter鍵無效</h3><p>在使用端的qml中</p>
<pre><code>TextField {
    id:key
    anchors.top: parent.top
    anchors.horizontalCenter: parent.horizontalCenter
    focus: true
    text:&quot;!&quot;
    onTextChanged: {
        virtualKeyboard.sendKey(key.text)
    }
    visible: false

    //加入下面這三句指令
    EnterKeyAction.enabled: key.text.length &gt; 0 || key.inputMethodComposing
    EnterKeyAction.label: &quot;Next&quot;
    Keys.onReleased: {
        if (event.key === Qt.Key_Return) {
            virtualKeyboard.sendEnterKey()
        }
    }
}
</code></pre><p>完成圖如下:</p>
<p>第一個字母大寫<br><img src="https://i.imgur.com/oB1StG1.png" alt></p>
<p>常駐大寫<br><img src="https://i.imgur.com/vuKscIU.png" alt></p>
<h2 id="搭配Logger"><a href="#搭配Logger" class="headerlink" title="搭配Logger"></a>搭配Logger</h2><p>可以搭配我編寫的<a href="https://teddybearfp.github.io/2019/04/08/C-logger/#more">C logger</a>這一篇程式一起使用讓這個鍵盤更完整</p>
<p>支援Unicode的Logger來記錄使用者使用虛擬鍵盤的Log<br>透過這個Logger我們可以清楚的了解使用者輸入的情形，假設出問題了也比較方便除錯</p>
<p><img src="https://i.imgur.com/2WrQT0W.png" alt></p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p>做好了自己的虛擬鍵盤後，想要了解如何把我們做好的多國語言鍵盤變成常駐在系統托盤的程式而不是在工具列中的應用程式就來看看我編寫的另一篇<a href="https://teddybearfp.github.io/2019/05/25/Qt-SystemTray-implement/#more">Qt SystemTray implement</a></p>
<p><img src="https://i.imgur.com/9yjYhXP.png" alt></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>Qt Virtual Keyboard相關:<br><a href="https://blog.csdn.net/a844651990/article/details/79032650" target="_blank" rel="noopener">Qt 5.9 qml 使用自带虚拟键盘</a></p>
<p>hook相關:<br><a href="https://www.smwenku.com/a/5b8a3bb92b71775d1ce6181c/" target="_blank" rel="noopener">c++ hook 鉤子的使用介紹</a><br><a href="https://blog.csdn.net/dotneterbj/article/details/41077309" target="_blank" rel="noopener">HOOK技术浅谈</a></p>
<p>SendInput相關:<br><a href="&quot;http://www.cctry.com/thread-45211-1-1.html&quot;">中文字判斷與傳遞 SendUnicode,SendAscii 都是參考大神ccstd </a><br><a href="&quot;https://hk.saowen.com/a/9e0a750a695576478d158c9dd185fe3e6e42f38fa4a4a0e311b035e7dce6fecd&quot;">SendInput模擬鍵盤輸入的問題</a></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Windows API</tag>
        <tag>虛擬鍵盤</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 如何編寫簡單的壓力測試程式</title>
    <url>/2018/10/25/PythonStressTest/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近有台平板引進，要測試是否適合搭載在機器上，這時候就要測試看看這台平板的能耐拉，就由小新肝我負責編寫一個簡易的程式讓他四核心滿載時時刻刻處於 <strong>CPU 100%</strong> (趨近)的狀況，持續一陣子之後檢測溫度看合不合格</p>
</blockquote>
<h2 id="運作原理"><a href="#運作原理" class="headerlink" title="運作原理"></a>運作原理</h2><ul>
<li>利用四條多進程 <strong>multiprocessing</strong> 寫無窮迴圈讓四顆核心滿載</li>
<li>一開始有嘗試用多執行緒multithreading但是python的先天限制保護得很好，讓CPU只能到3X%不能達到我們理想的趨近100%</li>
</ul>
<h2 id="KillCPU步驟"><a href="#KillCPU步驟" class="headerlink" title="KillCPU步驟"></a>KillCPU步驟</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">looping</span><span class="params">()</span>:</span><span class="comment"># 無窮迴圈</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#這句打包exe一定要有以免memory爆掉</span></span><br><span class="line">    multiprocessing.freeze_support() <span class="comment">#multiprocessing.freeze_support()windows系统上是必须要有這句，因為windows的API不包含fork()</span></span><br><span class="line">    Processes = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Processes = [multiprocessing.Process(target=looping) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">            p.daemon = <span class="keyword">True</span></span><br><span class="line">            p.start()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">            p.join()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">            p.terminate()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"Kill all looping!!"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/QPJwVIY.png" alt title="四顆核心做好做滿!!!"></p>
<h2 id="Python-如何打包程式"><a href="#Python-如何打包程式" class="headerlink" title="Python 如何打包程式"></a>Python 如何打包程式</h2><h3 id="利用pyinstaller就能輕鬆達到打包成exe的效果囉"><a href="#利用pyinstaller就能輕鬆達到打包成exe的效果囉" class="headerlink" title="利用pyinstaller就能輕鬆達到打包成exe的效果囉~"></a>利用pyinstaller就能輕鬆達到打包成exe的效果囉~</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pyinstaller    //CMD安裝pyinstaller</span><br><span class="line"></span><br><span class="line">pyinstaller -F MultiLanguage.py -i teddybear.ico</span><br><span class="line">-F: 打包成一個執行檔</span><br><span class="line">-i: 換圖片</span><br></pre></td></tr></table></figure>
<h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul>
<li>如果是用64位元去編執行檔則只能在64位元上使用</li>
<li>而32位元編譯的執行檔可以在64位元跟32位元下使用</li>
</ul>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>壓力測試</tag>
      </tags>
  </entry>
  <entry>
    <title>兩個獨立執行檔溝通</title>
    <url>/2018/10/24/%E5%85%A9%E7%A8%8B%E5%BC%8F%E9%96%93%E6%BA%9D%E9%80%9A/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>如果兩個已經開發完成的程序間需要溝通合作該怎麼進行呢?<br>例如:程式完成某一階段時如何通知另一個程式接續進行<br>今天讓我們來談談如何使兩個獨立的執行檔進行溝通合作</p>
</blockquote>
<h2 id="運作原理"><a href="#運作原理" class="headerlink" title="運作原理"></a>運作原理</h2><ul>
<li>兩程式間共享某塊記憶體達到溝通效果</li>
</ul>
<h3 id="兩個程式"><a href="#兩個程式" class="headerlink" title="兩個程式"></a>兩個程式</h3><ul>
<li>1.Sender</li>
<li>2.Receiver</li>
</ul>
<h3 id="Sender步驟"><a href="#Sender步驟" class="headerlink" title="Sender步驟"></a>Sender步驟</h3><blockquote>
<ol>
<li>Sender先藉由FindWindow(“視窗名”)取得HWND視窗的控制代碼<ul>
<li>HWND targetWindow = FindWindow( NULL,L”Receiver”);</li>
</ul>
</li>
<li>若取得成功則SendMessage(將目標與內容藉由WM_COPYDATA傳出)<ul>
<li>SendMessage(targetWindow,WM_COPYDATA,0,(LPARAM)(&amp;cd));</li>
</ul>
</li>
<li>在main.cpp中註冊方法讓qml可以調用<ul>
<li>qmlRegisterType<sender>(“sender”, 1, 0, “Sender”);</sender></li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="Receiver步驟"><a href="#Receiver步驟" class="headerlink" title="Receiver步驟"></a>Receiver步驟</h3><blockquote>
<ol>
<li>Receiver繼承QAbstractNativeEventFilter 覆寫虛擬函式<ul>
<li>bool nativeEventFilter(const QByteArray &amp;eventType, void     <em>message, long </em>result);</li>
</ul>
</li>
<li>強制轉型MSG<em> pMsg = reinterpret_cast&lt;MSG</em>&gt;(message);<br>  並判斷事件pMsg-&gt;message == WM_COPYDATA<ul>
<li>COPYDATASTRUCT <em>data = (COPYDATASTRUCT </em>) pMsg-&gt;lParam;     </li>
<li>qDebug()&lt;&lt;(char*)data-&gt;lpData; //可以印出來驗證傳送過來的值正不正確</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="開始實作吧"><a href="#開始實作吧" class="headerlink" title="開始實作吧"></a>開始實作吧</h2><h3 id="使用Windows-Message需先導入"><a href="#使用Windows-Message需先導入" class="headerlink" title="使用Windows Message需先導入"></a>使用Windows Message需先導入</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; </span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"user32.lib"</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winuser.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Sender"><a href="#Sender" class="headerlink" title="Sender"></a>Sender</h3><h4 id="Sender-h"><a href="#Sender-h" class="headerlink" title="Sender.h"></a>Sender.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span> :</span><span class="keyword">public</span> QObject <span class="comment">//有QObject才可以註冊給qml端調用</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sender();</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>; <span class="comment">//有Q_INVOKABLE才可以在qml端調用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> dID = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> pID = <span class="number">6</span>;</span><br><span class="line">    &#125;SendMsg;</span><br><span class="line">    SendMsg msgItem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Sender-cpp"><a href="#Sender-cpp" class="headerlink" title="Sender.cpp"></a>Sender.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"user32.lib"</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winuser.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Sender::Sender()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Sender::send()&#123;</span><br><span class="line">    HWND targetWindow = FindWindow( <span class="literal">NULL</span>,<span class="string">L"Receiver"</span>);</span><br><span class="line">    <span class="keyword">if</span>(targetWindow) &#123;</span><br><span class="line">        COPYDATASTRUCT cd;</span><br><span class="line">        cd.dwData = <span class="number">100</span>;</span><br><span class="line">        cd.cbData = <span class="number">100</span>;<span class="comment">//size;</span></span><br><span class="line">        cd.lpData = (PVOID)<span class="string">"This message is from sender!"</span>;</span><br><span class="line">        SendMessage(targetWindow,WM_COPYDATA,<span class="number">0</span>,(LPARAM)(&amp;cd));</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Find Receiver's window!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Can not find Receiver's window."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Sender-main-cpp"><a href="#Sender-main-cpp" class="headerlink" title="Sender_main.cpp"></a>Sender_main.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    qmlRegisterType&lt;Sender&gt;(<span class="string">"sender"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"Sender"</span>);	<span class="comment">//註冊</span></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line">    <span class="keyword">if</span> (engine.rootObjects().isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Sender-main-qml"><a href="#Sender-main-qml" class="headerlink" title="Sender_main.qml"></a>Sender_main.qml</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> sender <span class="number">1.0</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"Hello World"</span>)</span><br><span class="line">    Sender&#123;</span><br><span class="line">        id:sender</span><br><span class="line">    &#125;</span><br><span class="line">    Button &#123;</span><br><span class="line">        anchors&#123;</span><br><span class="line">            top:parent.top</span><br><span class="line">            left:parent.left</span><br><span class="line">            margins: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">        text:<span class="string">"send Message"</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            sender.send()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h3><h4 id="Receiver-h"><a href="#Receiver-h" class="headerlink" title="Receiver.h"></a>Receiver.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QAbstractNativeEventFilter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_CC_MSVC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;                    //WM_COPYDATA</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"user32.lib"</span>)  <span class="comment">//用於nativeEventFilter</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winuser.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> :</span><span class="keyword">public</span> QObject ,<span class="keyword">public</span> QAbstractNativeEventFilter <span class="comment">//繼承QAbstractNativeEventFilter偵測Windows事件</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Receiver();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">nativeEventFilter</span><span class="params">(<span class="keyword">const</span> QByteArray &amp;eventType, <span class="keyword">void</span> *message, <span class="keyword">long</span> *result)</span></span>;  <span class="comment">//虛擬函式覆寫   </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Receiver-cpp"><a href="#Receiver-cpp" class="headerlink" title="Receiver.cpp"></a>Receiver.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">Receiver::Receiver()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Receiver::nativeEventFilter(<span class="keyword">const</span> QByteArray &amp;eventType, <span class="keyword">void</span> *message, <span class="keyword">long</span> *result) &#123; <span class="comment">//收到別進程傳來事件</span></span><br><span class="line">    <span class="keyword">if</span>(eventType == <span class="string">"windows_generic_MSG"</span> || eventType == <span class="string">"windows_dispatcher_MSG"</span>) &#123;</span><br><span class="line">        MSG* pMsg = <span class="keyword">reinterpret_cast</span>&lt;MSG*&gt;(message);</span><br><span class="line">        <span class="keyword">if</span>(pMsg-&gt;message == WM_COPYDATA) &#123; <span class="comment">//收到WM_COPYDATA傳來的資料</span></span><br><span class="line">            COPYDATASTRUCT *data = (COPYDATASTRUCT *) pMsg-&gt;lParam;</span><br><span class="line">            qDebug()&lt;&lt;(<span class="keyword">char</span>*)data-&gt;lpData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Receiver-main-cpp"><a href="#Receiver-main-cpp" class="headerlink" title="Receiver_main.cpp"></a>Receiver_main.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    Receiver r;</span><br><span class="line">    app.installNativeEventFilter(&amp;r);  <span class="comment">//註冊篩選器</span></span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line">    <span class="keyword">if</span> (engine.rootObjects().isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Receiver-main-qml"><a href="#Receiver-main-qml" class="headerlink" title="Receiver_main.qml"></a>Receiver_main.qml</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"Receiver"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h4><p>先開啟Receiver再執行Sender使其能夠偵測到並傳值</p>
<p><img src="https://i.imgur.com/mZndIjJ.png" alt="Sender" title="開啟Receiver後再開啟Sender發送"></p>
<p><img src="https://i.imgur.com/J2psHRQ.png" alt title="Sender成功找到Receiver的window"></p>
<p><img src="https://i.imgur.com/7bBTler.png" alt title="Receiver成功接收到Sender傳來的值!"></p>
]]></content>
      <categories>
        <category>Windows API</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
        <tag>程式間溝通</tag>
        <tag>Windows API</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 換頁機制</title>
    <url>/2018/10/24/Qt%E6%8F%9B%E9%A0%81%E6%A9%9F%E5%88%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="How-to-use-“ldMain”-inside-whole-project"><a href="#How-to-use-“ldMain”-inside-whole-project" class="headerlink" title="How to use “ldMain” inside whole project?"></a>How to use “ldMain” inside whole project?</h3><p>一個qml loader負責Qt全專案的頁面切換，之前都是以<a href="http://doc.qt.io/qt-5/qml-qtquick-loader.html" target="_blank" rel="noopener">loader</a>方式去編寫，這種方式很簡單只要用 loaderId.source:”目的地” 即可已達成換頁<br>例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    Loader &#123; <span class="attr">id</span>: pageLoader &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: pageLoader.source = <span class="string">"Page1.qml"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是這樣的編寫不能在全專案中被識別，在團隊開發中會出現未識別的參數並不是很好的方式</p>
<h3 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h3><p>透過C++設定loader達成全專案中可被識別</p>
<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><ul>
<li>透過C++中設定QQmlApplicationEngine</li>
<li>透過新設定的Engine達到切頁效果</li>
<li>需寫個CLASS繼承QQmlApplicationEngine取得qml端的loader並賦予全專案皆可用的名稱通常取名為ViewChanger</li>
</ul>
<h2 id="開始實作"><a href="#開始實作" class="headerlink" title="開始實作"></a>開始實作</h2><h3 id="Qml端寫loader並給objectName"><a href="#Qml端寫loader並給objectName" class="headerlink" title="Qml端寫loader並給objectName"></a>Qml端寫loader並給objectName</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Loader &#123; </span><br><span class="line">    width: <span class="number">640</span> </span><br><span class="line">    height: <span class="number">480</span> </span><br><span class="line">    objectName: <span class="string">"viewChanger"</span>  <span class="comment">//objectName可以在c++端取得的ID </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="編寫ViewChanger-Class"><a href="#編寫ViewChanger-Class" class="headerlink" title="編寫ViewChanger Class"></a>編寫ViewChanger Class</h3><h3 id="h宣告"><a href="#h宣告" class="headerlink" title="h宣告"></a>h宣告</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;                  //base element</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;    //include Engine for ViewChanger Page</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewChanger</span> :</span> <span class="keyword">public</span> QQmlApplicationEngine</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ViewChanger();</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onObjectCreated</span><span class="params">(QObject *object, <span class="keyword">const</span> QUrl &amp;url)</span></span>;</span><br><span class="line">    <span class="comment">//objectCreated是QQmlApplicationEngine內部singal函式</span></span><br><span class="line">    <span class="comment">//設立一個onObjectCreated的slot去接收此signal發出之信號</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="cpp定義"><a href="#cpp定義" class="headerlink" title="cpp定義"></a>cpp定義</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"viewchanger.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt;  //rootContext</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line">ViewChanger::ViewChanger()</span><br><span class="line">&#123;</span><br><span class="line">    connect(<span class="keyword">this</span>,SIGNAL(objectCreated(QObject*,QUrl)),<span class="keyword">this</span>,SLOT(onObjectCreated(QObject*,QUrl)));</span><br><span class="line">    <span class="comment">//connent signal to slot for getting QObject* and QUrl.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ViewChanger::onObjectCreated(QObject *object, <span class="keyword">const</span> QUrl &amp;url)&#123;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"object:"</span>&lt;&lt;object&lt;&lt;<span class="string">" ,url:"</span>&lt;&lt;url;</span><br><span class="line">    QQuickItem *window = (QQuickItem *)object;</span><br><span class="line">    qDebug()&lt;&lt;window-&gt;findChild&lt;QQuickItem *&gt;(<span class="string">"viewChanger"</span>);<span class="comment">//use QQuickItem method findchild to find qml objectname.</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;rootContext()-&gt;setContextProperty(<span class="string">"viewChanger"</span>,window-&gt;findChild&lt;QQuickItem *&gt;(<span class="string">"viewChanger"</span>));</span><br><span class="line">    <span class="comment">//將qml中的objectname:viewChanger物件,轉換為viewChanger全域皆可使用的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用編寫好的新Engine"><a href="#使用編寫好的新Engine" class="headerlink" title="使用編寫好的新Engine"></a>使用編寫好的新Engine</h3><h3 id="Main-cpp"><a href="#Main-cpp" class="headerlink" title="Main.cpp"></a>Main.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt; //QQmlContext::setContextProperty()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"viewchanger.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);</span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    ViewChanger engine; <span class="comment">//QQmlApplicationEngine change to "ViewChanger" new Engine.</span></span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line">    <span class="keyword">if</span> (engine.rootObjects().isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="調用ViewChanger"><a href="#調用ViewChanger" class="headerlink" title="調用ViewChanger"></a>調用ViewChanger</h3><h3 id="main-qml-qml檔案命名除了main-qml開頭為小寫，其他qml檔名開頭需大寫"><a href="#main-qml-qml檔案命名除了main-qml開頭為小寫，其他qml檔名開頭需大寫" class="headerlink" title="main.qml (qml檔案命名除了main.qml開頭為小寫，其他qml檔名開頭需大寫)"></a>main.qml (qml檔案命名除了main.qml開頭為小寫，其他qml檔名開頭需大寫)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"Hello World"</span>)</span><br><span class="line">    Loader &#123;</span><br><span class="line">        width: <span class="number">640</span></span><br><span class="line">        height: <span class="number">480</span></span><br><span class="line">        objectName: <span class="string">"viewChanger"</span>   <span class="comment">//objectName可以在c++端取得的ID</span></span><br><span class="line">    &#125;</span><br><span class="line">    Button &#123;</span><br><span class="line">        property bool toggled:<span class="literal">false</span></span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        anchors.bottom: parent.bottom</span><br><span class="line">        width: <span class="number">200</span>; height: <span class="number">200</span>;</span><br><span class="line">        text:<span class="string">"Clicked to switch page"</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            viewChanger.source = toggled?<span class="string">"qrc:/Red.qml"</span>:<span class="string">"qrc:/Yellow.qml"</span>   <span class="comment">//用c++端的Engine來做頁面切換</span></span><br><span class="line">            toggled = !toggled</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完成-來欣賞我們的成果吧"><a href="#完成-來欣賞我們的成果吧" class="headerlink" title="完成! 來欣賞我們的成果吧"></a>完成! 來欣賞我們的成果吧</h3><p><img src="https://i.imgur.com/wE4Cmmg.png" alt="Yellow.qml" title="Yellow.qml"></p>
<p><img src="https://i.imgur.com/JhFLJ8S.png" alt="Red.qml" title="Red.qml"></p>
<h3 id="順帶一提setSource特性"><a href="#順帶一提setSource特性" class="headerlink" title="順帶一提setSource特性"></a>順帶一提setSource特性</h3><ul>
<li>setSource傳給某頁參數</li>
<li>setSource(“abc.qml”,{“searchText”:textfield.text})</li>
</ul>
<p>abc.qml</p>
<ul>
<li>property searchText<ul>
<li>傳參數過來後接下來任何頁面的searchText值皆為textfield.text</li>
</ul>
</li>
<li>除非在別頁重新賦值或給予空值<ul>
<li>setSource(“abc.qml”,{})</li>
</ul>
</li>
</ul>
<h3 id="會使用換頁機制後當個穿梭自如的人，開始享受專案製作"><a href="#會使用換頁機制後當個穿梭自如的人，開始享受專案製作" class="headerlink" title="會使用換頁機制後當個穿梭自如的人，開始享受專案製作~"></a>會使用換頁機制後當個穿梭自如的人，開始享受專案製作~</h3>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>換頁機制</tag>
      </tags>
  </entry>
  <entry>
    <title>QEvent攔截事件</title>
    <url>/2018/10/24/C-%E7%9B%A3%E8%81%BDQEvent%E4%B8%A6%E5%B0%87%E4%BA%8B%E4%BB%B6%E9%87%8D%E5%AF%AB/</url>
    <content><![CDATA[<blockquote>
<p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p>
</blockquote>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>可以將既有的事件行為覆寫<br>此篇紀錄關閉事件攔截，在點擊X離開程式的時候不動作或觸發新行為</p>
<h3 id="事件過濾器eventFilter"><a href="#事件過濾器eventFilter" class="headerlink" title="事件過濾器eventFilter"></a>事件過濾器eventFilter</h3><figure class="highlight qt"><table><tr><td class="code"><pre><span class="line">virtual <span class="built_in">bool</span> eventFilter(QObject *object, QEvent *event)</span><br></pre></td></tr></table></figure>
<p>事件會由此經過，而我們可以在這將有興趣的事件攔下並覆寫</p>
<h3 id="事件種類"><a href="#事件種類" class="headerlink" title="事件種類"></a>事件種類</h3><p>可以參考<a href="http://doc.qt.io/qt-5/qevent.html" target="_blank" rel="noopener">官方文件</a>針對有興趣的事件讓我們開始訂製新的行為吧!</p>
<h3 id="h宣告"><a href="#h宣告" class="headerlink" title=".h宣告"></a>.h宣告</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QEvent&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlView</span>:</span><span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ControlView();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *object, QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="cpp定義"><a href="#cpp定義" class="headerlink" title=".cpp定義"></a>.cpp定義</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"controlview.h"</span></span></span><br><span class="line"></span><br><span class="line">ControlView::ControlView()</span><br><span class="line">&#123;</span><br><span class="line">    qApp-&gt;installEventFilter(<span class="keyword">this</span>);             <span class="comment">//一定要註冊事件過濾器 就像吃中藥一定要配溫開水一樣重要</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ControlView::eventFilter(QObject *object, QEvent *event) &#123;</span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::Close)&#123;         <span class="comment">//偵測到關閉事件</span></span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"emit closed()"</span>;</span><br><span class="line">        <span class="function">emit <span class="title">closed</span><span class="params">()</span></span>;                          <span class="comment">//對qml發出關閉信號 則qml可在關閉時進行新的動作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QObject::eventFilter(object, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
        <tag>QEvent</tag>
        <tag>事件重寫</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 單例模式(Singleton)</title>
    <url>/2018/10/23/C-%E5%96%AE%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p>
</blockquote>
<h3 id="單例模式"><a href="#單例模式" class="headerlink" title="單例模式"></a>單例模式</h3><ul>
<li>保證一個class只有一個實體(Instance)</li>
<li>在宣告的同時直接new這個類別的實例(instance)，並且將建構子宣告為private， 這樣其他程式就無法再new這個類別的實例，保證這個類別只存在一個實例</li>
<li>優點<ul>
<li>單例實作了它的唯一實例,便於團隊共享與開發</li>
<li>在系統中僅存在一個對象,因此可以節省系統資源,對於頻繁創建與銷毀對象,單例可以提高系統性能</li>
</ul>
</li>
<li>風險<ul>
<li>單例模式在多執行緒的應用下必須小心使用。如果當唯一實例尚未創建時，有兩個執行緒同時調用創建方法，那麼它們同時沒有檢測到唯一實例的存在，從而同時各自創建了一個實例，這樣就有兩個實例被構造出來，從而違反了單例模式中唯一實例的原則。</li>
<li>解決方案: 可以透過第一時間建立實例或是運用雙重檢查上鎖</li>
</ul>
</li>
<li>會將何者設為單例呢?<ul>
<li>通常會將Model(管理與儲存資料)的類別設為單例，可以確保資料的一致性也能方便供其他程式使用。</li>
</ul>
</li>
</ul>
<h2 id="用法一"><a href="#用法一" class="headerlink" title="用法一"></a>用法一</h2><h3 id="h宣告"><a href="#h宣告" class="headerlink" title=".h宣告"></a>.h宣告</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">&#123; </span><br><span class="line">	Q_OBJECT </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">	<span class="function"><span class="keyword">static</span> Singleton* <span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;inst; &#125;</span><br><span class="line">	Singleton();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">startCamera</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">	<span class="keyword">static</span> Singleton inst;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="cpp定義"><a href="#cpp定義" class="headerlink" title=".cpp定義"></a>.cpp定義</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Singleton Singleton::inst; </span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Singleton::startCamera() &#123; </span><br><span class="line">	<span class="keyword">bool</span> CameraStartResult = CameraStart(cameraDevice); </span><br><span class="line">	isStarted = <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="調用單例"><a href="#調用單例" class="headerlink" title="調用單例"></a>調用單例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> VideoPanel::startCamera() &#123; </span><br><span class="line">	Singleton::Inst()-&gt;startCamera(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用法二"><a href="#用法二" class="headerlink" title="用法二"></a>用法二</h2><h3 id="h宣告-1"><a href="#h宣告-1" class="headerlink" title=".h宣告"></a>.h宣告</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	TCHAR *m_strUserName;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> Singleton* <span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">TCHAR <span class="title">GetUserName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="cpp定義-1"><a href="#cpp定義-1" class="headerlink" title=".cpp定義"></a>.cpp定義</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Singleton* Singleton::GetInstance()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">static</span> Singleton *Inst;</span><br><span class="line">	<span class="keyword">return</span> Inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="調用單例-1"><a href="#調用單例-1" class="headerlink" title="調用單例"></a>調用單例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CString strMemberName = (Singleton::GetInstance())-&gt;GetUserName();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>單例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>共享資料夾</title>
    <url>/2018/10/23/%E5%85%B1%E4%BA%AB%E8%B3%87%E6%96%99%E5%A4%BE/</url>
    <content><![CDATA[<blockquote>
<p>本篇環境使用版本:<br>Windows 10</p>
</blockquote>
<h3 id="目標-讓兩台電腦可以對同個資料夾做存取操作"><a href="#目標-讓兩台電腦可以對同個資料夾做存取操作" class="headerlink" title="目標: 讓兩台電腦可以對同個資料夾做存取操作"></a>目標: 讓兩台電腦可以對同個資料夾做存取操作</h3><h3 id="進入同個網域"><a href="#進入同個網域" class="headerlink" title="進入同個網域"></a>進入同個網域</h3><ul>
<li>將兩台電腦接連手機網路或是同個hub接出來的網路線</li>
</ul>
<h3 id="步驟一"><a href="#步驟一" class="headerlink" title="步驟一"></a>步驟一</h3><ul>
<li>至控制台調整共用設定<br>  *主要開啟網路探索<br><img src="https://i.imgur.com/fEPoLOD.png" alt></li>
</ul>
<h3 id="步驟二"><a href="#步驟二" class="headerlink" title="步驟二"></a>步驟二</h3><ul>
<li>共享資料夾<br><img src="https://i.imgur.com/R1htm5w.png" alt title="點選資料夾右鍵 &gt; 內容"><br><img src="https://i.imgur.com/MPg9e5n.png" alt title="共用"></li>
</ul>
<h3 id="步驟三"><a href="#步驟三" class="headerlink" title="步驟三"></a>步驟三</h3><ul>
<li>設定共享人員(新增everyone)<ul>
<li>調整使用權限(讀取/寫入)<br><img src="https://i.imgur.com/JSLFv0Q.png" alt></li>
</ul>
</li>
</ul>
<h3 id="步驟四"><a href="#步驟四" class="headerlink" title="步驟四"></a>步驟四</h3><ul>
<li>另一台電腦就可以從網路新增新的網路位置取得共用資料夾囉<ul>
<li>我的電腦 &gt; 網路<br>若分享成功，此處可以看到共享資料夾</li>
</ul>
</li>
</ul>
<h3 id="完成-透過以上四步驟就可以讓兩台電腦對同個資料夾做存取操作"><a href="#完成-透過以上四步驟就可以讓兩台電腦對同個資料夾做存取操作" class="headerlink" title="完成! 透過以上四步驟就可以讓兩台電腦對同個資料夾做存取操作"></a>完成! 透過以上四步驟就可以讓兩台電腦對同個資料夾做存取操作</h3>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>環境架設</tag>
        <tag>共享資料夾</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 一句指令提升至系統管理員權限</title>
    <url>/2018/10/22/Qt-%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E7%B3%BB%E7%B5%B1%E7%AE%A1%E7%90%86%E5%93%A1%E6%AC%8A%E9%99%90/</url>
    <content><![CDATA[<blockquote>
<p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>有些程序需要管理員權限User Account Control(UAC)</li>
<li>例如:要<strong>更改系統時間</strong>或是做一些需要權限存取的行為，若是沒有使用MANIFESTUAC則會以為程式沒有動作，其實是權限不夠。</li>
<li>提升系統管理員權限有幾種方法，此篇紀錄的是我覺得最簡單最快速的方式</li>
</ul>
<h3 id="目標-執行檔獲得小盾牌"><a href="#目標-執行檔獲得小盾牌" class="headerlink" title="目標: 執行檔獲得小盾牌"></a>目標: 執行檔獲得<code>小盾牌</code></h3><p><img src="https://i.imgur.com/tIPIiNK.png" alt title="UAC"></p>
<h3 id="QMAKE-LFLAGS設置UAC權限"><a href="#QMAKE-LFLAGS設置UAC權限" class="headerlink" title="QMAKE_LFLAGS設置UAC權限"></a>QMAKE_LFLAGS設置UAC權限</h3><p>在pro檔中加入下面指令<br><figure class="highlight qt"><table><tr><td class="code"><pre><span class="line">QMAKE_LFLAGS+=<span class="regexp">/MANIFESTUAC:\"level=\'requireAdministrator\' uiAccess=\'false\'\"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Qt-Creator重新rebuild"><a href="#Qt-Creator重新rebuild" class="headerlink" title="Qt Creator重新rebuild"></a>Qt Creator重新rebuild</h3><p>若還是沒產出<strong>有盾牌</strong>的exe則刪掉執行檔再rebuild一次<br>這樣就可以產出有小盾牌的執行檔囉!</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>UAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Canvas畫圖</title>
    <url>/2018/10/22/Qt-Canvas%E7%95%AB%E5%9C%96/</url>
    <content><![CDATA[<blockquote>
<p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p>
</blockquote>
<h3 id="目標-藉由前景qml部分完成畫圖"><a href="#目標-藉由前景qml部分完成畫圖" class="headerlink" title="目標: 藉由前景qml部分完成畫圖"></a>目標: 藉由前景qml部分完成畫圖</h3><h3 id="前景與背景的差異"><a href="#前景與背景的差異" class="headerlink" title="前景與背景的差異"></a>前景與背景的差異</h3><ul>
<li>前景: 從qml或是c++透過函式呼叫完成繪圖</li>
<li>背景: 藉由記憶體操作buffer,指定pixel顏色繪圖</li>
</ul>
<h3 id="qml前景繪圖-canvas-設定與宣告"><a href="#qml前景繪圖-canvas-設定與宣告" class="headerlink" title="qml前景繪圖:canvas (設定與宣告)"></a>qml前景繪圖:canvas (設定與宣告)</h3><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="title">Canvas</span> &#123; </span><br><span class="line">    <span class="attribute">id:</span><span class="string">canvas</span> </span><br><span class="line">    <span class="attribute">x</span>:<span class="number">0</span> </span><br><span class="line">    <span class="attribute">y</span>:<span class="number">0</span> </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span> </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span> </span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">onPaint</span>:&#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="comment">//由此開始對ctx操作</span></span><br><span class="line">        <span class="comment">//ex: ctx.arc(320,240,5,0,Math.PI*2); </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="設定畫筆"><a href="#設定畫筆" class="headerlink" title="設定畫筆"></a>設定畫筆</h3><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">ctx.strokeStyle = Qt.rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//顏色與透明度(0~1)</span></span><br><span class="line">ctx.lineWidth = <span class="number">1</span>                        <span class="comment">//畫筆粗細</span></span><br></pre></td></tr></table></figure>
<h3 id="畫圓"><a href="#畫圓" class="headerlink" title="畫圓"></a>畫圓</h3><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">ctx.arc(<span class="number">320</span>,<span class="number">240</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>); <span class="comment">//ctx.arc(x座標,y座標,半徑,起始角度,結束角度)</span></span><br><span class="line">ctx.stroke();                   <span class="comment">//畫圖</span></span><br><span class="line">ctx.fillStyle=‘green<span class="string">'           //設定填充的顏色(預設為不透明黑)</span></span><br><span class="line"><span class="string">ctx.fill();                     //將中間填充顏色</span></span><br></pre></td></tr></table></figure>
<h3 id="畫矩形"><a href="#畫矩形" class="headerlink" title="畫矩形"></a>畫矩形</h3><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">ctx.fillRect(x,y,width,height) <span class="comment">//(x,y)為左上角的點再指定寬高,完成填充矩形</span></span><br></pre></td></tr></table></figure>
<h3 id="畫正方形"><a href="#畫正方形" class="headerlink" title="畫正方形"></a>畫正方形</h3><p>Offset可以對圖形做位移操作<br><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); ctx.moveTo(<span class="number">240</span>,<span class="number">160</span> + yOffset) </span><br><span class="line">ctx.lineTo(<span class="number">400</span>,<span class="number">160</span> + yOffset) </span><br><span class="line">ctx.lineTo(<span class="number">400</span>,<span class="number">320</span> + yOffset) </span><br><span class="line">ctx.lineTo(<span class="number">240</span>,<span class="number">320</span> + yOffset) </span><br><span class="line">ctx.lineTo(<span class="number">240</span>,<span class="number">160</span> + yOffset) </span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure></p>
<p><img src="https://i.imgur.com/JbFnig2.png" alt title="正方形"></p>
<h3 id="畫線"><a href="#畫線" class="headerlink" title="畫線"></a>畫線</h3><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">ctx.beginPath()     <span class="comment">//開始設定路徑</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">240</span>)   <span class="comment">//提起畫筆的動作並移動到(0,240)位置</span></span><br><span class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">240</span>) <span class="comment">//沒有提起畫筆從上一步位置畫線畫至(640,240)位置</span></span><br><span class="line">ctx.stroke()        <span class="comment">//畫圖</span></span><br></pre></td></tr></table></figure>
<h3 id="畫正圓弧"><a href="#畫正圓弧" class="headerlink" title="畫正圓弧"></a>畫正圓弧</h3><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">ctx.moveTo(x0, y0)            <span class="comment">//移至 (x0, y0)</span></span><br><span class="line">ctx.arcTo(x1,y1,x2,y2,radius) <span class="comment">//arcto(第一點x,第一點y,第二點x,第二點y,圓弧半徑)(x0,y0),(x1,y1),(x2,y2)組成夾角半徑為radius圓與該夾角相切得到一個圓弧</span></span><br><span class="line">	                      <span class="comment">//半徑算法: sqrt(pow(x0-x1)+pow(y0-y1))</span></span><br><span class="line">ctx.strock();                 <span class="comment">//畫圖</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ex</span>:</span><br><span class="line">ctx.moveTo(<span class="number">360</span> + xOffset,<span class="number">200</span> + yOffset)</span><br><span class="line">ctx.arcTo(<span class="number">400</span> + xOffset,<span class="number">240</span> + yOffset,<span class="number">360</span> + xOffset,<span class="number">280</span> + yOffset,<span class="number">56</span>)</span><br><span class="line"><span class="comment">//ctx.bezierCurveTo(360,200,382,240,360,280);</span></span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/dXpJQnx.png" alt title="圓弧"></p>
<h3 id="特殊圖形-貝塞爾曲線"><a href="#特殊圖形-貝塞爾曲線" class="headerlink" title="特殊圖形(貝塞爾曲線)"></a>特殊圖形(貝塞爾曲線)</h3><p><code>此方法可達到曲線效果</code><br><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">ctx.beginPath()</span><br><span class="line">	<span class="comment">//開始設定路徑</span></span><br><span class="line">ctx.moveTo(<span class="number">225</span>,<span class="number">234</span>) </span><br><span class="line">	<span class="comment">//移動至此位置</span></span><br><span class="line">ctx.bezierCurveTo(<span class="number">225</span>,<span class="number">234</span>,<span class="number">220</span>,<span class="number">240</span>,<span class="number">225</span>,<span class="number">246</span>);</span><br><span class="line">	<span class="comment">//bezierCurveTo(起始點x,起始點y,中途經歷點x,中途經歷點y,終點x,終點y)</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://i.imgur.com/cfEBqke.png" alt title="利用以上方式達成各種圖形繪製"></p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">240</span>)   <span class="comment">//有將畫筆提起</span></span><br><span class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">240</span>) <span class="comment">//沒有將畫筆提起</span></span><br><span class="line">ctx.closePath();    <span class="comment">//閉合路徑,填掉缺口如果畫的線沒有閉合,自動補上一條直線從終點至上一個moveto的點</span></span><br></pre></td></tr></table></figure>
<h3 id="刷新畫布"><a href="#刷新畫布" class="headerlink" title="刷新畫布"></a>刷新畫布</h3><p>需要使用到類似video的呈現或是位移時可以運用下列方法達成<br><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); </span><br><span class="line">ctx.reset();		    <span class="comment">//清空</span></span><br><span class="line">canvas.requestPaint();	    <span class="comment">//重畫 類似update()</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>Canvas畫圖</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 安裝與Hello World!</title>
    <url>/2018/10/22/Qt-Setup/</url>
    <content><![CDATA[<blockquote>
<p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p>
</blockquote>
<h3 id="安裝QT-5-10-1"><a href="#安裝QT-5-10-1" class="headerlink" title="安裝QT 5.10.1"></a>安裝QT 5.10.1</h3><p><img src="https://i.imgur.com/ZqjmWch.png" alt title="選擇MSVC 2015"><br><img src="https://i.imgur.com/N9wjZ07.png" alt title="安裝Qt相關插件"></p>
<h3 id="安裝Visual-Studio-2015-選擇程式工具-c"><a href="#安裝Visual-Studio-2015-選擇程式工具-c" class="headerlink" title="安裝Visual Studio 2015 選擇程式工具(c++)"></a>安裝Visual Studio 2015 選擇程式工具(c++)</h3><p><img src="https://i.imgur.com/bUYt6gp.png" alt title="勾選整個Visual C++"></p>
<h3 id="安裝windows-10-SDK"><a href="#安裝windows-10-SDK" class="headerlink" title="安裝windows 10 SDK"></a>安裝windows 10 SDK</h3><blockquote>
<p>注意標題Windows後面數字<br>此處為10.0.17763.1<br>稍後若是編譯有問題可從此處找尋rc.exe檔案修正</p>
</blockquote>
<p><img src="https://i.imgur.com/YfNl8vV.png" alt title="install windows 10 SDK"></p>
<h3 id="開啟Qt-Creator"><a href="#開啟Qt-Creator" class="headerlink" title="開啟Qt Creator"></a>開啟Qt Creator</h3><h2 id="安裝完windows-10-SDK後"><a href="#安裝完windows-10-SDK後" class="headerlink" title="安裝完windows 10 SDK後 "></a><code>安裝完windows 10 SDK後</code> </h2><blockquote>
<p>projects &gt; Kits &gt; cdb會自動偵測</p>
</blockquote>
<p>手動選擇compiler</p>
<blockquote>
<p>projects &gt; Kits &gt; MSVC 2015 32bit<br>C: amd64_X86<br>C++: amd64_X86<br>Debugger: X86\cdb.exe</p>
</blockquote>
<p><img src="https://i.imgur.com/yOfjYd4.png" alt title="MSVC 2015 32bit"></p>
<pre><code>&gt; projects &gt; Kits &gt; MSVC 2015 64bit
C: X86_amd64
C++: X86_amd64
Debugger: X64\cdb.exe
</code></pre><p><img src="https://i.imgur.com/bb1DL1S.png" alt title="MSVC 2015 64bit"></p>
<h3 id="若是發生link-error-Qt-lnk1158-無法運行-rc-exe"><a href="#若是發生link-error-Qt-lnk1158-無法運行-rc-exe" class="headerlink" title="若是發生link error(Qt lnk1158 無法運行 rc.exe)"></a>若是發生link error(Qt lnk1158 無法運行 rc.exe)</h3><blockquote>
<p>將C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86裡的 <strong>rc.exe</strong> 和 <strong>rcdll.dll</strong><br>兩個檔案複製到<br>C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin</p>
</blockquote>
<p><img src="https://i.imgur.com/FQIECrG.png" alt title="C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86"></p>
<p><img src="https://i.imgur.com/5NTSrAC.png" alt title="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin"></p>
<h3 id="大功告成-開始Qt的世界"><a href="#大功告成-開始Qt的世界" class="headerlink" title="大功告成! 開始Qt的世界"></a>大功告成! 開始Qt的世界</h3><p><img src="https://i.imgur.com/5JI3lfV.png" alt title="Hello World!"></p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>環境架設</tag>
      </tags>
  </entry>
</search>
