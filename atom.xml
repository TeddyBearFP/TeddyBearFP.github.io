<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泰迪熊的程式足跡</title>
  
  <subtitle>遊走程式森林的泰迪熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teddybearfp.github.io/"/>
  <updated>2018-10-26T05:21:22.894Z</updated>
  <id>https://teddybearfp.github.io/</id>
  
  <author>
    <name>G.C.L.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt 如何製作Windows多國輸入法的虛擬鍵盤</title>
    <link href="https://teddybearfp.github.io/2018/10/26/Qt-Virtual-Keyboard/"/>
    <id>https://teddybearfp.github.io/2018/10/26/Qt-Virtual-Keyboard/</id>
    <published>2018-10-26T02:05:16.000Z</published>
    <updated>2018-10-26T05:21:22.894Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/hTjY0wM.png" alt="泰迪熊的Qt小鍵盤" title="泰迪熊的Qt小鍵盤"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>運用GPL的Qt小鍵盤，進階使其可以像Windows On-Screen Keyboard對任何程式進行輸入，並且有多國輸入法的特性，把鍵盤與程式分離有個好處就是鍵盤比較彈性也比較萬用</p></blockquote><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><blockquote><p>藉由Qt寫好的虛擬鍵盤加以改造成將輸入傳送給系統，在app端中埋一個看不到的EditField在默默輔助，因為是偵測EditField長度變化，所以必須透過些許方式將特殊情況無法掌握的按鍵，例如:BackSpace退格、Enter輸入</p></blockquote><h2 id="整體流程"><a href="#整體流程" class="headerlink" title="整體流程"></a>整體流程</h2><ul><li>首先搭載Qt Virtual Keyboard並使其擁有多國輸入法</li><li>設置hook攔截事件</li><li>再取得當前視窗的 <strong>Window handle</strong></li><li>取得後利用Windows的 <strong>SendInput</strong></li><li>釋放hook</li></ul><h2 id="Qt-Virtual-Keyboard搭載"><a href="#Qt-Virtual-Keyboard搭載" class="headerlink" title="Qt Virtual Keyboard搭載"></a>Qt Virtual Keyboard搭載</h2><h3 id="安裝qt-virtual-keyboard套件"><a href="#安裝qt-virtual-keyboard套件" class="headerlink" title="安裝qt virtual keyboard套件"></a>安裝qt virtual keyboard套件</h3><p><strong>請先確認Qt是否有安裝Qt Virtual Keyboard套件</strong><br>沒安裝的話至Qt的MaintenanceTool.exe新增</p><blockquote><p>安裝完套件後在pro檔中加入</p></blockquote><pre><code>QT_IM_MODULE=qtvirtualkeyboard myapp</code></pre><blockquote><p>並在main.cpp中加入,要加在<strong>QGuiApplication app(argc, argv);</strong> 之前</p></blockquote><pre><code>qputenv(&quot;QT_IM_MODULE&quot;, QByteArray(&quot;qtvirtualkeyboard&quot;));</code></pre><p>main.qml<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.VirtualKeyboard <span class="number">2.3</span></span><br><span class="line">Window &#123;</span><br><span class="line">    id:root</span><br><span class="line">    title: qsTr(<span class="string">"Virtual Keyboard"</span>)</span><br><span class="line">    x:Screen.width/<span class="number">2</span> - <span class="number">320</span></span><br><span class="line">    y:Screen.desktopAvailableHeight<span class="number">-300</span></span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">220</span></span><br><span class="line">    Rectangle &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        color: <span class="string">"black"</span></span><br><span class="line">    &#125;</span><br><span class="line">    TextField &#123;</span><br><span class="line">        id:key</span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        focus: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    InputPanel &#123;</span><br><span class="line">        <span class="comment">//虛擬鍵盤</span></span><br><span class="line">        id: vkb</span><br><span class="line">        visible: <span class="literal">true</span></span><br><span class="line">        active: <span class="literal">true</span></span><br><span class="line">        anchors.fill:parent</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="注意-尚未完成"><a href="#注意-尚未完成" class="headerlink" title="注意 尚未完成"></a>注意 尚未完成</h4><blockquote><p>完成上述步驟(此時只有<strong>預設的英文</strong>)</p></blockquote><h3 id="編寫虛擬鍵盤增加多國輸入法"><a href="#編寫虛擬鍵盤增加多國輸入法" class="headerlink" title="編寫虛擬鍵盤增加多國輸入法"></a>編寫虛擬鍵盤增加多國輸入法</h3><p>有了鍵盤後要加入各國語言 <strong>lang-all</strong></p><ul><li>下載<a href="&quot;http://download.qt.io/official_releases/qt/5.10/5.10.1/single/qt-everywhere-src-5.10.1.zip&quot;">Qt 5.10.1 source.zip</a></li><li>解壓縮並將<strong>qtvirtualkeyboard</strong>資料夾放置桌面</li><li><p>用<strong>Qt的cmd(Qt 5.10.1 32-bit for desktop)</strong> 切換到qtvirtualkeyboard目錄層(C:\Users\Administrator\Desktop\qtvirtualkeyboard)輸入下面指令加入各國輸入法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake CONFIG+=&quot;lang-all&quot;</span><br></pre></td></tr></table></figure></li><li><p>接著我們開啟VC的命令提示字元(<strong>VC2015 x86 Native Tools Command Prompt</strong>)<br>輸入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake</span><br></pre></td></tr></table></figure></li><li><p>完成後再輸入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake install</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意-cl-exe問題"><a href="#注意-cl-exe問題" class="headerlink" title="注意 cl.exe問題"></a>注意 cl.exe問題</h4><blockquote><p>到這一步基本上是完成了，但是我的環境找不到<strong>cl.exe</strong>此時搜尋<strong>cl.exe</strong>並將所在位置新增至path環境路徑中</p></blockquote><p>打開剛剛編寫的Virtual Keyboard會發現多個小地球可以選擇多國輸入法囉 ~<br><img src="https://i.imgur.com/r6ORder.png" alt="泰迪熊的Qt小鍵盤" title="語言可以選擇"></p><h3 id="Qt-Virtual-Keyboard"><a href="#Qt-Virtual-Keyboard" class="headerlink" title="Qt Virtual Keyboard"></a>Qt Virtual Keyboard</h3><blockquote><p>此時你的鍵盤已經可以在app當中使用並且可以輸入各國輸入法但是如何跟Windows On-Screen Keyboard一樣在各個視窗中任意編輯呢??</p><p>讓我們繼續看下去…</p></blockquote><h2 id="設置hook攔截事件"><a href="#設置hook攔截事件" class="headerlink" title="設置hook攔截事件"></a>設置hook攔截事件</h2><h3 id="hook設定"><a href="#hook設定" class="headerlink" title="hook設定"></a>hook設定</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> VirtualKeyboard::setHook() &#123;</span><br><span class="line">    HINSTANCE hinst = GetModuleHandle( <span class="literal">NULL</span> );</span><br><span class="line">    <span class="comment">//if (!(_hook = SetWindowsHookEx(WH_CBT ,CBTProc, hinst, GetCurrentThreadId()))) &#123; //視窗激活事件、設置Focus事件...攔截事件</span></span><br><span class="line">    <span class="comment">//設置mouse事件</span></span><br><span class="line">    <span class="keyword">if</span> (!(_hook = SetWindowsHookEx(WH_MOUSE_LL ,HookCallback, hinst, <span class="number">0</span>))) &#123; <span class="comment">//滑鼠事件發生時攔截事件</span></span><br><span class="line">        qDebug()&lt;&lt;GetLastError();</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Failed to install hook!"</span>;</span><br><span class="line">        <span class="comment">//return false;</span></span><br><span class="line">    &#125;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Install hook successed!"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hook攔截時跳到這"><a href="#hook攔截時跳到這" class="headerlink" title="hook攔截時跳到這"></a>hook攔截時跳到這</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">LRESULT __<span class="function">stdcall <span class="title">HookCallback</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//先找Virtual Keyboard的window handle此處要跟app標題名稱一樣</span></span><br><span class="line">    HWND vkWindow= FindWindow( <span class="literal">NULL</span>,<span class="string">L"Virtual Keyboard"</span>);</span><br><span class="line">    <span class="keyword">if</span> (nCode &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//hook左鍵事件進入後尋找當下window handle</span></span><br><span class="line">        <span class="keyword">if</span> (wParam == WM_LBUTTONDOWN)</span><br><span class="line">        &#123;</span><br><span class="line">            LPDWORD lpdwProcessId;</span><br><span class="line">            HWND previousHWND;</span><br><span class="line">            <span class="comment">//取得當前window handle</span></span><br><span class="line">            HWND currentHWND = GetForegroundWindow();</span><br><span class="line">            VirtualKeyboard virtualKeyboard;</span><br><span class="line">            <span class="comment">//如果現在的window handle不等於鍵盤的window handle則將現在的window handle給先前的window handle</span></span><br><span class="line">            <span class="keyword">if</span> (currentHWND != vkWindow) &#123;</span><br><span class="line">                previousHWND = currentHWND;</span><br><span class="line">                virtualKeyboard.vkWindow = vkWindow;</span><br><span class="line">                qDebug()&lt;&lt;<span class="string">"Virtual Keyboard's window handle:"</span>&lt;&lt; vkWindow;</span><br><span class="line">                qDebug()&lt;&lt;<span class="string">"current window handle:"</span>&lt;&lt;currentHWND;</span><br><span class="line">            &#125;</span><br><span class="line">            virtualKeyboard.currentHWND = currentHWND;</span><br><span class="line">            <span class="keyword">if</span> (currentHWND == vkWindow) &#123;</span><br><span class="line">                currentHWND = previousHWND;</span><br><span class="line">                qDebug()&lt;&lt;<span class="string">"Virtual Keyboard's window handle:"</span>&lt;&lt;vkWindow;</span><br><span class="line">                qDebug()&lt;&lt;<span class="string">"current window handle:"</span>&lt;&lt;currentHWND;</span><br><span class="line">                <span class="keyword">return</span> CallNextHookEx(_hook, nCode, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">            kbdStruct = *((KBDLLHOOKSTRUCT*)lParam);</span><br><span class="line">            <span class="comment">// a key (non-system) is pressed.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// call the next hook in the hook chain. This is nessecary or your hook chain will break and the hook stops</span></span><br><span class="line">    <span class="keyword">return</span> CallNextHookEx(_hook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取得Window-handle-HWND"><a href="#取得Window-handle-HWND" class="headerlink" title="取得Window handle(HWND)"></a>取得Window handle(HWND)</h2><h3 id="取得當前Window-handle"><a href="#取得當前Window-handle" class="headerlink" title="取得當前Window handle"></a>取得當前Window handle</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HWND currentHWND = GetForegroundWindow();</span><br></pre></td></tr></table></figure><h3 id="讓handle掌控權不會再回到鍵盤身上"><a href="#讓handle掌控權不會再回到鍵盤身上" class="headerlink" title="讓handle掌控權不會再回到鍵盤身上"></a>讓handle掌控權不會再回到鍵盤身上</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::setHWNDNoActive() &#123;</span><br><span class="line">    <span class="comment">//取得Handler</span></span><br><span class="line">    window = FindWindow( <span class="literal">NULL</span>,<span class="string">L"Virtual Keyboard"</span>);</span><br><span class="line">    <span class="comment">//WS_EX_NOACTIVATE讓app不會得到focus</span></span><br><span class="line">    SetWindowLong(window, GWL_EXSTYLE,GetWindowLong(window, GWL_EXSTYLE) | WS_EX_NOACTIVATE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="置頂"><a href="#置頂" class="headerlink" title="置頂"></a>置頂</h3><blockquote><p>將app置頂、不可移動、不可調整大小<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::setHWNDTopmost() &#123;</span><br><span class="line">    <span class="comment">//將傳入的handle置頂、不能移動、不能調整大小,四個數字參數分別為X, Y , width, height</span></span><br><span class="line">    SetWindowPos(window,HWND_TOPMOST, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="SendInput送出"><a href="#SendInput送出" class="headerlink" title="SendInput送出"></a>SendInput送出</h2><blockquote><p>上述的步驟掌握到當前的handle，也處理了鍵盤的相關設定接著我們把拿到的handle傳值給他吧<br>這次編寫的小鍵盤不適合前幾篇介紹的SendMessage(hwnd, WM_COPYDATA, (WPARAM)GetSafeHwnd(), (LPARAM)&amp;copydata)<br>因為這樣寫的話接收端也要編寫，只能在特定的程式使用</p></blockquote><h3 id="SendInput傳遞Virtual-Keyboard輸入的值"><a href="#SendInput傳遞Virtual-Keyboard輸入的值" class="headerlink" title="SendInput傳遞Virtual Keyboard輸入的值"></a>SendInput傳遞Virtual Keyboard輸入的值</h3><blockquote><p>我的方法是將整個EditField整個字串的最後一個進行處理(也就是現在鍵入的字)送到系統<br>這方法需要做判別最後鍵入的字是中文(2 Byte)還是英文字母才能正確傳遞</p></blockquote><h3 id="BackSpace解法"><a href="#BackSpace解法" class="headerlink" title="BackSpace解法"></a>BackSpace解法</h3><blockquote><p>利用TextField方式偵測字數變化傳遞Key的缺點是刪到最後TextField已經清空了所以怎麼按BackSpace都沒有反應因為沒有字數變化，所以對於使用者看來就是BackSpace無反應，我的解決辦法是當有字數變化TextField長度卻為0的時候(代表TextField已經被清空)，將TextField偷偷鍵入值但不會送給系統的值<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::sendKey(QString key) &#123;</span><br><span class="line">    <span class="comment">//取得當下Window handle</span></span><br><span class="line">    HWND hWndTarget = currentHWND;</span><br><span class="line">    <span class="comment">//QString轉char*的中間過程需先轉為QByteArray</span></span><br><span class="line">    QByteArray ba = key.toLocal8Bit();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *c_str2 = ba.data();</span><br><span class="line">    CString str;</span><br><span class="line">    <span class="comment">//如果檢測值大於等於0且比key.length小(代表有輸入值)(將檢測值取代)</span></span><br><span class="line">    <span class="keyword">if</span>(previousKeyLength &gt;= <span class="number">0</span> &amp;&amp; previousKeyLength &lt; key.length()) &#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"input"</span>;</span><br><span class="line">        previousKeyLength = key.length();</span><br><span class="line">        <span class="comment">//檢測輸入的字是否大於兩byte(大於兩byte後要判斷是否為中文否則不用)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(c_str2) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//檢測輸入是否為中文字</span></span><br><span class="line">            <span class="keyword">if</span>(IsChinese(c_str2[<span class="built_in">strlen</span>(c_str2)<span class="number">-2</span>],c_str2[<span class="built_in">strlen</span>(c_str2)<span class="number">-1</span>])) &#123;</span><br><span class="line">                qDebug()&lt;&lt;<span class="string">"chinese"</span>;</span><br><span class="line">                str = &amp;c_str2[<span class="built_in">strlen</span>(c_str2)<span class="number">-2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                qDebug()&lt;&lt;<span class="string">"English"</span>;</span><br><span class="line">                str = &amp;c_str2[<span class="built_in">strlen</span>(c_str2)<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//一定是英文字</span></span><br><span class="line">            str = &amp;c_str2[<span class="built_in">strlen</span>(c_str2)<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//將字串送去處理並透過SendInput達成傳送功能</span></span><br><span class="line">        SendKeys(str);</span><br><span class="line">        <span class="comment">//SendKeys("I love Taiwan!\n");</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果檢測值大於等於0且key.length比檢測值大(代表有做BackSpace動作)(將檢測值取代)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(previousKeyLength &gt;= <span class="number">0</span> &amp;&amp; previousKeyLength &gt; key.length()) &#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"BackSpace"</span>;</span><br><span class="line">        previousKeyLength = key.length();</span><br><span class="line">        sendBackSpaceKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果檢測值等於0且key.length等於0(代表edit空了但繼續做BackSpace動作)</span></span><br><span class="line">    <span class="keyword">if</span>(previousKeyLength == <span class="number">0</span> &amp;&amp; key.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"still BackSpace"</span>;</span><br><span class="line">        sendBackSpaceKey();</span><br><span class="line">        <span class="function">emit <span class="title">changeTextField</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="中文字的判斷"><a href="#中文字的判斷" class="headerlink" title="中文字的判斷"></a>中文字的判斷</h3><p>傳入兩個字元(char1,char2),<br>檢查第一個字元是否介於<strong>0xA1 ~ 0xF9</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(ch1 &gt;= (char)0xa1 &amp;&amp; ch1 &lt;= (char)0xf9)</span><br></pre></td></tr></table></figure></p><p>第二個字元是否介於<strong>0x40 ~ 0x7F</strong>或<strong>0xA1 ~ 0xFE</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if( (ch2 &gt;= (char)0x40 &amp;&amp; ch2 &lt;= (char)0x7f) || (ch2 &gt;= (char)0xa1 &amp;&amp; ch2 &lt;= (char)0xfe) )</span><br></pre></td></tr></table></figure></p><p>都符合回傳True代表是個中文字!</p><blockquote><p>中文字<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendUnicode</span><span class="params">(<span class="keyword">wchar_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  INPUT input[<span class="number">2</span>];</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="number">2</span> * <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line"></span><br><span class="line">  input[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">  input[<span class="number">0</span>].ki.wVk = <span class="number">0</span>;</span><br><span class="line">  input[<span class="number">0</span>].ki.wScan = data;</span><br><span class="line">  input[<span class="number">0</span>].ki.dwFlags = KEYEVENTF_UNICODE;</span><br><span class="line"></span><br><span class="line">  input[<span class="number">1</span>].type = INPUT_KEYBOARD;</span><br><span class="line">  input[<span class="number">1</span>].ki.wVk = <span class="number">0</span>;</span><br><span class="line">  input[<span class="number">1</span>].ki.wScan = data;</span><br><span class="line">  input[<span class="number">1</span>].ki.dwFlags = KEYEVENTF_KEYUP | KEYEVENTF_UNICODE;</span><br><span class="line"></span><br><span class="line">  SendInput(<span class="number">2</span>, input, <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ASCII<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendAscii</span><span class="params">(<span class="keyword">wchar_t</span> data, BOOL shift)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  INPUT input[<span class="number">2</span>];</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="number">2</span> * <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (shift)</span><br><span class="line">  &#123;</span><br><span class="line">    input[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">    input[<span class="number">0</span>].ki.wVk = VK_SHIFT;</span><br><span class="line">    SendInput(<span class="number">1</span>, input, <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  input[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">  input[<span class="number">0</span>].ki.wVk = data;</span><br><span class="line"></span><br><span class="line">  input[<span class="number">1</span>].type = INPUT_KEYBOARD;</span><br><span class="line">  input[<span class="number">1</span>].ki.wVk = data;</span><br><span class="line">  input[<span class="number">1</span>].ki.dwFlags = KEYEVENTF_KEYUP;</span><br><span class="line"></span><br><span class="line">  SendInput(<span class="number">2</span>, input, <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (shift)</span><br><span class="line">  &#123;</span><br><span class="line">    input[<span class="number">0</span>].type = INPUT_KEYBOARD;</span><br><span class="line">    input[<span class="number">0</span>].ki.wVk = VK_SHIFT;</span><br><span class="line">    input[<span class="number">0</span>].ki.dwFlags = KEYEVENTF_KEYUP;</span><br><span class="line">    SendInput(<span class="number">1</span>, input, <span class="keyword">sizeof</span>(INPUT));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Enter的部分"><a href="#Enter的部分" class="headerlink" title="Enter的部分"></a>Enter的部分</h3><blockquote><p>因為在也是TextField也是不會有字數變化的，但是Enter相較起來比較單純我們直接把一個Button覆蓋在上面</p></blockquote><p>onClicked的時候執行sendEnterKey()<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::sendEnterKey() &#123;</span><br><span class="line">    keybd_event(<span class="number">13</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    keybd_event(<span class="number">13</span>,<span class="number">0</span>,KEYEVENTF_KEYUP,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="釋放hook"><a href="#釋放hook" class="headerlink" title="釋放hook"></a>釋放hook</h2><p>大功告成!!! 我們把hook這大功臣放生吧<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::releaseHook()</span><br><span class="line">&#123;</span><br><span class="line">    UnhookWindowsHookEx(_hook); <span class="comment">//掰~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Qml端"><a href="#Qml端" class="headerlink" title="Qml端"></a>Qml端</h2><p>搭配上述的鍵盤接下來只要在程式進入時呼叫幾個Funtion就可以<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Component.onCompleted: &#123;</span><br><span class="line">    <span class="comment">//取得handle</span></span><br><span class="line">    virtualKeyboard.setHWNDNoActive()</span><br><span class="line">    <span class="comment">//將找到的handle置頂</span></span><br><span class="line">    virtualKeyboard.setHWNDTopmost()</span><br><span class="line">    <span class="comment">//設置hook攔截事件</span></span><br><span class="line">    virtualKeyboard.setHook()</span><br><span class="line">    vkb.visible = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//VirtualKeyboardSettings.styleName = "retro" //復古風鍵盤</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="現在你有了自己的小鍵盤囉"><a href="#現在你有了自己的小鍵盤囉" class="headerlink" title="現在你有了自己的小鍵盤囉"></a>現在你有了自己的小鍵盤囉</h2><p>可以在各種程式使用(網頁、記事本、Word、Line…)<br><img src="https://i.imgur.com/uLHoPs8.png" alt="泰迪熊的Qt小鍵盤" title="這就是我要的鍵盤啦!"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>Qt Virtual Keyboard相關:<br><a href="https://blog.csdn.net/a844651990/article/details/79032650" target="_blank" rel="noopener">Qt 5.9 qml 使用自带虚拟键盘</a></p><p>hook相關:<br><a href="https://www.smwenku.com/a/5b8a3bb92b71775d1ce6181c/" target="_blank" rel="noopener">c++ hook 鉤子的使用介紹</a><br><a href="https://blog.csdn.net/dotneterbj/article/details/41077309" target="_blank" rel="noopener">HOOK技术浅谈</a></p><p>SendInput相關:<br><a href="&quot;http://www.cctry.com/thread-45211-1-1.html&quot;">中文字判斷與傳遞 SendUnicode,SendAscii 都是參考大神ccstd </a><br><a href="&quot;https://hk.saowen.com/a/9e0a750a695576478d158c9dd185fe3e6e42f38fa4a4a0e311b035e7dce6fecd&quot;">SendInput模擬鍵盤輸入的問題</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hTjY0wM.png&quot; alt=&quot;泰迪熊的Qt小鍵盤&quot; title=&quot;泰迪熊的Qt小鍵盤&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="Windows API" scheme="https://teddybearfp.github.io/tags/Windows-API/"/>
    
      <category term="虛擬鍵盤" scheme="https://teddybearfp.github.io/tags/%E8%99%9B%E6%93%AC%E9%8D%B5%E7%9B%A4/"/>
    
  </entry>
  
  <entry>
    <title>Python 如何編寫簡單的壓力測試程式</title>
    <link href="https://teddybearfp.github.io/2018/10/25/PythonStressTest/"/>
    <id>https://teddybearfp.github.io/2018/10/25/PythonStressTest/</id>
    <published>2018-10-25T01:55:16.000Z</published>
    <updated>2018-10-25T13:55:26.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近有台平板引進，要測試是否適合搭載在機器上，這時候就要測試看看這台平板的能耐拉，就由小新肝我負責編寫一個簡易的程式讓他四核心滿載時時刻刻處於 <strong>CPU 100%</strong> (趨近)的狀況，持續一陣子之後檢測溫度看合不合格</p></blockquote><h2 id="運作原理"><a href="#運作原理" class="headerlink" title="運作原理"></a>運作原理</h2><ul><li>利用四條多進程 <strong>multiprocessing</strong> 寫無窮迴圈讓四顆核心滿載</li><li>一開始有嘗試用多執行緒multithreading但是python的先天限制保護得很好，讓CPU只能到3X%不能達到我們理想的趨近100%</li></ul><h2 id="KillCPU步驟"><a href="#KillCPU步驟" class="headerlink" title="KillCPU步驟"></a>KillCPU步驟</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">looping</span><span class="params">()</span>:</span><span class="comment"># 無窮迴圈</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#這句打包exe一定要有以免memory爆掉</span></span><br><span class="line">    multiprocessing.freeze_support() <span class="comment">#multiprocessing.freeze_support()windows系统上是必须要有這句，因為windows的API不包含fork()</span></span><br><span class="line">    Processes = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Processes = [multiprocessing.Process(target=looping) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">            p.daemon = <span class="keyword">True</span></span><br><span class="line">            p.start()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">            p.join()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">            p.terminate()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"Kill all looping!!"</span>)</span><br></pre></td></tr></table></figure><h2 id="Python-如何打包程式"><a href="#Python-如何打包程式" class="headerlink" title="Python 如何打包程式"></a>Python 如何打包程式</h2><h3 id="利用pyinstaller就能輕鬆達到打包成exe的效果囉"><a href="#利用pyinstaller就能輕鬆達到打包成exe的效果囉" class="headerlink" title="利用pyinstaller就能輕鬆達到打包成exe的效果囉~"></a>利用pyinstaller就能輕鬆達到打包成exe的效果囉~</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyinstaller    //CMD安裝pyinstaller</span><br><span class="line"></span><br><span class="line">pyinstaller -F MultiLanguage.py -i teddybear.ico</span><br><span class="line">-F: 打包成一個執行檔</span><br><span class="line">-i: 換圖片</span><br></pre></td></tr></table></figure><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>如果是用64位元去編執行檔則只能在64位元上使用</li><li>而32位元編譯的執行檔可以在64位元跟32位元下使用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近有台平板引進，要測試是否適合搭載在機器上，這時候就要測試看看這台平板的能耐拉，就由小新肝我負責編寫一個簡易的程
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="壓力測試" scheme="https://teddybearfp.github.io/tags/%E5%A3%93%E5%8A%9B%E6%B8%AC%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>兩個獨立執行檔溝通</title>
    <link href="https://teddybearfp.github.io/2018/10/24/%E5%85%A9%E7%A8%8B%E5%BC%8F%E9%96%93%E6%BA%9D%E9%80%9A/"/>
    <id>https://teddybearfp.github.io/2018/10/24/兩程式間溝通/</id>
    <published>2018-10-24T13:05:16.000Z</published>
    <updated>2018-10-25T14:02:03.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>如果兩個已經開發完成的程序間需要溝通合作該怎麼進行呢?<br>例如:程式完成某一階段時如何通知另一個程式接續進行<br>今天讓我們來談談如何使兩個獨立的執行檔進行溝通合作</p></blockquote><h2 id="運作原理"><a href="#運作原理" class="headerlink" title="運作原理"></a>運作原理</h2><ul><li>兩程式間共享某塊記憶體達到溝通效果</li></ul><h3 id="兩個程式"><a href="#兩個程式" class="headerlink" title="兩個程式"></a>兩個程式</h3><ul><li>1.Sender</li><li>2.Receiver</li></ul><h3 id="Sender步驟"><a href="#Sender步驟" class="headerlink" title="Sender步驟"></a>Sender步驟</h3><blockquote><ol><li>Sender先藉由FindWindow(“視窗名”)取得HWND視窗的控制代碼<ul><li>HWND targetWindow = FindWindow( NULL,L”Receiver”);</li></ul></li><li>若取得成功則SendMessage(將目標與內容藉由WM_COPYDATA傳出)<ul><li>SendMessage(targetWindow,WM_COPYDATA,0,(LPARAM)(&amp;cd));</li></ul></li><li>在main.cpp中註冊方法讓qml可以調用<ul><li>qmlRegisterType<sender>(“sender”, 1, 0, “Sender”);</sender></li></ul></li></ol></blockquote><h3 id="Receiver步驟"><a href="#Receiver步驟" class="headerlink" title="Receiver步驟"></a>Receiver步驟</h3><blockquote><ol><li>Receiver繼承QAbstractNativeEventFilter 覆寫虛擬函式<ul><li>bool nativeEventFilter(const QByteArray &amp;eventType, void     <em>message, long </em>result);</li></ul></li><li>強制轉型MSG<em> pMsg = reinterpret_cast&lt;MSG</em>&gt;(message);<br>  並判斷事件pMsg-&gt;message == WM_COPYDATA<ul><li>COPYDATASTRUCT <em>data = (COPYDATASTRUCT </em>) pMsg-&gt;lParam;     </li><li>qDebug()&lt;&lt;(char*)data-&gt;lpData; //可以印出來驗證傳送過來的值正不正確</li></ul></li></ol></blockquote><h2 id="開始實作吧"><a href="#開始實作吧" class="headerlink" title="開始實作吧"></a>開始實作吧</h2><h3 id="使用Windows-Message需先導入"><a href="#使用Windows-Message需先導入" class="headerlink" title="使用Windows Message需先導入"></a>使用Windows Message需先導入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; </span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"user32.lib"</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winuser.h&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Sender"><a href="#Sender" class="headerlink" title="Sender"></a>Sender</h3><h4 id="Sender-h"><a href="#Sender-h" class="headerlink" title="Sender.h"></a>Sender.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span> :</span><span class="keyword">public</span> QObject <span class="comment">//有QObject才可以註冊給qml端調用</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sender();</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>; <span class="comment">//有Q_INVOKABLE才可以在qml端調用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> dID = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> pID = <span class="number">6</span>;</span><br><span class="line">    &#125;SendMsg;</span><br><span class="line">    SendMsg msgItem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Sender-cpp"><a href="#Sender-cpp" class="headerlink" title="Sender.cpp"></a>Sender.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"user32.lib"</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winuser.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Sender::Sender()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Sender::send()&#123;</span><br><span class="line">    HWND targetWindow = FindWindow( <span class="literal">NULL</span>,<span class="string">L"Receiver"</span>);</span><br><span class="line">    <span class="keyword">if</span>(targetWindow) &#123;</span><br><span class="line">        COPYDATASTRUCT cd;</span><br><span class="line">        cd.dwData = <span class="number">100</span>;</span><br><span class="line">        cd.cbData = <span class="number">100</span>;<span class="comment">//size;</span></span><br><span class="line">        cd.lpData = (PVOID)<span class="string">"This message is from sender!"</span>;</span><br><span class="line">        SendMessage(targetWindow,WM_COPYDATA,<span class="number">0</span>,(LPARAM)(&amp;cd));</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Find Receiver's window!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Can not find Receiver's window."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sender-main-cpp"><a href="#Sender-main-cpp" class="headerlink" title="Sender_main.cpp"></a>Sender_main.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    qmlRegisterType&lt;Sender&gt;(<span class="string">"sender"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"Sender"</span>);<span class="comment">//註冊</span></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line">    <span class="keyword">if</span> (engine.rootObjects().isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sender-main-qml"><a href="#Sender-main-qml" class="headerlink" title="Sender_main.qml"></a>Sender_main.qml</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> sender <span class="number">1.0</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"Hello World"</span>)</span><br><span class="line">    Sender&#123;</span><br><span class="line">        id:sender</span><br><span class="line">    &#125;</span><br><span class="line">    Button &#123;</span><br><span class="line">        anchors&#123;</span><br><span class="line">            top:parent.top</span><br><span class="line">            left:parent.left</span><br><span class="line">            margins: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">        text:<span class="string">"send Message"</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            sender.send()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h3><h4 id="Receiver-h"><a href="#Receiver-h" class="headerlink" title="Receiver.h"></a>Receiver.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QAbstractNativeEventFilter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_CC_MSVC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;                    //WM_COPYDATA</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"user32.lib"</span>)  <span class="comment">//用於nativeEventFilter</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winuser.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> :</span><span class="keyword">public</span> QObject ,<span class="keyword">public</span> QAbstractNativeEventFilter <span class="comment">//繼承QAbstractNativeEventFilter偵測Windows事件</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Receiver();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">nativeEventFilter</span><span class="params">(<span class="keyword">const</span> QByteArray &amp;eventType, <span class="keyword">void</span> *message, <span class="keyword">long</span> *result)</span></span>;  <span class="comment">//虛擬函式覆寫   </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Receiver-cpp"><a href="#Receiver-cpp" class="headerlink" title="Receiver.cpp"></a>Receiver.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">Receiver::Receiver()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Receiver::nativeEventFilter(<span class="keyword">const</span> QByteArray &amp;eventType, <span class="keyword">void</span> *message, <span class="keyword">long</span> *result) &#123; <span class="comment">//收到別進程傳來事件</span></span><br><span class="line">    <span class="keyword">if</span>(eventType == <span class="string">"windows_generic_MSG"</span> || eventType == <span class="string">"windows_dispatcher_MSG"</span>) &#123;</span><br><span class="line">        MSG* pMsg = <span class="keyword">reinterpret_cast</span>&lt;MSG*&gt;(message);</span><br><span class="line">        <span class="keyword">if</span>(pMsg-&gt;message == WM_COPYDATA) &#123; <span class="comment">//收到WM_COPYDATA傳來的資料</span></span><br><span class="line">            COPYDATASTRUCT *data = (COPYDATASTRUCT *) pMsg-&gt;lParam;</span><br><span class="line">            qDebug()&lt;&lt;(<span class="keyword">char</span>*)data-&gt;lpData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Receiver-main-cpp"><a href="#Receiver-main-cpp" class="headerlink" title="Receiver_main.cpp"></a>Receiver_main.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    Receiver r;</span><br><span class="line">    app.installNativeEventFilter(&amp;r);  <span class="comment">//註冊篩選器</span></span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line">    <span class="keyword">if</span> (engine.rootObjects().isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Receiver-main-qml"><a href="#Receiver-main-qml" class="headerlink" title="Receiver_main.qml"></a>Receiver_main.qml</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"Receiver"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h4><p>先開啟Receiver再執行Sender使其能夠偵測到並傳值</p><p><img src="https://i.imgur.com/iR2bvrD.png" alt="Sender" title="開啟Receiver後再開啟Sender發送"></p><p><img src="https://i.imgur.com/zbGuaDL.png" alt="" title="Sender成功找到Receiver的window"></p><p><img src="https://i.imgur.com/xBRcn1v.png" alt="" title="Receiver成功接收到Sender傳來的值!"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如果兩個已經開發完成的程序間需要溝通合作該怎麼進行呢?&lt;br&gt;例如:程式完成某一階段時如何通知另一個程式接續進行&lt;
      
    
    </summary>
    
      <category term="Windows API" scheme="https://teddybearfp.github.io/categories/Windows-API/"/>
    
    
      <category term="C++" scheme="https://teddybearfp.github.io/tags/C/"/>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="程式間溝通" scheme="https://teddybearfp.github.io/tags/%E7%A8%8B%E5%BC%8F%E9%96%93%E6%BA%9D%E9%80%9A/"/>
    
      <category term="Windows API" scheme="https://teddybearfp.github.io/tags/Windows-API/"/>
    
  </entry>
  
  <entry>
    <title>Qt 換頁機制</title>
    <link href="https://teddybearfp.github.io/2018/10/24/Qt%E6%8F%9B%E9%A0%81%E6%A9%9F%E5%88%B6/"/>
    <id>https://teddybearfp.github.io/2018/10/24/Qt換頁機制/</id>
    <published>2018-10-24T07:05:16.000Z</published>
    <updated>2018-10-24T14:15:49.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="How-to-use-“ldMain”-inside-whole-project"><a href="#How-to-use-“ldMain”-inside-whole-project" class="headerlink" title="How to use “ldMain” inside whole project?"></a>How to use “ldMain” inside whole project?</h3><p>一個qml loader負責Qt全專案的頁面切換，之前都是以<a href="http://doc.qt.io/qt-5/qml-qtquick-loader.html" target="_blank" rel="noopener">loader</a>方式去編寫，這種方式很簡單只要用 loaderId.source:”目的地” 即可已達成換頁<br>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    Loader &#123; <span class="attr">id</span>: pageLoader &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: pageLoader.source = <span class="string">"Page1.qml"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是這樣的編寫不能在全專案中被識別，在團隊開發中會出現未識別的參數並不是很好的方式</p><h3 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h3><p>透過C++設定loader達成全專案中可被識別</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><ul><li>透過C++中設定QQmlApplicationEngine</li><li>透過新設定的Engine達到切頁效果</li><li>需寫個CLASS繼承QQmlApplicationEngine取得qml端的loader並賦予全專案皆可用的名稱通常取名為ViewChanger</li></ul><h2 id="開始實作"><a href="#開始實作" class="headerlink" title="開始實作"></a>開始實作</h2><h3 id="Qml端寫loader並給objectName"><a href="#Qml端寫loader並給objectName" class="headerlink" title="Qml端寫loader並給objectName"></a>Qml端寫loader並給objectName</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Loader &#123; </span><br><span class="line">    width: <span class="number">640</span> </span><br><span class="line">    height: <span class="number">480</span> </span><br><span class="line">    objectName: <span class="string">"viewChanger"</span>  <span class="comment">//objectName可以在c++端取得的ID </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="編寫ViewChanger-Class"><a href="#編寫ViewChanger-Class" class="headerlink" title="編寫ViewChanger Class"></a>編寫ViewChanger Class</h3><h3 id="h宣告"><a href="#h宣告" class="headerlink" title="h宣告"></a>h宣告</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;                  //base element</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;    //include Engine for ViewChanger Page</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewChanger</span> :</span> <span class="keyword">public</span> QQmlApplicationEngine</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ViewChanger();</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onObjectCreated</span><span class="params">(QObject *object, <span class="keyword">const</span> QUrl &amp;url)</span></span>;</span><br><span class="line">    <span class="comment">//objectCreated是QQmlApplicationEngine內部singal函式</span></span><br><span class="line">    <span class="comment">//設立一個onObjectCreated的slot去接收此signal發出之信號</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cpp定義"><a href="#cpp定義" class="headerlink" title="cpp定義"></a>cpp定義</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"viewchanger.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt;  //rootContext</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line">ViewChanger::ViewChanger()</span><br><span class="line">&#123;</span><br><span class="line">    connect(<span class="keyword">this</span>,SIGNAL(objectCreated(QObject*,QUrl)),<span class="keyword">this</span>,SLOT(onObjectCreated(QObject*,QUrl)));</span><br><span class="line">    <span class="comment">//connent signal to slot for getting QObject* and QUrl.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ViewChanger::onObjectCreated(QObject *object, <span class="keyword">const</span> QUrl &amp;url)&#123;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"object:"</span>&lt;&lt;object&lt;&lt;<span class="string">" ,url:"</span>&lt;&lt;url;</span><br><span class="line">    QQuickItem *window = (QQuickItem *)object;</span><br><span class="line">    qDebug()&lt;&lt;window-&gt;findChild&lt;QQuickItem *&gt;(<span class="string">"viewChanger"</span>);<span class="comment">//use QQuickItem method findchild to find qml objectname.</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;rootContext()-&gt;setContextProperty(<span class="string">"viewChanger"</span>,window-&gt;findChild&lt;QQuickItem *&gt;(<span class="string">"viewChanger"</span>));</span><br><span class="line">    <span class="comment">//將qml中的objectname:viewChanger物件,轉換為viewChanger全域皆可使用的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用編寫好的新Engine"><a href="#使用編寫好的新Engine" class="headerlink" title="使用編寫好的新Engine"></a>使用編寫好的新Engine</h3><h3 id="Main-cpp"><a href="#Main-cpp" class="headerlink" title="Main.cpp"></a>Main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt; //QQmlContext::setContextProperty()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"viewchanger.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);</span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    ViewChanger engine; <span class="comment">//QQmlApplicationEngine change to "ViewChanger" new Engine.</span></span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line">    <span class="keyword">if</span> (engine.rootObjects().isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="調用ViewChanger"><a href="#調用ViewChanger" class="headerlink" title="調用ViewChanger"></a>調用ViewChanger</h3><h3 id="main-qml-qml檔案命名除了main-qml開頭為小寫，其他qml檔名開頭需大寫"><a href="#main-qml-qml檔案命名除了main-qml開頭為小寫，其他qml檔名開頭需大寫" class="headerlink" title="main.qml (qml檔案命名除了main.qml開頭為小寫，其他qml檔名開頭需大寫)"></a>main.qml (qml檔案命名除了main.qml開頭為小寫，其他qml檔名開頭需大寫)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"Hello World"</span>)</span><br><span class="line">    Loader &#123;</span><br><span class="line">        width: <span class="number">640</span></span><br><span class="line">        height: <span class="number">480</span></span><br><span class="line">        objectName: <span class="string">"viewChanger"</span>   <span class="comment">//objectName可以在c++端取得的ID</span></span><br><span class="line">    &#125;</span><br><span class="line">    Button &#123;</span><br><span class="line">        property bool toggled:<span class="literal">false</span></span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        anchors.bottom: parent.bottom</span><br><span class="line">        width: <span class="number">200</span>; height: <span class="number">200</span>;</span><br><span class="line">        text:<span class="string">"Clicked to switch page"</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            viewChanger.source = toggled?<span class="string">"qrc:/Red.qml"</span>:<span class="string">"qrc:/Yellow.qml"</span>   <span class="comment">//用c++端的Engine來做頁面切換</span></span><br><span class="line">            toggled = !toggled</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成-來欣賞我們的成果吧"><a href="#完成-來欣賞我們的成果吧" class="headerlink" title="完成! 來欣賞我們的成果吧"></a>完成! 來欣賞我們的成果吧</h3><p><img src="https://i.imgur.com/9thQQDP.png" alt="Yellow.qml" title="Yellow.qml"></p><p><img src="https://i.imgur.com/0i5fM2C.png" alt="Red.qml" title="Red.qml"></p><h3 id="順帶一提setSource特性"><a href="#順帶一提setSource特性" class="headerlink" title="順帶一提setSource特性"></a>順帶一提setSource特性</h3><ul><li>setSource傳給某頁參數</li><li>setSource(“abc.qml”,{“searchText”:textfield.text})</li></ul><p>abc.qml</p><ul><li>property searchText<ul><li>傳參數過來後接下來任何頁面的searchText值皆為textfield.text</li></ul></li><li>除非在別頁重新賦值或給予空值<ul><li>setSource(“abc.qml”,{})</li></ul></li></ul><h3 id="會使用換頁機制後當個穿梭自如的人，開始享受專案製作"><a href="#會使用換頁機制後當個穿梭自如的人，開始享受專案製作" class="headerlink" title="會使用換頁機制後當個穿梭自如的人，開始享受專案製作~"></a>會使用換頁機制後當個穿梭自如的人，開始享受專案製作~</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;How-to-use-“ldMain”-inside-whole-project&quot;&gt;&lt;a href=&quot;#How-to-use-“l
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="換頁機制" scheme="https://teddybearfp.github.io/tags/%E6%8F%9B%E9%A0%81%E6%A9%9F%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>QEvent攔截事件</title>
    <link href="https://teddybearfp.github.io/2018/10/24/C-%E7%9B%A3%E8%81%BDQEvent%E4%B8%A6%E5%B0%87%E4%BA%8B%E4%BB%B6%E9%87%8D%E5%AF%AB/"/>
    <id>https://teddybearfp.github.io/2018/10/24/C-監聽QEvent並將事件重寫/</id>
    <published>2018-10-24T02:05:16.000Z</published>
    <updated>2018-10-24T14:27:46.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p></blockquote><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>可以將既有的事件行為覆寫<br>此篇紀錄關閉事件攔截，在點擊X離開程式的時候不動作或觸發新行為</p><h3 id="事件過濾器eventFilter"><a href="#事件過濾器eventFilter" class="headerlink" title="事件過濾器eventFilter"></a>事件過濾器eventFilter</h3><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtual <span class="built_in">bool</span> eventFilter(QObject *object, QEvent *event)</span><br></pre></td></tr></table></figure><p>事件會由此經過，而我們可以在這將有興趣的事件攔下並覆寫</p><h3 id="事件種類"><a href="#事件種類" class="headerlink" title="事件種類"></a>事件種類</h3><p>可以參考<a href="http://doc.qt.io/qt-5/qevent.html" target="_blank" rel="noopener">官方文件</a>針對有興趣的事件讓我們開始訂製新的行為吧!</p><h3 id="h宣告"><a href="#h宣告" class="headerlink" title=".h宣告"></a>.h宣告</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QEvent&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlView</span>:</span><span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ControlView();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *object, QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cpp定義"><a href="#cpp定義" class="headerlink" title=".cpp定義"></a>.cpp定義</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"controlview.h"</span></span></span><br><span class="line"></span><br><span class="line">ControlView::ControlView()</span><br><span class="line">&#123;</span><br><span class="line">    qApp-&gt;installEventFilter(<span class="keyword">this</span>);             <span class="comment">//一定要註冊事件過濾器 就像吃中藥一定要配溫開水一樣重要</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ControlView::eventFilter(QObject *object, QEvent *event) &#123;</span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::Close)&#123;         <span class="comment">//偵測到關閉事件</span></span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"emit closed()"</span>;</span><br><span class="line">        <span class="function">emit <span class="title">closed</span><span class="params">()</span></span>;                          <span class="comment">//對qml發出關閉信號 則qml可在關閉時進行新的動作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QObject::eventFilter(object, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇環境使用版本:&lt;br&gt;&lt;a href=&quot;https://download.qt.io/official_releases/qt/5.10/5.10.1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QT 5.10.1&lt;/a&gt;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="C++" scheme="https://teddybearfp.github.io/tags/C/"/>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QEvent" scheme="https://teddybearfp.github.io/tags/QEvent/"/>
    
      <category term="事件重寫" scheme="https://teddybearfp.github.io/tags/%E4%BA%8B%E4%BB%B6%E9%87%8D%E5%AF%AB/"/>
    
  </entry>
  
  <entry>
    <title>C++ 單例模式(Singleton)</title>
    <link href="https://teddybearfp.github.io/2018/10/23/C-%E5%96%AE%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://teddybearfp.github.io/2018/10/23/C-單例模式/</id>
    <published>2018-10-23T12:30:16.000Z</published>
    <updated>2018-10-24T14:28:01.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p></blockquote><h3 id="單例模式"><a href="#單例模式" class="headerlink" title="單例模式"></a>單例模式</h3><ul><li>保證一個class只有一個實體(Instance)</li><li>在宣告的同時直接new這個類別的實例(instance)，並且將建構子宣告為private， 這樣其他程式就無法再new這個類別的實例，保證這個類別只存在一個實例</li><li>優點<ul><li>單例實作了它的唯一實例,便於團隊共享與開發</li><li>在系統中僅存在一個對象,因此可以節省系統資源,對於頻繁創建與銷毀對象,單例可以提高系統性能</li></ul></li><li>風險<ul><li>單例模式在多執行緒的應用下必須小心使用。如果當唯一實例尚未創建時，有兩個執行緒同時調用創建方法，那麼它們同時沒有檢測到唯一實例的存在，從而同時各自創建了一個實例，這樣就有兩個實例被構造出來，從而違反了單例模式中唯一實例的原則。</li><li>解決方案: 可以透過第一時間建立實例或是運用雙重檢查上鎖</li></ul></li><li>會將何者設為單例呢?<ul><li>通常會將Model(管理與儲存資料)的類別設為單例，可以確保資料的一致性也能方便供其他程式使用。</li></ul></li></ul><h2 id="用法一"><a href="#用法一" class="headerlink" title="用法一"></a>用法一</h2><h3 id="h宣告"><a href="#h宣告" class="headerlink" title=".h宣告"></a>.h宣告</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">&#123; </span><br><span class="line">Q_OBJECT </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">static</span> Singleton* <span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;inst; &#125;</span><br><span class="line">Singleton();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startCamera</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line"><span class="keyword">static</span> Singleton inst;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cpp定義"><a href="#cpp定義" class="headerlink" title=".cpp定義"></a>.cpp定義</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Singleton Singleton::inst; </span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Singleton::startCamera() &#123; </span><br><span class="line"><span class="keyword">bool</span> CameraStartResult = CameraStart(cameraDevice); </span><br><span class="line">isStarted = <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="調用單例"><a href="#調用單例" class="headerlink" title="調用單例"></a>調用單例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VideoPanel::startCamera() &#123; </span><br><span class="line">Singleton::Inst()-&gt;startCamera(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用法二"><a href="#用法二" class="headerlink" title="用法二"></a>用法二</h2><h3 id="h宣告-1"><a href="#h宣告-1" class="headerlink" title=".h宣告"></a>.h宣告</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TCHAR *m_strUserName;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> Singleton* <span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">TCHAR <span class="title">GetUserName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cpp定義-1"><a href="#cpp定義-1" class="headerlink" title=".cpp定義"></a>.cpp定義</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Singleton* Singleton::GetInstance()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> Singleton *Inst;</span><br><span class="line"><span class="keyword">return</span> Inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="調用單例-1"><a href="#調用單例-1" class="headerlink" title="調用單例"></a>調用單例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CString strMemberName = (Singleton::GetInstance())-&gt;GetUserName();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇環境使用版本:&lt;br&gt;&lt;a href=&quot;https://download.qt.io/official_releases/qt/5.10/5.10.1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QT 5.10.1&lt;/a&gt;
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://teddybearfp.github.io/tags/C/"/>
    
      <category term="單例模式" scheme="https://teddybearfp.github.io/tags/%E5%96%AE%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>共享資料夾</title>
    <link href="https://teddybearfp.github.io/2018/10/23/%E5%85%B1%E4%BA%AB%E8%B3%87%E6%96%99%E5%A4%BE/"/>
    <id>https://teddybearfp.github.io/2018/10/23/共享資料夾/</id>
    <published>2018-10-23T02:05:16.000Z</published>
    <updated>2018-10-24T14:28:12.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇環境使用版本:<br>Windows 10</p></blockquote><h3 id="目標-讓兩台電腦可以對同個資料夾做存取操作"><a href="#目標-讓兩台電腦可以對同個資料夾做存取操作" class="headerlink" title="目標: 讓兩台電腦可以對同個資料夾做存取操作"></a>目標: 讓兩台電腦可以對同個資料夾做存取操作</h3><h3 id="進入同個網域"><a href="#進入同個網域" class="headerlink" title="進入同個網域"></a>進入同個網域</h3><ul><li>將兩台電腦接連手機網路或是同個hub接出來的網路線</li></ul><h3 id="步驟一"><a href="#步驟一" class="headerlink" title="步驟一"></a>步驟一</h3><ul><li>至控制台調整共用設定<br>  *主要開啟網路探索<br><img src="https://i.imgur.com/Q3sBRcC.png" alt=""></li></ul><h3 id="步驟二"><a href="#步驟二" class="headerlink" title="步驟二"></a>步驟二</h3><ul><li>共享資料夾<br><img src="https://i.imgur.com/J7l6AG7.png" alt="" title="點選資料夾右鍵 &gt; 內容"><br><img src="https://i.imgur.com/qcegiXQ.png" alt="" title="共用"></li></ul><h3 id="步驟三"><a href="#步驟三" class="headerlink" title="步驟三"></a>步驟三</h3><ul><li>設定共享人員(新增everyone)<ul><li>調整使用權限(讀取/寫入)<br><img src="https://i.imgur.com/iGZUBXA.png" alt=""></li></ul></li></ul><h3 id="步驟四"><a href="#步驟四" class="headerlink" title="步驟四"></a>步驟四</h3><ul><li>另一台電腦就可以從網路新增新的網路位置取得共用資料夾囉<ul><li>我的電腦 &gt; 網路<br>若分享成功，此處可以看到共享資料夾</li></ul></li></ul><h3 id="完成-透過以上四步驟就可以讓兩台電腦對同個資料夾做存取操作"><a href="#完成-透過以上四步驟就可以讓兩台電腦對同個資料夾做存取操作" class="headerlink" title="完成! 透過以上四步驟就可以讓兩台電腦對同個資料夾做存取操作"></a>完成! 透過以上四步驟就可以讓兩台電腦對同個資料夾做存取操作</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇環境使用版本:&lt;br&gt;Windows 10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;目標-讓兩台電腦可以對同個資料夾做存取操作&quot;&gt;&lt;a href=&quot;#目標-讓兩台電腦可以對同個資料夾做存取操作&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="環境架設" scheme="https://teddybearfp.github.io/tags/%E7%92%B0%E5%A2%83%E6%9E%B6%E8%A8%AD/"/>
    
      <category term="共享資料夾" scheme="https://teddybearfp.github.io/tags/%E5%85%B1%E4%BA%AB%E8%B3%87%E6%96%99%E5%A4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Qt 一句指令提升至系統管理員權限</title>
    <link href="https://teddybearfp.github.io/2018/10/22/Qt-%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E7%B3%BB%E7%B5%B1%E7%AE%A1%E7%90%86%E5%93%A1%E6%AC%8A%E9%99%90/"/>
    <id>https://teddybearfp.github.io/2018/10/22/Qt-如何提升系統管理員權限/</id>
    <published>2018-10-22T13:05:16.000Z</published>
    <updated>2018-10-24T14:28:21.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>有些程序需要管理員權限User Account Control(UAC)</li><li>例如:要<strong>更改系統時間</strong>或是做一些需要權限存取的行為，若是沒有使用MANIFESTUAC則會以為程式沒有動作，其實是權限不夠。</li><li>提升系統管理員權限有幾種方法，此篇紀錄的是我覺得最簡單最快速的方式</li></ul><h3 id="目標-執行檔獲得小盾牌"><a href="#目標-執行檔獲得小盾牌" class="headerlink" title="目標: 執行檔獲得小盾牌"></a>目標: 執行檔獲得<code>小盾牌</code></h3><p><img src="https://i.imgur.com/GccgSDh.png" alt="" title="UAC"></p><h3 id="QMAKE-LFLAGS設置UAC權限"><a href="#QMAKE-LFLAGS設置UAC權限" class="headerlink" title="QMAKE_LFLAGS設置UAC權限"></a>QMAKE_LFLAGS設置UAC權限</h3><p>在pro檔中加入下面指令<br><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMAKE_LFLAGS+=<span class="regexp">/MANIFESTUAC:\"level=\'requireAdministrator\' uiAccess=\'false\'\"</span></span><br></pre></td></tr></table></figure></p><h3 id="Qt-Creator重新rebuild"><a href="#Qt-Creator重新rebuild" class="headerlink" title="Qt Creator重新rebuild"></a>Qt Creator重新rebuild</h3><p>若還是沒產出<strong>有盾牌</strong>的exe則刪掉執行檔再rebuild一次<br>這樣就可以產出有小盾牌的執行檔囉!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇環境使用版本:&lt;br&gt;&lt;a href=&quot;https://download.qt.io/official_releases/qt/5.10/5.10.1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QT 5.10.1&lt;/a&gt;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="UAC" scheme="https://teddybearfp.github.io/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>Qt Canvas 前景畫圖</title>
    <link href="https://teddybearfp.github.io/2018/10/22/Qt-Canvas%E7%95%AB%E5%9C%96/"/>
    <id>https://teddybearfp.github.io/2018/10/22/Qt-Canvas畫圖/</id>
    <published>2018-10-22T09:30:16.000Z</published>
    <updated>2018-10-24T14:28:30.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p></blockquote><h3 id="目標-藉由前景qml部分完成畫圖"><a href="#目標-藉由前景qml部分完成畫圖" class="headerlink" title="目標: 藉由前景qml部分完成畫圖"></a>目標: 藉由前景qml部分完成畫圖</h3><h3 id="前景與背景的差異"><a href="#前景與背景的差異" class="headerlink" title="前景與背景的差異"></a>前景與背景的差異</h3><ul><li>前景: 從qml或是c++透過函式呼叫完成繪圖</li><li>背景: 藉由記憶體操作buffer,指定pixel顏色繪圖</li></ul><h3 id="qml前景繪圖-canvas-設定與宣告"><a href="#qml前景繪圖-canvas-設定與宣告" class="headerlink" title="qml前景繪圖:canvas (設定與宣告)"></a>qml前景繪圖:canvas (設定與宣告)</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Canvas</span> &#123; </span><br><span class="line">    <span class="attribute">id:</span><span class="string">canvas</span> </span><br><span class="line">    <span class="attribute">x</span>:<span class="number">0</span> </span><br><span class="line">    <span class="attribute">y</span>:<span class="number">0</span> </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640</span> </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">480</span> </span><br><span class="line">    <span class="attribute">visible</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attribute">onPaint</span>:&#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="comment">//由此開始對ctx操作</span></span><br><span class="line">        <span class="comment">//ex: ctx.arc(320,240,5,0,Math.PI*2); </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="設定畫筆"><a href="#設定畫筆" class="headerlink" title="設定畫筆"></a>設定畫筆</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeStyle = Qt.rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//顏色與透明度(0~1)</span></span><br><span class="line">ctx.lineWidth = <span class="number">1</span>                        <span class="comment">//畫筆粗細</span></span><br></pre></td></tr></table></figure><h3 id="畫圓"><a href="#畫圓" class="headerlink" title="畫圓"></a>畫圓</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">320</span>,<span class="number">240</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>); <span class="comment">//ctx.arc(x座標,y座標,半徑,起始角度,結束角度)</span></span><br><span class="line">ctx.stroke();                   <span class="comment">//畫圖</span></span><br><span class="line">ctx.fillStyle=‘green<span class="string">'           //設定填充的顏色(預設為不透明黑)</span></span><br><span class="line"><span class="string">ctx.fill();                     //將中間填充顏色</span></span><br></pre></td></tr></table></figure><h3 id="畫矩形"><a href="#畫矩形" class="headerlink" title="畫矩形"></a>畫矩形</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillRect(x,y,width,height) <span class="comment">//(x,y)為左上角的點再指定寬高,完成填充矩形</span></span><br></pre></td></tr></table></figure><h3 id="畫正方形"><a href="#畫正方形" class="headerlink" title="畫正方形"></a>畫正方形</h3><p>Offset可以對圖形做位移操作<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); ctx.moveTo(<span class="number">240</span>,<span class="number">160</span> + yOffset) </span><br><span class="line">ctx.lineTo(<span class="number">400</span>,<span class="number">160</span> + yOffset) </span><br><span class="line">ctx.lineTo(<span class="number">400</span>,<span class="number">320</span> + yOffset) </span><br><span class="line">ctx.lineTo(<span class="number">240</span>,<span class="number">320</span> + yOffset) </span><br><span class="line">ctx.lineTo(<span class="number">240</span>,<span class="number">160</span> + yOffset) </span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/udejqan.png" alt="" title="正方形"></p><h3 id="畫線"><a href="#畫線" class="headerlink" title="畫線"></a>畫線</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath()     <span class="comment">//開始設定路徑</span></span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">240</span>)   <span class="comment">//提起畫筆的動作並移動到(0,240)位置</span></span><br><span class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">240</span>) <span class="comment">//沒有提起畫筆從上一步位置畫線畫至(640,240)位置</span></span><br><span class="line">ctx.stroke()        <span class="comment">//畫圖</span></span><br></pre></td></tr></table></figure><h3 id="畫正圓弧"><a href="#畫正圓弧" class="headerlink" title="畫正圓弧"></a>畫正圓弧</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(x0, y0)            <span class="comment">//移至 (x0, y0)</span></span><br><span class="line">ctx.arcTo(x1,y1,x2,y2,radius) <span class="comment">//arcto(第一點x,第一點y,第二點x,第二點y,圓弧半徑)(x0,y0),(x1,y1),(x2,y2)組成夾角半徑為radius圓與該夾角相切得到一個圓弧</span></span><br><span class="line">                      <span class="comment">//半徑算法: sqrt(pow(x0-x1)+pow(y0-y1))</span></span><br><span class="line">ctx.strock();                 <span class="comment">//畫圖</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ex</span>:</span><br><span class="line">ctx.moveTo(<span class="number">360</span> + xOffset,<span class="number">200</span> + yOffset)</span><br><span class="line">ctx.arcTo(<span class="number">400</span> + xOffset,<span class="number">240</span> + yOffset,<span class="number">360</span> + xOffset,<span class="number">280</span> + yOffset,<span class="number">56</span>)</span><br><span class="line"><span class="comment">//ctx.bezierCurveTo(360,200,382,240,360,280);</span></span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JTMtkzG.png" alt="" title="圓弧"></p><h3 id="特殊圖形-貝塞爾曲線"><a href="#特殊圖形-貝塞爾曲線" class="headerlink" title="特殊圖形(貝塞爾曲線)"></a>特殊圖形(貝塞爾曲線)</h3><p><code>此方法可達到曲線效果</code><br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath()</span><br><span class="line"><span class="comment">//開始設定路徑</span></span><br><span class="line">ctx.moveTo(<span class="number">225</span>,<span class="number">234</span>) </span><br><span class="line"><span class="comment">//移動至此位置</span></span><br><span class="line">ctx.bezierCurveTo(<span class="number">225</span>,<span class="number">234</span>,<span class="number">220</span>,<span class="number">240</span>,<span class="number">225</span>,<span class="number">246</span>);</span><br><span class="line"><span class="comment">//bezierCurveTo(起始點x,起始點y,中途經歷點x,中途經歷點y,終點x,終點y)</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/KLjb7YN.png" alt="" title="利用以上方式達成各種圖形繪製"></p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">240</span>)   <span class="comment">//有將畫筆提起</span></span><br><span class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">240</span>) <span class="comment">//沒有將畫筆提起</span></span><br><span class="line">ctx.closePath();    <span class="comment">//閉合路徑,填掉缺口如果畫的線沒有閉合,自動補上一條直線從終點至上一個moveto的點</span></span><br></pre></td></tr></table></figure><h3 id="刷新畫布"><a href="#刷新畫布" class="headerlink" title="刷新畫布"></a>刷新畫布</h3><p>需要使用到類似video的呈現或是位移時可以運用下列方法達成<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); </span><br><span class="line">ctx.reset();    <span class="comment">//清空</span></span><br><span class="line">canvas.requestPaint();    <span class="comment">//重畫 類似update()</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇環境使用版本:&lt;br&gt;&lt;a href=&quot;https://download.qt.io/official_releases/qt/5.10/5.10.1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QT 5.10.1&lt;/a&gt;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="前景畫圖" scheme="https://teddybearfp.github.io/tags/%E5%89%8D%E6%99%AF%E7%95%AB%E5%9C%96/"/>
    
  </entry>
  
  <entry>
    <title>Qt 安裝與Hello World!</title>
    <link href="https://teddybearfp.github.io/2018/10/22/Qt-Setup/"/>
    <id>https://teddybearfp.github.io/2018/10/22/Qt-Setup/</id>
    <published>2018-10-22T07:30:16.000Z</published>
    <updated>2018-10-24T14:02:27.593Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇環境使用版本:<br><a href="https://download.qt.io/official_releases/qt/5.10/5.10.1/" target="_blank" rel="noopener">QT 5.10.1</a><br>Visual Studio 2015<br><a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">windows 10 SDK</a></p></blockquote><h3 id="安裝QT-5-10-1"><a href="#安裝QT-5-10-1" class="headerlink" title="安裝QT 5.10.1"></a>安裝QT 5.10.1</h3><p><img src="https://i.imgur.com/9z5p73c.png" alt="" title="選擇MSVC 2015"><br><img src="https://i.imgur.com/FJDj2Qu.png" alt="" title="安裝Qt相關插件"></p><h3 id="安裝Visual-Studio-2015-選擇程式工具-c"><a href="#安裝Visual-Studio-2015-選擇程式工具-c" class="headerlink" title="安裝Visual Studio 2015 選擇程式工具(c++)"></a>安裝Visual Studio 2015 選擇程式工具(c++)</h3><p><img src="https://i.imgur.com/lCYjlZl.png" alt="" title="勾選整個Visual C++"></p><h3 id="安裝windows-10-SDK"><a href="#安裝windows-10-SDK" class="headerlink" title="安裝windows 10 SDK"></a>安裝windows 10 SDK</h3><blockquote><p>注意標題Windows後面數字<br>此處為10.0.17763.1<br>稍後若是編譯有問題可從此處找尋rc.exe檔案修正</p></blockquote><p><img src="https://i.imgur.com/lETusDR.png" alt="" title="install windows 10 SDK"></p><h3 id="開啟Qt-Creator"><a href="#開啟Qt-Creator" class="headerlink" title="開啟Qt Creator"></a>開啟Qt Creator</h3><h2 id="安裝完windows-10-SDK後"><a href="#安裝完windows-10-SDK後" class="headerlink" title="安裝完windows 10 SDK後 "></a><code>安裝完windows 10 SDK後</code> </h2><blockquote><p>projects &gt; Kits &gt; cdb會自動偵測</p></blockquote><p>手動選擇compiler</p><blockquote><p>projects &gt; Kits &gt; MSVC 2015 32bit<br>C: amd64_X86<br>C++: amd64_X86<br>Debugger: X86\cdb.exe</p></blockquote><p><img src="https://i.imgur.com/H6kfxr3.png" alt="" title="MSVC 2015 32bit"></p><pre><code>&gt; projects &gt; Kits &gt; MSVC 2015 64bitC: X86_amd64C++: X86_amd64Debugger: X64\cdb.exe</code></pre><p><img src="https://i.imgur.com/h9uJYZx.png" alt="" title="MSVC 2015 64bit"></p><h3 id="若是發生link-error-Qt-lnk1158-無法運行-rc-exe"><a href="#若是發生link-error-Qt-lnk1158-無法運行-rc-exe" class="headerlink" title="若是發生link error(Qt lnk1158 無法運行 rc.exe)"></a>若是發生link error(Qt lnk1158 無法運行 rc.exe)</h3><blockquote><p>將C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86裡的 <strong>rc.exe</strong> 和 <strong>rcdll.dll</strong><br>兩個檔案複製到<br>C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin</p></blockquote><p><img src="https://i.imgur.com/eZdjZD2.png" alt="" title="C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86"></p><p><img src="https://i.imgur.com/R5lu7cC.png" alt="" title="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin"></p><h3 id="大功告成-開始Qt的世界"><a href="#大功告成-開始Qt的世界" class="headerlink" title="大功告成! 開始Qt的世界"></a>大功告成! 開始Qt的世界</h3><p><img src="https://i.imgur.com/w50mjXK.png" alt="" title="Hello World!"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇環境使用版本:&lt;br&gt;&lt;a href=&quot;https://download.qt.io/official_releases/qt/5.10/5.10.1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QT 5.10.1&lt;/a&gt;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="環境架設" scheme="https://teddybearfp.github.io/tags/%E7%92%B0%E5%A2%83%E6%9E%B6%E8%A8%AD/"/>
    
  </entry>
  
</feed>
