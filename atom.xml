<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泰迪熊的程式足跡</title>
  
  <subtitle>遊走程式森林的泰迪熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teddybearfp.github.io/"/>
  <updated>2019-02-23T04:46:44.207Z</updated>
  <id>https://teddybearfp.github.io/</id>
  
  <author>
    <name>G.C.L.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Signal &amp; Slot</title>
    <link href="https://teddybearfp.github.io/2019/02/23/Signal-Slot/"/>
    <id>https://teddybearfp.github.io/2019/02/23/Signal-Slot/</id>
    <published>2019-02-23T04:05:16.000Z</published>
    <updated>2019-02-23T04:46:44.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這次編寫State Machine的時候遇到一個問題，如果先呼叫QState的函式再呼叫主執行緒的函式，得到的結果會是主執行緒得先完成跟預期順序不一致，因為QState本身也是一條執行緒所以導致這結果，所以我們運用Signal跟Slot機制傳遞事件完成信號，讓主執行緒知道QState內的函式完成函式內容了</p><h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><h3 id="檔案簡介"><a href="#檔案簡介" class="headerlink" title="檔案簡介"></a>檔案簡介</h3><p>A檔案: 狀態機某狀態(ex: Class MotorMoveState)<br>B檔案: 狀態機(Static) (Class StateMachine)<br>C檔案: UI介面cpp (Class FunctionTester)</p><h3 id="錯誤實例"><a href="#錯誤實例" class="headerlink" title="錯誤實例"></a>錯誤實例</h3><p>在C檔案中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> FunctionTester::MotorMove(<span class="keyword">float</span> steps, <span class="keyword">float</span> speed)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> xPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> yPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> zPosition = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    StateMachine::Inst()-&gt;move(steps, speed); <span class="comment">//move為StateMachine內的Signal, prototype為move(float, float);</span></span><br><span class="line">    GetMotorsPosition(&amp;xPosition, &amp;yPosition, &amp;zPosition);</span><br><span class="line">    </span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"xPosition:"</span>&lt;&lt;xPosition;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"yPosition:"</span>&lt;&lt;yPosition;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"zPosition:"</span>&lt;&lt;zPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上程式碼原本期許是馬達移動完後，將三組int記憶體位置傳下去，收到時會得到x,y,z的位置。<br>但是因為StateMachine的編寫是QState透過另一條執行緒達成的，所以會在馬達移動的同時繼續往下執行，先執行了取得馬達位置GetMotorsPosition(int<em>, int</em>, int*)，這樣取得的位置都會是上一次馬達移動完成後的位置，如上x,y,z第一次執行時會得到0,0,0</p><h2 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h2><p>我們要馬達移動完成後，數據自動更新的辦法就是要用，Signal跟Slot，這樣即使StateMachine自身為一條執行緒依舊會在完成時告訴我們上層UI.cpp完成事件</p><h3 id="Signal-amp-Slot"><a href="#Signal-amp-Slot" class="headerlink" title="Signal &amp; Slot"></a>Signal &amp; Slot</h3><p>Qt管理的物件必須繼承QObject類別，以提供Qt物件的Meta訊息，若要實作Signal與Slot機制，則必須包括Q_OBJECT巨集，moc會處理Qt的C++擴充（Meta-Object System），使用moc讀取C++標頭檔案，若發現類別定義中包括Q_OBJECT巨集，就會產生Qt meta-object相關的C++程式碼。</p><p>Signal皆為void型態所以不能回傳值，只能放在參數中傳遞</p><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>Signal命名: 過去式動詞(ex: captured)<br>Slot命名: on大寫開頭的signal(ex:onCaptured)</p><h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>傳接球的概念</p><p>connect(恰恰, SIGNAL(丟球), 大師兄, SLOT(接球));</p><p>恰恰丟球給大師兄接到後再作後續處理</p><p>接球 {<br>    對接到的球做處理;<br>    }</p><h4 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h4><p>有connect就要disconnect才不會讓記憶體釋放的時候有異常</p><p>disconnect(恰恰, SIGNAL(丟球), 大師兄, SLOT(接球));</p><h4 id="簡易傳遞"><a href="#簡易傳遞" class="headerlink" title="簡易傳遞"></a>簡易傳遞</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span><span class="keyword">public</span> QObject <span class="comment">//Qt管理的物件必須繼承QObject類別</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//必須包括Q_OBJECT巨集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A();</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">received</span><span class="params">()</span></span>; <span class="comment">//負責送出</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">emit <span class="title">received</span><span class="params">()</span></span>; <span class="comment">//建構子完成時送出信號</span></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="comment">//B.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"A.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> QObject <span class="comment">//Qt管理的物件必須繼承QObject類別</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//必須包括Q_OBJECT巨集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onReceived</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.cpp</span></span><br><span class="line">B::B()</span><br><span class="line">&#123;</span><br><span class="line">    connect(&amp;a,SIGNAL(received()),<span class="keyword">this</span>,SLOT(onReceived()), Qt::DirectConnection);  <span class="comment">//DirectConnection指的是用同一條執行緒執行完才繼續</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> B::onReceived() &#123;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Received!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解決辦法實作"><a href="#解決辦法實作" class="headerlink" title="解決辦法實作"></a>解決辦法實作</h3><p>使用signal跟slot讓QState完成時得到通知<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.h</span></span><br><span class="line">signal:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveOk</span><span class="params">()</span></span>;</span><br><span class="line">A.cpp    </span><br><span class="line">    function &#123;</span><br><span class="line">        <span class="comment">//完成時</span></span><br><span class="line">        <span class="function">emit <span class="title">moveOk</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.h</span></span><br><span class="line">signal:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">positionChange</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onMoveOk</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.cpp    </span></span><br><span class="line">    <span class="comment">//build graph內部寫 (創狀態機時)</span></span><br><span class="line">    connect(&amp;A, moveOk(), <span class="keyword">this</span>, OnMoveOk());</span><br><span class="line">    <span class="keyword">void</span> B::onMoveOk &#123;</span><br><span class="line">        <span class="function">emit <span class="title">positionChange</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.h</span></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPositionChange</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.cpp    </span></span><br><span class="line">    C::C &#123;</span><br><span class="line">        connect(B::Inst(), positionChange(), <span class="keyword">this</span>, onPositionChange()); </span><br><span class="line">        <span class="comment">//特別注意B::Inst()本身就為記憶體位置所以不用加上&amp;</span></span><br><span class="line">    &#125;</span><br><span class="line">    C::~C &#123;</span><br><span class="line">        disconnect(B::Inst(), positionChange(), <span class="keyword">this</span>, onPositionChange()); </span><br><span class="line">        <span class="comment">//要刪除否則會記憶體有問題</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> C::onPositionChange &#123;</span><br><span class="line">        <span class="comment">//收到完成狀態 </span></span><br><span class="line">        dosomething;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p><a href="https://openhome.cc/Gossip/Qt4Gossip/CustomSignalSlot.html" target="_blank" rel="noopener">自訂Signal 與Slot - OpenHome.cc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這次編寫State Machine的時候遇到一個問題，如果先呼叫QState的函式再呼叫主執行緒的函式，得到的結果會是主執行緒得先完成跟預期
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Signal" scheme="https://teddybearfp.github.io/tags/Signal/"/>
    
      <category term="Slot" scheme="https://teddybearfp.github.io/tags/Slot/"/>
    
  </entry>
  
  <entry>
    <title>用NSIS製作軟體安裝程式</title>
    <link href="https://teddybearfp.github.io/2019/02/01/%E7%94%A8NSIS%E8%A3%BD%E4%BD%9C%E8%BB%9F%E9%AB%94%E5%AE%89%E8%A3%9D%E7%A8%8B%E5%BC%8F/"/>
    <id>https://teddybearfp.github.io/2019/02/01/用NSIS製作軟體安裝程式/</id>
    <published>2019-02-01T06:05:16.000Z</published>
    <updated>2019-02-01T13:40:28.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過NSIS腳本可以將程式打包成安裝檔，提供給他人使用，這樣就可以把自己寫好的程式碼，給別人安裝與使用，好像很厲害的感覺，接下來了解一下如何看起來好像很厲害吧!</p><h2 id="生成需要的檔案"><a href="#生成需要的檔案" class="headerlink" title="生成需要的檔案"></a>生成需要的檔案</h2><p>在pro檔中，加上下列程式碼，並以Release去編譯。<br>目的是將所有需要的檔案集中到OUT_PWD(資料夾、執行檔、dll、vcredist_x86.exe)<br>vcredist_x86:可轉散發套件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">isEmpty(TARGET_EXT) &#123;</span><br><span class="line">    win32 &#123;</span><br><span class="line">        TARGET_CUSTOM_EXT = .exe</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    TARGET_CUSTOM_EXT = $$&#123;TARGET_EXT&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win32 &#123;</span><br><span class="line">    DEPLOY_COMMAND = windeployqt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win32:CONFIG(debug, debug|release): DEPLOY_TARGET = $$shell_quote($$shell_path($$OUT_PWD/debug/$$&#123;TARGET&#125;$$&#123;TARGET_CUSTOM_EXT&#125;))</span><br><span class="line">win32:CONFIG(release, debug|release): DEPLOY_TARGET = $$shell_quote($$shell_path($$OUT_PWD/release/$$&#123;TARGET&#125;$$&#123;TARGET_CUSTOM_EXT&#125;))</span><br><span class="line"></span><br><span class="line">  # Uncomment the following line to help debug the deploy command when running qmake</span><br><span class="line">  warning($$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;)</span><br><span class="line"></span><br><span class="line">contains(QMAKE_TARGET.arch, x86) &#123;</span><br><span class="line">    QMAKE_POST_LINK = $$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;  --qmldir C:\Qt\Qt5<span class="number">.10</span><span class="number">.1</span>\<span class="number">5.10</span><span class="number">.1</span>\msvc2015\qml</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contains(QMAKE_TARGET.arch, x86_64) &#123;</span><br><span class="line">    QMAKE_POST_LINK = $$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;  --qmldir C:\Qt\Qt5<span class="number">.10</span><span class="number">.1</span>\<span class="number">5.10</span><span class="number">.1</span>\msvc2015_64\qml</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="NSIS-程式碼"><a href="#NSIS-程式碼" class="headerlink" title="NSIS 程式碼"></a>NSIS 程式碼</h2><p>如果沒有driver要安裝可以拿掉driver相關程式碼<br><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">!include</span> x64.nsh</span><br><span class="line"><span class="keyword">!include</span> WordFunc.nsh</span><br><span class="line"><span class="keyword">!include</span> <span class="string">"MUI.nsh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;!insertmacro MUI_PAGE_DIRECTORY ;path selection page</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UninstPage</span> <span class="literal">uninstConfirm</span></span><br><span class="line"><span class="keyword">UninstPage</span> <span class="literal">instfiles</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> NAME <span class="string">"TeddyBearFP"</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_PUBLISHER <span class="string">"G.C.L."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> MAIN_FILE <span class="string">"release.zip"</span></span><br><span class="line"><span class="keyword">!define</span> UNINSTALL <span class="string">"Uninstall.exe"</span></span><br><span class="line"><span class="keyword">!define</span> DRIVER_INSTALL <span class="string">"win7DriverInstall.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> DRIVER_X64 <span class="string">"DriverX64"</span></span><br><span class="line"><span class="keyword">!define</span> DRIVER_X86 <span class="string">"DriverX86"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> MAIN_PROGRAM_PATH <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The name of the installer</span></span><br><span class="line"><span class="keyword">Name</span> <span class="string">"<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The file to write</span></span><br><span class="line"><span class="keyword">OutFile</span> <span class="string">"<span class="variable">$&#123;NAME&#125;</span>.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The default installation directory</span></span><br><span class="line"><span class="keyword">InstallDir</span> <span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span></span><br><span class="line"><span class="comment">;InstallDir $PROGRAMFILES\$&#123;NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Request application privileges for Windows Vista</span></span><br><span class="line"><span class="keyword">RequestExecutionLevel</span> <span class="literal">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Pages</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Page</span> <span class="literal">directory</span></span><br><span class="line"><span class="keyword">Page</span> <span class="literal">instfiles</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Var</span> DriverPath</span><br><span class="line"><span class="comment">;--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Install Section</span></span><br><span class="line"><span class="function"><span class="keyword">Section</span> "Install"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Set output path to the installation directory.</span></span><br><span class="line"><span class="keyword">SetOutPath</span> <span class="variable">$INSTDIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Put file there</span></span><br><span class="line"><span class="keyword">File</span> <span class="string">"<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span></span><br><span class="line"><span class="keyword">CreateDirectory</span> <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line"><span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span> <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;File "$&#123;MAIN_PROGRAM_PATH&#125;\vcredist_x86.exe"</span></span><br><span class="line"><span class="keyword">ExecWait</span> <span class="string">'"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>\vcredist_x86.exe" /q /norestart'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;If&#125;</span> <span class="variable">$&#123;RunningX64&#125;</span></span><br><span class="line"><span class="keyword">File</span> <span class="string">"DriverX64.zip"</span></span><br><span class="line"><span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>"</span></span><br><span class="line"><span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span> <span class="variable">$INSTDIR</span>  </span><br><span class="line"><span class="variable">$&#123;Else&#125;</span></span><br><span class="line"><span class="keyword">File</span> <span class="string">"DriverX86.zip"</span></span><br><span class="line"><span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>"</span></span><br><span class="line"><span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span> <span class="variable">$INSTDIR</span> </span><br><span class="line"><span class="variable">$&#123;EndIf&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DetailPrint</span> <span class="string">"Driver Setup..."</span></span><br><span class="line"><span class="keyword">ExecWait</span> <span class="string">"<span class="variable">$DriverPath</span>\<span class="variable">$&#123;DRIVER_INSTALL&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">WriteUninstaller</span> <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">CreateDirectory</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line"><span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.exe"</span> </span><br><span class="line"><span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>"</span> </span><br><span class="line"><span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\dotNetFx40_Full_x86_x64.exe"</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="variable">$DriverPath</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">RMDir</span> /r <span class="variable">$DriverPath</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">MessageBox</span> <span class="params">MB_YESNO</span>|<span class="params">MB_ICONQUESTION</span>|<span class="params">MB_TOPMOST</span> <span class="string">"Please reboot computer"</span> <span class="params">IDNO</span> noreboot</span><br><span class="line"><span class="keyword">Reboot</span></span><br><span class="line">  </span><br><span class="line">noreboot:</span><br><span class="line"><span class="keyword">SectionEnd</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Section</span> "Uninstall"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Var</span> /GLOBAL INFNameBrard</span><br><span class="line"> </span><br><span class="line">  <span class="variable">$&#123;If&#125;</span> <span class="variable">$&#123;RunningX64&#125;</span></span><br><span class="line">    <span class="keyword">File</span> <span class="string">"DriverX64.zip"</span></span><br><span class="line">    <span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$TEMP</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>"</span></span><br><span class="line"><span class="keyword">StrCpy</span> <span class="variable">$INFNameBrard</span> <span class="string">"Usb_iCamBase64.inf"</span></span><br><span class="line">    <span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span> <span class="variable">$TEMP</span>  </span><br><span class="line">  <span class="variable">$&#123;Else&#125;</span></span><br><span class="line">    <span class="keyword">File</span> <span class="string">"DriverX86.zip"</span></span><br><span class="line">    <span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$TEMP</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>"</span></span><br><span class="line"><span class="keyword">StrCpy</span> <span class="variable">$INFNameBrard</span> <span class="string">"Usb_iCamBase86.inf"</span></span><br><span class="line">    <span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span> <span class="variable">$TEMP</span>   </span><br><span class="line">  <span class="variable">$&#123;EndIf&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">ExecWait</span> <span class="string">"<span class="variable">$DriverPath</span>\<span class="variable">$&#123;DRIVER_INSTALL&#125;</span> /S /U <span class="variable">$DriverPath</span>\<span class="variable">$INFNameBrard</span>"</span></span><br><span class="line">  <span class="comment">;ExecWait "$DriverPath\$&#123;DRIVER_INSTALL&#125; /S /U $DriverPath\RtsUVC.inf"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> /r <span class="variable">$DriverPath</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> /r <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line">  <span class="keyword">RMDir</span> <span class="variable">$INSTDIR</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>.lnk"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SectionEnd</span> <span class="comment">; end the section</span></span><br></pre></td></tr></table></figure></p><h2 id="壓縮需要的檔案"><a href="#壓縮需要的檔案" class="headerlink" title="壓縮需要的檔案"></a>壓縮需要的檔案</h2><p>Pro添加上述程式碼後，用release編譯後，將OUT_PWD(資料夾、執行檔、dll、vcredist_x86.exe)壓縮成release.zip</p><h2 id="產出安裝檔"><a href="#產出安裝檔" class="headerlink" title="產出安裝檔"></a>產出安裝檔</h2><h3 id="放在NSIS腳本同一層中"><a href="#放在NSIS腳本同一層中" class="headerlink" title="放在NSIS腳本同一層中"></a>放在NSIS腳本同一層中</h3><p><img src="https://i.imgur.com/hIRQ4Pk.png" alt=""></p><h3 id="執行NSIS"><a href="#執行NSIS" class="headerlink" title="執行NSIS"></a>執行NSIS</h3><p><img src="https://i.imgur.com/7Vtg8gd.png" alt=""></p><h3 id="選擇腳本-gt-編譯"><a href="#選擇腳本-gt-編譯" class="headerlink" title="選擇腳本 -&gt; 編譯"></a>選擇腳本 -&gt; 編譯</h3><p><img src="https://i.imgur.com/c09TvTT.png" alt=""></p><h3 id="產出安裝檔-1"><a href="#產出安裝檔-1" class="headerlink" title="產出安裝檔"></a>產出安裝檔</h3><p><img src="https://i.imgur.com/rCaQcrU.png" alt=""></p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p><img src="https://i.imgur.com/n9TDLUE.png" alt=""></p><p><img src="https://i.imgur.com/wvlxcqO.png" alt=""></p><h3 id="開始使用應用程式"><a href="#開始使用應用程式" class="headerlink" title="開始使用應用程式!"></a>開始使用應用程式!</h3><p><img src="https://i.imgur.com/0RTObiM.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;透過NSIS腳本可以將程式打包成安裝檔，提供給他人使用，這樣就可以把自己寫好的程式碼，給別人安裝與使用，好像很厲害的感覺，接下來了解一下如何
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="NSIS" scheme="https://teddybearfp.github.io/tags/NSIS/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬取Google學術網頁PDF</title>
    <link href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/"/>
    <id>https://teddybearfp.github.io/2019/01/31/Python-爬取學術網頁PDF/</id>
    <published>2019-01-31T14:05:16.000Z</published>
    <updated>2019-01-31T15:12:11.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近身邊朋友有爬取Google 學術搜尋需求，燃起我心中想挑戰這次的爬蟲任務，他的需求是要搜尋某個學術論文然後把所有搜尋到的PDF載下，這一篇紀錄開啟網頁自動爬取並換頁直到爬取完成所有搜尋，後續使用textract剖析PDF快速地分析內容。</p><p><img src="https://i.imgur.com/3mFKgvk.gif" alt="" title="自動搜尋爬取"></p><h2 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h2><p>透過selenium webdriver <a href="https://chromedriver.storage.googleapis.com/index.html?path=2.45/" target="_blank" rel="noopener">ChromeDriver</a>的方式爬取動態目標，首先設定Chromedriver跟user agent、session id偽裝，開啟網頁並自動搜尋目標，需要的檔案網址放進List中，自動換頁直到頁尾，爬取完所有檔案網址後，檢查是否有目標資料夾，再利用多進程(multiprocessing)分散式爬蟲，加速下載。<br>爬取完成後，使用textract剖析PDF快速地分析內容。</p><h2 id="創建資料夾"><a href="#創建資料夾" class="headerlink" title="創建資料夾"></a>創建資料夾</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:                   </span><br><span class="line">        os.makedirs(path)            </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  created Scholar folder...  ---"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  Scholar folder has already exist!  ---"</span>)</span><br></pre></td></tr></table></figure><h2 id="建立Chromedriver"><a href="#建立Chromedriver" class="headerlink" title="建立Chromedriver"></a>建立Chromedriver</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">search_scholar = <span class="string">"Teece"</span></span><br><span class="line">chrome_driver_path = <span class="string">"D:\chromedriver\chromedriver.exe"</span></span><br><span class="line">google_scholar = <span class="string">"https://scholar.google.com.tw/schhp?hl=zh-TW&amp;as_sdt=0,5"</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">prefs = &#123;<span class="string">'profile.default_content_settings.popups'</span>: <span class="number">0</span>, <span class="string">'download.default_directory'</span>: path&#125;</span><br><span class="line">option.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">option.add_argument(<span class="string">'headless'</span>)</span><br><span class="line"><span class="comment">#driver = webdriver.Chrome(chrome_driver_path,chrome_options=option) </span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">'D:\chromedriver\chromedriver.exe'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OpenSearchIndex</span><span class="params">()</span>:</span></span><br><span class="line">    driver.get(google_scholar)</span><br><span class="line">    session_id = driver.session_id</span><br><span class="line">    print(<span class="string">'session_id:'</span>,session_id)</span><br></pre></td></tr></table></figure><h2 id="自動輸入"><a href="#自動輸入" class="headerlink" title="自動輸入"></a>自動輸入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SearchScolar</span><span class="params">(searchTarget)</span>:</span></span><br><span class="line">    target = searchTarget</span><br><span class="line">    q = driver.find_element_by_name(<span class="string">'q'</span>)</span><br><span class="line">    q.send_keys(target)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">    q.send_keys(Keys.RETURN)</span><br></pre></td></tr></table></figure><h2 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Parse</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">    soup = BeautifulSoup(driver.page_source,<span class="string">'html.parser'</span>)</span><br><span class="line">    lis = []</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.select(<span class="string">'.gs_or_ggsm a'</span>):</span><br><span class="line">        <span class="comment">#title = item.select('gs_rt a').text</span></span><br><span class="line">        ref = item.text</span><br><span class="line">        ref_href = item.get(<span class="string">'href'</span>)</span><br><span class="line">        dic = &#123;<span class="string">'ref'</span>:ref,<span class="string">'ref_href'</span>:ref_href&#125;</span><br><span class="line">        lis.append(dic)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span>(c[<span class="string">'ref_href'</span>].endswith(<span class="string">'.pdf'</span>)):</span><br><span class="line">            file_name = c[<span class="string">'ref'</span>].strip(<span class="string">"[PDF]"</span>).strip(<span class="string">" "</span>)</span><br><span class="line">            Download(file_name, c[<span class="string">'ref_href'</span>])</span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="下載"><a href="#下載" class="headerlink" title="下載"></a>下載</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Download</span><span class="params">(file_name, url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">        d = urllib.request.URLopener()</span><br><span class="line">        d.retrieve(url, <span class="string">"D://Scholar/"</span> + file_name + <span class="string">".pdf"</span>)</span><br><span class="line">        print(file_name , url)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"HTTPError"</span>,e.code,url)</span><br></pre></td></tr></table></figure><h2 id="自動換頁"><a href="#自動換頁" class="headerlink" title="自動換頁"></a>自動換頁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NextPage</span><span class="params">()</span>:</span></span><br><span class="line">    driver.find_element_by_link_text(<span class="string">"下一頁"</span>).click()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/h98rpM1.gif" alt="" title="自動換頁爬取"></p><h2 id="關閉Chromedriver"><a href="#關閉Chromedriver" class="headerlink" title="關閉Chromedriver"></a>關閉Chromedriver</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">End</span><span class="params">()</span>:</span></span><br><span class="line">    driver.close()</span><br></pre></td></tr></table></figure><h2 id="剖析PDF"><a href="#剖析PDF" class="headerlink" title="剖析PDF"></a>剖析PDF</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textract, re</span><br><span class="line">text = textract.process(<span class="string">"sample.pdf"</span>)</span><br><span class="line">words = re.findall(<span class="string">r"[^\W_]+"</span>, text, re.MULTILINE)</span><br><span class="line">print(len(words))</span><br><span class="line">print(words)</span><br></pre></td></tr></table></figure><h2 id="完整實作"><a href="#完整實作" class="headerlink" title="完整實作"></a>完整實作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Empty</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process ,Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:                   </span><br><span class="line">        os.makedirs(path)            </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  created Scholar folder...  ---"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  Scholar folder has already exist!  ---"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Download</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        file_name = <span class="keyword">None</span></span><br><span class="line">        url = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = q.get(block=<span class="keyword">False</span>)</span><br><span class="line">            file_name = info[<span class="string">"file_name"</span>]</span><br><span class="line">            url = info[<span class="string">"url"</span>]</span><br><span class="line">            ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">            d = urllib.request.URLopener()</span><br><span class="line">            d.retrieve(url, <span class="string">"D://Scholar/"</span> + file_name + <span class="string">".pdf"</span>)</span><br><span class="line">            print(file_name , url)</span><br><span class="line">        <span class="keyword">except</span> Empty:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPARSE</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.search_scholar = <span class="string">"Teece"</span></span><br><span class="line">        self.chrome_driver_path = <span class="string">"D:\chromedriver\chromedriver.exe"</span></span><br><span class="line">        self.google_scholar = <span class="string">"https://scholar.google.com.tw/schhp?hl=zh-TW&amp;as_sdt=0,5"</span></span><br><span class="line">        self.path = os.path.join(<span class="string">'D:'</span>,<span class="string">'Scholar'</span>)</span><br><span class="line">        self.driver = self.Setdriver()</span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line">        self.needDownloadUrls = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.OpenSearchIndex()</span><br><span class="line">        self.SearchScolar(self.search_scholar)</span><br><span class="line">        self.Parse()</span><br><span class="line">        self.End()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Setdriver</span><span class="params">(self)</span>:</span></span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        prefs = &#123;<span class="string">'profile.default_content_settings.popups'</span>: <span class="number">0</span>, <span class="string">'download.default_directory'</span>: self.path&#125;</span><br><span class="line">        option.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">        option.add_argument(<span class="string">'headless'</span>)</span><br><span class="line">        driver = webdriver.Chrome(<span class="string">'D:\chromedriver\chromedriver.exe'</span>)</span><br><span class="line">        <span class="comment">#driver = webdriver.Chrome(self.chrome_driver_path, chrome_options=option)</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OpenSearchIndex</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.get(self.google_scholar)</span><br><span class="line">        session_id = self.driver.session_id</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">'session_id:'</span>,session_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SearchScolar</span><span class="params">(self, searchTarget)</span>:</span></span><br><span class="line">        target = searchTarget</span><br><span class="line">        q = self.driver.find_element_by_name(<span class="string">'q'</span>)</span><br><span class="line">        q.send_keys(target)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">        q.send_keys(Keys.RETURN)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NextPage</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.counter &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.driver.find_element_by_link_text(<span class="string">"下一頁"</span>).click()</span><br><span class="line">            self.counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Parse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">            soup = BeautifulSoup(self.driver.page_source,<span class="string">'html.parser'</span>)</span><br><span class="line">            lis = []</span><br><span class="line">            dic = &#123;&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> soup.select(<span class="string">'.gs_or_ggsm a'</span>):</span><br><span class="line">                <span class="comment">#title = item.select('gs_rt a').text</span></span><br><span class="line">                ref = item.text</span><br><span class="line">                ref_href = item.get(<span class="string">'href'</span>)</span><br><span class="line">                dic = &#123;<span class="string">'ref'</span>:ref,<span class="string">'ref_href'</span>:ref_href&#125;</span><br><span class="line">                lis.append(dic)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> lis:</span><br><span class="line">                <span class="keyword">if</span>(c[<span class="string">'ref_href'</span>].endswith(<span class="string">'.pdf'</span>)):</span><br><span class="line">                    file_name = c[<span class="string">'ref'</span>].strip(<span class="string">"[PDF]"</span>).strip(<span class="string">" "</span>)</span><br><span class="line">                    _info = &#123;&#125;</span><br><span class="line">                    _info[<span class="string">"file_name"</span>] = file_name</span><br><span class="line">                    _info[<span class="string">"url"</span>] = c[<span class="string">'ref_href'</span>]</span><br><span class="line">                    self.needDownloadUrls.append(_info)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.NextPage():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">End</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.close()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDownloadList</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.needDownloadUrls</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    path = os.path.join(<span class="string">'D:'</span>,<span class="string">'Scholar'</span>)</span><br><span class="line">    mkdir(path)</span><br><span class="line">    </span><br><span class="line">    pOBJ = URLPARSE()</span><br><span class="line">    pOBJ.start()</span><br><span class="line">    downloadList = pOBJ.getDownloadList()</span><br><span class="line">    </span><br><span class="line">    downloadQueue = Queue()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> downloadList:</span><br><span class="line">        print(d)</span><br><span class="line">        downloadQueue.put(d, block=<span class="keyword">False</span>)</span><br><span class="line">    </span><br><span class="line">    Processes = [Process(target=Download, args=(downloadQueue,)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">        p.join()</span><br><span class="line">     </span><br><span class="line">    print(<span class="string">"Scholar download Finished!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近身邊朋友有爬取Google 學術搜尋需求，燃起我心中想挑戰這次的爬蟲任務，他的需求是要搜尋某個學術論文然後把所有搜尋到的PDF載下，這一
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="分散式爬蟲" scheme="https://teddybearfp.github.io/tags/%E5%88%86%E6%95%A3%E5%BC%8F%E7%88%AC%E8%9F%B2/"/>
    
      <category term="換頁爬取" scheme="https://teddybearfp.github.io/tags/%E6%8F%9B%E9%A0%81%E7%88%AC%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>步進馬達</title>
    <link href="https://teddybearfp.github.io/2019/01/31/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94/"/>
    <id>https://teddybearfp.github.io/2019/01/31/步進馬達/</id>
    <published>2019-01-31T05:05:16.000Z</published>
    <updated>2019-01-31T13:19:15.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步進馬達"><a href="#步進馬達" class="headerlink" title="步進馬達"></a>步進馬達</h2><p>步進馬達步級角構造，黃色部分為每次脈波行走量<br>步進馬達（Stepper motor; Step motor）是直流無刷馬達的一種，為具有如齒輪狀突起（小齒）相鍥合的定子和轉子，可藉由切換流向定子線圈中的電流，以一定角度逐步轉動的馬達。</p><p>步進馬達的特徵是採用開迴路控制（Open-loop control）處理，不需要運轉量檢知器（sensor）或編碼器，且切換電流觸發器的是脈波信號，不需要位置檢出和速度檢出的回授裝置，所以步進馬達可正確地依比例追隨脈波信號而轉動，因此就能達成精確的位置和速度控制，且穩定性佳。</p><h2 id="移動指令-Write"><a href="#移動指令-Write" class="headerlink" title="移動指令(Write)"></a>移動指令(Write)</h2><h3 id="Hz"><a href="#Hz" class="headerlink" title="Hz"></a>Hz</h3><p>影響移動速度</p><h3 id="Step-Method"><a href="#Step-Method" class="headerlink" title="Step Method"></a>Step Method</h3><p>微步進方式(Full,二分之一,四分之一,八分之一…)影響移動流暢度</p><h3 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h3><p>假如預設馬達轉一圈為200 Step<br><img src="https://i.imgur.com/9nUaYW5.png" alt="以四分之一微步如上面表格"></p><h2 id="檢測狀態-Read-Status"><a href="#檢測狀態-Read-Status" class="headerlink" title="檢測狀態(Read Status)"></a>檢測狀態(Read Status)</h2><h3 id="運作方式"><a href="#運作方式" class="headerlink" title="運作方式"></a>運作方式</h3><p>看當前設計以下為舉例<br>第一個bit表示是否在Home<br>第三個bit表示Task是否完成</p><p><img src="https://i.imgur.com/1B64Gn5.png" alt=""></p><p>馬達在Home且還沒下任何指令時，讀取時值應該為5(0101)<br>移動時有未完成任務並且不在Home，讀取值應該為0(0000)<br>完成移動並且不在Home，讀取值應為4(0100)</p><p>一個在Home的馬達移動的過程為<br><img src="https://i.imgur.com/Qlg2GOq.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94" target="_blank" rel="noopener">步進馬達- 维基百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;步進馬達&quot;&gt;&lt;a href=&quot;#步進馬達&quot; class=&quot;headerlink&quot; title=&quot;步進馬達&quot;&gt;&lt;/a&gt;步進馬達&lt;/h2&gt;&lt;p&gt;步進馬達步級角構造，黃色部分為每次脈波行走量&lt;br&gt;步進馬達（Stepper motor; Step motor）是直流無刷
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="步進馬達" scheme="https://teddybearfp.github.io/tags/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Python解析ts檔(XML)</title>
    <link href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/"/>
    <id>https://teddybearfp.github.io/2019/01/11/Python解析ts檔-XML/</id>
    <published>2019-01-11T05:05:16.000Z</published>
    <updated>2019-01-11T15:53:32.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用Qt Creator生成多國語言，步驟為生成ts檔，再生成qm檔，最後通過QTranslator類來載入qm文檔，實現多國語言的切換。那我們來看看怎麼處理ts檔呢</p><h2 id="ts-file"><a href="#ts-file" class="headerlink" title="ts file"></a>ts file</h2><p>ts file內容是XML編寫的，我們用python parsing的方式將特定內容取代達到目的</p><p>將默認為英文的應用程式，要翻譯成繁體中文，我們在XML內容中，要尋找並取代的地方就是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;尋找&lt;/source&gt;</span><br><span class="line">&lt;translation&gt;取代&lt;/translation&gt;</span><br></pre></td></tr></table></figure></p><p>例如:<br>下面範例我們先找到一樣的來源<source><br>並將csv檔中對應的<translation></translation>內容取代成翻譯過的文字</p><p>en-US.ts 英文<br>zh-TW.ts 繁體中文<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translation</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translation</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding: utf-8-*-</span></span><br><span class="line"><span class="comment">#Multi-Language</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> glob  <span class="comment">#取得所有同副檔名檔案</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree <span class="keyword">as</span> ET</span><br><span class="line">reference_file = <span class="string">"Multi-Language.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#取得所有ts檔名稱</span></span><br><span class="line">tsFile = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> glob.glob(<span class="string">'*.ts'</span>):</span><br><span class="line">    tsFile.append(file)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#讀取Multi-Language.csv檔案</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = pd.read_csv(reference_file,encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(reference_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf-8'</span>) <span class="keyword">as</span> filex:</span><br><span class="line">        filereader = csv.reader(filex)</span><br><span class="line">        header = next(filereader)</span><br><span class="line">    headers = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">    count_header = len(headers)</span><br><span class="line"><span class="comment">#確認編碼</span></span><br><span class="line"><span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'\n請檢查csv檔編碼是否改為UTF-8並再試一次!'</span>)</span><br><span class="line">    input(<span class="string">'請按任意鍵繼續。。。'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#將csv欄位名稱寫定</span></span><br><span class="line">csv_headers = [<span class="string">'German'</span>,<span class="string">'en-US'</span>,<span class="string">'Spanish'</span>,<span class="string">'French'</span>,<span class="string">'Italian'</span>,<span class="string">'Japanese'</span>,<span class="string">'zh-CN'</span>,<span class="string">'zh-TW'</span>]</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment">#讀取ts檔 XML內容</span></span><br><span class="line"><span class="keyword">for</span> inputFile <span class="keyword">in</span> tsFile:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(inputFile, <span class="string">'r'</span>,encoding =<span class="string">'utf-8'</span>) <span class="keyword">as</span> xml_file:</span><br><span class="line">            updateTree = ET.parse(xml_file)</span><br><span class="line">        root = updateTree.getroot()</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'\n請檢查xml檔編碼是否改為UTF-8並再試一次!'</span>)</span><br><span class="line">        input(<span class="string">'請按任意鍵繼續。。。'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'\n-------------------------------------------------'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'====================='</span>,inputFile,<span class="string">'====================='</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'-------------------------------------------------\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> context <span class="keyword">in</span> root.findall(<span class="string">'context'</span>):</span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> context.findall(<span class="string">'message'</span>):</span><br><span class="line">            <span class="keyword">for</span> index, content <span class="keyword">in</span> enumerate(file[<span class="string">'Source'</span>]):</span><br><span class="line">                <span class="keyword">if</span> type(file[csv_headers[count]][index]) == str:</span><br><span class="line">                    <span class="keyword">if</span> message.find(<span class="string">'source'</span>).text.lower() == content.lower():</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">'source:'</span>,message.find(<span class="string">'source'</span>).text,<span class="string">' content:'</span> ,content)</span><br><span class="line">                        print(<span class="string">'match:'</span>, file[csv_headers[count]][index],<span class="string">'\n'</span>)</span><br><span class="line">                        message.find(<span class="string">'translation'</span>).text = file[csv_headers[count]][index]</span><br><span class="line">                        <span class="keyword">if</span>(message.find(<span class="string">'translation'</span>).attrib):</span><br><span class="line">                            <span class="keyword">del</span> message.find(<span class="string">'translation'</span>).attrib[<span class="string">'type'</span>]</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> message.find(<span class="string">'source'</span>).text.lower() == content.lower():</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">'source:'</span>,message.find(<span class="string">'source'</span>).text,<span class="string">' content:'</span> ,content)</span><br><span class="line">                        print(<span class="string">'match:'</span>, file[csv_headers[count]][index],<span class="string">'\n'</span>)</span><br><span class="line">                        message.find(<span class="string">'translation'</span>).text = <span class="string">' '</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#寫檔</span></span><br><span class="line">    updateTree.write(inputFile,encoding =<span class="string">'utf-8'</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'完成～ 已生成所有翻譯檔!!!'</span>)</span><br><span class="line"><span class="comment">#input('請按任意鍵繼續。。。')</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;用Qt Creator生成多國語言，步驟為生成ts檔，再生成qm檔，最後通過QTranslator類來載入qm文檔，實現多國語言的切換。那我
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="XML" scheme="https://teddybearfp.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Qt 滑鼠事件偵測</title>
    <link href="https://teddybearfp.github.io/2019/01/09/Qt-%E6%BB%91%E9%BC%A0%E4%BA%8B%E4%BB%B6%E5%81%B5%E6%B8%AC/"/>
    <id>https://teddybearfp.github.io/2019/01/09/Qt-滑鼠事件偵測/</id>
    <published>2019-01-09T14:05:16.000Z</published>
    <updated>2019-01-11T16:21:48.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過事件的攔截，並且重新賦予事件的行為，這一篇記錄滑鼠相關的事件與處理<br>例如:</p><ul><li>滑鼠按鍵點擊與移動達到物體旋轉</li><li>滾輪滾動達到物體縮放效果</li></ul><h2 id="滑鼠事件偵測實作"><a href="#滑鼠事件偵測實作" class="headerlink" title="滑鼠事件偵測實作"></a>滑鼠事件偵測實作</h2><h3 id="h-標頭檔-宣告"><a href="#h-標頭檔-宣告" class="headerlink" title=".h 標頭檔(宣告)"></a>.h 標頭檔(宣告)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPoint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWheelEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> :</span> <span class="keyword">public</span> QDialog</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Dialog</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *object, QEvent *event)</span></span>; <span class="comment">//虛擬函式</span></span><br><span class="line">    ~Dialog();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Dialog *ui;</span><br><span class="line">    QPoint startPoint;</span><br><span class="line">    QPoint endPoint;</span><br><span class="line">    QPoint curPoint;</span><br><span class="line">    QPoint disPoint;</span><br><span class="line">    QPoint preDisPoint;</span><br><span class="line">    <span class="keyword">bool</span> isFirstTime;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cpp-實作檔-定義"><a href="#cpp-實作檔-定義" class="headerlink" title=".cpp 實作檔(定義)"></a>.cpp 實作檔(定義)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//實作eventFilter虛擬函式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Dialog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_Dialog.h"</span></span></span><br><span class="line"></span><br><span class="line">Dialog::Dialog(QWidget *parent) :</span><br><span class="line">    QDialog(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::Dialog)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;installEventFilter(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Dialog::eventFilter(QObject *obj, QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//偵測滑鼠press事件</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseButtonPress) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime)</span><br><span class="line">            startPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            startPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseButtonPress";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"startPoint:"&lt;&lt;startPoint;</span></span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠移動事件</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseMove) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime) &#123;</span><br><span class="line">            curPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            disPoint = curPoint - startPoint;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            curPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            disPoint = curPoint - startPoint + preDisPoint;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseMove";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"curPoint:"&lt;&lt;curPoint;</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"disPoint:"&lt;&lt;disPoint;</span></span><br><span class="line">        ui-&gt;sceneWidget-&gt;mouseRotate(disPoint.x(),disPoint.y());</span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠Release</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseButtonRelease) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime) &#123;</span><br><span class="line">            endPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            isFirstTime = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            endPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        preDisPoint = disPoint;</span><br><span class="line">        isSetPreDisPoint = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseButtonRelease";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"endPoint: "&lt;&lt;endPoint;</span></span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠滾輪變化</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::QEvent::Wheel) &#123;</span><br><span class="line">        QWheelEvent *wheelEvent = <span class="keyword">static_cast</span>&lt;QWheelEvent*&gt;(event);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(wheelEvent-&gt;delta() &gt; <span class="number">0</span>)</span><br><span class="line">            ui-&gt;sceneWidget-&gt;wheelScale -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ui-&gt;sceneWidget-&gt;wheelScale += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QObject::eventFilter(obj, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/zzwdkxx/article/details/71169361" target="_blank" rel="noopener">QPushButton的鼠標事件處理及EventFilter事件過濾器的用法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;透過事件的攔截，並且重新賦予事件的行為，這一篇記錄滑鼠相關的事件與處理&lt;br&gt;例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑鼠按鍵點擊與移動達到物體旋
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="滑鼠事件" scheme="https://teddybearfp.github.io/tags/%E6%BB%91%E9%BC%A0%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 邊緣偵測</title>
    <link href="https://teddybearfp.github.io/2019/01/09/OpenCV-%E9%82%8A%E7%B7%A3%E5%81%B5%E6%B8%AC/"/>
    <id>https://teddybearfp.github.io/2019/01/09/OpenCV-邊緣偵測/</id>
    <published>2019-01-09T13:05:16.000Z</published>
    <updated>2019-01-11T15:56:20.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些圖片數據需要將多餘的值去除或是透明化，需要先把邊緣<del>人</del>偵測出來，這樣才能掌握圖形<br>此篇文章記錄如何找出下方圖片的第一條曲線的上方邊緣<br><img src="https://i.imgur.com/24wvSeX.jpg" alt="" title="原圖"></p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><p>載入圖片(imread) -&gt; 高斯模糊(GaussianBlur) -&gt; 計算梯度(gradient) -&gt; 找出邊緣後影像處理(imgProc) -&gt; 存取圖片(imwrite)</p><h2 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h2><ul><li>src：輸入可以為多通道圖，會單獨處理各通道，但是通常使用單通道灰階圖，例如CV_8U或CV_16U。</li><li>dst：輸出圖會和輸入圖尺寸、型態相同。</li><li>ksize：模板大小，長寬可以不同，但是都必須為正的奇數。(幾個長寬分別幾個pixel去做平均)</li><li>sigmaX：x方向的標準差。</li><li>sigmaY：y方向的標準差。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寬做25個pixel平均、高做25個pixel平均</span></span><br><span class="line">GaussianBlur(src, gaussianBlurImg, Size(<span class="number">25</span>,<span class="number">25</span>) ,<span class="number">0</span> ,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://i.imgur.com/E1YNnpD.jpg" alt="" title="高斯模糊後的圖形"></p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>將一個512 * 512的影像垂直從上往下找到的第一條直線邊緣記錄起來</p><h3 id="讀取影像-gt-高斯模糊"><a href="#讀取影像-gt-高斯模糊" class="headerlink" title="讀取影像 -&gt; 高斯模糊"></a>讀取影像 -&gt; 高斯模糊</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gradientImg = QImage(imgWidth, imgHeight, QImage::Format_RGB888);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> currentNumber = <span class="number">0</span>; currentNumber &lt; <span class="number">10</span>; currentNumber++) &#123;</span><br><span class="line">    Mat src = imread(<span class="string">"D:/Frame/Test_"</span> + QString::number(currentNumber).toStdString() +<span class="string">".jpg"</span>);<span class="comment">//以迴圈讀取多張(其中必須把int轉成QString再轉乘stdString)</span></span><br><span class="line">    <span class="keyword">if</span> (src.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Load file failed!"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat gaussianBlurImg;</span><br><span class="line">    cvtColor(src, gaussianBlurImg,CV_BGR2RGB); <span class="comment">//將讀取出來的圖片轉成RGB</span></span><br><span class="line">    GaussianBlur(src, gaussianBlurImg, Size(<span class="number">25</span>,<span class="number">25</span>) ,<span class="number">0</span> ,<span class="number">0</span>);<span class="comment">//ksize：模板大小，長寬可以不同，但是都必須為正的奇數。</span></span><br><span class="line">    <span class="function">QImage <span class="title">gradientImg</span><span class="params">((uchar *) gaussianBlurImg.data, <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888)</span></span>;</span><br><span class="line">    gradient(gradientImg);<span class="comment">//做梯度跟其他處理...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>以這次範例來說是以垂直的方式去找變化量大的地方，找到並存入陣列中，這個陣列所存的是512個邊緣的Y座標</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>下一個pixel減掉上一個pixel得到梯度變化量，最後一個數給0不比較</p><p><img src="https://i.imgur.com/Bem5VkX.png" alt="" title="梯度垂直變化量"><br>取得512個變化量，而這個範例來說會有兩次變化量較大的正數值與兩次較小的負數值</p><blockquote><p>取得單獨的每筆梯度可以知道變化量(這個範例就是找到第一次變化最大的地方)<br>梯度 = (G2-G1) </p></blockquote><blockquote><p>(全部的梯度相加，可以簡易判斷影像清晰度)<br>梯度 = ((G1-G2)+(G1-G4))+((G2-G3)+(G2-G5))+… </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> FindBoundary::gradient(QImage gradientImg) &#123;</span><br><span class="line">    <span class="keyword">int</span> imgWidth = <span class="number">512</span>;</span><br><span class="line">    <span class="keyword">int</span> imgHeight = <span class="number">512</span>;</span><br><span class="line">    gradientBits = <span class="keyword">new</span> <span class="keyword">int</span>[imgWidth * imgHeight];</span><br><span class="line">    uchar *bits = gradientImg.bits();<span class="comment">//從上方高斯模糊後傳入的圖</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; imgWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgHeight; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = i*<span class="number">3</span> + j * imgWidth * <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">int</span> idx2 = i*<span class="number">3</span> + (j + <span class="number">1</span>)* imgWidth * <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(j == imgHeight - <span class="number">1</span>)</span><br><span class="line">                gradientBits[count] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                gradientBits[count] = (<span class="keyword">int</span>)(bits[idx2] - bits[idx]);</span><br><span class="line">            <span class="comment">//verify</span></span><br><span class="line"><span class="comment">//            if(i == 254) &#123;</span></span><br><span class="line"><span class="comment">//                //cout&lt;&lt;"gradientBits["&lt;&lt;i&lt;&lt;"]["&lt;&lt;j&lt;&lt;"]:"&lt;&lt;gradientBits[count]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//                cout&lt;&lt;gradientBits[count]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過上面方式得到512組(從X = 0開始掃512次一直到X = 511掃512次)的Y變化量，而我們要取的是第一個變化量最大的地方<br><img src="https://i.imgur.com/2OsF6p5.png" alt="第一組(X=0)的Y(0~511)變化量折線圖"></p><p>找到第一次最大變化量後將其記錄起來，再將它改pixel顏色或是其他處理得到下面的完成圖<br><img src="https://i.imgur.com/fazRSAo.jpg" alt="" title="找到邊緣人啦!!"></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>針對圖片邊緣的操作可以讓光學取得的資料轉換成有效數據，例如:將已知道小的銅幣透過光學拍照，再用邊緣偵測取得到數據與真實大小去做scale，即可做光學校正，另外在3D疊圖時，先將2D圖做些邊緣偵測並處理後再拿去疊圖，可以讓可讀性更高，所以邊緣偵測是個重要的技巧</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://monkeycoding.com/?p=570" target="_blank" rel="noopener">影像平滑(blur、GaussianBlur) | 阿洲的程式教學</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有些圖片數據需要將多餘的值去除或是透明化，需要先把邊緣&lt;del&gt;人&lt;/del&gt;偵測出來，這樣才能掌握圖形&lt;br&gt;此篇文章記錄如何找出下方圖片
      
    
    </summary>
    
      <category term="OpenCV" scheme="https://teddybearfp.github.io/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="https://teddybearfp.github.io/tags/OpenCV/"/>
    
      <category term="邊緣偵測" scheme="https://teddybearfp.github.io/tags/%E9%82%8A%E7%B7%A3%E5%81%B5%E6%B8%AC/"/>
    
  </entry>
  
  <entry>
    <title>標準化(Normalize)</title>
    <link href="https://teddybearfp.github.io/2019/01/08/normalize/"/>
    <id>https://teddybearfp.github.io/2019/01/08/normalize/</id>
    <published>2019-01-08T12:05:16.000Z</published>
    <updated>2019-01-08T14:04:49.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在將數據轉換至RGB時，時常會用到標準化的方式讓數值落在0~255之中</p><h2 id="標準化公式"><a href="#標準化公式" class="headerlink" title="標準化公式"></a>標準化公式</h2><p>需要以下幾組資料</p><h3 id="第一組"><a href="#第一組" class="headerlink" title="第一組"></a>第一組</h3><ul><li>newMax</li><li>newMin</li></ul><h3 id="第二組"><a href="#第二組" class="headerlink" title="第二組"></a>第二組</h3><ul><li>oldMax</li><li>oldMin</li><li>denominator = oldMax - oldMin</li></ul><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> output = newMin + ((<span class="keyword">float</span>)(value - oldMin)/(<span class="keyword">float</span>)denominator) * (newMax - newMin)</span><br></pre></td></tr></table></figure><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>下面的例子將傳入的數值標準化成100~255<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">normalize</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123; <span class="comment">//value 是介於oldMax與oldMin之間的值</span></span><br><span class="line">    <span class="keyword">int</span> newMax = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">int</span> newMin = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldMax = <span class="number">219</span>;</span><br><span class="line">    <span class="keyword">int</span> oldMin = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">int</span> denominator = oldMax - oldMin</span><br><span class="line">    <span class="keyword">float</span> output = newMin + ((<span class="keyword">float</span>)(value - oldMin)/(<span class="keyword">float</span>)denominator) * (newMax - newMin)</span><br><span class="line">    <span class="keyword">return</span>  output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述例子傳入211的話輸出為241.5<br>透過上面公式可以將數值標準化到某一區間</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在將數據轉換至RGB時，時常會用到標準化的方式讓數值落在0~255之中&lt;/p&gt;
&lt;h2 id=&quot;標準化公式&quot;&gt;&lt;a href=&quot;#標準化公式
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Normalize" scheme="https://teddybearfp.github.io/tags/Normalize/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL 3D 立體渲染</title>
    <link href="https://teddybearfp.github.io/2018/12/23/3D-Volume-Rendering/"/>
    <id>https://teddybearfp.github.io/2018/12/23/3D-Volume-Rendering/</id>
    <published>2018-12-23T02:05:16.000Z</published>
    <updated>2018-12-24T03:21:28.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子使用的QImage都是處理二維圖形，最近研究起3D的領域，透過OpenGL來實作立體渲染(Volume Rendering)，立體渲染簡單來說，就是將2D圖形數張疊成一個3D立體圖形，這立體渲染的技術可以運用在醫學上的CT、OCT與MRI斷層掃描中。這篇所寫的頂點與紋理處理搭配上一篇所編寫的<a href="https://teddybearfp.github.io/2018/12/22/OpenGL-GLSL%E8%91%97%E8%89%B2%E5%99%A8/#more">OpenGL GLSL著色器</a>就可以達到下圖3D立體渲染效果囉!</p><p><img src="https://media.giphy.com/media/fxCrCjSXyJBR83AFPb/giphy.gif" alt=""></p><h2 id="名詞概述"><a href="#名詞概述" class="headerlink" title="名詞概述"></a>名詞概述</h2><h3 id="Volume-Rendering"><a href="#Volume-Rendering" class="headerlink" title="Volume Rendering"></a>Volume Rendering</h3><p>立體渲染是一種用於顯示離散三維採樣數據集的二維投影的技術。一個典型的三維數據集是CT、OCT或者MRI採集的一組二維切面圖像。通常這些數據是按照一定規則如每毫米一個切面，並且通常有一定數目的圖像像素。為了渲染三維數據集的二維投影，首先需要定義相機相對於幾何體的空間位置。另外，需要定義每個點即體素的不透明性以及顏色，這通常使用RGBA（red, green, blue, alpha）傳遞函數定義每個體素可能值對應的RGBA值。</p><h3 id="OCT"><a href="#OCT" class="headerlink" title="OCT"></a>OCT</h3><p>OCT英文全名為Optical Coherence TomoGraphy，俗稱俗稱視網膜光學斷層掃描儀，雖然名稱有斷層掃描的字眼，但它是利用紅外線波長的雷射光對視網膜做掃描，不是X光，與一般的電腦斷層不一樣。它的原理是，光線發出後，分成兩道光，一道光打進眼底，一道光打到參考的鏡面上，兩道光再反射回來，形成干涉現象，形成光譜，儀器收集到訊號即可進行分析。</p><h2 id="Volume-Rendering原理"><a href="#Volume-Rendering原理" class="headerlink" title="Volume Rendering原理"></a>Volume Rendering原理</h2><p>目前已知有兩種方式達到Volume Rendering</p><ul><li>2D Array</li><li>3D Texture</li></ul><h3 id="2D-Array"><a href="#2D-Array" class="headerlink" title="2D Array"></a>2D Array</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>用一組2D QImage紋理數與頂點組伴隨著z軸的變化達到疊圖效果</p><p><img src="https://i.imgur.com/888pOxo.png" alt=""></p><h4 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h4><p>用2D Array疊成的3D模型會有個問題，就是在模型轉到90度與180度時從側面來看會是有間隙的甚至直接穿透看不到畫面，原因是這種畫法在yz軸上並沒有繪製圖形<br><img src="https://i.imgur.com/vD7BsCL.png" alt=""></p><h4 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h4><p>為了解決上述的YZ軸未繪製圖形，導致側邊觀看會沒有畫面甚至穿透，我們的解決辦法是使用3組的2D array去做立體渲染，<br><img src="https://i.imgur.com/opzvhX4.png" alt=""><br>準備好以上三組2D Array做出來的3D圖形在XY平面、YZ平面與XZ平面上都有像素資料，這樣解決了90度與180度沒畫面或是穿透的問題了，但是我們怎麼知道在哪種角度時顯示顯示哪組2D Array呢?<br><img src="https://i.imgur.com/XWHvtot.png" alt=""><br>透過上述方式可以切換平面，正確顯示數據但是在側面時會發生Popping Effect所以更正確的是在旋轉時就以當下面向我們的當作切面是最好的辦法!<br><img src="https://i.imgur.com/fI2erxE.png" alt=""></p><h3 id="3D-Texture"><a href="#3D-Texture" class="headerlink" title="3D Texture"></a>3D Texture</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>接下來講述的就是這篇繪製Volume Rendering的方式，將數組2D QImage以Buffer的方式放到3D Texture中進行處理，首先先將2D QImage的陣列存成一個buffer，迴圈執行共幾張QImage然後內容取RGBA存放，得到一個3D紋理，接下來準備個3D容器來準備放進這個3D紋理</p><p><img src="https://i.imgur.com/19PQu4z.png" alt="" title="3D容器貼上3D紋理示意圖"></p><p>最後是最重要的環節，當旋轉時我們旋轉的不是容器，而是3D紋理!<br>這樣的話我們容器永遠是XY平面面對攝影機，而選轉的3D紋理不像2D紋理有側邊透視問題，並且是做過Alpha test跟Blending的紋理。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>使用Qt編寫3D相關程式時，我們需要在安裝Qt的時候就要勾選Qt 3D選項透過OpenGL編寫。</p><h3 id="無法使用gl-相關函式"><a href="#無法使用gl-相關函式" class="headerlink" title="無法使用gl_相關函式"></a>無法使用gl_相關函式</h3><p>即使安裝了Qt 3D相關函式庫，在使用時也可能無法呼叫gl_相關函式，這時候我們只要在pro檔中，增加LIBS += -lopengl32</p><h3 id="無法使用glTexImage3D"><a href="#無法使用glTexImage3D" class="headerlink" title="無法使用glTexImage3D"></a>無法使用glTexImage3D</h3><p>如果在pro檔中已經增加了LIBS += -lopengl32卻還是無法使用glTexImage3D的時候，我們可以在使用glTexImage3D之前加上<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PFNGLTEXIMAGE3DPROC glTexImage3D;</span><br><span class="line">glTexImage3D = (PFNGLTEXIMAGE3DPROC) wglGetProcAddress(<span class="string">"glTexImage3D"</span>);</span><br></pre></td></tr></table></figure></p><p>加入上面這兩句指令後再使用就可以囉<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glTexImage3D(GL_TEXTURE_3D, <span class="number">0</span>, GL_RGBA, <span class="number">512</span>, <span class="number">512</span> , <span class="number">52</span>, <span class="number">0</span>,</span><br><span class="line">GL_RGBA, GL_UNSIGNED_BYTE, bits3D );</span><br></pre></td></tr></table></figure></p><h2 id="Volume-Rendering實作"><a href="#Volume-Rendering實作" class="headerlink" title="Volume Rendering實作"></a>Volume Rendering實作</h2><p>我們要在C++端配置頂點跟紋理的座標與屬性再傳送給著色器去渲染在畫面上</p><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>在編寫Volume Rendering需要先了解三個虛擬函式initializeGL() 、resizeGL() 和 paintGL()，透過這三個函式去render OpenGL的圖形。<br>它們三個的運作順序是initializeGL() -&gt; resizeGL() -&gt; paintGL() 。</p><ul><li><p>initializeGL() 會最先呼叫並初始設定 rendering 的預設參數。</p></li><li><p>resizeGL()設定OpenGL的觀看位置、矩陣型態、視野角度以及 OpenGL drawing 的範圍…等等。除了第一次 widget 被 create 時會被呼叫，之後只要 widget 有被 resized 時都會重新被呼叫。</p></li><li><p>paintGL() Rendering OpenGL 的畫面，你所畫的物件都應該在這個 function 裡定義。</p></li></ul><h3 id="Scene-h"><a href="#Scene-h" class="headerlink" title="Scene.h"></a>Scene.h</h3><p>首先我們先創建個類別繼承QOpenGLWidget宣告上面介紹的虛擬函式並覆寫<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLShaderProgram&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLTexture&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scene</span> :</span> <span class="keyword">public</span> QOpenGLWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Scene( QWidget *parent = <span class="number">0</span> );</span><br><span class="line">    ~Scene();</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">slotUpdate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initializeGL</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintGL</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resizeGL</span><span class="params">( <span class="keyword">int</span> w, <span class="keyword">int</span> h )</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//頂點與紋理的相關配置</span></span><br><span class="line">    <span class="keyword">int</span> m_vertexAttr;</span><br><span class="line">    <span class="keyword">int</span> m_texCoordAttr;</span><br><span class="line">    <span class="keyword">int</span> m_modelUniform;</span><br><span class="line">    <span class="keyword">int</span> m_viewUniform;</span><br><span class="line">    <span class="keyword">int</span> m_projUniform;</span><br><span class="line">    QOpenGLTexture *m_texture;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Scene-cpp"><a href="#Scene-cpp" class="headerlink" title="Scene.cpp"></a>Scene.cpp</h3><h4 id="initializeGL"><a href="#initializeGL" class="headerlink" title="initializeGL()"></a>initializeGL()</h4><p>initializeGL()主要做的幾個動作</p><ul><li>清空畫布</li><li>將數個2D QImage存入3D buffer中</li><li>設置QOpenGLTexture目標圖形與寬、高、張數</li><li>設置3D Texture</li><li>連結著色器<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::initializeGL()</span><br><span class="line">&#123;</span><br><span class="line">    glClearColor( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span> );</span><br><span class="line"></span><br><span class="line">    QImage imgXY = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888);</span><br><span class="line">    QImage checkBits3D = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGBA8888);</span><br><span class="line">    uchar* bits3D = <span class="keyword">new</span> uchar[<span class="number">512</span> * <span class="number">4</span> * <span class="number">512</span> * <span class="number">52</span>];<span class="comment">//width * RGBA * height * count</span></span><br><span class="line">    <span class="comment">//multi-QImage to 3Dbuffer</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; m_triangle.numbers ;n++) &#123;</span><br><span class="line">        imgXY = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888);</span><br><span class="line">        imgXY.load(<span class="string">"D:/dn40_50_100_01.png"</span>,<span class="string">"PNG"</span>);</span><br><span class="line">        <span class="comment">//imgXY.load("D:/testpic.png","PNG");</span></span><br><span class="line">        imgXY = imgXY.scaled(<span class="number">512</span>,<span class="number">512</span>);</span><br><span class="line">        imgXY = imgXY.convertToFormat(QImage::Format_RGBA8888);</span><br><span class="line">        bits = imgXY.bits();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">512</span> * <span class="number">512</span> * <span class="number">4</span> ; i += <span class="number">4</span>) &#123;</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i] = bits[i];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">1</span>] = bits[i+<span class="number">1</span>];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">2</span>] = bits[i+<span class="number">2</span>];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">3</span>] = bits[i+<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setQOpenGLTexture Target3D</span></span><br><span class="line">    m_texture = <span class="keyword">new</span> QOpenGLTexture( QOpenGLTexture::Target3D );</span><br><span class="line">    m_texture-&gt;setSize(<span class="number">512</span>,<span class="number">512</span>,<span class="number">52</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Target3D</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="number">0</span> != m_nTexId )</span><br><span class="line">    &#123;</span><br><span class="line">        glDeleteTextures( <span class="number">1</span>, (GLuint*)&amp;m_nTexId );</span><br><span class="line">    &#125;</span><br><span class="line">    glGenTextures(<span class="number">1</span>,(GLuint*)&amp;m_nTexId );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">    glBindTexture( GL_TEXTURE_3D, m_nTexId );</span><br><span class="line">    glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line">    PFNGLTEXIMAGE3DPROC glTexImage3D;</span><br><span class="line">    glTexImage3D = (PFNGLTEXIMAGE3DPROC) wglGetProcAddress(<span class="string">"glTexImage3D"</span>);</span><br><span class="line">    glTexImage3D(GL_TEXTURE_3D, <span class="number">0</span>, GL_RGBA, <span class="number">512</span>, <span class="number">512</span> , <span class="number">52</span>, <span class="number">0</span>,</span><br><span class="line">        GL_RGBA, GL_UNSIGNED_BYTE, (GLvoid *)bits3D );</span><br><span class="line">    glBindTexture( GL_TEXTURE_3D, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setShader</span></span><br><span class="line">    <span class="function">QOpenGLShader <span class="title">vShader</span><span class="params">( QOpenGLShader::Vertex )</span></span>;</span><br><span class="line">    vShader.compileSourceFile( <span class="string">":/Shaders/vShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="function">QOpenGLShader <span class="title">fShader</span><span class="params">( QOpenGLShader::Fragment )</span></span>;</span><br><span class="line">    fShader.compileSourceFile( <span class="string">":/Shaders/fShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">    m_program.addShader( &amp;vShader );</span><br><span class="line">    m_program.addShader( &amp;fShader );</span><br><span class="line">    m_program.link();</span><br><span class="line"></span><br><span class="line">    m_vertexAttr = m_program.attributeLocation( <span class="string">"vertex"</span> );</span><br><span class="line">    m_texCoordAttr = m_program.attributeLocation( <span class="string">"texCoord"</span> );</span><br><span class="line">    m_verMatrixUniform = m_program.uniformLocation( <span class="string">"verMatrix"</span> );</span><br><span class="line">    m_toMatrixUniform = m_program.uniformLocation( <span class="string">"toMatrix"</span> );</span><br><span class="line">    m_toTexMatrixUniform = m_program.uniformLocation( <span class="string">"toTexMatrix"</span> );</span><br><span class="line">    m_backMatrixUniform = m_program.uniformLocation( <span class="string">"backMatrix"</span> );</span><br><span class="line">    m_texMatrixUniform = m_program.uniformLocation( <span class="string">"texMatrix"</span> );</span><br><span class="line">    m_modelUniform = m_program.uniformLocation( <span class="string">"model"</span> );</span><br><span class="line">    m_viewUniform = m_program.uniformLocation( <span class="string">"view"</span> );</span><br><span class="line">    m_projUniform = m_program.uniformLocation( <span class="string">"proj"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//m_texUniform = m_program.uniformLocation( "tex" ); //2D</span></span><br><span class="line">    m_texUniform = m_program.uniformLocation( <span class="string">"tex3D"</span> ); <span class="comment">//3D</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="paintGL"><a href="#paintGL" class="headerlink" title="paintGL()"></a>paintGL()</h4><p>paintGL()主要做個幾個動作</p><ul><li>設置MVP</li><li>呼叫:drawTriangle()配置頂點與紋理<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::paintGL()</span><br><span class="line">&#123;</span><br><span class="line">    QMatrix4x4 modelViewVertex; <span class="comment">//vertex</span></span><br><span class="line">    QMatrix4x4 modeltoVertex;</span><br><span class="line">    QMatrix4x4 modeltoTexVertex;</span><br><span class="line">    QMatrix4x4 modelbackVertex;</span><br><span class="line"></span><br><span class="line">    QMatrix4x4 modelUniform;</span><br><span class="line">    QMatrix4x4 viewUniform;</span><br><span class="line">    QMatrix4x4 projUniform;</span><br><span class="line">    modeltoVertex.translate( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-0.5f</span> ); viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br><span class="line"></span><br><span class="line">    QMatrix4x4 modelViewTexture; <span class="comment">//texture</span></span><br><span class="line">    modeltoTexVertex.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    <span class="keyword">if</span> (direction == <span class="number">0</span>)   <span class="comment">//horizontal 0 / vertical 1</span></span><br><span class="line">        modelViewTexture.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        modelViewTexture.rotate( m_angle, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    modelbackVertex.translate(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !m_program.bind() )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    m_program.setUniformValue( m_verMatrixUniform, modelViewVertex );</span><br><span class="line">    m_program.setUniformValue( m_texMatrixUniform, modelViewTexture );</span><br><span class="line">    m_program.setUniformValue( m_toMatrixUniform, modeltoVertex );</span><br><span class="line">    m_program.setUniformValue( m_toTexMatrixUniform, modeltoTexVertex );</span><br><span class="line">    m_program.setUniformValue( m_backMatrixUniform, modelbackVertex );</span><br><span class="line"></span><br><span class="line">    m_program.setUniformValue( m_modelUniform, modelUniform );</span><br><span class="line">    m_program.setUniformValue( m_viewUniform, viewUniform );</span><br><span class="line">    m_program.setUniformValue( m_projUniform, projUniform );</span><br><span class="line">    drawTriangle();<span class="comment">//存放頂點與紋理的座標位置</span></span><br><span class="line"></span><br><span class="line">    m_program.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="resizeGL"><a href="#resizeGL" class="headerlink" title="resizeGL()"></a>resizeGL()</h4><ul><li>resize<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::resizeGL( <span class="keyword">int</span> w, <span class="keyword">int</span> h )</span><br><span class="line">&#123;</span><br><span class="line">    glViewport( <span class="number">0</span>, <span class="number">0</span>, w, h );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="drawTriangle"><a href="#drawTriangle" class="headerlink" title="drawTriangle()"></a>drawTriangle()</h4><ul><li>配置頂點與紋理並以三角形繪製<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::drawTriangle()</span><br><span class="line">&#123;</span><br><span class="line">    m_texture-&gt;bind();</span><br><span class="line"></span><br><span class="line">    m_program.setAttributeArray( m_vertexAttr, m_triangle.vertices.data(), <span class="number">3</span> );</span><br><span class="line">    m_program.setAttributeArray( m_texCoordAttr, m_triangle.texCoords.data(), <span class="number">3</span> );</span><br><span class="line">    m_program.setUniformValue( m_texUniform, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    m_program.enableAttributeArray( m_vertexAttr );</span><br><span class="line">    m_program.enableAttributeArray( m_texCoordAttr );</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0f</span> / m_triangle.numbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2D</span></span><br><span class="line">    <span class="comment">//glEnable(GL_TEXTURE_2D);</span></span><br><span class="line">    <span class="comment">//3D </span></span><br><span class="line">    glClear( GL_COLOR_BUFFER_BIT  | GL_DEPTH_BUFFER_BIT );</span><br><span class="line"></span><br><span class="line">    glEnable(GL_TEXTURE_3D);</span><br><span class="line">    glBindTexture(GL_TEXTURE_3D, m_nTexId);</span><br><span class="line">    glEnable( GL_ALPHA_TEST );</span><br><span class="line">    glAlphaFunc( GL_GREATER, <span class="number">0.03f</span> );</span><br><span class="line"></span><br><span class="line">    glEnable(GL_BLEND);</span><br><span class="line">    glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );</span><br><span class="line"></span><br><span class="line">    glMatrixMode( GL_TEXTURE );</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_triangle.numbers ; i++) &#123;</span><br><span class="line">        <span class="comment">//3D</span></span><br><span class="line">        glDrawArrays( GL_TRIANGLE_STRIP, <span class="number">0</span> + <span class="number">4</span> * i, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    glBindTexture(GL_TEXTURE_3D, <span class="number">0</span>);</span><br><span class="line">    m_program.disableAttributeArray( m_vertexAttr );</span><br><span class="line">    m_program.disableAttributeArray( m_texCoordAttr );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Triangle-h"><a href="#Triangle-h" class="headerlink" title="Triangle.h"></a>Triangle.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Triangle();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVertices</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initTexCoords</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; vertices;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; texCoords;</span><br><span class="line">    <span class="keyword">int</span> numbers;</span><br><span class="line">    <span class="keyword">int</span> texcStep;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Triangle-cpp"><a href="#Triangle-cpp" class="headerlink" title="Triangle.cpp"></a>Triangle.cpp</h3><ul><li>存放頂點與紋理的座標<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Triangle::initVertices()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//2D array</span></span><br><span class="line">    numbers = <span class="number">52</span>;</span><br><span class="line">    vertices.clear();</span><br><span class="line">    vertices.resize( <span class="number">12</span> * numbers );</span><br><span class="line">    <span class="keyword">float</span> z = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0</span> / <span class="keyword">float</span>(numbers);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers ; i++) &#123;</span><br><span class="line">        vertices[<span class="number">0</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">1</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">2</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">3</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">4</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">5</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">6</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">7</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">8</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">9</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">10</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">11</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Triangle::initTexCoords()</span><br><span class="line">&#123;</span><br><span class="line">    texCoords.clear();</span><br><span class="line">    texCoords.resize( <span class="number">12</span> * numbers );</span><br><span class="line">    <span class="keyword">float</span> z = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0</span> / <span class="keyword">float</span>(numbers);</span><br><span class="line">    <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers ; i++) &#123;</span><br><span class="line">        texCoords[<span class="number">0</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">1</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">2</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">        <span class="comment">// 1</span></span><br><span class="line">        texCoords[<span class="number">3</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">4</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">5</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        texCoords[<span class="number">6</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">7</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">8</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        texCoords[<span class="number">9</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">10</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">11</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>透過這次的3D Volume Rendering對於圖形上的處理與3D觀念有了更深刻的理解，像是3D世界中物體的移動通常並非是物體真的在移動而是攝影機的移動使觀察畫面有變化，還有頂點與紋理傳遞給著色器Shader處理的運作，更特別是容器不動紋理去做旋轉這個想法也是讓我有新的思維。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%AB%8B%E4%BD%93%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">立體渲染- 維基百科，自由的百科全書 - Wikipedia</a><br><a href="https://tw.news.yahoo.com/%E7%9C%BC%E7%A7%91%E6%AA%A2%E6%9F%A5%E5%88%A9%E5%99%A8%E3%80%8Coct%E3%80%8D%E8%A7%A3%E6%9E%90%E5%BA%A6%E8%B6%85%E9%AB%98%E3%80%80%E6%8F%AA%E5%87%BA%E7%9C%BC%E7%96%BE%E5%8F%AA%E9%9C%803%E7%A7%92-070029677.html" target="_blank" rel="noopener">眼科檢查利器「OCT」解析度超高</a> OCT文獻參考<br><a href="https://www.codeproject.com/Articles/352270/%2FArticles%2F352270%2FGetting-started-with-Volume-Rendering" target="_blank" rel="noopener">Getting started with Volume Rendering using OpenGL</a> 主要觀念與程式邏輯參考處<br><a href="http://aboutdada.com/?p=1739" target="_blank" rel="noopener">Rendering OpenGL Graphics in Qt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前陣子使用的QImage都是處理二維圖形，最近研究起3D的領域，透過OpenGL來實作立體渲染(Volume Rendering)，立體渲染
      
    
    </summary>
    
      <category term="OpenGL" scheme="https://teddybearfp.github.io/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="https://teddybearfp.github.io/tags/OpenGL/"/>
    
      <category term="Volume Rendering" scheme="https://teddybearfp.github.io/tags/Volume-Rendering/"/>
    
      <category term="3D" scheme="https://teddybearfp.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL GLSL著色器</title>
    <link href="https://teddybearfp.github.io/2018/12/22/OpenGL-GLSL%E8%91%97%E8%89%B2%E5%99%A8/"/>
    <id>https://teddybearfp.github.io/2018/12/22/OpenGL-GLSL著色器/</id>
    <published>2018-12-22T07:05:16.000Z</published>
    <updated>2018-12-22T03:25:22.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>3D是結合容器與紋理呈現在畫面上，透過著色器我們就可以把現有的每點位置與該點像素顏色精準的繪製在其中，接下來我們就來了解一下GLSL這語言，其變數型態與傳遞方式需要先有所了解才能跟c++端資料互相傳遞，此篇文章將會記錄如何使用這兩種著色器處理字串集傳送到驅動中。</p><h2 id="GLSL-OpenGL-Shading-Language"><a href="#GLSL-OpenGL-Shading-Language" class="headerlink" title="GLSL(OpenGL Shading Language)"></a>GLSL(OpenGL Shading Language)</h2><ul><li>OpenGL繪製圖形是透過GLSL(OpenGL Shading Language)也稱作 GLslang，是一個以C語言為基礎的高階著色語言。</li><li>GLSL 著色器不是獨立的應用程式；其需要使用 OpenGL API 的應用程式。C、C++、C#、Delphi 和 Java 皆支援 OpenGL API，且支援 OpenGL 著色語言。</li><li>GLSL 著色器本身只是簡單的字串集，這些字串集會傳送到硬體廠商的驅動程式，並從程式內部的 OpenGL API 進入點編譯。</li></ul><h2 id="著色器-shader"><a href="#著色器-shader" class="headerlink" title="著色器(shader)"></a>著色器(shader)</h2><p>透過著色器可以透過glsl這個語言來將vertex與texture繪製呈現在program中，著色器的檔案格式為glsl<br>繪製成圖形基本上會運用到以下兩個檔案</p><ul><li>頂點著色器(vertex shader.glsl)</li><li>片段著色器(fragment shader.glsl)</li></ul><h3 id="著色器執行順序"><a href="#著色器執行順序" class="headerlink" title="著色器執行順序"></a>著色器執行順序</h3><p>著色器的執行順序會由vertex shader.glsl先執行再執行fragment shader.glsl<br><img src="https://i.imgur.com/ZInohLH.jpg" alt="" title="vertex shader.glsl -&gt; fragment shader.glsl"></p><h3 id="頂點著色器-vertex-shader"><a href="#頂點著色器-vertex-shader" class="headerlink" title="頂點著色器(vertex shader)"></a>頂點著色器(vertex shader)</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>頂點著色器目的return gl_Position</p><h4 id="運作原理"><a href="#運作原理" class="headerlink" title="運作原理"></a>運作原理</h4><p><img src="https://i.imgur.com/dLfGjj1.png" alt="" title="Model,View,Projection matrix是三種不同的變換矩陣"></p><h5 id="Model-matrix"><a href="#Model-matrix" class="headerlink" title="Model matrix"></a>Model matrix</h5><p>將模型自己的座標系對應到空間座標系(針對空間座標處理縮放、旋轉、平移)<br><img src="https://i.imgur.com/O8unXl6.png" alt=""></p><h6 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h6><p>translate(x位移, y位移, z位移)<br>下面這個例子是向量(10,10,10,1)沿著X軸平移3個單位<br><img src="https://i.imgur.com/YbKDutP.png" alt=""><br>經過上述運算就得到了(13,10,10,1)的齊次座標，其中的1代表的是這向量為一個點而不是一個方向，即使經過變換矩陣點還是點</p><h6 id="縮放"><a href="#縮放" class="headerlink" title="縮放"></a>縮放</h6><p>scale(2.0f, 2.0f ,2.0f);<br><img src="https://i.imgur.com/ESaXAVc.png" alt=""></p><h6 id="example"><a href="#example" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//translate(x位移-0.5, y位移-0.5, z位移0.0)</span></span><br><span class="line">modelUniform.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="comment">//rotate(旋轉角度, 0.0, 1.0, 0.0) 以y軸做旋轉 </span></span><br><span class="line">modelUniform.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br></pre></td></tr></table></figure><h5 id="View-matrix"><a href="#View-matrix" class="headerlink" title="View matrix"></a>View matrix</h5><p>將空間座標系對應到攝影機所看到的座標系(將世界的視野重新定義)<br>設定鏡頭位置、世界中心位置、觀看方向<br><img src="https://i.imgur.com/SGqaund.png" alt=""></p><h6 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lookAt(鏡頭位置, 世界中心位置, 觀看角度)</span></span><br><span class="line">viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h5 id="Projection-matrix"><a href="#Projection-matrix" class="headerlink" title="Projection matrix"></a>Projection matrix</h5><p>確定了物體的形狀位置和攝影機的位置以後，最後還要確定攝影機的攝影區域。<br>設定視野跟最近處與最遠處，若是物體小於最近處或是大於最遠處將會看不到物體<br><img src="https://i.imgur.com/SAt0L7e.png" alt="" title="設定視野跟最近處與最遠處"></p><h6 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//perspective (視角多大, 螢幕長寬比, 最近處, 最遠處)</span></span><br><span class="line">projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br></pre></td></tr></table></figure><p>頂點著色器主要將頂點vertex去做變換矩陣(model縮放、旋轉、平移)與世界視角變化(view)，最後乘上投影機設定(projector)得到最終的gl_Position回傳</p><h4 id="運作順序"><a href="#運作順序" class="headerlink" title="運作順序"></a>運作順序</h4><p>將Vertex乘上變化矩陣後得到齊次座標(Homogeneous Coordinates)後賦值給gl_Position回傳<br><img src="https://i.imgur.com/NmbpLFB.png" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl_Position = P * (V * (M * vertex));</span><br></pre></td></tr></table></figure></p><p>Model coordinates - (<em>Model Matrix) &gt; World coordinates - (</em>View Matrix) &gt; Camera coordinates</p><h5 id="example-3"><a href="#example-3" class="headerlink" title="example"></a>example</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">attribute highp vec4 vertex;</span><br><span class="line">uniform mediump mat4 toMatrix;<span class="comment">//平移要比旋轉先處理否則結果不同(因為旋轉會比較先處理所以拉到glsl自行設定)</span></span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = proj *(view *(model * vertex))) ;</span><br><span class="line">    <span class="comment">//equal to (proj * view * model) * vertex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>proj <em>(view </em>(model <em>(toMatrix </em> vertex)))<br>equal to<br>(proj <em> view </em> model) * vertex</p></blockquote><h3 id="片段著色器-fragment-shader"><a href="#片段著色器-fragment-shader" class="headerlink" title="片段著色器(fragment shader)"></a>片段著色器(fragment shader)</h3><p>片段著色器最主要的return值為原生變數gl_FragColor來決定最終的像素顏色，而gl_FragColor會把值傳去做透明度(Alpha test)跟混合(Blending)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_FragColor = vec4(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//把輸出變量設置為紅色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/NWf4c7J.png" alt=""></p><h2 id="變數型態"><a href="#變數型態" class="headerlink" title="變數型態"></a>變數型態</h2><p>較常使用到的有以下幾種變數型態</p><ul><li>attribute</li><li>vec2, vec3, vec4</li><li>mat2, mat3, mat4</li><li>Uniform</li><li>varying</li><li>sampler2D, sampler3D<h3 id="Vec-向量"><a href="#Vec-向量" class="headerlink" title="Vec 向量"></a>Vec 向量</h3>glsl中的向量分為以下三種</li><li>vec2 二分量的浮點向量</li><li>vec3 三分量的浮點向量</li><li>vec4 四分量的浮點向量</li></ul><p>值可以為空間座標(x,y,z,w)或是顏色(r,g,b,a)或是紋理座標(s,t,p,q)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vec4 <span class="built_in">vector</span>;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">0</span>] = <span class="built_in">vector</span>.r = <span class="built_in">vector</span>.x = <span class="built_in">vector</span>.s;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">1</span>] = <span class="built_in">vector</span>.g = <span class="built_in">vector</span>.y = <span class="built_in">vector</span>.t;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">2</span>] = <span class="built_in">vector</span>.b = <span class="built_in">vector</span>.z = <span class="built_in">vector</span>.p;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">3</span>] = <span class="built_in">vector</span>.a = <span class="built_in">vector</span>.w = <span class="built_in">vector</span>.q;</span><br></pre></td></tr></table></figure><h4 id="分量與向量與純量差異"><a href="#分量與向量與純量差異" class="headerlink" title="分量與向量與純量差異"></a>分量與向量與純量差異</h4><blockquote><p>向量具有方向以及不為零的值，而純量只有值，一向量可分解成x,y分量，而x,y分量還是向量，因為它依然還是有方向，只是一個方向會垂直於x軸，另一個方向會垂直於y軸。</p></blockquote><h4 id="空間座標"><a href="#空間座標" class="headerlink" title="空間座標"></a>空間座標</h4><p>這裡我們所講述的四分量浮點向量為齊次座標因為齊次座標了方便將空間的平移、縮放、旋轉等轉換使用矩陣來記錄。<br>所以空間座標為(x,y,z,w)</p><h5 id="齊次座標"><a href="#齊次座標" class="headerlink" title="齊次座標"></a>齊次座標</h5><p>在3D世界中(x,y,z)可能是一個點也可能是一個向量，點只有位置，向量則是沒有位置只有大小與方向，當(x,y,z,0)時我們規定他為向量，而(x,y,z,1)或(x,y,z,2)當w不為0時我們稱為位置。</p><blockquote><p>補充說明<br>齊次座標除了能夠區分點和向量，在3D圖形學中還有重要的意義。齊次座標系使得我們可以在一中特殊的方程組中求出解，這個方程組中每一個方程都表示一個與系統中其他直線平行的直線。我們知道在歐幾里得空間中，對這種方程組是無解的，因爲他們沒有交點。然而在現實世界中我們是可以看到兩條平行線相交的。<br>三維點的齊次座標爲（X, Y, Z, w）,那麼它的3D空間座標爲：<br>x = X / w<br>y = Y / w<br>z = Z / w<br>我們可以看到的齊次座標(1, 2, 3, 1)與(2, 4, 6, 2)表示的都是3d空間中的點（1， 2， 3）；所以通常在程序設計中我們都取w爲1.</p></blockquote><h4 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h4><p>顏色(r,g,b,a)<br>r代表的是紅色<br>g代表的是綠色<br>b代表的是藍色<br>a代表的是透明度<br>值介於0~1</p><h3 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a>attribute</h3><p>這個屬性只能存在於頂點著色器中，所以一般只存放vertex(頂點座標)與texCoord(紋理座標)</p><p>example<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">attribute highp vec4 vertex;  <span class="comment">//頂點座標</span></span><br><span class="line">attribute highp vec4 texCoord;<span class="comment">//紋理座標</span></span><br></pre></td></tr></table></figure></p><h3 id="Uniforms"><a href="#Uniforms" class="headerlink" title="Uniforms"></a>Uniforms</h3><p>CPU給每個線程輸入數據所有線程的輸入值必須統一（uniform），而且必須設為只讀。也就是說，每條線程接收相同的數據，並且是不可改變的數據。shader在運行的時候是無法改變Unifroms的數值。<br>資料型態通常為：float、vec2、vec3、vec4、mat2、mat3、mat4、，sampler2D、sampler3D和samplerCube。</p><blockquote><p>一般用來存放變換矩陣(縮放、旋轉、位移),與光照</p></blockquote><h4 id="example-4"><a href="#example-4" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uniform mediump mat4 model;<span class="comment">//處理縮放、旋轉、位移</span></span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br></pre></td></tr></table></figure><h3 id="varying"><a href="#varying" class="headerlink" title="varying"></a>varying</h3><p>從vertex shader傳遞給fragment shader的媒介，在vertex shader修改完然後給fragment shader使用，但是在fragment shader中並不能修改它。</p><h4 id="example-5"><a href="#example-5" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">attribute highp vec4 vertex;   <span class="comment">//頂點座標</span></span><br><span class="line">attribute highp vec4 texCoord; <span class="comment">//紋理座標</span></span><br><span class="line">varying highp vec4 texc;       <span class="comment">//將紋理座標傳送給片段著色器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = MVP * vertex;</span><br><span class="line">    texc = texCoord; <span class="comment">//透過varying傳送給片段著色器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><p>float型態在shader中扮演重要角色，所以精度非常重要，低的精度可以加快渲染速度，但是質量就差，相對的高精度的質量較好，渲染速度則較慢，glsl光柵著色時，會有大量的浮點運算，設備可能不一定能承受，glsl提供了三種浮點數的精度，我們可以在變數前面加上highp, mediump, lowp達到該變數的精度聲明</p><h4 id="設定默認精度"><a href="#設定默認精度" class="headerlink" title="設定默認精度"></a>設定默認精度</h4><p>可以直接統一設定，在片段著色器最開始時，直接加上precision mediump float;這樣就默認了所有精度，若是變數沒特別聲明則會以默認精度來處理。</p><h4 id="精度套用"><a href="#精度套用" class="headerlink" title="精度套用"></a>精度套用</h4><p>在運算時會套用已知最高的精度參數為運算精度，若沒有已知最高的則會套用默認精度或是更高的精度。</p><h4 id="example-6"><a href="#example-6" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lowp <span class="keyword">float</span> color;</span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line">varying highp vec4 texc;</span><br></pre></td></tr></table></figure><h2 id="矩陣"><a href="#矩陣" class="headerlink" title="矩陣"></a>矩陣</h2><p>矩陣乘法講究次序<br>矩陣運算A * B != B * A<br>所以先後順序很重要</p><h3 id="example-7"><a href="#example-7" class="headerlink" title="example"></a>example</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transformedVector = translateMatrix * rotationMatrix * scaleMatrix * originalVector;</span><br></pre></td></tr></table></figure><p>上述的程式碼會先執行縮放再執行旋轉最後才執行平移，這就是矩陣乘法的運算方式</p><h2 id="GLSL好用的函式"><a href="#GLSL好用的函式" class="headerlink" title="GLSL好用的函式"></a>GLSL好用的函式</h2><h3 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h3><p>step() 插值函數需要輸入兩個參數。第一個是極限或閥值，第二個是我們想要檢測或通過的值。<br>對任何小於閥值的值，返回 0.0，大於閥值，則返回 1.0。</p><h4 id="example-8"><a href="#example-8" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若是st.x &gt; 0.5則回傳1.0否則回傳0.0</span></span><br><span class="line"><span class="keyword">float</span> y = step(<span class="number">0.5</span>,st.x);</span><br></pre></td></tr></table></figure><h3 id="Smoothstep"><a href="#Smoothstep" class="headerlink" title="Smoothstep"></a>Smoothstep</h3><p>smoothstep()當給定一個範圍的上下限和一個數值，這個函數會在已有的範圍內給出插值。<br>前兩個參數規定轉換的開始和結束點，第三個是給出一個值用來插值。</p><h4 id="example-9"><a href="#example-9" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Smooth interpolation between 0.1 and 0.9</span></span><br><span class="line"><span class="keyword">float</span> y = smoothstep(<span class="number">0.1</span>,<span class="number">0.9</span>,st.x);</span><br></pre></td></tr></table></figure><h3 id="其他有用函式"><a href="#其他有用函式" class="headerlink" title="其他有用函式"></a>其他有用函式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">y = mod(x,<span class="number">0.5</span>); <span class="comment">// 返回 x 對 0.5 取mod的值</span></span><br><span class="line">y = fract(x); <span class="comment">// 僅僅返回數的小數部分</span></span><br><span class="line">y = <span class="built_in">ceil</span>(x); <span class="comment">// 向正無窮取整</span></span><br><span class="line">y = <span class="built_in">floor</span>(x); <span class="comment">// 向負無窮取整</span></span><br><span class="line">y = <span class="built_in">abs</span>(x); <span class="comment">// 返回 x 的絕對值</span></span><br><span class="line">y = clamp(x,<span class="number">0.0</span>,<span class="number">1.0</span>); <span class="comment">// 把 x 的值限制在 0.0 到 1.0</span></span><br><span class="line">y = min(<span class="number">0.0</span>,x); <span class="comment">// 返回 x 和 0.0 中的較小值</span></span><br><span class="line">y = max(<span class="number">0.0</span>,x); <span class="comment">// 返回 x 和 0.0 中的較大值</span></span><br></pre></td></tr></table></figure><h2 id="實作著色器"><a href="#實作著色器" class="headerlink" title="實作著色器"></a>實作著色器</h2><p>以下是3D Volume Rendering的著色器編寫</p><h3 id="vertexShader-glsl"><a href="#vertexShader-glsl" class="headerlink" title="vertexShader.glsl"></a>vertexShader.glsl</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">attribute highp vec4 vertex;</span><br><span class="line">attribute highp vec4 texCoord;</span><br><span class="line">uniform mediump mat4 verMatrix;</span><br><span class="line">uniform mediump mat4 toMatrix;</span><br><span class="line">uniform mediump mat4 toTexMatrix;</span><br><span class="line">uniform mediump mat4 backMatrix;</span><br><span class="line">uniform mediump mat4 texMatrix;</span><br><span class="line"><span class="comment">//MVP</span></span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line">varying highp vec4 texc; <span class="comment">//varying傳送給fragment shader</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = proj *(view *(model *(toMatrix * vertex))) ;<span class="comment">//equal to (proj * view * model) * vertex</span></span><br><span class="line">    texc = backMatrix* (texMatrix * (toTexMatrix * texCoord)) ;<span class="comment">//texture rotate</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fragmentShader-glsl"><a href="#fragmentShader-glsl" class="headerlink" title="fragmentShader.glsl"></a>fragmentShader.glsl</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">varying highp vec4 texc;</span><br><span class="line">uniform sampler2D tex2D;</span><br><span class="line">uniform sampler3D tex3D;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//2D</span></span><br><span class="line">    <span class="comment">//highp vec4 color = texture2D( tex2D , texc.st ).rgba;</span></span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">    highp vec4 color = texture3D( tex3D , texc.stp ).rgba;<span class="comment">//紋理的格式為(s,t,p,q)</span></span><br><span class="line">    <span class="keyword">if</span> (color.a &gt; <span class="number">0.1</span>) &#123; <span class="comment">//把透明度太低的丟棄(用來過濾的閥值)</span></span><br><span class="line">        gl_FragColor = color;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        discard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scene-h"><a href="#Scene-h" class="headerlink" title="Scene.h"></a>Scene.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">QOpenGLShaderProgram m_program;</span><br><span class="line"><span class="keyword">int</span> m_vertexAttr;</span><br><span class="line"><span class="keyword">int</span> m_texCoordAttr;</span><br><span class="line"><span class="keyword">int</span> m_verMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_toMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_toTexMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_backMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_texMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_texUniform;</span><br><span class="line"><span class="keyword">int</span> m_modelUniform;</span><br><span class="line"><span class="keyword">int</span> m_viewUniform;</span><br><span class="line"><span class="keyword">int</span> m_projUniform;</span><br></pre></td></tr></table></figure><h3 id="Scene-cpp"><a href="#Scene-cpp" class="headerlink" title="Scene.cpp"></a>Scene.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QOpenGLShader <span class="title">vShader</span><span class="params">( QOpenGLShader::Vertex )</span></span>;</span><br><span class="line">vShader.compileSourceFile( <span class="string">":/Shaders/vertexShader.glsl"</span> );</span><br><span class="line"><span class="function">QOpenGLShader <span class="title">fShader</span><span class="params">( QOpenGLShader::Fragment )</span></span>;</span><br><span class="line">fShader.compileSourceFile( <span class="string">":/Shaders/fragmentShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">m_program.addShader( &amp;vShader );</span><br><span class="line">m_program.addShader( &amp;fShader );</span><br><span class="line">m_program.link();</span><br><span class="line"></span><br><span class="line">m_vertexAttr = m_program.attributeLocation( <span class="string">"vertex"</span> );</span><br><span class="line">m_texCoordAttr = m_program.attributeLocation( <span class="string">"texCoord"</span> );</span><br><span class="line">m_verMatrixUniform = m_program.uniformLocation( <span class="string">"verMatrix"</span> );</span><br><span class="line">m_toMatrixUniform = m_program.uniformLocation( <span class="string">"toMatrix"</span> );</span><br><span class="line">m_toTexMatrixUniform = m_program.uniformLocation( <span class="string">"toTexMatrix"</span> );</span><br><span class="line">m_backMatrixUniform = m_program.uniformLocation( <span class="string">"backMatrix"</span> );</span><br><span class="line">m_texMatrixUniform = m_program.uniformLocation( <span class="string">"texMatrix"</span> );</span><br><span class="line">m_modelUniform = m_program.uniformLocation( <span class="string">"model"</span> );</span><br><span class="line">m_viewUniform = m_program.uniformLocation( <span class="string">"view"</span> );</span><br><span class="line">m_projUniform = m_program.uniformLocation( <span class="string">"proj"</span> );</span><br><span class="line">m_texUniform = m_program.uniformLocation( <span class="string">"tex3D"</span> ); <span class="comment">//3D</span></span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelViewVertex; <span class="comment">//vertex</span></span><br><span class="line">QMatrix4x4 modeltoVertex;</span><br><span class="line">QMatrix4x4 modeltoTexVertex;</span><br><span class="line">QMatrix4x4 modelbackVertex;</span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelUniform;</span><br><span class="line">QMatrix4x4 viewUniform;</span><br><span class="line">QMatrix4x4 projUniform;</span><br><span class="line">modeltoVertex.translate( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-0.5f</span> );</span><br><span class="line">viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelViewTexture; <span class="comment">//texture</span></span><br><span class="line">modeltoTexVertex.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="keyword">if</span> (direction == <span class="number">0</span>)   <span class="comment">//horizontal 0 / vertical 1</span></span><br><span class="line">    modelViewTexture.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    modelViewTexture.rotate( m_angle, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">modelbackVertex.translate(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span> );</span><br><span class="line">m_program.setUniformValue( m_verMatrixUniform, modelViewVertex );</span><br><span class="line">m_program.setUniformValue( m_texMatrixUniform, modelViewTexture );</span><br><span class="line">m_program.setUniformValue( m_toMatrixUniform, modeltoVertex );</span><br><span class="line">m_program.setUniformValue( m_toTexMatrixUniform, modeltoTexVertex );</span><br><span class="line">m_program.setUniformValue( m_backMatrixUniform, modelbackVertex );</span><br><span class="line"></span><br><span class="line">m_program.setUniformValue( m_modelUniform, modelUniform );</span><br><span class="line">m_program.setUniformValue( m_viewUniform, viewUniform );</span><br><span class="line">m_program.setUniformValue( m_projUniform, projUniform );</span><br><span class="line"></span><br><span class="line">m_program.release();</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>GLSL就是透過從C++端取得到的頂點座標與紋理座標用頂點著色器得到gl_Position齊次座標與片段著色器得到gl_FragColor最終像素顏色繪製圖形，有了這些認知後下一篇我們將繼續看C++端如何建立頂點、紋理座標資訊建立與著色器連結繪製出3D Volume Rendering達到下圖的3D渲染效果<br><img src="https://i.imgur.com/sxi4ZpN.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/GLSL" target="_blank" rel="noopener">GLSL - 维基百科</a><br><a href="https://thebookofshaders.com/02/?lan=ch" target="_blank" rel="noopener">The Book of Shaders by Patricio Gonzalez Vivo &amp; Jen Lowe</a><br><a href="https://github.com/wshxbqq/GLSL-Card" target="_blank" rel="noopener">GitHub - wshxbqq/GLSL-Card: 着色器语言GLSL</a><br><a href="https://www.smwenku.com/a/5b87a23d2b71775d1cd837c7/" target="_blank" rel="noopener">https://www.smwenku.com/a/5b87a23d2b71775d1cd837c7/</a> 齊次座標相關文獻<br><a href="http://www.opengl-tutorial.org/cn/beginners-tutorials/tutorial-3-matrices/" target="_blank" rel="noopener">第三课：矩阵</a> MVP觀念<br><a href="https://www.smwenku.com/a/5c1c72febd9eee5e4184bcb7" target="_blank" rel="noopener">OpenGL學習——第5天（着色器）</a> 純粹覺得寫得好的文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;3D是結合容器與紋理呈現在畫面上，透過著色器我們就可以把現有的每點位置與該點像素顏色精準的繪製在其中，接下來我們就來了解一下GLSL這語言，
      
    
    </summary>
    
      <category term="OpenGL" scheme="https://teddybearfp.github.io/categories/OpenGL/"/>
    
    
      <category term="OpenGL著色器" scheme="https://teddybearfp.github.io/tags/OpenGL%E8%91%97%E8%89%B2%E5%99%A8/"/>
    
      <category term="shader" scheme="https://teddybearfp.github.io/tags/shader/"/>
    
      <category term="GLSL" scheme="https://teddybearfp.github.io/tags/GLSL/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬蟲幫你掌握氣象!(動態網頁爬取)</title>
    <link href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/"/>
    <id>https://teddybearfp.github.io/2018/11/16/動態網頁爬取/</id>
    <published>2018-11-16T02:05:16.000Z</published>
    <updated>2018-11-15T08:59:47.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇<a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/#more">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a>寫的是如何擷取靜態網頁內容，只能單純爬取HTML內容，但是如果網頁是用JS渲染的我們透過F12 select element是看不到內容的，像是下方這張圖<br><img src="https://i.imgur.com/I3DYim8.png" alt=""><br>選擇了元素，但看不到內容(今天(15日)桃園市天氣晴時多雲，平均溫度…)<br>因為這段代碼是由JS渲染，所以我們需要用PhantomJS來幫助我們爬取中央氣象局今天的天氣訊息</p><h2 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h2><p>PhantomJS是無介面瀏覽器(Headless browser)，背後的渲染引擎為 WebKit，適合進行自動化測試、捕捉截圖或監測網頁效能。因為沒有圖形介面，很容易整合至現有的測試框架，另一個特點是他能直接控制 DOM，方便你提取網頁中的元素內容</p><p>下載PhantomJS(<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">Download PhantomJS</a>)</p><h2 id="實作爬取氣象"><a href="#實作爬取氣象" class="headerlink" title="實作爬取氣象"></a>實作爬取氣象</h2><h3 id="導入函式庫"><a href="#導入函式庫" class="headerlink" title="導入函式庫"></a>導入函式庫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br></pre></td></tr></table></figure><h3 id="編寫爬取桃園天氣函式"><a href="#編寫爬取桃園天氣函式" class="headerlink" title="編寫爬取桃園天氣函式"></a>編寫爬取桃園天氣函式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Taoyuan</span><span class="params">()</span>:</span></span><br><span class="line">    target_url = <span class="string">'https://www.cwb.gov.tw/V7/forecast/taiwan/Taoyuan_City.htm'</span></span><br><span class="line">    driver = webdriver.PhantomJS(executable_path=<span class="string">r'D:\phantomjs\bin\phantomjs.exe'</span>)<span class="comment">#導入PhantomJS路徑</span></span><br><span class="line">    driver.get(target_url)</span><br><span class="line">    soup = BeautifulSoup(driver.page_source, <span class="string">'html.parser'</span>)</span><br><span class="line">    content = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> soup.select(<span class="string">'#ftext'</span>):</span><br><span class="line">        title = str(data)</span><br><span class="line">        content = title.split(<span class="string">"&lt;br/&gt;&lt;br/&gt;"</span>)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><p>檢視beautifulSoup解析HTML代碼後的內容並觀察欲爬取位置<br><img src="https://i.imgur.com/tiCvwGg.png" alt=""><br>將id為ftext的內容找出(#ftext)</p><ul><li>#id</li><li>.class<br><img src="https://i.imgur.com/8ZVExbm.png" alt=""></li></ul><h3 id="呼叫函式"><a href="#呼叫函式" class="headerlink" title="呼叫函式"></a>呼叫函式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(Taoyuan())</span><br></pre></td></tr></table></figure><p>成功爬取今日天氣概述<br><img src="https://i.imgur.com/m3hqHZr.png" alt=""></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>PhantomJS還蠻多問題的例如:使用Multi-thread，讓多個網頁能同時 Loading，可是 PhantomJS 同時開很容易就會陣亡。掛掉後會變成一個 Zombie Process。<br>Headless Google 的出現，能取代 PhantomJS 功能且更快更穩，讓 PhantomJS 作者決定停止辛苦的獨力維護工作，PhantomJS 的Github 專案也已封存，改用 Headless Chrome 已成定局。改天來玩看看Google Chrome Headless，到時候再來寫一篇Headless Chrome的爬取</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hiskio.com/courses/76/lectures/1883" target="_blank" rel="noopener">PhantomJS的用法</a><br><a href="https://jerrynest.io/phantomjs-screenshot/" target="_blank" rel="noopener">使用PhantomJS 抓取網頁截圖- 傑瑞窩在這</a><br><a href="https://blog.darkthread.net/blog/headless-chrome/" target="_blank" rel="noopener">使用 Headless Chrome 擷圖、轉存PDF、爬資料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇&lt;a href=&quot;https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="動態網頁爬取" scheme="https://teddybearfp.github.io/tags/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/"/>
    
      <category term="網頁爬蟲" scheme="https://teddybearfp.github.io/tags/%E7%B6%B2%E9%A0%81%E7%88%AC%E8%9F%B2/"/>
    
  </entry>
  
  <entry>
    <title>如何將Windows安裝到外接硬碟給Mac使用</title>
    <link href="https://teddybearfp.github.io/2018/11/15/%E5%A6%82%E4%BD%95%E5%B0%87Windows%E5%AE%89%E8%A3%9D%E5%88%B0%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%A2%9F%E7%B5%A6Mac%E4%BD%BF%E7%94%A8/"/>
    <id>https://teddybearfp.github.io/2018/11/15/如何將Windows安裝到外接硬碟給Mac使用/</id>
    <published>2018-11-15T05:05:16.000Z</published>
    <updated>2018-11-15T06:34:40.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>雖然Mac十分好用也非常流暢，但是有些程式在Mac上是無法使用或是還沒支援的，於是懷念起我們熟悉的Windows，除了bootcamp方式外，透過rufus這套軟體置作windows外接硬碟，可以很輕鬆的能在Mac裝置上看到Windows的身影</p><h2 id="rufus"><a href="#rufus" class="headerlink" title="rufus"></a>rufus</h2><p>可開機USB製作軟體 - Rufus，將一般的USB格式化，並製作成可以用於電腦重灌的可開機USB，支援各式ISO光碟映像檔及MS-DOS、FreeDOS的匯入，映像檔的匯入支援Windows 8/7/XP/Vista/2003R2等作業系統光碟、Hiren’s Boot CD等多功能開機片、CentOS等Linux作業系統光碟、LiveXP等Live CD。<br>可以至<a href="https://www.azofreeware.com/2013/12/rufus-141-usb.html" target="_blank" rel="noopener">阿榮福利味</a>下載</p><h2 id="製作步驟"><a href="#製作步驟" class="headerlink" title="製作步驟"></a>製作步驟</h2><h3 id="下載Windows-iso檔"><a href="#下載Windows-iso檔" class="headerlink" title="下載Windows iso檔"></a>下載Windows iso檔</h3><p>首先先取得Windows的映像檔(Windows 10 Pro/Windows 10 Home…)</p><h3 id="製做Windows環境外接硬碟"><a href="#製做Windows環境外接硬碟" class="headerlink" title="製做Windows環境外接硬碟"></a>製做Windows環境外接硬碟</h3><p>執行rufus將第一步驟的Windows.iso寫入外接硬碟(建議為SSD效能有時甚至可差距到十倍以上)</p><h3 id="Mac執行外接硬碟"><a href="#Mac執行外接硬碟" class="headerlink" title="Mac執行外接硬碟"></a>Mac執行外接硬碟</h3><p>將Mac開機(option + 開機)，然後選擇EFI boot進入安裝介面安裝，此時需準備滑鼠跟鍵盤，因為還沒安裝驅動mac的軌跡版與鍵盤將會無法使用</p><h3 id="安裝完後回到Mac-OS"><a href="#安裝完後回到Mac-OS" class="headerlink" title="安裝完後回到Mac OS"></a>安裝完後回到Mac OS</h3><p>回到Mac OS開啟boot camp選擇動作並下載Windows支援軟體(mac driver)，放到外接硬碟中</p><h3 id="設定Windows並安裝支援軟體"><a href="#設定Windows並安裝支援軟體" class="headerlink" title="設定Windows並安裝支援軟體"></a>設定Windows並安裝支援軟體</h3><p>將Mac開機(option + 開機)，然後選擇EFI boot進入已經安裝好的Windows，此時會跑一些Windows基本設定，設定完後就進入Windows介面了，但是有些功能尚未齊全，像是充電功能或是聲音、fn鍵等功能…，把剛剛從bootcamp下載到的driver執行，安裝成功後，跟一般的Windows沒什麼兩樣了!</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://applealmond.com/posts/15795" target="_blank" rel="noopener">如何將Windows安裝到外接硬碟上給Mac使用（非Bootcamp/虛擬 …</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;雖然Mac十分好用也非常流暢，但是有些程式在Mac上是無法使用或是還沒支援的，於是懷念起我們熟悉的Windows，除了bootcamp方式外
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Mac" scheme="https://teddybearfp.github.io/tags/Mac/"/>
    
      <category term="rufus" scheme="https://teddybearfp.github.io/tags/rufus/"/>
    
      <category term="WinToGo" scheme="https://teddybearfp.github.io/tags/WinToGo/"/>
    
  </entry>
  
  <entry>
    <title>優質小工具</title>
    <link href="https://teddybearfp.github.io/2018/11/15/%E5%84%AA%E8%B3%AA%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://teddybearfp.github.io/2018/11/15/優質小工具/</id>
    <published>2018-11-15T05:05:16.000Z</published>
    <updated>2018-12-22T03:01:55.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>俗話說的好，工欲善其事必先利其器，在工作上常常需要一些小工具來輔佐達到目的，可能會製作UI或是拍攝教學影片，或是使用些跟程式相關的軟體，這時候若沒有一組好工具就還要花費時間在搜尋你的工具時間上，尤其一堆要付費，都出來上班工作了還要用付費軟體太哀傷了，所以記錄了目前覺得不錯的免費軟體收錄在工具箱中，這樣下次使用就快狠準啦!</p><h2 id="GetColor-取得色碼"><a href="#GetColor-取得色碼" class="headerlink" title="GetColor 取得色碼"></a>GetColor 取得色碼</h2><p>製做UI的時候，顏色要很精準，GetColor可以將任一pixel的顏色代碼清楚寫出，是個製做UI的好幫手!<br><img src="https://i.imgur.com/ZY8i183.png" alt="" title="滴管取得色碼"></p><h2 id="ActivePresenter-製作影片"><a href="#ActivePresenter-製作影片" class="headerlink" title="ActivePresenter 製作影片"></a>ActivePresenter 製作影片</h2><p>製做影片時，不外乎就是調整影片長度與加字幕，這套ActivePresenter可以很輕鬆的達到這些需求，好操作又免費，讚!<br><img src="https://i.imgur.com/7KLoXkz.png" alt=""></p><h2 id="ReIcon-圖示定位"><a href="#ReIcon-圖示定位" class="headerlink" title="ReIcon 圖示定位"></a>ReIcon 圖示定位</h2><p>如果你也跟我一樣有接雙螢幕的習慣，開會時插拔HDMI/DSub線，排列好的桌布圖示順序跑掉，那就很需要這套軟體了，將排序好的桌布環境使用這套軟體記憶，亂掉的時候點兩下通通歸位~<br><img src="https://i.imgur.com/KxPtiqS.png" alt=""></p><h2 id="NSIS-程式打包"><a href="#NSIS-程式打包" class="headerlink" title="NSIS 程式打包"></a>NSIS 程式打包</h2><p><a href="http://nsis.sourceforge.net/Download" target="_blank" rel="noopener">Download NSIS 3.03</a><br>將寫好的程式碼透過編寫NSIS &gt; compile NSI Scripts / load scripts就會產生安裝檔，這樣可以給其他人安裝妳寫好的程式囉<br><img src="https://i.imgur.com/ku1cqn1.png" alt=""></p><h2 id="rufus-製做可開機硬碟"><a href="#rufus-製做可開機硬碟" class="headerlink" title="rufus 製做可開機硬碟"></a>rufus 製做可開機硬碟</h2><p>我在<a href="https://teddybearfp.github.io/2018/11/15/%E5%A6%82%E4%BD%95%E5%B0%87Windows%E5%AE%89%E8%A3%9D%E5%88%B0%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%A2%9F%E7%B5%A6Mac%E4%BD%BF%E7%94%A8/#more">如何將Windows安裝到外接硬碟給Mac使用</a>有編寫rufus相關製作方式</p><h2 id="clonezilla-製做可開機硬碟"><a href="#clonezilla-製做可開機硬碟" class="headerlink" title="clonezilla 製做可開機硬碟"></a>clonezilla 製做可開機硬碟</h2><p>類似rufus的功能，可以製作還原碟，在開機時什麼都不操作的情況下直接進行還原的動作</p><h2 id="paint-NET-圖片處理"><a href="#paint-NET-圖片處理" class="headerlink" title="paint.NET 圖片處理"></a>paint.NET 圖片處理</h2><p>有時候我們需要個去背或是圖形相關處理，用paint.NET是個好選擇，免費的paint.NET可以用筆刷將不要的地方用橡皮擦擦掉並存成png檔，去背的圖片在觀看疊圖趨勢的時候是很重要的</p><h2 id="tourtoiseHg-版本控制"><a href="#tourtoiseHg-版本控制" class="headerlink" title="tourtoiseHg 版本控制"></a>tourtoiseHg 版本控制</h2><p>下載<a href="https://tortoisehg.bitbucket.io/" target="_blank" rel="noopener">TortoiseHg</a></p><h3 id="TortoiseHg-vs-git"><a href="#TortoiseHg-vs-git" class="headerlink" title="TortoiseHg vs git"></a>TortoiseHg vs git</h3><h4 id="優勢"><a href="#優勢" class="headerlink" title="優勢"></a>優勢</h4><ul><li>workbench 功能強大, 可以給revision打tag/bookmark和導出patch和導出archive, 可以對repository做sync/purge操作.</li><li>操作比git簡單多</li><li>和windows版的git相比, 非常小巧</li><li>集成Issue Tracking和Review Board<h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4></li><li>不支持針對單個文件夾的分支.</li><li>thgw.exe佔用內存較多</li></ul><h2 id="bitBucket-版本控制"><a href="#bitBucket-版本控制" class="headerlink" title="bitBucket 版本控制"></a>bitBucket 版本控制</h2><p>好用的版本控制</p><h2 id="Cmake"><a href="#Cmake" class="headerlink" title="Cmake"></a>Cmake</h2><p>cmake 目的: 將source資料編譯成sln檔 讓c++可以編譯產生dll與lib</p><p>1.開啟cmake gui<br>2.選擇source(例如:C:/opencv/sources)<br>3.選擇目的資料夾<br>4.configure<br>5.configure完成後(例如opencv選擇build&gt;&gt;opencv_world打勾)<br>6.search找尋prefix(cmake&gt;&gt;cmake_install_prefix) 更改路徑<br>7.generate完成後 點擊open project<br>8.開啟sln後build需要的檔案(例如module內的opencv_world)<br>9.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>10.至install設定的資料夾即可找到.h  , .dll , .lib<br>11.此時只有debug版所以還要再編一次release版<br>12.切換成release再次build需要的檔案(例如module內的opencv_world)<br>13.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>14.步驟完成後 就有debug版跟release版了!</p><p><img src="https://i.imgur.com/SvyQStu.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hk.saowen.com/a/cd02fa3aa2d452856d27734e5a08e21a0e877c95717d10841a8d6340975abde4" target="_blank" rel="noopener">https://hk.saowen.com/a/cd02fa3aa2d452856d27734e5a08e21a0e877c95717d10841a8d6340975abde4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;俗話說的好，工欲善其事必先利其器，在工作上常常需要一些小工具來輔佐達到目的，可能會製作UI或是拍攝教學影片，或是使用些跟程式相關的軟體，這時
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="優質小工具" scheme="https://teddybearfp.github.io/tags/%E5%84%AA%E8%B3%AA%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
      <category term="CMake" scheme="https://teddybearfp.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>梯度計算影像清晰度</title>
    <link href="https://teddybearfp.github.io/2018/11/15/%E6%A2%AF%E5%BA%A6%E8%A8%88%E7%AE%97%E5%BD%B1%E5%83%8F%E6%B8%85%E6%99%B0%E5%BA%A6-gradient/"/>
    <id>https://teddybearfp.github.io/2018/11/15/梯度計算影像清晰度-gradient/</id>
    <published>2018-11-15T02:05:16.000Z</published>
    <updated>2018-11-15T03:41:22.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相機提供的訊息影響接下來對圖的運算，所以對焦有沒有清楚很重要，藉由梯度計算出來的數值，簡易的判別出是否屬於良好的對焦</p><h2 id="梯度計算"><a href="#梯度計算" class="headerlink" title="梯度計算"></a>梯度計算</h2><p>像素與右方、下方的差累加，可以得出一組梯度值(gradient)，<br>對焦清晰的圖像相比對焦模糊的圖像，它的數據之間的灰度差異應該更大，即它的方差應該較大，可以通過圖像灰度數據的方差來衡量圖像的清晰度，方差越大，表示清晰度越好。</p><ul><li>RGB圖用綠色的像素去做，因為綠色對光的反應是最靈敏的</li><li>每個G跟右邊、下方的比較</li><li>最右排跟最下排不做</li></ul><p>由左上至右下</p><p><img src="https://i.imgur.com/iFQjM7v.png" alt="" title="左上到右下計算"></p><blockquote><p>梯度 = ((G1-G2)+(G1-G4))+((G2-G3)+(G2-G5))+…<br>數值越大代表清晰度越好</p></blockquote><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>640 x 480的圖梯度計算處理<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> gradient = <span class="number">0</span>;</span><br><span class="line">uchar* buf = canvas.bits()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">639</span>; i++) &#123;<span class="comment">//略過最右排</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">479</span>; j++) &#123;<span class="comment">//略過最下排</span></span><br><span class="line">        <span class="keyword">int</span> idx = i * <span class="number">3</span> + j * canvas.bytePerline();</span><br><span class="line">        <span class="keyword">int</span> idxRight = (i + <span class="number">1</span>) * <span class="number">3</span> + j * bytePerLine();</span><br><span class="line">        <span class="keyword">int</span> idxBottom = i * <span class="number">3</span> + (j + <span class="number">1</span>) * canvas.bytePerLine();</span><br><span class="line">        gradient += <span class="built_in">abs</span>(buf[idx + <span class="number">1</span>] - buf[idxRight + <span class="number">1</span>]) + <span class="built_in">abs</span>(buf[idx +<span class="number">1</span>] - buf[idxBottom +<span class="number">1</span>])<span class="comment">//梯度等於綠色像素跟右方與下方比較</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="水波紋現象"><a href="#水波紋現象" class="headerlink" title="水波紋現象"></a>水波紋現象</h2><p>頻率不一致造成水波紋，室內拍攝時會造成水波紋，主要的原因是日光燈的閃爍頻率所致。一般常見的T9日光燈管是種氣體電燈，燈管內有低壓氬氣或氬氖混合氣體及水銀蒸氣，燈管的光線與色溫會隨著交流電的頻率（60Hz）變化，也就造成閃爍的現象。但因為閃爍的頻率很高，因此肉眼難以辨識，會覺得燈管放出的是連續光。但對於電子儀器來說，日光燈的閃爍頻率並不算高。因此造成手機、相機在拍攝上的波紋現象，關鍵就在於光源、快門、感光元件的頻率不一所致。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在工業應用中，最清晰的對焦拍攝出來的圖像不一定是最好的，有可能出現摩爾紋（水波紋）現象，一般需要在最清晰對焦位置做微調。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/dcrmg/article/details/53543341" target="_blank" rel="noopener">OpenCV 图像清晰度评价（相机自动对焦） - 牧野的博客- CSDN博客</a><br><a href="https://www.techbang.com/posts/17861-principle-analysis-of-cell-phone-camera-water-ripples-all-fluorescent-lamp-frequency-labranche" target="_blank" rel="noopener">解決手機、相機水波紋現象，全是日光燈頻率在搞鬼| T客邦</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相機提供的訊息影響接下來對圖的運算，所以對焦有沒有清楚很重要，藉由梯度計算出來的數值，簡易的判別出是否屬於良好的對焦&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="清晰度" scheme="https://teddybearfp.github.io/tags/%E6%B8%85%E6%99%B0%E5%BA%A6/"/>
    
      <category term="Focus" scheme="https://teddybearfp.github.io/tags/Focus/"/>
    
      <category term="梯度" scheme="https://teddybearfp.github.io/tags/%E6%A2%AF%E5%BA%A6/"/>
    
      <category term="gradient" scheme="https://teddybearfp.github.io/tags/gradient/"/>
    
  </entry>
  
  <entry>
    <title>執行緒</title>
    <link href="https://teddybearfp.github.io/2018/11/12/%E5%9F%B7%E8%A1%8C%E7%B7%92/"/>
    <id>https://teddybearfp.github.io/2018/11/12/執行緒/</id>
    <published>2018-11-12T01:05:16.000Z</published>
    <updated>2018-11-13T01:13:16.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="執行緒"><a href="#執行緒" class="headerlink" title="執行緒"></a>執行緒</h2><p>執行緒（thread）是作業系統能夠進行運算排程的最小單位。它被包含在行程之中，是行程中的實際運作單位。一條執行緒指的是行程中一個單一順序的控制流，一個行程中可以並行多個執行緒，每條執行緒並列執行不同的任務。</p><ul><li>擁有多CPU的電腦系統可以同時處理多項程序或將單一程序平行處理。</li><li>一個程序被執行時至少要有一個執行緒，但也可同時擁有多個執行緒來進行處理。</li></ul><h2 id="CreateThread-vs-beginthread"><a href="#CreateThread-vs-beginthread" class="headerlink" title="CreateThread  vs _beginthread"></a>CreateThread  vs _beginthread</h2><h3 id="兩者差異"><a href="#兩者差異" class="headerlink" title="兩者差異"></a>兩者差異</h3><p>CreateThread 是一個<strong>Win 32API</strong> 函數,_beginthread 是一個<strong>CRT(C Run-Time)</strong> 函式<br>使用上不會有太大的差異，但是如果在CreateThread創建的thread中使用CRT函式的話，會產生一些<strong>Memory Leak</strong>，(例如:<strong>_getptd</strong> )</p><p>CreateThread()和_beginthreadex()在Jeffrey的《Windows核心編程》中講的很清楚，應當儘量避免使用CreateThread()。<br>事實上，_beginthreadex()在內部先爲線程創建一個線程特有的tiddata結構，然後調用CreateThread()。在某些非線程安全的CRT函數中會請求這個結構。如果直接使用CreateThread()的話，那些函數發現請求的tiddata爲NULL，就會在現場爲該線程創建該結構，此後調用EndThread()時會引起內存泄漏。_endthreadex()可以釋放由CreateThread()創建的線程，實際上，在它的內部會先釋放由_beginthreadex()創建的tiddata結構，然後調用EndThread()。<br>因此，應當使用_beginthreadex() 和_endthreadex() ，而避免使用CreateThread()和EndThread()。當然，_beginthread()和_endthread()也是應當避免使用的。 </p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>使用_beginthreadex()!!!</p><h3 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h3><p>CRT(C/C++ Runtime Library)是支持C/C++運行的一系列函式和代碼的總稱。雖然沒有一個很精確的定義，但是可以知道，你的main就是它負責調用的，你平時調用的諸如strlen、strtok、time、atoi之類的函式也是它提供的。</p><h2 id="beginthread-vs-beginthreadex"><a href="#beginthread-vs-beginthreadex" class="headerlink" title="_beginthread vs _beginthreadex"></a>_beginthread vs _beginthreadex</h2><p>_beginthread 和 _beginthreadex 各有兩種多載版本，一個接受原生呼叫慣例函式指標，另一個接受 __clrcall 函式指標。 第一個多載版本不是應用程式定義域安全的，而且永遠不會是。 如果您要撰寫混合程式碼或純程式碼，就必須確保新的執行緒會在存取 Managed 資源前進入正確的應用程式定義域。 您可以執行這項操作，例如，使用call_in_appdomain 函式。 第二個多載版本是應用程式定義域安全的；新建立的執行緒永遠都會在 _beginthread 或 _beginthreadex呼叫端的應用程式定義域中結束。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uintptr_t</span> _beginthread( <span class="comment">// NATIVE CODE  </span></span><br><span class="line">   <span class="keyword">void</span>( __cdecl *start_address )( <span class="keyword">void</span> * ),  </span><br><span class="line">   <span class="keyword">unsigned</span> stack_size,  </span><br><span class="line">   <span class="keyword">void</span> *arglist   </span><br><span class="line">);  </span><br><span class="line"><span class="keyword">uintptr_t</span> _beginthread( <span class="comment">// MANAGED CODE  </span></span><br><span class="line">   <span class="keyword">void</span>( __clrcall *start_address )( <span class="keyword">void</span> * ),  </span><br><span class="line">   <span class="keyword">unsigned</span> stack_size,  </span><br><span class="line">   <span class="keyword">void</span> *arglist   </span><br><span class="line">);  </span><br><span class="line"><span class="keyword">uintptr_t</span> _beginthreadex( <span class="comment">// NATIVE CODE  </span></span><br><span class="line">   <span class="keyword">void</span> *security,  </span><br><span class="line">   <span class="keyword">unsigned</span> stack_size,  </span><br><span class="line">   <span class="keyword">unsigned</span> ( __stdcall *start_address )( <span class="keyword">void</span> * ),  </span><br><span class="line">   <span class="keyword">void</span> *arglist,  </span><br><span class="line">   <span class="keyword">unsigned</span> initflag,  </span><br><span class="line">   <span class="keyword">unsigned</span> *thrdaddr   </span><br><span class="line">);  </span><br><span class="line"><span class="keyword">uintptr_t</span> _beginthreadex( <span class="comment">// MANAGED CODE  </span></span><br><span class="line">   <span class="keyword">void</span> *security,  </span><br><span class="line">   <span class="keyword">unsigned</span> stack_size,  </span><br><span class="line">   <span class="keyword">unsigned</span> ( __clrcall *start_address )( <span class="keyword">void</span> * ),  </span><br><span class="line">   <span class="keyword">void</span> *arglist,  </span><br><span class="line">   <span class="keyword">unsigned</span> initflag,  </span><br><span class="line">   <span class="keyword">unsigned</span> *thrdaddr   </span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="beginthreadex"><a href="#beginthreadex" class="headerlink" title="_beginthreadex"></a>_beginthreadex</h2><h3 id="beginthreadex-1"><a href="#beginthreadex-1" class="headerlink" title="_beginthreadex"></a>_beginthreadex</h3><p>創執行緒</p><h3 id="WaitForSingleObject"><a href="#WaitForSingleObject" class="headerlink" title="WaitForSingleObject"></a>WaitForSingleObject</h3><p>WaitForSingleObject 函式用來檢測 hHandle 事件的信號狀態，當函數的執行時間超過 dwMilliseconds 就返回，但如果參數 dwMilliseconds 爲 INFINITE 時函數將直到相應時間事件變成有信號狀態才返回，否則就一直等待下去，直到 WaitForSingleObject 有返回值才執行後面的代碼。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WaitForSingleObject(</span><br><span class="line">    HANDLE hHandle, </span><br><span class="line">    DWORDd wMilliseconds                                </span><br><span class="line">);</span><br><span class="line">WaitForSingleObject( hThread, INFINITE );<span class="comment">//會等執行緒執行完才結束程式</span></span><br></pre></td></tr></table></figure></p><h3 id="CloseHandle-hThread"><a href="#CloseHandle-hThread" class="headerlink" title="CloseHandle( hThread );"></a>CloseHandle( hThread );</h3><p>結束執行緒(CloseHandle是關閉建立者跟被建立之thread的連結而已)<br>創建的thread可以透過ExitThread或是return來結束執行緒</p><h3 id="stdcall-呼叫慣例用於呼叫-Win32-API-函式。"><a href="#stdcall-呼叫慣例用於呼叫-Win32-API-函式。" class="headerlink" title="__stdcall 呼叫慣例用於呼叫 Win32 API 函式。"></a>__stdcall 呼叫慣例用於呼叫 Win32 API 函式。</h3><p>語法-return-type __stdcall function-name[(argument-list)]</p><h2 id="beginthreadex實作"><a href="#beginthreadex實作" class="headerlink" title="_beginthreadex實作"></a>_beginthreadex實作</h2><h3 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> icounter=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">unsigned</span> icounterMax = <span class="number">100000</span>;  </span><br><span class="line"><span class="keyword">unsigned</span>  __<span class="function">stdcall <span class="title">secondThreadFunc</span><span class="params">(<span class="keyword">void</span>* argu)</span> </span>&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"In second thread...\n"</span>);  </span><br><span class="line">    <span class="keyword">while</span>(icounter &lt; icounterMax)  </span><br><span class="line">        icounter++;  </span><br><span class="line">    _endthreadex(<span class="number">0</span>);          </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    HANDLE hThread;   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Create second thread...\n"</span>);  </span><br><span class="line">    <span class="comment">//createThreadEx(&amp;hThread, (void*) &amp;secondThreadFunc, NULL, 0, 0);  </span></span><br><span class="line">    <span class="keyword">unsigned</span> threadID;  </span><br><span class="line">    hThread = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;secondThreadFunc, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadID);  </span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Counter should be %d, it is %d now!\n"</span>, icounterMax, icounter);  </span><br><span class="line">    CloseHandle(hThread);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;process.h&gt; /* _beginthread, _endthread */  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">DataProc</span>&#123;</span></span><br><span class="line">    DataProc();</span><br><span class="line">    ~DataProc();</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    <span class="keyword">unsigned</span> threadID;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> __<span class="function">stdcall <span class="title">threadProc</span><span class="params">(<span class="keyword">void</span> *param)</span></span>; <span class="comment">//static內部不能更改member變數所以要轉到non-static的函式內處理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">threadProc</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line">DataProc::DataProc() &#123;</span><br><span class="line">    hThread = (HANDLE)_beginthreadex( <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadProc, <span class="keyword">this</span>, <span class="number">0</span>, &amp;threadID );</span><br><span class="line">    WaitForSingleObject( hThread, INFINITE ); <span class="comment">//    等到thread完成</span></span><br><span class="line">&#125;</span><br><span class="line">DataProc::~DataProc() &#123;</span><br><span class="line">    CloseHandle( hThread ); <span class="comment">//CloseHandle是關閉建立者跟被建立之thread的連結而已(失去hThread)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> __stdcall DataProc::threadProc(<span class="keyword">void</span>* pArguments) &#123; </span><br><span class="line">    DataProc *DataProcPtr = (DataProc*)pArguments; <span class="comment">//將值轉型為class再呼叫函式</span></span><br><span class="line">    DataProcPtr-&gt;threadProc(); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//return是結束執行緒(這條執行緒就沒了)也可以呼叫ExitThread來結束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> DataProc::threadProc() &#123; </span><br><span class="line">    <span class="comment">//dosomething... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>example1 secondThreadFunc的寫法不可以是class的member所以無法使用成員變數需加上static的方式再以function pointer使成員函式被呼叫</p><h2 id="QThread"><a href="#QThread" class="headerlink" title="QThread"></a>QThread</h2><p>因為Qt中所有界面都是在UI執行緒中(也被稱為主執行緒，就是執行QApplication::exec()的線程)，在這個線程中執行耗時的操作，UI就會阻塞，而讓介面停止響應，為了避免這一問題，我們改寫程式，使用QThread開啟一個新的執行緒，由這新的執行緒進行耗時的工作，而主執行緒可繼續進行使用者介面的響應。</p><h2 id="QThread實作"><a href="#QThread實作" class="headerlink" title="QThread實作"></a>QThread實作</h2><h3 id="編寫WorkThread-class"><a href="#編寫WorkThread-class" class="headerlink" title="編寫WorkThread class"></a>編寫WorkThread class</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> :</span> <span class="keyword">public</span> QThread</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     WorkThread();</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">StartThread</span><span class="params">( <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member )</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">IsAlive</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">public</span> slots:</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">SetThreadEnd</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">     <span class="keyword">bool</span> bIsThreadAlive;</span><br><span class="line"> signals:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">EndPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">```cpp</span><br><span class="line"><span class="comment">//WorkThread.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"workthread.h"</span></span></span><br><span class="line"></span><br><span class="line">WorkThread::WorkThread()</span><br><span class="line">&#123;</span><br><span class="line">    bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> WorkThread::StartThread(<span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( !bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        bIsThreadAlive = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;disconnect();</span><br><span class="line"></span><br><span class="line">        connect( <span class="keyword">this</span>,SIGNAL( DoSomething() ),receiver,member,Qt::DirectConnection );</span><br><span class="line">        connect( <span class="keyword">this</span>,SIGNAL( EndPoint() ),<span class="keyword">this</span>,SLOT( quit() ));</span><br><span class="line">        <span class="keyword">this</span>-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> WorkThread::run()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">emit <span class="title">DoSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">    <span class="function">emit <span class="title">EndPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::Stop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        SetThreadEnd();</span><br><span class="line">        <span class="keyword">this</span>-&gt;wait();</span><br><span class="line"></span><br><span class="line">        QThread::quit();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !bIsThreadAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::SetThreadEnd()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( bIsThreadAlive )</span><br><span class="line">    &#123;</span><br><span class="line">        bIsThreadAlive = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !bIsThreadAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> WorkThread::IsAlive()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> bIsThreadAlive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用WorkThread"><a href="#使用WorkThread" class="headerlink" title="使用WorkThread"></a>使用WorkThread</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用端.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"workthread.h"</span></span></span><br><span class="line">WorkThread thd4Rander;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用端.cpp</span></span><br><span class="line"><span class="keyword">void</span> DataProc::~DataProc() &#123;</span><br><span class="line">    thd4Rander.Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::FrameProcess() &#123;</span><br><span class="line">    <span class="keyword">while</span>(thd4Rander.IsAlive()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!GetCameraData(rawData, &amp;width, &amp;height)) &#123;</span><br><span class="line">            thd4Rander.Stop();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            dosomething...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DataProc::startRender() <span class="comment">//可以製作成button來切換</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(thd4Rander.IsAlive())</span><br><span class="line">    &#123;</span><br><span class="line">        thd4Rander.Stop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        thd4Rander.StartThread(<span class="keyword">this</span>, SLOT(FrameProcess()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="pragma-once"><a href="#pragma-once" class="headerlink" title="#pragma once"></a>#pragma once</h3><p>#pragma once是一個非標準但是被廣泛支援的前置處理符號，會讓所在的檔案在一個單獨的編譯中只被包含一次</p><h4 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h4><p>使用#pragma once代替include防範將加快編譯速度，因為這是一種高階的機制；編譯器會自動比對檔案名稱或inode而不需要在標頭檔去判斷#ifndef和#endif。 </p><h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4><p>#pragma once有好也有壞，設計者必須依賴編譯器正確的管理#pragma once。編譯器如果犯錯，例如沒有辨認出在相同檔案中的兩個不同符號連結名稱指標，此時編譯會錯誤。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://msdn.microsoft.com/zh-tw/library/kdzttdcb.aspx" target="_blank" rel="noopener">_beginthread、_beginthreadex - MSDN - Microsoft</a><br><a href="http://puremonkey2010.blogspot.com/2010/08/c-windows-thread-beginthread.html" target="_blank" rel="noopener">在Windows下建立Thread(使用_beginthread,_beginthreadex)</a><br><a href="https://www.smwenku.com/a/5b8659722b71775d1cd50531/" target="_blank" rel="noopener">CreateThread和_beginthread區別及使用</a><br><a href="http://monkeycoding.com/?p=826" target="_blank" rel="noopener">程序、執行緒、多執行緒| 阿洲的程式教學</a><br><a href="https://zh.wikipedia.org/wiki/Pragma_once" target="_blank" rel="noopener">#pragma once - 维基百科，自由的百科全書</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;執行緒&quot;&gt;&lt;a href=&quot;#執行緒&quot; class=&quot;headerlink&quot; title=&quot;執行緒&quot;&gt;&lt;/a&gt;執行緒&lt;/h2&gt;&lt;p&gt;執行緒（thread）是作業系統能夠進行運算排程的最小單位。它被包含在行程之中，是行程中的實際運作單位。一條執行緒指的是行程中一個單
      
    
    </summary>
    
      <category term="綜合" scheme="https://teddybearfp.github.io/categories/%E7%B6%9C%E5%90%88/"/>
    
    
      <category term="執行緒" scheme="https://teddybearfp.github.io/tags/%E5%9F%B7%E8%A1%8C%E7%B7%92/"/>
    
      <category term="_beginthreadex" scheme="https://teddybearfp.github.io/tags/beginthreadex/"/>
    
      <category term="QThread" scheme="https://teddybearfp.github.io/tags/QThread/"/>
    
  </entry>
  
  <entry>
    <title>C 計時器</title>
    <link href="https://teddybearfp.github.io/2018/11/09/%E8%A8%88%E6%99%82%E5%99%A8/"/>
    <id>https://teddybearfp.github.io/2018/11/09/計時器/</id>
    <published>2018-11-09T08:05:16.000Z</published>
    <updated>2018-11-09T09:29:44.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>演算法執行速度，影響整個程式的執行體感，最近體會到演算法的重要性，對圖片的處理運算如果不夠快，則很難變成video形式呈現即時畫面，所以在演算法裡面要找出比較耗時的程式碼去優化，這時候就需要用計時器clock的功能，簡易地達到分析程式碼耗時</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>時間複雜度：衡量演算法執行好壞的工具<br>大 O 符號：用來描述演算法在輸入 n 個東西時，總執行時間與 n 的關係<br>在 n 非常大時，好的演算法設計可以省下非常多時間<br>演算法的速度不是以秒計算，而是以步驟次數</p><h2 id="clock"><a href="#clock" class="headerlink" title="clock"></a>clock</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">algorism</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> tic, toc1, toc2;</span><br><span class="line">    tic = clock();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dosomething_1...</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    toc1 = clock();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dosomething_2...</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    toc2 = clock();</span><br><span class="line">    </span><br><span class="line">    deltaToc1 = toc1 - tic;<span class="comment">//deltaToc1為執行dosomething_1的時間</span></span><br><span class="line">    deltaToc2 = toc2 - tic;<span class="comment">//deltaToc2為執行dosomething_1+dosomething_2的時間</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E8%AB%87%E4%BB%80%E9%BA%BC%E6%98%AF%E6%BC%94%E7%AE%97%E6%B3%95%E5%92%8C%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6-b1f6908e4b80" target="_blank" rel="noopener">初學者學演算法｜談什麼是演算法和時間複雜度– AppWorks School …</a><br><a href="http://edisonx.pixnet.net/blog/post/52113788-%5Bc%5D-%E8%A8%88%E6%99%82%E5%99%A8%E6%95%B4%E7%90%86" target="_blank" rel="noopener">[C] 計時器整理@ Edison.X. Blog :: 痞客邦::</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;演算法執行速度，影響整個程式的執行體感，最近體會到演算法的重要性，對圖片的處理運算如果不夠快，則很難變成video形式呈現即時畫面，所以在演
      
    
    </summary>
    
      <category term="C" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="計時器" scheme="https://teddybearfp.github.io/tags/%E8%A8%88%E6%99%82%E5%99%A8/"/>
    
      <category term="clock" scheme="https://teddybearfp.github.io/tags/clock/"/>
    
  </entry>
  
  <entry>
    <title>Qt QImage &amp; QQuickPaintedItem操作</title>
    <link href="https://teddybearfp.github.io/2018/11/08/QImage-%E6%93%8D%E4%BD%9C/"/>
    <id>https://teddybearfp.github.io/2018/11/08/QImage-操作/</id>
    <published>2018-11-08T08:05:16.000Z</published>
    <updated>2019-01-06T07:48:53.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過圖片呈現資料是個視覺化的讓人更容易、快速且有效地理解。研究顯示，人腦處理圖像的速度比處理文字快6萬倍。</p><h2 id="QImage應用"><a href="#QImage應用" class="headerlink" title="QImage應用"></a>QImage應用</h2><h3 id="彩色圖"><a href="#彩色圖" class="headerlink" title="彩色圖"></a>彩色圖</h3><p>RGB / RGBA<br>每一張圖片都是由pixel組成，每一個pixel都有三個通道：紅，綠，藍，還有一個alpha通道來保存透明度（JPEG格式的圖片不支持透明）。每個通道的值是0-255，三個通道都是255表示白色，都是0的話，表示黑色</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QImage canvas1 = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB32); <span class="comment">//儲存格式為B,G,R,A 對應0,1,2,3</span></span><br><span class="line">QImage canvas2 = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);<span class="comment">//儲存格式為R,G,B 對應0,1,2</span></span><br></pre></td></tr></table></figure><h3 id="灰階圖"><a href="#灰階圖" class="headerlink" title="灰階圖"></a>灰階圖</h3><p>標準的灰階圖就是每個pixel的三個通道的值一樣或者近似，我們的策略就是將每個像素的每個通道的值都調成一樣，取R,G,B值爲三者的平均，像是下面<strong>操作QImage(double* to QImage)</strong> 的例子就是製作一個灰階圖</p><h3 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">uchar* <span class="title">bits</span><span class="params">()</span></span>;          <span class="comment">//取得影像第一個指標位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">byteCount</span><span class="params">()</span></span>;        <span class="comment">//取得影像占用位置數量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bytesPerLine</span><span class="params">()</span></span>;     <span class="comment">//取得影像每一行的占用位置數量</span></span><br><span class="line"><span class="function">uchar* <span class="title">scanLine</span><span class="params">(<span class="keyword">int</span>)</span></span>;   <span class="comment">//取得每行的指標位置</span></span><br></pre></td></tr></table></figure><h3 id="畫布操作"><a href="#畫布操作" class="headerlink" title="畫布操作"></a>畫布操作</h3><p>藉由操作buffer的方式達到對QImage的操作<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QImage canvas = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);</span><br><span class="line">uchar* bits = canvas.bits();<span class="comment">//QImage.bits()取得影像記憶體起始位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">640</span> * <span class="number">480</span> * <span class="number">3</span>; i++) &#123;</span><br><span class="line">    bits[i] = <span class="number">255</span>;<span class="comment">//將畫布變為白色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="操作QImage-double-to-QImage"><a href="#操作QImage-double-to-QImage" class="headerlink" title="操作QImage(double* to QImage)"></a>操作QImage(double* to QImage)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">QImage canvas = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);<span class="comment">//寬640,高480的畫布</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>* ptrImg;<span class="comment">//儲存1024*1024筆資料</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    for(int i = 0; i &lt; 1024; i++) &#123;</span></span><br><span class="line"><span class="comment">        for(int j = 0; j &lt; 1024; j++) &#123;</span></span><br><span class="line"><span class="comment">            ptrImg[i][j] dosomething...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">uchar* bits = canvas.bits();<span class="comment">//QImage.bits()取得影像記憶體起始位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">1024</span> ; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> idx = i * <span class="number">3</span>;</span><br><span class="line">    bits[idx] = ptrImg[i];  <span class="comment">//R 紅色</span></span><br><span class="line">    bits[idx+<span class="number">1</span>] = ptrImg[i];<span class="comment">//G 綠色</span></span><br><span class="line">    bits[idx+<span class="number">2</span>] = ptrImg[i];<span class="comment">//B 藍色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存取QImage"><a href="#存取QImage" class="headerlink" title="存取QImage"></a>存取QImage</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QImage canvas;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    dosomething...</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">canvas.save(<span class="string">"Img.jpg"</span>,<span class="string">"JPG"</span>);</span><br><span class="line">canvas.load(<span class="string">"D:/Img.png"</span>,<span class="string">"PNG"</span>); <span class="comment">//&lt;非常重要!!!&gt; 使用load方式讀出來的格式為RGBA8888四通道</span></span><br></pre></td></tr></table></figure><h3 id="調整大小"><a href="#調整大小" class="headerlink" title="調整大小"></a>調整大小</h3><p>在縮放時需要注意線條是否有被丟棄的現象，此時可以將1 pixel的線條畫成3 pixel之類…<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">canvasResize</span><span class="params">(QImage canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;canvas = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);<span class="comment">//Class member canvas</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;canvas = canvas.scaled(<span class="number">480</span>,<span class="number">360</span>);<span class="comment">//將640x480的畫布調整成480x360</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="旋轉"><a href="#旋轉" class="headerlink" title="旋轉"></a>旋轉</h3><p>資料處理矩陣轉置或是旋轉，用QImage處理會快很多<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QImage srcImg = QImage(<span class="number">640</span>, <span class="number">480</span>, QImage::Format_RGB888);</span><br><span class="line">QMatirx matrix;</span><br><span class="line">matrix.rotate(<span class="number">90</span>);<span class="comment">//順時針方向旋轉度數</span></span><br><span class="line"></span><br><span class="line">QImage dstImg = srcImg.transformed(matrix);</span><br></pre></td></tr></table></figure></p><h3 id="轉換格式"><a href="#轉換格式" class="headerlink" title="轉換格式"></a>轉換格式</h3><p>將24位元的三通道轉換成32位元的四通道<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QImage Img = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888);</span><br><span class="line">Img = Img.convertToFormat(QImage::Format_RGBA8888);</span><br></pre></td></tr></table></figure></p><h2 id="QQuickPaintedItem畫圖"><a href="#QQuickPaintedItem畫圖" class="headerlink" title="QQuickPaintedItem畫圖"></a>QQuickPaintedItem畫圖</h2><p>繼承QQuickPaintedItem在C++端可以使用QPainter特性</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickPaintedItem&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagePresenter</span> :</span> <span class="keyword">public</span> QQuickPaintedItem &#123; </span><br><span class="line">Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">ImagePresenter(QQuickItem* parent = <span class="literal">nullptr</span>); </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter* painter)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">drawImg</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">QImage canvas;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ImagePresenter::ImagePresenter(QQuickItem* parent) : QQuickPaintedItem(parent) &#123;</span><br><span class="line">    canvas = QImage(<span class="number">640</span>,<span class="number">480</span>, QImage::Format_RGB888);<span class="comment">//寫固定</span></span><br><span class="line">    canvas2 = QImage(<span class="keyword">this</span>-&gt;width(),<span class="keyword">this</span>-&gt;height(), QImage::Format_RGB888);<span class="comment">//寫動態跟著qml端</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> ImagePresenter::paint(QPainter *painter) &#123;</span><br><span class="line">    painter-&gt;drawLine(QPointF(<span class="number">10</span>,<span class="number">50</span>),QPointF(<span class="number">100</span>,<span class="number">100</span>));<span class="comment">//畫線</span></span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>)</span></span>; <span class="comment">//目標畫布大小</span></span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, canvas.width(),canvas.height())</span></span>; <span class="comment">//來源大小</span></span><br><span class="line">    painter-&gt;drawImage(target, canvas, source); <span class="comment">//將Qimage傳入畫圖source);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> ImagePresenter::drawImg() &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        canvas dosomething...</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    update();<span class="comment">//此時會呼叫paint將QImage畫上去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="將QList畫到畫面上"><a href="#將QList畫到畫面上" class="headerlink" title="將QList畫到畫面上"></a>將QList<qpointf>畫到畫面上</qpointf></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ImagePresenter::drawQList(QList&lt;QPointF&gt; data) &#123;</span><br><span class="line">    QImage canvas = QImage(<span class="number">640</span>,<span class="number">480</span>, QImage::Format_RGB888);</span><br><span class="line">    <span class="function">QPainter <span class="title">p</span><span class="params">(&amp;canvas)</span></span>;<span class="comment">//運用QPainter特性處理QPointF</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;listDataSet;<span class="comment">//清空方式listDataSet.clear();</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">        listDataSet.push_back(data.at(i).y());<span class="comment">//剖析QList&lt;QPointF&gt;取得第幾組的QPointF的y點</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        p.drawLine(QPointF(i,(listDataSet[i]+yOffset)/yScale), QPointF((i+<span class="number">1</span>),(listDataSet[i+<span class="number">1</span>]+yOffset)/yScale));</span><br><span class="line">    &#125;</span><br><span class="line">    p.end ();</span><br><span class="line">    canvas = canvas.mirrored(<span class="literal">false</span>,<span class="literal">true</span>); <span class="comment">//鏡像反轉</span></span><br><span class="line">    update();<span class="comment">//呼叫paint將QImage畫上去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="數據調整"><a href="#數據調整" class="headerlink" title="數據調整"></a>數據調整</h2><h3 id="0-255"><a href="#0-255" class="headerlink" title="0 ~ 255"></a>0 ~ 255</h3><p>因為針對QImage的記憶體位置操作時存取的RGB數值需在0~255，有時候資料可能為小數0.00xxx1之類的數字而極值可能又超過255，此時需要做個放大或縮小</p><blockquote><p>例如:<br>資料為0.000345 ~ 60 or 20 ~ 120<br>需要讓他調整為<strong>0 ~ 255</strong> 區間</p></blockquote><h3 id="取最大最小值"><a href="#取最大最小值" class="headerlink" title="取最大最小值"></a>取最大最小值</h3><p>首先取得最大最小值<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;//特殊情況使用log10</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doublePtrScaled</span><span class="params">(<span class="keyword">double</span>* ptrImg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Max = <span class="number">-99999</span>,</span><br><span class="line">           Min = <span class="number">999999</span>;</span><br><span class="line">    <span class="keyword">double</span> Scale = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++) &#123;<span class="comment">//nRow = 1024</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;<span class="comment">//nCol = 1024        </span></span><br><span class="line">            ptrImg[r*<span class="number">1024</span>+c] = <span class="built_in">log10</span>(ptrImg[r*<span class="number">1024</span>+c]);<span class="comment">//如果值差異非常大，例如:Max = 1234,Min = 0.00000012;做Log以10為底(差異沒很大就不需要做此指令)  </span></span><br><span class="line">            <span class="keyword">if</span>(ptrImg[r*<span class="number">1024</span>+c] &lt; Min)<span class="comment">//Size: ptrImg[1024][1024]</span></span><br><span class="line">                Min = ptrImg[r*<span class="number">1024</span>+c];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ptrImg[r*<span class="number">1024</span>+c] &lt; Max)</span><br><span class="line">                Max = ptrImg[r*<span class="number">1024</span>+c];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="將欲縮放的值起始位置設為0-與0-255起始位置一樣"><a href="#將欲縮放的值起始位置設為0-與0-255起始位置一樣" class="headerlink" title="將欲縮放的值起始位置設為0(與0 ~ 255起始位置一樣)"></a>將欲縮放的值起始位置設為0(與0 ~ 255起始位置一樣)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> Offset = Min - <span class="number">0</span>;<span class="comment">//如果位移到30 ~ 255則減30</span></span><br><span class="line"><span class="keyword">double</span> Scale = Max - Min / <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++) &#123;<span class="comment">//nRow = 1024</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nCol; j++) &#123;<span class="comment">//nCol = 1024         </span></span><br><span class="line">        ptrImg[r*<span class="number">1024</span>+c] -= Offset<span class="comment">//全部位移Offset</span></span><br><span class="line">        <span class="keyword">if</span>(ptrImg[r*<span class="number">1024</span>+c]/Scale &gt; <span class="number">255</span>)<span class="comment">//若大於255定為255否則預設會取mod255</span></span><br><span class="line">            ptrImg[r*<span class="number">1024</span>+c] = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ptrImg[r*<span class="number">1024</span>+c] /= Scale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成數據調整"><a href="#完成數據調整" class="headerlink" title="完成數據調整"></a>完成數據調整</h3><p>完成以上步驟，此時的數據接落在0~255區間這樣就可以進行QImage與QQuickPaintedItem畫圖囉!</p><h2 id="QML端"><a href="#QML端" class="headerlink" title="QML端"></a>QML端</h2><p>在QML端畫圖時容器長寬需要跟畫布長寬一致，否則內容會超出畫布</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.merit-times.com.tw/NewsPage.aspx?Unid=420189" target="_blank" rel="noopener">資料視覺化魔法 用圖說故事 數據變珍寶</a><br><a href="https://www.smwenku.com/a/5b7c8cdc2b71770a43db84ec/" target="_blank" rel="noopener">基於Qt的圖像處理技術和算法- 神馬文庫</a><br><a href="https://ccw1986.blogspot.com/2013/11/qtqimage.html" target="_blank" rel="noopener">QImage 操作方式~ Marc Talk</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;透過圖片呈現資料是個視覺化的讓人更容易、快速且有效地理解。研究顯示，人腦處理圖像的速度比處理文字快6萬倍。&lt;/p&gt;
&lt;h2 id=&quot;QIma
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QImage" scheme="https://teddybearfp.github.io/tags/QImage/"/>
    
      <category term="QPainter" scheme="https://teddybearfp.github.io/tags/QPainter/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</title>
    <link href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/"/>
    <id>https://teddybearfp.github.io/2018/11/07/Ptt爬蟲/</id>
    <published>2018-11-07T03:05:16.000Z</published>
    <updated>2018-11-15T06:39:09.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在朋友都是鄉民的情況下，在這一兩年才加入鄉民的行列，開始看一些八卦版、笑話版、科技版、薪資版…，逛各大板的同時，總覺得各版有不少廢文，一頁一頁慢慢滑，要看到優質好文章，實在有點耗時，這時就動手寫了個幫忙精選PTT文章的爬蟲，五樓有了這爬蟲之後考試都一百分了</p><h2 id="名詞概述"><a href="#名詞概述" class="headerlink" title="名詞概述"></a>名詞概述</h2><h3 id="靜態頁面爬取"><a href="#靜態頁面爬取" class="headerlink" title="靜態頁面爬取"></a>靜態頁面爬取</h3><p>所謂靜態頁面是指純粹的HTML格式的頁面，這樣的頁面在瀏覽器中呈現的內容都在HTML原始碼中。</p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>session，自動保存cookies，可以設置請求參數，下次請求自動帶上請求參數<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = requests.Session()</span><br></pre></td></tr></table></figure></p><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>requests是一個很實用的Python HTTP客户端庫，編寫爬蟲和測試服務器響應數據時經常會用到。可以説，Requests 完全滿足如今網絡的需求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res  = requests.get(<span class="string">'https://www.google.com/'</span>)</span><br><span class="line">res.encoding = <span class="string">'utf-8'</span><span class="comment">#支援中文</span></span><br><span class="line">res.text <span class="comment">#返回get到的編碼解析的結果</span></span><br></pre></td></tr></table></figure><blockquote><p>可以透過cmd輸入指令 pip3 install requests 安裝</p></blockquote><h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h3><p>解析網頁 HTML 碼<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)   <span class="comment">#用beautifulSoup解析HTML代碼並存入變數“soup”中</span></span><br></pre></td></tr></table></figure></p><blockquote><p>可以透過cmd輸入指令 pip3 install beautifulsoup4 安裝</p></blockquote><h2 id="實作精選PTT文章爬蟲"><a href="#實作精選PTT文章爬蟲" class="headerlink" title="實作精選PTT文章爬蟲"></a>實作精選PTT文章爬蟲</h2><p><img src="https://i.imgur.com/ngleSny.png" alt="" title="將圖中爆與十位數推文文章篩選出來"></p><h3 id="導入函式庫"><a href="#導入函式庫" class="headerlink" title="導入函式庫"></a>導入函式庫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br></pre></td></tr></table></figure><h3 id="找出該版頁數"><a href="#找出該版頁數" class="headerlink" title="找出該版頁數"></a>找出該版頁數</h3><p>找出該版現在有幾頁<br>content傳入的內容: /bbs/joke/index6148.html   此函式目的將頁數6148取出<br><img src="https://i.imgur.com/XEMUT0c.png" alt="" title="6148+1為最新頁"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPageNumber</span><span class="params">(content)</span>:</span></span><br><span class="line">    startIndex = content.find(<span class="string">'index'</span>) <span class="comment">#找尋index起始位置</span></span><br><span class="line">    endIndex = content.find(<span class="string">'.html'</span>)   <span class="comment">#找尋.html起始位置</span></span><br><span class="line">    pageNumber = content[startIndex + <span class="number">5</span>: endIndex]</span><br><span class="line">    <span class="comment">#print(content)                    #傳入的參數    </span></span><br><span class="line">    <span class="comment">#print(int(pageNumber) + 1)        #取得到的頁數+1(為最新的一頁)</span></span><br><span class="line">    <span class="keyword">return</span> int(pageNumber) + <span class="number">1</span>         <span class="comment">#回傳最新一頁</span></span><br></pre></td></tr></table></figure></p><h3 id="抓取網頁數據"><a href="#抓取網頁數據" class="headerlink" title="抓取網頁數據"></a>抓取網頁數據</h3><p>將欲爬的版當參數傳入 例如:”movie”、”NBA”…<br><img src="https://i.imgur.com/arYoW4A.png" alt=""><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawPtt</span><span class="params">(plate)</span>:</span></span><br><span class="line">    hotArticle = []                   <span class="comment">#將熱門文章串列清空以便每次重取</span></span><br><span class="line">    rs = requests.session()            <span class="comment">#幫助我們把這一次的request都算在同一個session裡，這樣我們第二次對登入頁面發request時，csrfmiddlewaretoken value才不會又重新產生。</span></span><br><span class="line">    load = &#123;</span><br><span class="line">        <span class="string">'from'</span>: <span class="string">'/bbs/'</span>+plate+<span class="string">'/index.html'</span>,</span><br><span class="line">        <span class="string">'yes'</span>: <span class="string">'yes'</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = rs.post(<span class="string">'https://www.ptt.cc/ask/over18'</span>, verify=<span class="keyword">False</span>, data=load) <span class="comment">#用post方式過入口驗證</span></span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)   <span class="comment">#用beautifulSoup解析HTML代碼並存入變數“soup”中</span></span><br><span class="line">    allPageURL = soup.select(<span class="string">'.btn.wide'</span>)[<span class="number">1</span>][<span class="string">'href'</span>]<span class="comment">#取得最新頁面的上一頁網址 例如: /bbs/joke/index6148.html</span></span><br><span class="line">    startPage = getPageNumber(allPageURL)          <span class="comment">#呼叫函式將/bbs/joke/index6148.html字串處理成6149</span></span><br><span class="line">    indexList = []                                   <span class="comment">#將網址串列清空                      </span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(startPage, startPage - <span class="number">9</span>, <span class="number">-1</span>):<span class="comment">#將最新一頁往前8頁都放入搜尋網址串列</span></span><br><span class="line">        pageURL = <span class="string">'https://www.ptt.cc/bbs/'</span>+plate+<span class="string">'/index&#123;&#125;.html'</span>.format(page)<span class="comment">#爬取的版加上頁數形成的網址</span></span><br><span class="line">        indexList.append(pageURL)                   <span class="comment">#放入網址串列(9頁欲爬取的網址)</span></span><br><span class="line">    content = <span class="string">''</span>   <span class="comment">#內容清空</span></span><br><span class="line">    count = <span class="number">0</span>      <span class="comment">#計算文章數</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 抓取 文章標題 網址 推文數</span></span><br><span class="line">    <span class="keyword">while</span> indexList:</span><br><span class="line">        index = indexList.pop(<span class="number">0</span>)  <span class="comment">#取出最新一頁的網址</span></span><br><span class="line">        res = rs.get(index, verify=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">if</span> res.status_code != <span class="number">200</span>:<span class="comment">#如網頁忙線中,則先將網頁加入 indexList 並休息0.5秒後再連接</span></span><br><span class="line">            indexList.append(index)</span><br><span class="line">             <span class="comment">#print (u'error_URL:',index)</span></span><br><span class="line">             <span class="comment">#time.sleep(0.5)</span></span><br><span class="line">        <span class="keyword">else</span>:<span class="comment">#順利連到網址則</span></span><br><span class="line">            hotArticle += crawlHotActicle(res)</span><br><span class="line">             <span class="comment">#print (u'OK_URL:', index)</span></span><br><span class="line">             <span class="comment">#time.sleep(0.06)</span></span><br><span class="line"></span><br><span class="line">    hotArticle = sorted(hotArticle, key=sortHot,reverse =<span class="keyword">True</span>)<span class="comment">#將文章以推文數排列</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> hotArticle:<span class="comment">#將文章依序印出</span></span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">15</span>:       <span class="comment">#僅列出前15筆</span></span><br><span class="line">            <span class="keyword">return</span> content</span><br><span class="line">        data = <span class="string">'&#123;&#125;.&#123;&#125;\n人氣:&#123;&#125;\n&#123;&#125;\n\n'</span>.format(count+<span class="number">1</span>,article.get(<span class="string">'title'</span>, <span class="keyword">None</span>), article.get(<span class="string">'hot'</span>, <span class="keyword">None</span>), article.get(<span class="string">'url_link'</span>, <span class="keyword">None</span>))</span><br><span class="line">        content += data</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure></p><h3 id="熱門文章篩選"><a href="#熱門文章篩選" class="headerlink" title="熱門文章篩選"></a>熱門文章篩選</h3><p>將推文數爆與十位數的文章篩出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawlHotActicle</span><span class="params">(res)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)<span class="comment">#用beautifulSoup解析HTML代碼並存入變數“soup”中</span></span><br><span class="line">    articleList = []                             <span class="comment">#文章串列清空</span></span><br><span class="line">    <span class="keyword">for</span> r_ent <span class="keyword">in</span> soup.find_all(class_=<span class="string">"r-ent"</span>):  <span class="comment">#找出這個網址內所有class_="r-ent"找出每篇文章(在這裡我們用class過濾，不過class是python的關鍵詞，這樣該怎麼辦？加個下劃線就可以)</span></span><br><span class="line">        <span class="keyword">if</span> r_ent.find(class_=<span class="string">"hl f1"</span>) <span class="keyword">or</span> r_ent.find(class_=<span class="string">"hl f3"</span>):<span class="comment">#找出每篇文章後在看這篇文章的推文數(hl f1為爆,hl f3十位數)</span></span><br><span class="line">            <span class="keyword">if</span> (r_ent.find(class_=<span class="string">"hl f1"</span>)):     <span class="comment">#如果文章是爆</span></span><br><span class="line">                hot = r_ent.find(class_=<span class="string">"hl f1"</span>).text.strip()<span class="comment">#取得推文"爆"</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 先得到每篇文章的url</span></span><br><span class="line">                    link = r_ent.find(<span class="string">'a'</span>)[<span class="string">'href'</span>]</span><br><span class="line">                    <span class="keyword">if</span> link:</span><br><span class="line">                        <span class="comment"># 確定得到url再去抓 標題 以及 推文數</span></span><br><span class="line">                        title = r_ent.find(class_=<span class="string">"title"</span>).text.strip() <span class="comment">#取得標題</span></span><br><span class="line">                        url_link = <span class="string">'https://www.ptt.cc'</span> + link          <span class="comment">#取得連結</span></span><br><span class="line">                        articleList.append(&#123; </span><br><span class="line">                            <span class="string">'url_link'</span>: url_link,                       <span class="comment">#將連結放到串列中</span></span><br><span class="line">                            <span class="string">'title'</span>: title,                             <span class="comment">#將標題放在串列中</span></span><br><span class="line">                            <span class="string">'hot'</span> :  hot                                <span class="comment">#推文數放到串列中</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    <span class="comment">#print(url_link)</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:                                  <span class="comment">#如果連不上這網址可能被刪文了</span></span><br><span class="line">                    <span class="comment"># print u'crawPage function error:',r_ent.find(class_="title").text.strip()</span></span><br><span class="line">                    <span class="comment"># print('本文已被刪除')</span></span><br><span class="line">                    print(<span class="string">'delete'</span>, e)</span><br><span class="line">                <span class="comment">#print(r_ent.find(class_="hl f1"))</span></span><br><span class="line">            <span class="keyword">if</span> (r_ent.find(class_=<span class="string">"hl f3"</span>)):                            <span class="comment">#如果文章十位數的推文</span></span><br><span class="line">                hot = r_ent.find(class_=<span class="string">"hl f3"</span>).text.strip()           <span class="comment">#取得推文數</span></span><br><span class="line">                <span class="comment">#print(r_ent.find(class_="hl f3"))</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 先得到每篇文章的篇url</span></span><br><span class="line">                    link = r_ent.find(<span class="string">'a'</span>)[<span class="string">'href'</span>]                     </span><br><span class="line">                    <span class="keyword">if</span> link:</span><br><span class="line">                        <span class="comment"># 確定得到url再去抓 標題 以及 推文數</span></span><br><span class="line">                        title = r_ent.find(class_=<span class="string">"title"</span>).text.strip() <span class="comment">#取得標題</span></span><br><span class="line">                        url_link = <span class="string">'https://www.ptt.cc'</span> + link          <span class="comment">#取得連結</span></span><br><span class="line">                        articleList.append(&#123;  </span><br><span class="line">                            <span class="string">'url_link'</span>: url_link,                       <span class="comment">#將連結放到串列中</span></span><br><span class="line">                            <span class="string">'title'</span>: title,                             <span class="comment">#將標題放在串列中</span></span><br><span class="line">                            <span class="string">'hot'</span> :  hot                                <span class="comment">#推文數放到串列中</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    <span class="comment">#print(url_link)</span></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:                                  <span class="comment">#如果連不上這網址可能被刪文了</span></span><br><span class="line">                    <span class="comment"># print u'crawPage function error:',r_ent.find(class_="title").text.strip()</span></span><br><span class="line">                    <span class="comment"># print('本文已被刪除')</span></span><br><span class="line">                    print(<span class="string">'delete'</span>, e)</span><br><span class="line">                    </span><br><span class="line">    <span class="comment">#print(articleList)</span></span><br><span class="line">    <span class="keyword">return</span> articleList</span><br></pre></td></tr></table></figure></p><h3 id="依照推文數排序"><a href="#依照推文數排序" class="headerlink" title="依照推文數排序"></a>依照推文數排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortHot</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> content[<span class="string">'hot'</span>]</span><br></pre></td></tr></table></figure><h3 id="使用爬蟲"><a href="#使用爬蟲" class="headerlink" title="使用爬蟲"></a>使用爬蟲</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(crawPtt(<span class="string">'joke'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/CvskUx3.png" alt="" title="篩選出推文數高的文章了!"></p><p>參考資料<br><a href="https://ithelp.ithome.com.tw/articles/10193266" target="_blank" rel="noopener">Day8：Python requests + bs4 實作模擬登入網站並爬取資料｜Kearch …</a><br><a href="https://buzzorange.com/techorange/2017/08/04/python-scraping/" target="_blank" rel="noopener">附範例與完整程式碼！手把手帶著你用Python 做出爬蟲、抓取網頁資料 …</a><br><a href="https://hk.saowen.com/a/49234987b4cf92d8a81fa2499e790438d15851ab7a1e63a474633961c8ce1f08" target="_blank" rel="noopener">python requests用法總結- 掃文資訊</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在朋友都是鄉民的情況下，在這一兩年才加入鄉民的行列，開始看一些八卦版、笑話版、科技版、薪資版…，逛各大板的同時，總覺得各版有不少廢文，一頁一
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="爬蟲" scheme="https://teddybearfp.github.io/tags/%E7%88%AC%E8%9F%B2/"/>
    
      <category term="靜態網頁爬取" scheme="https://teddybearfp.github.io/tags/%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>讀寫檔</title>
    <link href="https://teddybearfp.github.io/2018/11/06/%E8%AE%80%E5%AF%AB%E6%AA%94/"/>
    <id>https://teddybearfp.github.io/2018/11/06/讀寫檔/</id>
    <published>2018-11-06T06:05:16.000Z</published>
    <updated>2019-01-06T14:36:15.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>讀寫檔驗證資料正確性與存取參數是很方便且常用的，寫成CSV，用excel繪圖看圖形趨勢是否如預期，二進位檔則是速度較快</p><table><thead><tr><th></th><th style="text-align:center">文字檔</th><th style="text-align:center">二進位檔</th></tr></thead><tbody><tr><td>資料可讀性</td><td style="text-align:center">易</td><td style="text-align:center">難</td></tr><tr><td>資料輸入／輸出效率</td><td style="text-align:center">差</td><td style="text-align:center">佳</td></tr><tr><td>檔案空間大小</td><td style="text-align:center">相較大</td><td style="text-align:center">相較小</td></tr><tr><td>浮點數存取誤差</td><td style="text-align:center">有</td><td style="text-align:center">無</td></tr></tbody></table><h2 id="Qt取得檔案路徑"><a href="#Qt取得檔案路徑" class="headerlink" title="Qt取得檔案路徑"></a>Qt取得檔案路徑</h2><h3 id="到application同層中"><a href="#到application同層中" class="headerlink" title="到application同層中"></a>到application同層中</h3><p>取得application(exe)路徑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line">QString path = QGuiApplication::applicationDirPath(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//可以用加的方式為檔案命名:</span></span><br><span class="line">path += <span class="string">"/"</span> +serialNumber;</span><br></pre></td></tr></table></figure><h3 id="到application上一層"><a href="#到application上一層" class="headerlink" title="到application上一層"></a>到application上一層</h3><p>取得application(exe)上一層路徑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line">QString currentPath = QDir::currentPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以用加的方式為檔案命名:</span></span><br><span class="line">currentPath += <span class="string">"/"</span> +serialNumber;</span><br></pre></td></tr></table></figure><h3 id="檢查檔案是否存在"><a href="#檢查檔案是否存在" class="headerlink" title="檢查檔案是否存在"></a>檢查檔案是否存在</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QDir dir; </span><br><span class="line">QString currentPath = QDir::currentPath();</span><br><span class="line"><span class="keyword">if</span> (!serialNumber.isEmpty())&#123;    <span class="comment">//如果這個路徑不為空</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists(currentPath)) &#123;      <span class="comment">//如果不存在這個檔案位置</span></span><br><span class="line">        dir.mkpath(currentPath);        <span class="comment">//創資料夾</span></span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"directory now exists"</span>; </span><br><span class="line">        currentPath += <span class="string">"teddyBear.jpg"</span>;</span><br><span class="line">        QImage.save(currentPath,<span class="string">"JPG"</span>); <span class="comment">//將某個QImage存成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寫檔"><a href="#寫檔" class="headerlink" title="寫檔"></a>寫檔</h2><h3 id="Qt-截圖存檔-Timestamp"><a href="#Qt-截圖存檔-Timestamp" class="headerlink" title="Qt 截圖存檔(Timestamp)"></a>Qt 截圖存檔(Timestamp)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//videocanvas.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCanvas</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    VideoCanvas();</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">screenshot</span><span class="params">(QQuickWindow *quic)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//videocanvas.cpp</span></span><br><span class="line"><span class="keyword">void</span> VideoCanvas::makedir(QString serialNumber) &#123;   <span class="comment">//傳欲創建資料夾名稱</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;serialNumber = serialNumber;</span><br><span class="line">    path = QGuiApplication::applicationDirPath();</span><br><span class="line">    currentPath =  QDir::currentPath();</span><br><span class="line">    QDir dir;</span><br><span class="line">    <span class="keyword">if</span> (!serialNumber.isEmpty()) &#123;</span><br><span class="line">        path += <span class="string">"/"</span> +serialNumber;</span><br><span class="line">        currentPath += <span class="string">"/"</span> +serialNumber +<span class="string">"/"</span>;</span><br><span class="line">        <span class="comment">//printf("the string path will be:%s\n", str);</span></span><br><span class="line">        <span class="keyword">if</span> (viewLog) &#123;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">"applicationDirPath:"</span>&lt;&lt;path;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">"currentPath:"</span>&lt;&lt;currentPath;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">"currentPathArray:"</span>&lt;&lt;currentPath;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists(currentPath)) <span class="comment">//如果沒有這個資料夾</span></span><br><span class="line">        &#123;</span><br><span class="line">            dir.mkpath(currentPath); <span class="comment">//創建資料夾</span></span><br><span class="line">            <span class="keyword">if</span>(viewLog)</span><br><span class="line">                qDebug()&lt;&lt;<span class="string">"make directory successed!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> VideoCanvas::screenshot(QQuickWindow *quic) &#123;  <span class="comment">//存取截圖檔名為Screenshot_時間</span></span><br><span class="line">    QImage img =quic-&gt;grabWindow();</span><br><span class="line">    <span class="keyword">time_t</span> t;</span><br><span class="line">    tm* local;</span><br><span class="line">    tm* gmt;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    t = time(<span class="literal">NULL</span>);</span><br><span class="line">    local = localtime(&amp;t);</span><br><span class="line">    strftime(buf, <span class="number">64</span>, <span class="string">"%Y%m%d_%H%M%S"</span>, local);</span><br><span class="line">    <span class="built_in">strcat</span>(buf,<span class="string">".jpg"</span>);</span><br><span class="line">    <span class="keyword">char</span> fileName[<span class="number">128</span>]= &#123;<span class="string">"Screenshot_"</span>&#125;;</span><br><span class="line">    TempPath = currentPath;              <span class="comment">//makedir function中的currentPath</span></span><br><span class="line">    <span class="built_in">strcat</span>(fileName,buf);</span><br><span class="line">    <span class="keyword">if</span> (!serialNumber.isEmpty()) &#123;       <span class="comment">//放到創建的資料夾中</span></span><br><span class="line">        TempPath += (QString)fileName;</span><br><span class="line">        img.save(TempPath,<span class="string">"JPG"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        img.save(fileName,<span class="string">"JPG"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Screenshot.qml</span></span><br><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> VideoRenderView <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    id:window</span><br><span class="line">    VideoRenderView &#123;</span><br><span class="line">        id: videoRenderView</span><br><span class="line">        Button &#123;</span><br><span class="line">            width: <span class="number">160</span></span><br><span class="line">            height: <span class="number">65</span></span><br><span class="line">            Text &#123;</span><br><span class="line">                anchors.centerIn: parent</span><br><span class="line">                text: <span class="string">"Screen Shot"</span></span><br><span class="line">                font.pixelSize: <span class="number">16</span></span><br><span class="line">            &#125;</span><br><span class="line">            onclicked: &#123;</span><br><span class="line">                videoRenderView.screenshot(window)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Write-CSV"><a href="#C-Write-CSV" class="headerlink" title="C Write CSV"></a>C Write CSV</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* fileName = <span class="string">"teddyBear.csv"</span>;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">fp=fopen(fileName,<span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fp)                            <span class="comment">//如果檔案已經存在，則刪掉</span></span><br><span class="line">&#123;</span><br><span class="line">fclose(fp);</span><br><span class="line">remove(fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fp=fopen(fileName,<span class="string">"w"</span>);           <span class="comment">//寫檔w</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%s,%s\n"</span>,<span class="string">"X"</span>,<span class="string">"Y"</span>);    <span class="comment">//將第一列給個欄位名稱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; dataLength ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%f,%f"</span>,X[i],Y[i]);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp);                       <span class="comment">//寫完關檔</span></span><br></pre></td></tr></table></figure><h3 id="Qt-Write-CSV"><a href="#Qt-Write-CSV" class="headerlink" title="Qt Write CSV"></a>Qt Write CSV</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">QString path = qApp-&gt;applicationDirPath() + <span class="string">"//"</span>+<span class="string">"ContoursXY.csv"</span>;</span><br><span class="line"><span class="function">QFile <span class="title">Rfile</span><span class="params">(path)</span></span>;</span><br><span class="line">QString line;</span><br><span class="line">Rfile.open(QIODevice::WriteOnly);</span><br><span class="line"><span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;Rfile)</span></span>;</span><br><span class="line">out &lt;&lt; <span class="string">"X,Y\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; dataLength ; i++) &#123;</span><br><span class="line">    qDebug()&lt;&lt;i;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"(X["</span>&lt;&lt;i&lt;&lt;<span class="string">"],Y["</span>&lt;&lt;i&lt;&lt;<span class="string">"]):"</span>&lt;&lt; X[i] &lt;&lt;<span class="string">","</span>&lt;&lt; Y[i];</span><br><span class="line">    line += QString::number(X[i])+<span class="string">","</span>+QString::number(Y[i]) + <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">out &lt;&lt; line;</span><br><span class="line">Rfile.close();</span><br></pre></td></tr></table></figure><h3 id="Qt-Read-Write-Binary"><a href="#Qt-Read-Write-Binary" class="headerlink" title="Qt Read/Write Binary"></a>Qt Read/Write Binary</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">uchar* binBits= <span class="keyword">new</span> uchar[<span class="number">256</span> * <span class="number">256</span> * <span class="number">109</span>];</span><br><span class="line"><span class="keyword">int</span> dataLength = <span class="number">256</span>*<span class="number">256</span>*<span class="number">109</span>;</span><br><span class="line"></span><br><span class="line">FILE *outFile;</span><br><span class="line">outFile = fopen(<span class="string">"outFile.bin"</span>,<span class="string">"wb"</span>);</span><br><span class="line">fwrite(binBits,<span class="keyword">sizeof</span>(uchar)*dataLength,<span class="number">1</span>,outFile);</span><br><span class="line">fclose(outFile);</span><br><span class="line"></span><br><span class="line">FILE *inFile;</span><br><span class="line">inFile = fopen(<span class="string">"outFile.bin"</span>, <span class="string">"rb"</span>);</span><br><span class="line">uchar *check = <span class="keyword">new</span> uchar[dataLength];</span><br><span class="line">fread(check, <span class="keyword">sizeof</span>(uchar)*dataLength, <span class="number">1</span>, inFile);</span><br><span class="line">fclose(inFile);</span><br><span class="line">uchar *check2 = checkBits3D.bits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//========以上步驟為讀寫binary檔案========</span></span><br><span class="line"><span class="comment">//========以下步驟為驗證binary檔案========</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="number">256</span> * <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">256</span> * <span class="number">256</span>; i++) &#123;</span><br><span class="line">    check2[a] = binBits[<span class="number">0</span> * length + i];</span><br><span class="line">    check2[a + <span class="number">1</span>] = binBits[<span class="number">0</span> * length + i];</span><br><span class="line">    check2[a + <span class="number">2</span>] = binBits[<span class="number">0</span> * length + i];</span><br><span class="line">    a += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">checkBits3D.save(<span class="string">"checkbinBits.png"</span>,<span class="string">"PNG"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">256</span> * <span class="number">256</span> ; i++) &#123;</span><br><span class="line">    check2[a] = check[<span class="number">0</span> * length + i];</span><br><span class="line">    check2[a + <span class="number">1</span>] = check[<span class="number">0</span> * length + i + <span class="number">1</span>];</span><br><span class="line">    check2[a + <span class="number">2</span>] = check[<span class="number">0</span> * length + i + <span class="number">2</span>];</span><br><span class="line">    a += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">checkBits3D.save(<span class="string">"checkOutFile.png"</span>,<span class="string">"PNG"</span>);</span><br></pre></td></tr></table></figure><p>建新檔<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readYOffset</span><span class="params">(QString filename)</span> </span>&#123; <span class="comment">//filename = xxx.csv</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;filename = filename;</span><br><span class="line">    currentPath = QDir::currentPath();</span><br><span class="line">    currentPath += <span class="string">'/'</span> + filename;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(currentPath)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.open(QIODevice::ReadOnly)) &#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Cannot Open File!"</span>;</span><br><span class="line">        file.open((QIODevice::WriteOnly)) ;</span><br><span class="line">        <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">        out &lt;&lt; <span class="string">"YOffset\n"</span>;</span><br><span class="line">        out &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        file.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    data = file.readAll();</span><br><span class="line">    data.split(<span class="string">"\r\n"</span>);</span><br><span class="line">    yOffset = data.split(<span class="string">"\r\n"</span>)[<span class="number">1</span>].toInt();</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"yOffset:"</span>&lt;&lt;yOffset;</span><br><span class="line">    <span class="keyword">return</span> yOffset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="C-Read-Write-Binary"><a href="#C-Read-Write-Binary" class="headerlink" title="C++ Read/Write Binary"></a>C++ Read/Write Binary</h3><p>istream &amp;read(char buf, streamsize num);</p><blockquote><p>istream::read<br>讀取物件.read(資料區塊的指標, 長度);</p></blockquote><p>ostream &amp;write(const char buf, streamsize num);</p><blockquote><p>ostream::write<br>輸出物件.write(資料區塊的指標, 長度);</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"teddybear.dat"</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fout) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    fout.write((<span class="keyword">char</span>*)arr, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">    fout.close();</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"teddybear.dat"</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fin) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr2[<span class="number">3</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    fin.read((<span class="keyword">char</span>*)arr2, <span class="keyword">sizeof</span>(arr2));</span><br><span class="line">    fin.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Read-Write-Binary-1"><a href="#C-Read-Write-Binary-1" class="headerlink" title="C Read/Write Binary"></a>C Read/Write Binary</h3><p>區塊 I/O 函式fwrite</p><blockquote><p>int fread(char <em>buffer, int size, int count, FILE </em>fp);<br>buffer 參數為讀入的資料所要存放的地方，size是指讀入的每一筆資料長度（byte），count 是指讀入的筆數<br>int fwrite(char <em>buffer, int size, int count, FILE </em>fp);<br>buffer 參數為寫入的資料所要存放的地方，size是指讀入的每一筆資料長度（byte），count 是指讀入的筆數</p></blockquote><p>Example_1<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    FILE *file = fopen(<span class="string">"temp"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can't open file!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    fwrite((<span class="keyword">char</span>*) arr, <span class="keyword">sizeof</span>(arr), <span class="number">1</span>, file);</span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    file = fopen(<span class="string">"temp"</span>, <span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Can't open file!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fread((<span class="keyword">char</span>*) arr, <span class="keyword">sizeof</span>(arr), <span class="number">1</span>, file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"arr: "</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Example_2<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt; stdio.h &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> data[N];</span><br><span class="line"><span class="keyword">int</span> get[N];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">FILE *file=fopen(<span class="string">"data.bin"</span>,<span class="string">"wb"</span>); <span class="comment">//開啟檔案來寫</span></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">&#123;</span><br><span class="line">data[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">fwrite(data,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),N,file);</span><br><span class="line"><span class="comment">// fwrite可以一次把數個bytes的資料寫入檔案</span></span><br><span class="line">fclose(file);</span><br><span class="line"></span><br><span class="line">file=fopen(<span class="string">"data.bin"</span>,<span class="string">"rb"</span>); <span class="comment">// 開啟檔案來讀</span></span><br><span class="line">fread(get, <span class="keyword">sizeof</span>(<span class="keyword">int</span>),N,file);</span><br><span class="line"><span class="comment">// fread可以一次把數個bytes的資料讀入記憶體中</span></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,get[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="讀檔"><a href="#讀檔" class="headerlink" title="讀檔"></a>讀檔</h2><h3 id="Qt將資料夾所有特定檔案讀出-例如所有-csv"><a href="#Qt將資料夾所有特定檔案讀出-例如所有-csv" class="headerlink" title="Qt將資料夾所有特定檔案讀出(例如所有.csv)"></a>Qt將資料夾所有特定檔案讀出(例如所有.csv)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CSVReader::traverse(<span class="keyword">const</span> QString &amp;pattern, <span class="keyword">const</span> QString &amp;dirname, <span class="keyword">int</span> level)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QDir <span class="title">dir</span><span class="params">(dirname)</span></span>;</span><br><span class="line">    dir.setFilter(QDir::Dirs | QDir::Files | QDir::NoSymLinks | QDir::NoDot | QDir::NoDotDot);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> QStringList stringList = pattern.split(<span class="string">'/'</span>);</span><br><span class="line">    foreach (QFileInfo fileInfo, dir.entryInfoList(stringList.mid(level, <span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileInfo.isDir() &amp;&amp; fileInfo.isReadable())</span><br><span class="line">            traverse(pattern, fileInfo.filePath(), level+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stringList.size() == (level + <span class="number">1</span>))</span><br><span class="line">            qDebug() &lt;&lt; fileInfo.filePath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    traverse(<span class="string">"*/*.csv"</span>, <span class="string">"."</span>, <span class="number">0</span>); <span class="comment">//讀所有資料夾內是否有csv檔</span></span><br><span class="line">    traverse(<span class="string">"ProgramData/*.csv"</span>, <span class="string">"."</span>, <span class="number">0</span>); <span class="comment">//讀ProgramData資料夾內是否有csv檔</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output情況:<br>“./ProgramData/Program_01.csv”<br>“./ProgramData/Program_02.csv”<br>“./ProgramData/Program_03.csv”<br>“./ProgramData/Program_04.csv”</p><h3 id="Qt剖析CSV"><a href="#Qt剖析CSV" class="headerlink" title="Qt剖析CSV"></a>Qt剖析CSV</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStringList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDir&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIEWLOG true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CSVReader::parsing() &#123;</span><br><span class="line">    QString fileName;</span><br><span class="line">    QString currentPath;</span><br><span class="line">    QString data; <span class="comment">//用來接收檔案中所有內容</span></span><br><span class="line">    QString str;        <span class="comment">//用來接收需要的值</span></span><br><span class="line">    QStringList <span class="built_in">list</span>; <span class="comment">//用來接收data   以"行"為單位切割後的值</span></span><br><span class="line">    QStringList listval;<span class="comment">//用來接收list  以"個"為單位切割後的值</span></span><br><span class="line">    </span><br><span class="line">    fileName = <span class="string">"Program_01.csv"</span>;</span><br><span class="line">    currentPath = QDir::currentPath();</span><br><span class="line">    currentPath += <span class="string">"/ProgramData/"</span> +fileName;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(currentPath)</span></span>;            <span class="comment">//讀取檔案</span></span><br><span class="line">    <span class="keyword">if</span>(!file.open(QIODevice::ReadOnly))&#123;<span class="comment">//若開檔失敗則顯示錯誤訊息</span></span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"Cannot open file!"</span> ;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    data = file.readAll();  <span class="comment">//用來接收file檔案中的所有內容</span></span><br><span class="line">    <span class="built_in">list</span> = data.split(<span class="string">"\r\n"</span>);          <span class="comment">//切割以"行"為單位存入list中</span></span><br><span class="line">    <span class="comment">//if (VIEWLOG)</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"list: "&lt;&lt;list &lt;&lt;"\nlist.count(): "&lt;&lt;list.count();</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.count()<span class="number">-1</span> ;i++)&#123;<span class="comment">//執行list.count()-1組迴圈 (代表有幾"行")</span></span><br><span class="line">        listval = <span class="built_in">list</span>.at(i).split(<span class="string">","</span>); <span class="comment">//存入整行中的值 並以","劃分開來</span></span><br><span class="line">        <span class="comment">//if (VIEWLOG)</span></span><br><span class="line">            <span class="comment">//qDebug()&lt;&lt;"listval: "&lt;&lt;listval;</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        listval.at(i)</span></span><br><span class="line"><span class="comment">        dosomething...</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    file.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高彈性的讀取方式"><a href="#高彈性的讀取方式" class="headerlink" title="高彈性的讀取方式"></a>高彈性的讀取方式</h3><p>將上述的讀取資料檔案路徑與剖析資料結合<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//單一檔案讀取剖析</span></span><br><span class="line"><span class="keyword">void</span> CSVReader::read(QString filename) &#123;</span><br><span class="line">    parse(filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//將某個資料夾內特定檔案讀取剖析</span></span><br><span class="line"><span class="keyword">void</span> CSVReader::readAll(QString directory) &#123;</span><br><span class="line">    traverse( directory + <span class="string">"/*.csv"</span>, <span class="string">"."</span>, <span class="number">0</span>);</span><br><span class="line">    fileNumbers = fileNames.length();</span><br><span class="line">    <span class="keyword">if</span> (VIEWLOG) &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"fileNames"</span>&lt;&lt;fileNames;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"fileNumbers"</span>&lt;&lt;fileNumbers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; fileNumbers ; i++) &#123;</span><br><span class="line">        parse(fileNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>參考資料:</p><p>讀寫二進位相關:<br><a href="http://monkeycoding.com/?p=956" target="_blank" rel="noopener">阿洲的程式教學二進位檔案操作(read、write)</a><br><a href="https://openhome.cc/Gossip/CppGossip/BinaryFileIO.html" target="_blank" rel="noopener">二進位檔案I/O - OpenHome.cc</a><br><a href="https://blog.xuite.net/fredxxx123/wretch/93422509-%E6%AA%94%E6%A1%88%E8%BC%B8%E5%85%A5%E8%88%87%E8%BC%B8%E5%87%BA%EF%BC%88%E4%B8%8B%EF%BC%89" target="_blank" rel="noopener">檔案輸入與輸出（下） @ NaCl :: 隨意窩Xuite日誌</a><br><a href="https://www.cmlab.csie.ntu.edu.tw/~perng/course/chap8/chap8.html" target="_blank" rel="noopener">第八章:檔案 - CMLab</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;讀寫檔驗證資料正確性與存取參數是很方便且常用的，寫成CSV，用excel繪圖看圖形趨勢是否如預期，二進位檔則是速度較快&lt;/p&gt;
&lt;table
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="讀寫檔" scheme="https://teddybearfp.github.io/tags/%E8%AE%80%E5%AF%AB%E6%AA%94/"/>
    
      <category term="read/write" scheme="https://teddybearfp.github.io/tags/read-write/"/>
    
  </entry>
  
  <entry>
    <title>型態轉換</title>
    <link href="https://teddybearfp.github.io/2018/11/04/%E5%9E%8B%E6%85%8B%E8%BD%89%E6%8F%9B/"/>
    <id>https://teddybearfp.github.io/2018/11/04/型態轉換/</id>
    <published>2018-11-04T06:05:16.000Z</published>
    <updated>2019-01-08T14:02:26.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候第一次處理的型態間轉換不一定那麼容易，將處理過的型態轉換紀錄在這篇文章，這樣就可以很快的能參照。</p><h2 id="char-to-QString"><a href="#char-to-QString" class="headerlink" title="char to QString"></a>char to QString</h2><p>用法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(QString)charA</span><br></pre></td></tr></table></figure></p><p>example<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">128</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">t = time(<span class="literal">NULL</span>);</span><br><span class="line">local = localtime(&amp;t);</span><br><span class="line">strftime(buf, <span class="number">64</span>, <span class="string">"%Y%m%d_%H%M%S"</span>, local);</span><br><span class="line"><span class="built_in">strcat</span>(buf,<span class="string">".jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> LensXY[<span class="number">128</span>]= &#123;<span class="string">"Lens XY_"</span>&#125;;</span><br><span class="line">QString currentPath;</span><br><span class="line">QString TempPath;</span><br><span class="line"><span class="built_in">strcat</span>(LensXY,buf);</span><br><span class="line">TempPath += (QString)LensXY;</span><br><span class="line">canvasRotated.save(TempPath,<span class="string">"JPG"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="int-to-QString"><a href="#int-to-QString" class="headerlink" title="int to QString"></a>int to QString</h2><p>用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i = 42;</span><br><span class="line">QString s = QString::number(i);</span><br></pre></td></tr></table></figure></p><p>example int搭配QString處理檔案的路徑<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    QString path = <span class="string">"D:/Projects/file"</span> + QString::number(i) + <span class="string">".csv"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="int-to-stdString"><a href="#int-to-stdString" class="headerlink" title="int to stdString"></a>int to stdString</h2><p>先將int轉為QString再轉成StdString<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">3</span>;</span><br><span class="line">QString::number(value).toStdString();</span><br></pre></td></tr></table></figure></p><h2 id="QString-to-Int"><a href="#QString-to-Int" class="headerlink" title="QString to Int"></a>QString to Int</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QString str = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">int</span> n = str.toInt();</span><br></pre></td></tr></table></figure><h2 id="QString-to-QByteArray"><a href="#QString-to-QByteArray" class="headerlink" title="QString to QByteArray"></a>QString to QByteArray</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QByteArray ba = key.toLocal8Bit();</span><br></pre></td></tr></table></figure><h2 id="QString-to-char"><a href="#QString-to-char" class="headerlink" title="QString to char*"></a>QString to char*</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QString轉char*的中間過程需先轉為QByteArray</span></span><br><span class="line">QByteArray ba = key.toLocal8Bit();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *c_str2 = ba.data();</span><br><span class="line">CString str;</span><br></pre></td></tr></table></figure><h2 id="QString-to-const-char"><a href="#QString-to-const-char" class="headerlink" title="QString to const char*"></a>QString to const char*</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QString path</span><br><span class="line">path.toLatin1().data()</span><br></pre></td></tr></table></figure><h2 id="QImage-to-uchar"><a href="#QImage-to-uchar" class="headerlink" title="QImage to uchar*"></a>QImage to uchar*</h2><p>取得QImage起始位置再去操作<br>用法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QImage <span class="title">canvas</span><span class="params">(<span class="number">2592</span>, <span class="number">1944</span>, QImage::Format_RGB888)</span></span>;<span class="comment">//寬高為2592*1944的畫布</span></span><br><span class="line">uchar* bits = canvas.bits();    <span class="comment">//canvas記憶體起始位置</span></span><br></pre></td></tr></table></figure></p><p>example</p><ul><li>以buffer處理資料需除了長寬需乘上3(stride)，因為rgb</li><li>有時候畫布大小跟處理的QImage大小不一，畫出來的線不見了，可以檢查是不是被扔掉，將要畫得線加粗或是畫布調整大小</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">QImage canvas</span><br><span class="line">uchar* bits = canvas.bits(); <span class="comment">//QImage的記憶體起始位置</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2592</span>; i++ ) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">1944</span>; j++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2592</span> / <span class="number">2</span> || j == <span class="number">1944</span> /<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = i * <span class="number">3</span> + j * canvas.bytesPerLine();</span><br><span class="line">            bits[idx] = <span class="number">255</span>;</span><br><span class="line">            bits[idx+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            bits[idx+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QImage-to-Mat-OpenCV-cv-Mat"><a href="#QImage-to-Mat-OpenCV-cv-Mat" class="headerlink" title="QImage to Mat (OpenCV cv::Mat)"></a>QImage to Mat (OpenCV cv::Mat)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QImage contours = QImage(<span class="number">2592</span>, <span class="number">1944</span>, QImage::Format_RGB888);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    取得contours影像; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* bits = contours.bits();</span><br><span class="line">src = Mat(<span class="number">1944</span>, <span class="number">2592</span>, CV_8UC3, (<span class="keyword">void</span>*)bits, <span class="number">2592</span>*<span class="number">3</span>);<span class="comment">//RGB 3通道 8UC3</span></span><br><span class="line">src_gray = Mat(<span class="number">1944</span>, <span class="number">2592</span>, CV_8UC1); <span class="comment">//灰階 單通道 8UC1</span></span><br><span class="line">cvtColor(src, src_gray, CV_RGB2GRAY);</span><br></pre></td></tr></table></figure><h2 id="Mat-to-QImage-OpenCV-cv-Mat"><a href="#Mat-to-QImage-OpenCV-cv-Mat" class="headerlink" title="Mat to QImage (OpenCV cv::Mat)"></a>Mat to QImage (OpenCV cv::Mat)</h2><p>OpenCV讀取圖像再將圖像轉為3通道RGB格式的Mat，這個Mat可以呼叫些OpenCV函式使用，例如:高斯模糊，完成OpenCV函式處理存到QImage中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mat src = imread(<span class="string">"D:/Test.jpg"</span>);</span><br><span class="line"><span class="keyword">if</span> (src.empty()) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Load file failed!"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Mat gaussianBlurImg; <span class="comment">// make the same cv::Mat</span></span><br><span class="line">cvtColor(src, gaussianBlurImg,CV_BGR2RGB);</span><br><span class="line">GaussianBlur(src, gaussianBlurImg, Size(<span class="number">15</span>,<span class="number">15</span>) ,<span class="number">0</span> ,<span class="number">0</span>);</span><br><span class="line"><span class="function">QImage <span class="title">gradientImg</span><span class="params">((uchar *) gaussianBlurImg.data, <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888)</span></span>;</span><br><span class="line">gradient(gradientImg);</span><br></pre></td></tr></table></figure></p><h2 id="QPainter-to-QImage"><a href="#QPainter-to-QImage" class="headerlink" title="QPainter to QImage"></a>QPainter to QImage</h2><ul><li>將資料處理在畫布後，可以呼叫QImage的函式(鏡像、scale…)畫出</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">canvas = QImage(<span class="number">480</span>,<span class="number">360</span>, QImage::Format_RGB888);</span><br><span class="line"><span class="function">QPainter <span class="title">p</span><span class="params">(&amp;canvas)</span></span>;</span><br><span class="line">p.drawLine(QPointF(x1,y1),QPointF(x2,y2));</span><br><span class="line">p.end ();</span><br><span class="line"><span class="keyword">void</span> ImageBox::paint(QPainter *painter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height())</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, canvas.width(),canvas.height())</span></span>;</span><br><span class="line">    painter-&gt;drawImage(target, canvas, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example</p><ul><li>利用QPainter操作QImage達到鏡像與繪圖</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">canvas = QImage(<span class="number">480</span>,<span class="number">360</span>, QImage::Format_RGB888);</span><br><span class="line"><span class="function">QPainter <span class="title">p</span><span class="params">(&amp;canvas)</span></span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; data.size() ; i++ ) &#123;</span><br><span class="line">    listDataSet.push_back(data.at(i).y());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; dataWidth<span class="number">-1</span> ; i++ ) &#123;</span><br><span class="line">    p.drawLine(QPointF(i/xScale,(listDataSet[i]+yOffset)/yScale), QPointF((i+<span class="number">1</span>)/xScale,(listDataSet[i+<span class="number">1</span>]+yOffset)/yScale));</span><br><span class="line">&#125;</span><br><span class="line">p.end ();</span><br><span class="line">canvas = canvas.mirrored(<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ImageBox::paint(QPainter *painter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height())</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, canvas.width(),canvas.height())</span></span>;</span><br><span class="line">    painter-&gt;drawImage(target, canvas, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有時候第一次處理的型態間轉換不一定那麼容易，將處理過的型態轉換紀錄在這篇文章，這樣就可以很快的能參照。&lt;/p&gt;
&lt;h2 id=&quot;char-t
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="型態轉換" scheme="https://teddybearfp.github.io/tags/%E5%9E%8B%E6%85%8B%E8%BD%89%E6%8F%9B/"/>
    
  </entry>
  
</feed>
