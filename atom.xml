<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泰迪熊的程式足跡</title>
  
  <subtitle>遊走程式森林的泰迪熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teddybearfp.github.io/"/>
  <updated>2019-09-11T13:51:58.122Z</updated>
  <id>https://teddybearfp.github.io/</id>
  
  <author>
    <name>G.C.L.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VTK 部分功能整理</title>
    <link href="https://teddybearfp.github.io/2019/09/11/VTK-%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E6%95%B4%E7%90%86/"/>
    <id>https://teddybearfp.github.io/2019/09/11/VTK-部分功能整理/</id>
    <published>2019-09-11T07:05:16.000Z</published>
    <updated>2019-09-11T13:51:58.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在編寫VTK的時候，有些許小功能在這一篇稍微記錄一下是如何實現的，此篇是個人在讀VTK時的理解不一定正確，純粹記錄</p><h2 id="函式庫簡介"><a href="#函式庫簡介" class="headerlink" title="函式庫簡介"></a>函式庫簡介</h2><p>以下特別注意某些函式庫專門提供給2D某些則是提供給3D使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCommand.h&gt; // recieve some call back action.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkGPUVolumeRayCastMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageActor.h&gt; // present slice of XY, YZ, XZ plane. ( 2D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageCast.h&gt;  // transfer Images information. like output scalars...</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageMapToColors.h&gt; // remap images opacity and colors. ( 2D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageReslice.h&gt;     // reslice 3D volume to get XY, YZ, XZ plane. ( 2D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageShiftScale.h&gt;  // set some parameters after load a stack of jpeg pics.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkInteractorStyleTrackballCamera.h&gt; // this class can let interactor operate normally.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkJPEGReader.h&gt;                     // read a stack of jpeg pics.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkLookupTable.h&gt;                    // ImageMapToColors reference this table to remap voxels.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkNew.h&gt;                     // vtkNew is a drop in replacement for vtkSmartPointer</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkOrientationMarkerWidget.h&gt; // for Axes item</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPNGReader.h&gt;               // read a stack of png pics.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPiecewiseFunction.h&gt;       // set volume opacity. ( 3D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;            // to show users.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;  // to let users operate 3D volume.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVolume.h&gt;         // set Mappers and VolumeProperty. ( 3D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVolumeProperty.h&gt; // set opacity and colors in 3D volume. ( 3D )</span></span></span><br></pre></td></tr></table></figure><h2 id="顯示畫面"><a href="#顯示畫面" class="headerlink" title="顯示畫面"></a>顯示畫面</h2><p>一開始我們寫好VTK程式碼要在Qt 的Qt console中執行的時候並需加上下列幾句程式碼否則無畫面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vtkAutoInit.h"</span></span></span><br><span class="line">VTK_MODULE_INIT( vtkRenderingOpenGL2 ); <span class="comment">// VTK was built with vtkRenderingOpenGL2</span></span><br><span class="line">VTK_MODULE_INIT( vtkInteractionStyle );</span><br><span class="line">VTK_MODULE_INIT( vtkRenderingVolumeOpenGL2 );</span><br><span class="line">VTK_MODULE_INIT( vtkRenderingFreeType ); <span class="comment">// to slove "Failed getting the TextRenderer instance" problem.</span></span><br></pre></td></tr></table></figure><h2 id="讀取檔案"><a href="#讀取檔案" class="headerlink" title="讀取檔案"></a>讀取檔案</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Load a stack of jpeg pics to JPEGReader.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkJPEGReader.h&gt;</span></span></span><br><span class="line"><span class="comment">//設定Reader格式:JPEGReader, PNGReader, BMPReader...</span></span><br><span class="line">vtkNew&lt;vtkJPEGReader&gt; reader;</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定來源資料路徑</span></span><br><span class="line">reader-&gt;SetFilePattern( <span class="string">"%s%d.jpg"</span> );</span><br><span class="line">reader-&gt;SetFilePrefix( <span class="string">"D:\\Project\\VTK\\pics\\"</span> );</span><br><span class="line"><span class="comment">//進行一個讀取寬高與張數的動作, 寬:512 高:512 張數:128使用時要各-1</span></span><br><span class="line">reader-&gt;SetDataExtent( <span class="number">0</span>, <span class="number">511</span>, <span class="number">0</span>, <span class="number">511</span>, <span class="number">0</span>, <span class="number">127</span> );</span><br><span class="line"><span class="comment">//重新配置空間分布, Z軸放至4倍大與512一樣讓這個Volume變為正方體</span></span><br><span class="line">reader-&gt;SetDataSpacing( <span class="number">1</span>, <span class="number">1</span>, <span class="number">512</span> / <span class="number">128</span> );</span><br><span class="line"><span class="comment">//將資料Remap成0~255</span></span><br><span class="line">reader-&gt;SetDataScalarTypeToUnsignedChar();</span><br><span class="line"><span class="comment">//將通道改為1通道</span></span><br><span class="line">reader-&gt;SetNumberOfScalarComponents( <span class="number">1</span> );</span><br><span class="line">reader-&gt;SetDataByteOrderToBigEndian();</span><br><span class="line">reader-&gt;Update();</span><br></pre></td></tr></table></figure><h2 id="Interactor-按壓滑動旋轉"><a href="#Interactor-按壓滑動旋轉" class="headerlink" title="Interactor 按壓滑動旋轉"></a>Interactor 按壓滑動旋轉</h2><p>Interactor交互器預設是按壓時會進行旋轉物件而不是我們習慣的按壓滑動才進行旋轉物件，主要是透過vtkInteractorStyleTrackballCamera<br>設定成按下左鍵滑動旋轉要使用以下幾句程式碼</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vtkNew&lt;vtkInteractorStyleTrackballCamera&gt; style;</span><br><span class="line">vtkNew&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor;</span><br><span class="line">renderWindowInteractor-&gt;SetInteractorStyle( style );</span><br><span class="line">renderWindowInteractor-&gt;SetRenderWindow( renderWindow );</span><br><span class="line">renderWindowInteractor-&gt;Initialize();</span><br><span class="line">renderWindow-&gt;Render();</span><br><span class="line">renderWindowInteractor-&gt;Start();</span><br></pre></td></tr></table></figure><h2 id="旋轉座標小標-Icon"><a href="#旋轉座標小標-Icon" class="headerlink" title="旋轉座標小標 Icon"></a>旋轉座標小標 Icon</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Axes item to show current direction.</span></span><br><span class="line">vtkNew&lt;vtkAxesActor&gt; axes;</span><br><span class="line">vtkNew&lt;vtkTransform&gt; transform;</span><br><span class="line">vtkNew&lt;vtkOrientationMarkerWidget&gt; widget;</span><br><span class="line">widget-&gt;SetOutlineColor( <span class="number">0.9300</span>, <span class="number">0.5700</span>, <span class="number">0.1300</span> );</span><br><span class="line">widget-&gt;SetOrientationMarker( axes );</span><br><span class="line">widget-&gt;SetInteractor( renderWindowInteractor );</span><br><span class="line">widget-&gt;SetViewport( <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.3</span>, <span class="number">0.3</span> );</span><br><span class="line">widget-&gt;SetEnabled( <span class="number">1</span> );</span><br><span class="line">widget-&gt;InteractiveOff();</span><br><span class="line">transform-&gt;Translate( <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span> );</span><br><span class="line">axes-&gt;SetTotalLength( <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span> );</span><br></pre></td></tr></table></figure><h2 id="vtkSmartPoint-vs-vtkNew"><a href="#vtkSmartPoint-vs-vtkNew" class="headerlink" title="vtkSmartPoint vs vtkNew"></a>vtkSmartPoint vs vtkNew</h2><p>我們使用vtk宣告新的函式庫時有兩種方式</p><p>第一種: </p><pre><code>vtkSmartPointer&lt;vtkImageImport&gt; reader = vtkSmartPointer&lt;vtkImageImport&gt;::New();</code></pre><p>第二種: </p><pre><code>vtkNew&lt;vtkImageImport&gt; reader;</code></pre><p>以官方的解釋來說</p><pre><code>vtkNew is a drop in replacement for vtkSmartPointer</code></pre><p>Drop-in replacement: 直接替換是計算機科學和其他領域中使用的術語。它指的是在不需要任何其他代碼或配置更改的情況下將一個硬件組件替換為另一個硬件組件的能力，並且不會產生負面影響。通常，替換有一些好處，包括以下一項或多項： 增加安全性 提高速度 功能集增加 增強兼容性 增加支持</p><h2 id="2D-切片"><a href="#2D-切片" class="headerlink" title="2D 切片"></a>2D 切片</h2><p>將3D Volume進行切片呈現2D圖形要使用vtkImageReslice並搭配vtkImageActor最後使用vtkRenderer顯示在畫面中，特別注意這邊顯示僅能為2D平面圖不會是3D Volume喔</p><p>這邊我就不提供原碼了<br>如有需要更進一步了解請連絡作者G.C.L.如果會的話為你解惑</p><h2 id="3D-剪裁"><a href="#3D-剪裁" class="headerlink" title="3D 剪裁"></a>3D 剪裁</h2><p>如果是需要將3D Volume剪裁，剪裁完還是以3D Volume呈現的話有以下兩種方法</p><p>第一種: vtkPlane切單一平面加上volumeMapper-&gt;AddClippingPlane(plane);達到切平面效果，但是這樣僅能以一個平面的方式去做剪裁好像不太能同時多個平面剪裁</p><p>第二種: 使用vtkGPUVolumeRayCastMapper類別內的SetCroppingRegionPlanes函式達到3D剪裁功能(完美解決第一種遇到的問題)</p><p>另外可以搭配vtkImageInteractionCallback綁定一些滑鼠事件，讓滑鼠做指定操作時達到相對應剪裁動作，或是vtkSliderCallback讓Slider變化時達到相對應剪裁動作</p><p>這邊我就不提供原碼了<br>如有需要更進一步了解請連絡作者G.C.L.如果會的話為你解惑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在編寫VTK的時候，有些許小功能在這一篇稍微記錄一下是如何實現的，此篇是個人在讀VTK時的理解不一定正確，純粹記錄&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="VTK" scheme="https://teddybearfp.github.io/categories/VTK/"/>
    
    
      <category term="VTK" scheme="https://teddybearfp.github.io/tags/VTK/"/>
    
  </entry>
  
  <entry>
    <title>QImage 讀取並轉成Memory buffer</title>
    <link href="https://teddybearfp.github.io/2019/09/11/QImage-%E8%AE%80%E5%8F%96%E4%B8%A6%E8%BD%89%E6%88%90Memory-buffer/"/>
    <id>https://teddybearfp.github.io/2019/09/11/QImage-讀取並轉成Memory-buffer/</id>
    <published>2019-09-11T06:05:16.000Z</published>
    <updated>2019-09-11T13:50:02.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時我們可以把圖片讀取後轉成記憶體的方式去做處理，或是傳送給其他函式操作，那麼TB在此記錄一下如何讀取數張圖片並存至Buffer中</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>首先要使Qt環境中支援QImage<br>如果你創建專案時是選Qt Console的話要去pro檔案中刪除</p><pre><code>Qt -= gui</code></pre><p>上述這一行</p><p>並在欲使用的地方導入QImage</p><pre><code>#include &lt;QImage&gt;</code></pre><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先創建Buffer並宣告其大小,長:512 寬:512 張數:100</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *buf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">512</span> * <span class="number">512</span> * <span class="number">100</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">//迴圈將100張圖批次放至buffer記憶體中</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//宣告欲讀取圖片的QImage,並宣告圖片寬:512 高:512與 通道數:3通道(RGB)</span></span><br><span class="line">    QImage img = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888 );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//讀取路徑宣告</span></span><br><span class="line">    QString path = <span class="string">"D:\\Project\\pics\\"</span> + QString::number( i ) + <span class="string">".jpg"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//讀取圖片</span></span><br><span class="line">    img.load( path, <span class="string">"JPEG"</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//進行一個將圖片旋轉180度的動作</span></span><br><span class="line">    QMatrix matrix;</span><br><span class="line">    matrix.rotate( <span class="number">180</span> );</span><br><span class="line">    img = img.transformed( matrix );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//將三通道的圖轉為灰階單通道</span></span><br><span class="line">    img = img.convertToFormat( QImage::Format_Grayscale8 );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//存至buffer中, memcpy(目的地記憶體起始位置, 來源記憶體起始位置, 資料長度)</span></span><br><span class="line">    <span class="built_in">memcpy</span>( buf + i * img.sizeInBytes(), img.bits(), img.sizeInBytes() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過上述程式碼便可以成功將100張jpg圖檔的資料存進buffer中唷</p><p>其他QImage相關操作我們可以看看我的另一篇文章<a href="https://teddybearfp.github.io/2018/11/08/QImage-%E6%93%8D%E4%BD%9C/">Qt QImage &amp;&amp; QQuickPaintedItem 操作</a>有更多詳細解說</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有時我們可以把圖片讀取後轉成記憶體的方式去做處理，或是傳送給其他函式操作，那麼TB在此記錄一下如何讀取數張圖片並存至Buffer中&lt;/p&gt;

      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="QImage" scheme="https://teddybearfp.github.io/tags/QImage/"/>
    
  </entry>
  
  <entry>
    <title>VTK 讀檔</title>
    <link href="https://teddybearfp.github.io/2019/08/22/VTK-%E8%AE%80%E6%AA%94/"/>
    <id>https://teddybearfp.github.io/2019/08/22/VTK-讀檔/</id>
    <published>2019-08-22T06:05:16.000Z</published>
    <updated>2019-08-22T13:30:29.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>VTK讀檔案，若是在Python即使不使用VTK的函式也可以很方便的Load指定資料夾中某一類型的所有檔案，但是直接用C++寫就沒那麼方便了，所以我們看一下這篇紀錄的VTK函式如何Load檔案進來</p><h2 id="VTK-Load-file-C"><a href="#VTK-Load-file-C" class="headerlink" title="VTK Load file ( C++ )"></a>VTK Load file ( C++ )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">( <span class="keyword">const</span> QString &amp;pattern, <span class="keyword">const</span> QString &amp;dirname, <span class="keyword">int</span> level, QVariantList *path )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QDir <span class="title">dir</span><span class="params">( dirname )</span></span>;</span><br><span class="line">    dir.setFilter( QDir::Dirs | QDir::Files | QDir::NoSymLinks | QDir::NoDot | QDir::NoDotDot );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> QStringList stringList = pattern.split( <span class="string">'/'</span> );</span><br><span class="line">    foreach ( QFileInfo fileInfo, dir.entryInfoList( stringList.mid( level, <span class="number">1</span> ) ) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( fileInfo.isDir() &amp;&amp; fileInfo.isReadable() )</span><br><span class="line">            traverse( pattern, fileInfo.filePath(), level + <span class="number">1</span>, path );</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( stringList.size() == ( level + <span class="number">1</span> ) )</span><br><span class="line">            path-&gt;append( fileInfo.filePath() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">variantLessThan</span><span class="params">( <span class="keyword">const</span> QVariant &amp;v1, <span class="keyword">const</span> QVariant &amp;v2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString s1 = v1.toString();</span><br><span class="line">    s1 = s1.replace( <span class="string">"./pics/"</span>, <span class="string">""</span> ).replace( <span class="string">".jpg"</span>, <span class="string">""</span> );</span><br><span class="line">    QString s2 = v2.toString();</span><br><span class="line">    s2 = s2.replace( <span class="string">"./pics/"</span>, <span class="string">""</span> ).replace( <span class="string">".jpg"</span>, <span class="string">""</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( s1.toInt() &lt; s2.toInt() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">QVariantList path;</span><br><span class="line">traverse( <span class="string">"pics/*.jpg"</span>, <span class="string">"."</span>, <span class="number">0</span>, &amp;path );</span><br><span class="line">qSort( path.begin(), path.end(), variantLessThan ); <span class="comment">//檔名數字由小到大排列</span></span><br><span class="line"></span><br><span class="line">vtkSmartPointer&lt;vtkStringArray&gt; filePath = vtkSmartPointer&lt;vtkStringArray&gt;::New();</span><br><span class="line">filePath-&gt;SetNumberOfValues( path.length() );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path.length(); i++ )</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; path[ i ].toString();</span><br><span class="line">    vtkStdString s = path[ i ].toString().toStdString();</span><br><span class="line">    filePath-&gt;SetValue( i, s );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vtkSmartPointer&lt;vtkJPEGReader&gt; jpegReader = vtkSmartPointer&lt;vtkJPEGReader&gt;::New();</span><br><span class="line">jpegReader-&gt;SetFileNames( filePath );</span><br><span class="line">jpegReader-&gt;SetDataSpacing( <span class="number">1</span>, <span class="number">1</span>, <span class="number">512</span> / <span class="number">128</span> );</span><br><span class="line">jpegReader-&gt;Update();</span><br></pre></td></tr></table></figure><h2 id="VTK-Load-file-C-用VTK函式"><a href="#VTK-Load-file-C-用VTK函式" class="headerlink" title="VTK Load file ( C++ 用VTK函式 )"></a>VTK Load file ( C++ 用VTK函式 )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* path = <span class="string">"D:\\VTK\\pics\\"</span>;</span><br><span class="line">vtkSmartPointer&lt;vtkJPEGReader&gt; jpegReader = vtkSmartPointer&lt;vtkJPEGReader&gt;::New();</span><br><span class="line">jpegReader-&gt;SetFilePrefix( path );</span><br><span class="line"><span class="comment">//jpegReader-&gt;SetFilePattern( "%sfile_%02d.jpg" ); //file_01.jpg, file_10.jpg ...</span></span><br><span class="line">jpegReader-&gt;SetFilePattern( <span class="string">"%s%d.jpg"</span> ); <span class="comment">//0.jpg, 1.jpg ...</span></span><br><span class="line">jpegReader-&gt;SetDataExtent( <span class="number">0</span>, <span class="number">511</span>, <span class="number">0</span>, <span class="number">511</span>, <span class="number">0</span>, <span class="number">127</span> ); <span class="comment">//讀取寬:512 高:512 張數:128</span></span><br><span class="line">jpegReader-&gt;SetDataSpacing( <span class="number">1</span>, <span class="number">1</span>, <span class="number">512</span> / <span class="number">128</span> ); <span class="comment">//空間分布比值 1:1:512/128</span></span><br><span class="line">jpegReader-&gt;Update();</span><br></pre></td></tr></table></figure><p>這種方法比第一種程式碼簡潔多拉</p><h2 id="VTK-Load-file-Python"><a href="#VTK-Load-file-Python" class="headerlink" title="VTK Load file ( Python )"></a>VTK Load file ( Python )</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 將128張圖讀入</span></span><br><span class="line"><span class="comment"># PNG files path source (stack of images)</span></span><br><span class="line">files=glob.glob(<span class="string">r"D:\VTKTester\pics"</span>+<span class="string">r"\*.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting the file path</span></span><br><span class="line">filePath = vtk.vtkStringArray()</span><br><span class="line"><span class="comment"># Sorting file to arrange in ascending order to get slices correctly</span></span><br><span class="line">files.sort(key=<span class="keyword">lambda</span> x: int(<span class="string">''</span>.join(filter(str.isdigit, x))))</span><br><span class="line">filePath.SetNumberOfValues(len(files))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(files),<span class="number">1</span>):</span><br><span class="line">    filePath.SetValue(i,files[i])</span><br><span class="line">    print(files[i])</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 用JPEGReader去設置這128張圖</span></span><br><span class="line">reader=vtk.vtkJPEGReader()</span><br><span class="line"><span class="comment">#reader=vtk.vtkPNGReader()</span></span><br><span class="line">reader.SetFileNames(filePath)</span><br><span class="line">reader.SetDataSpacing(<span class="number">1</span>,<span class="number">1</span>,<span class="number">512</span>/<span class="number">128</span>)</span><br><span class="line">reader.Update()</span><br><span class="line">print(reader)</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://quppler.com/3d-volume-rendering/" target="_blank" rel="noopener">3D Volume Rendering using Python</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;VTK讀檔案，若是在Python即使不使用VTK的函式也可以很方便的Load指定資料夾中某一類型的所有檔案，但是直接用C++寫就沒那麼方便了
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="VTK 讀檔" scheme="https://teddybearfp.github.io/tags/VTK-%E8%AE%80%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Walker</title>
    <link href="https://teddybearfp.github.io/2019/08/22/Dependency-Walker/"/>
    <id>https://teddybearfp.github.io/2019/08/22/Dependency-Walker/</id>
    <published>2019-08-22T04:05:16.000Z</published>
    <updated>2019-08-22T13:30:12.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>記得剛進公司的時候，對dll動態連結檔還非常不了解，寫專案的時候缺少哪個dll都不太清楚，導致靜態連結檔正確產出obj檔案但是在執行檔的時候會crash掉，每次解決都需要花不少時間找少哪個動態連結檔dll，今天來記錄一下一個神好用的軟體，Dependency Walker，有了這個神軟體考試都一百分</p><h2 id="Dependency-Walker-概述"><a href="#Dependency-Walker-概述" class="headerlink" title="Dependency Walker 概述"></a>Dependency Walker 概述</h2><p>當程式執行時，有DLL問題時，可以使用Dependency Walker工具做檢查<br>Dependency Walker可以遞迴地檢測程式所使用的所有相依動態連結檔DLL。</p><h2 id="使用-Dependency-Walker"><a href="#使用-Dependency-Walker" class="headerlink" title="使用 Dependency Walker"></a>使用 Dependency Walker</h2><p>要使用Dependency Walker前提須要先產出執行檔，那麼就需要先把Link error之類的連結問題與obj先產出才會有執行檔，有了執行檔後開啟Dependency Walker選擇欲檢查的執行檔，就會出現以下畫面</p><h3 id="顯示缺少的dll"><a href="#顯示缺少的dll" class="headerlink" title="顯示缺少的dll"></a>顯示缺少的dll</h3><p><img src="https://i.imgur.com/y2kWeMt.png" alt=""></p><p>從上面的圖可得知缺少3個dll分別為VTKCOMMONCOLOR,VTKCOMMONCOMPUTATIONALGEOMETRY,VTKCOMMONCORE<br>三個動態連結檔dll那麼將它們放至執行檔旁一切就解決拉</p><h3 id="補上後的畫面"><a href="#補上後的畫面" class="headerlink" title="補上後的畫面"></a>補上後的畫面</h3><p><img src="https://i.imgur.com/IuMT3uH.png" alt=""></p><p>圖中可以看到剛剛缺少的dll已經補上了<br>那麼這時候如果原本的問題僅是缺少dll問題的化基本上就能執行囉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;記得剛進公司的時候，對dll動態連結檔還非常不了解，寫專案的時候缺少哪個dll都不太清楚，導致靜態連結檔正確產出obj檔案但是在執行檔的時候
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Dependency Walker" scheme="https://teddybearfp.github.io/tags/Dependency-Walker/"/>
    
  </entry>
  
  <entry>
    <title>Qt FileDialog</title>
    <link href="https://teddybearfp.github.io/2019/08/21/Qt-FileDialog/"/>
    <id>https://teddybearfp.github.io/2019/08/21/Qt-FileDialog/</id>
    <published>2019-08-21T04:05:16.000Z</published>
    <updated>2019-08-22T13:29:58.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做介面端難免有需要給使用者選擇檔案的時候，那麼這時候使用FileDialog可以開啟檔案選擇介面讓使用者選擇特定類型檔案或是資料夾，這一篇來記錄一下Qt FileDialog的使用吧</p><h2 id="Qt-FileDialog"><a href="#Qt-FileDialog" class="headerlink" title="Qt FileDialog"></a>Qt FileDialog</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Dialogs <span class="number">1.3</span></span><br><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="title">Button</span>&#123; <span class="comment">//透過這個按鍵可以觸發FileDialog</span></span><br><span class="line">        <span class="attribute">id:</span><span class="string">openBtn</span></span><br><span class="line">        <span class="attribute">anchors.left</span>: <span class="built_in">parent</span>.left</span><br><span class="line">        <span class="attribute">anchors.top</span>: <span class="built_in">parent</span>.top</span><br><span class="line">        <span class="attribute">anchors.margins</span>: <span class="number">50</span></span><br><span class="line">        <span class="attribute">text</span>:<span class="string">"Select folder\nto do something"</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">250</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">150</span></span><br><span class="line">        <span class="attribute">onClicked</span>: fileDialog.open()</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title">Label</span> &#123;</span><br><span class="line">       <span class="attribute">id:</span><span class="string"> labels</span></span><br><span class="line">       <span class="attribute">text</span>: qsTr(<span class="string">""</span>)</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">25</span></span><br><span class="line">       <span class="attribute">anchors.top</span>: openBtn.verticalCenter</span><br><span class="line">       <span class="attribute">anchors.left</span>:<span class="attribute">openBtn.right</span></span><br><span class="line"><span class="attribute">       anchors.leftMargin</span>: <span class="number">15</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title">FileDialog</span> &#123;</span><br><span class="line">       <span class="attribute">id:</span><span class="string">fileDialog</span></span><br><span class="line">       <span class="attribute">title</span>: <span class="string">"Select folder"</span> <span class="comment">//上方顯示的標題</span></span><br><span class="line">       <span class="attribute">folder</span>: shortcuts.desktop <span class="comment">//讓起始位置指向desktop</span></span><br><span class="line">       <span class="attribute">selectExisting</span>: <span class="literal">true</span></span><br><span class="line">       <span class="attribute">selectFolder</span>: <span class="literal">true</span> <span class="comment">//這個屬性為true時,選擇整個資料夾而非檔案</span></span><br><span class="line">       <span class="attribute">selectMultiple</span>: <span class="literal">false</span> <span class="comment">//這個屬性處理是否可以選擇多個檔案</span></span><br><span class="line">       <span class="attribute">onAccepted</span>: &#123; <span class="comment">//選擇檔案的時候做的事情Call function do something...</span></span><br><span class="line">           <span class="comment">//fileDialog.setNameFilter(tr("Images (*.png *.jpg)"));//若selectFolder為false選擇檔案時可以過濾檔案類型,僅顯示給使用者看某類型檔案</span></span><br><span class="line">           labels.text = fileDialog.fileUrl;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"You chose: "</span> + fileDialog.fileUrl);</span><br><span class="line">           doSomething(fileDialog.fileUrl) <span class="comment">//得到的字串可能為"file:///D:/Sample"</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="attribute">onRejected</span>: &#123; <span class="comment">//取消的時候做的行為,例如不做事或是程式關閉Qt.quit()</span></span><br><span class="line">           labels.text = <span class="string">""</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileDialog-Demo"><a href="#FileDialog-Demo" class="headerlink" title="FileDialog Demo"></a>FileDialog Demo</h2><p><img src="https://i.imgur.com/wJsbXQe.png" alt=""></p><h2 id="DoSomething-字串處理"><a href="#DoSomething-字串處理" class="headerlink" title="DoSomething 字串處理"></a>DoSomething 字串處理</h2><h3 id="viewmodel"><a href="#viewmodel" class="headerlink" title="viewmodel"></a>viewmodel</h3><p>收到剛剛從qml端傳來的QString字串後做一些處理再傳至純C lib做事情,所以需要QString轉成Char*</p><p>將QString: </p><pre><code>&quot;file:///D:/Sample&quot;</code></pre><p>轉換成Char*:</p><pre><code>&quot;D:\\Sample\\&quot;</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Sample::doSomething( QString path )</span><br><span class="line">&#123;</span><br><span class="line">    path.replace( <span class="string">"file:///"</span>, <span class="string">""</span> );</span><br><span class="line">    path.replace( <span class="string">"/"</span>, <span class="string">"\\"</span> );</span><br><span class="line">    path.append( <span class="string">"\\"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//QString to char*</span></span><br><span class="line">    QByteArray ba = path.toLocal8Bit();</span><br><span class="line">    <span class="keyword">char</span>* s = ba.data();</span><br><span class="line">    DoSomething( s );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">Sample__API <span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">( <span class="keyword">char</span>* path )</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;做介面端難免有需要給使用者選擇檔案的時候，那麼這時候使用FileDialog可以開啟檔案選擇介面讓使用者選擇特定類型檔案或是資料夾，這一篇來
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="FileDialog" scheme="https://teddybearfp.github.io/tags/FileDialog/"/>
    
  </entry>
  
  <entry>
    <title>TB腦力激盪_遺失的連續數(無排序)</title>
    <link href="https://teddybearfp.github.io/2019/08/13/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA-%E9%81%BA%E5%A4%B1%E7%9A%84%E9%80%A3%E7%BA%8C%E6%95%B8-%E7%84%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://teddybearfp.github.io/2019/08/13/腦力激盪-遺失的連續數-無排序/</id>
    <published>2019-08-13T04:05:16.000Z</published>
    <updated>2019-08-13T15:03:54.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了精進寫程式能力，紀錄一下遇到的題目與我覺得還算不錯的解</p><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>N個連續數字(無排序)，找出缺少的那個數字(前提起始數字不缺漏)<br>例如:題目(7個連續數字，起始為76)<br>那麼內容可能為[83,79,76,81,78,82]找出缺少哪一個數字<br>這答案為77<br>試著編寫程式找到缺少的數字</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>我的方法完成兩個目標即可達成<br>第一個目標找到數字的頭(最小的數字) min<br>第二個目標找出給的內容總和 sum</p><p>我們僅需運用時間複雜度O(n)一個迴圈的時間<br>同時找出最小的數字min,並將所有數字加起來得到總和sum<br>接著把剛剛找到的最小的數字加上題目給的N個連續數字的N做一個梯形運算取得該有的總和減掉剛剛算出的sum</p><p>以例題舉例來說<br>最小數字min:76<br>N:7<br>梯形面積:(76 + (76 + 7)) * 7 / 2 (上底加下底乘高除二)<br>= 556.5<br>= 556 (無條件捨去)<br>迴圈算出來的總和Sum:83 + 79 + 76 + 81 + 78 + 82 = 479<br>梯形面積減掉Sum:77</p><p>ANS:77</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;為了精進寫程式能力，紀錄一下遇到的題目與我覺得還算不錯的解&lt;/p&gt;
&lt;h2 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="腦力激盪" scheme="https://teddybearfp.github.io/categories/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA/"/>
    
    
      <category term="腦力激盪" scheme="https://teddybearfp.github.io/tags/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA/"/>
    
      <category term="無序連續數" scheme="https://teddybearfp.github.io/tags/%E7%84%A1%E5%BA%8F%E9%80%A3%E7%BA%8C%E6%95%B8/"/>
    
  </entry>
  
  <entry>
    <title>Qt QPainter</title>
    <link href="https://teddybearfp.github.io/2019/07/12/Qt-QPainter/"/>
    <id>https://teddybearfp.github.io/2019/07/12/Qt-QPainter/</id>
    <published>2019-07-12T01:05:16.000Z</published>
    <updated>2019-07-13T05:37:03.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>快速的匯整圖形資料並繪製，可以達到即時影像的效果，那麼將圖形繪製除了我之前編寫的<a href="https://teddybearfp.github.io/2018/11/08/QImage-%E6%93%8D%E4%BD%9C/#more">Qt QImage &amp; QQuickPaintedItem 操作</a>裡面提的針對bits的操作每個位元的顏色方式之外，今天這一篇所記錄的是以QImage整份用QPainter操作再用QQuickPaintItem畫在Canvas上</p><pre><code>文章為[泰迪熊的程式足跡G.C.L.](https://teddybearfp.github.io/)所編寫，禁止轉載與抄襲，引用部分文章請附上出處</code></pre><h2 id="QPainter實作"><a href="#QPainter實作" class="headerlink" title="QPainter實作"></a>QPainter實作</h2><h3 id="TeddyBearFPCanvas-h"><a href="#TeddyBearFPCanvas-h" class="headerlink" title="TeddyBearFPCanvas.h"></a>TeddyBearFPCanvas.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEDDYBEARFPCANVAS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEDDYBEARFPCANVAS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickPaintedItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeddyBearFPCanvas</span> :</span> <span class="keyword">public</span> QQuickPaintedItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TeddyBearFPCanvas( QQuickItem* parent = <span class="literal">nullptr</span> );</span><br><span class="line">    ~TeddyBearFPCanvas();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">( QPainter* painter )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QImage imgs;</span><br><span class="line">    QImage aImg;</span><br><span class="line">    QImage bImg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isStarted;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Polling</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TEDDYBEARFPCANVAS_H</span></span></span><br></pre></td></tr></table></figure><h3 id="TeddyBearFPCanvas-cpp"><a href="#TeddyBearFPCanvas-cpp" class="headerlink" title="TeddyBearFPCanvas.cpp"></a>TeddyBearFPCanvas.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfpcanvas.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CANVAS_INTERVAL 5</span></span><br><span class="line"></span><br><span class="line">TeddyBearFPCanvas::TeddyBearFPCanvas( QQuickItem* parent )</span><br><span class="line">    : QQuickPaintedItem( parent )</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::paint( QPainter* painter )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">( <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height() )</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">( <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height() )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//將imgs畫上</span></span><br><span class="line">    painter-&gt;drawImage( target, imgs, source );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( isStarted ) update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TeddyBearFPCanvas::~TeddyBearFPCanvas()</span><br><span class="line">&#123;</span><br><span class="line">    stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::start()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( isStarted )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    isStarted = <span class="literal">true</span>;</span><br><span class="line">    future = QtConcurrent::run( <span class="keyword">this</span>, &amp;TeddyBearFPCanvas::Polling );</span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::Polling()</span><br><span class="line">&#123;</span><br><span class="line">    imgs = QImage( <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height(), QImage::Format_Grayscale8 );</span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">( Qt::gray )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( isStarted )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//從某處得到了aImg, bImg資料</span></span><br><span class="line">        <span class="comment">//ret = some Function</span></span><br><span class="line">        <span class="keyword">if</span> ( ret != ComboOk )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        aImg = aImg.scaled( <span class="number">320</span>, <span class="number">240</span> );</span><br><span class="line">        </span><br><span class="line">        QImage dstImg;</span><br><span class="line">        <span class="comment">//將整份bImg複製(不能直接用等於dstImg = bImg ,這樣寫的話更改dstImg也會更動到bImg)</span></span><br><span class="line">        dstImg = bImg.copy();</span><br><span class="line">        dstImg = dstImg.scaled( <span class="number">320</span>, <span class="number">240</span> );</span><br><span class="line"></span><br><span class="line">        <span class="function">QPainter <span class="title">painter</span><span class="params">( &amp;imgs )</span></span>;</span><br><span class="line">        painter.setPen( pen );</span><br><span class="line"></span><br><span class="line">        painter.drawImage( <span class="number">0</span>, <span class="number">0</span>, dstImg );</span><br><span class="line">        <span class="comment">//灰色間隔</span></span><br><span class="line">        painter.drawRect( <span class="number">0</span>, dstImg.height(), <span class="keyword">this</span>-&gt;width(), CANVAS_INTERVAL );</span><br><span class="line">        painter.drawImage( <span class="number">0</span>, dstImg.height() + CANVAS_INTERVAL, aImg );</span><br><span class="line">        painter.end();</span><br><span class="line"></span><br><span class="line">        Sleep( <span class="number">30</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::stop()</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">    future.waitForFinished();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;快速的匯整圖形資料並繪製，可以達到即時影像的效果，那麼將圖形繪製除了我之前編寫的&lt;a href=&quot;https://teddybearfp.g
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QPainter" scheme="https://teddybearfp.github.io/tags/QPainter/"/>
    
  </entry>
  
  <entry>
    <title>Python VTK</title>
    <link href="https://teddybearfp.github.io/2019/07/09/Python-VTK/"/>
    <id>https://teddybearfp.github.io/2019/07/09/Python-VTK/</id>
    <published>2019-07-09T01:05:16.000Z</published>
    <updated>2019-07-13T05:35:04.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我上一篇CMake GUI記錄在C++套用Third-Party VTK的流程有點複雜，這一篇記錄Python套用VTK會簡單許多</p><h2 id="Python-VTK"><a href="#Python-VTK" class="headerlink" title="Python VTK"></a>Python VTK</h2><p>Python使用VTK套件就沒拿麼複雜僅需簡單的至下方網站下載擴充包<br>至<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">非官方擴充包(Unofficial Windows Binaries for Python Extension Packages)</a>下載VTK-8.2.0-cp36-cp36m-win32.whl，這檔名36的部分指的是Python版本，載完解壓縮完後，至cmd中執行python install VTK-8.2.0-cp36-cp36m-win32.whl開始安裝<br>完成後在欲使用VTK的專案中上方添加import vtk</p><h2 id="Python-VTK-測試"><a href="#Python-VTK-測試" class="headerlink" title="Python VTK 測試"></a>Python VTK 測試</h2><p>上述步驟完成後，可以用以下程式碼測試</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#柱體展示</span></span><br><span class="line"><span class="keyword">import</span> vtk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    colors = vtk.vtkNamedColors()</span><br><span class="line">    <span class="comment"># Set the background color.</span></span><br><span class="line">    bkg = map(<span class="keyword">lambda</span> x: x / <span class="number">255.0</span>, [<span class="number">26</span>, <span class="number">51</span>, <span class="number">102</span>, <span class="number">255</span>])</span><br><span class="line">    colors.SetColor(<span class="string">"BkgColor"</span>, *bkg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This creates a polygonal cylinder model with eight circumferential</span></span><br><span class="line">    <span class="comment"># facets.</span></span><br><span class="line">    cylinder = vtk.vtkCylinderSource()</span><br><span class="line">    cylinder.SetResolution(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The mapper is responsible for pushing the geometry into the graphics</span></span><br><span class="line">    <span class="comment"># library. It may also do color mapping, if scalars or other</span></span><br><span class="line">    <span class="comment"># attributes are defined.</span></span><br><span class="line">    cylinderMapper = vtk.vtkPolyDataMapper()</span><br><span class="line">    cylinderMapper.SetInputConnection(cylinder.GetOutputPort())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The actor is a grouping mechanism: besides the geometry (mapper), it</span></span><br><span class="line">    <span class="comment"># also has a property, transformation matrix, and/or texture map.</span></span><br><span class="line">    <span class="comment"># Here we set its color and rotate it -22.5 degrees.</span></span><br><span class="line">    cylinderActor = vtk.vtkActor()</span><br><span class="line">    cylinderActor.SetMapper(cylinderMapper)</span><br><span class="line">    cylinderActor.GetProperty().SetColor(colors.GetColor3d(<span class="string">"Tomato"</span>))</span><br><span class="line">    cylinderActor.RotateX(<span class="number">30.0</span>)</span><br><span class="line">    cylinderActor.RotateY(<span class="number">-45.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the graphics structure. The renderer renders into the render</span></span><br><span class="line">    <span class="comment"># window. The render window interactor captures mouse events and will</span></span><br><span class="line">    <span class="comment"># perform appropriate camera or actor manipulation depending on the</span></span><br><span class="line">    <span class="comment"># nature of the events.</span></span><br><span class="line">    ren = vtk.vtkRenderer()</span><br><span class="line">    renWin = vtk.vtkRenderWindow()</span><br><span class="line">    renWin.AddRenderer(ren)</span><br><span class="line">    iren = vtk.vtkRenderWindowInteractor()</span><br><span class="line">    iren.SetRenderWindow(renWin)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add the actors to the renderer, set the background and size</span></span><br><span class="line">    ren.AddActor(cylinderActor)</span><br><span class="line">    ren.SetBackground(colors.GetColor3d(<span class="string">"BkgColor"</span>))</span><br><span class="line">    renWin.SetSize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    renWin.SetWindowName(<span class="string">'Cylinder'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This allows the interactor to initalize itself. It has to be</span></span><br><span class="line">    <span class="comment"># called before an event loop.</span></span><br><span class="line">    iren.Initialize()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We'll zoom in a little by accessing the camera and invoking a "Zoom"</span></span><br><span class="line">    <span class="comment"># method on it.</span></span><br><span class="line">    ren.ResetCamera()</span><br><span class="line">    ren.GetActiveCamera().Zoom(<span class="number">1.5</span>)</span><br><span class="line">    renWin.Render()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Start the event loop.</span></span><br><span class="line">    iren.Start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>出現柱體就代表成功拉</p><p>那麼可以進行一些MRI或是CT的3D Volume Rendering</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我上一篇CMake GUI記錄在C++套用Third-Party VTK的流程有點複雜，這一篇記錄Python套用VTK會簡單許多&lt;/p&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="VTK" scheme="https://teddybearfp.github.io/tags/VTK/"/>
    
  </entry>
  
  <entry>
    <title>CMake GUI使用</title>
    <link href="https://teddybearfp.github.io/2019/07/05/CMake-GUI/"/>
    <id>https://teddybearfp.github.io/2019/07/05/CMake-GUI/</id>
    <published>2019-07-05T01:05:16.000Z</published>
    <updated>2019-07-13T05:32:39.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要繼續來研究3D相關的課題了，繼上次困難的OpenGL我的另一篇文章所記錄的<a href="https://teddybearfp.github.io/2018/12/23/3D-Volume-Rendering/">OpenGL 3D立體渲染</a>折騰了一番後，要來用VTK這個視覺化工具函式庫(VTK， Visualization Toolkit)，VTK社群快速地成長，其在學術研究及商業應用的領域受到重用，例如Slicer 生物醫學計算軟體使用VTK作為其核心，許多討論研究VTK的IEEE論文出現。而這個Third-party的套件要如何使用，cxx的話就得透過CMake將source資料編譯成sln檔 讓c++可以編譯產生dll、lib與h檔，Python的話則是下載擴充包</p><p>今天記錄的內容是如何用產出QT可以使用的VTK動態連結檔<br>下方步驟將會循序的CMake VTK項目產出VTK動態連結檔</p><pre><code>文章為[泰迪熊的程式足跡G.C.L.](https://teddybearfp.github.io/)所編寫，禁止轉載與抄襲，引用部分文章請附上出處</code></pre><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>在CMake步驟中最主要的目的就是要取得bin(動態連結檔), include(標頭檔),lib(靜態連結檔)這三種類型檔案，有了這三個類型的檔案，我們就可以使用這third-party的相關套件</p><h2 id="Download-VTK"><a href="#Download-VTK" class="headerlink" title="Download VTK"></a>Download VTK</h2><p>首先先下載<a href="https://vtk.org/download/" target="_blank" rel="noopener">VTK</a><br>我抓的是目前最新的<a href="https://www.vtk.org/files/release/8.2/VTK-8.2.0.zip" target="_blank" rel="noopener">VTK-8.2.0.zip</a><br>接著解壓縮在D槽資料夾中例如: “D:/VTK -8.2.0”(建議D槽)</p><h2 id="CMake-流程概述"><a href="#CMake-流程概述" class="headerlink" title="CMake 流程概述"></a>CMake 流程概述</h2><p>如果要編譯debug與release版的Third-Party套件大致分為以下14個步驟</p><h3 id="步驟1-5"><a href="#步驟1-5" class="headerlink" title="步驟1~5"></a>步驟1~5</h3><p>1.開啟cmake gui<br>2.選擇source(例如:C:/opencv/sources)<br>3.選擇目的資料夾<br>4.configure<br>5.configure完成後</p><ul><li>(例如opencv選擇build&gt;&gt;opencv_world打勾)</li></ul><h3 id="步驟6-10"><a href="#步驟6-10" class="headerlink" title="步驟6~10"></a>步驟6~10</h3><p>6.search找尋prefix(cmake&gt;&gt;cmake_install_prefix) 更改路徑<br>7.generate完成後 點擊open project<br>8.開啟sln後build需要的檔案</p><ul><li>(例如module內的opencv_world)</li></ul><p>9.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>10.至install設定的資料夾即可找到.h  , .dll , .lib</p><h3 id="步驟11-14"><a href="#步驟11-14" class="headerlink" title="步驟11~14"></a>步驟11~14</h3><p>11.此時只有debug版所以還要再編一次release版<br>12.切換成release再次build需要的檔案</p><ul><li>(例如module內的opencv_world)</li></ul><p>13.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>14.步驟完成後 就有debug版跟release版了!</p><h2 id="CMake-VTK"><a href="#CMake-VTK" class="headerlink" title="CMake VTK"></a>CMake VTK</h2><p>開啟CMake gui</p><h3 id="選擇來源與build路徑"><a href="#選擇來源與build路徑" class="headerlink" title="選擇來源與build路徑"></a>選擇來源與build路徑</h3><p>Where is the source code: 選擇剛剛解壓縮的資料夾”D:/VTK -8.2.0”<br>Where to build the binaries: “D:/VTK”</p><h3 id="Search-CMAKE-INSTALL-PREFIX"><a href="#Search-CMAKE-INSTALL-PREFIX" class="headerlink" title="Search CMAKE_INSTALL_PREFIX"></a>Search CMAKE_INSTALL_PREFIX</h3><p>填寫完畢後<br>Search: install<br>搜尋: install<br>找到CMAKE_INSTALL_PREFIX這一個項目並將內容寫為”D:/VTK/install” (盡量跟上方build的路徑一致)<br>這樣編出來的檔案會生成在上方這個路徑中</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><pre><code>建議將build出來的路徑寫在D槽不要在C槽中，因為在C槽需要以管理員許可權啟動Visual Studio並開啟VTK的sln檔，否則如果你沒有以管理員許可權啟動Visual Studio，INSTALL將會失敗</code></pre><h3 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h3><p>設定完後點擊左下方的Configure等待一下<br>接著會出現一些紅底的VTK項目(此處看當下CMake要產出什麼相關要做不一樣的勾選)<br>把VTK_Group_QT打勾<br>再次Configure會再出現紅底VTK項目但是數量會變少<br>那麼我再Configure一次<br>發現這一次完成後沒有紅底項目了</p><h3 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h3><p>Configure完成後點擊Generate<br>等待頁面出現Generate Done</p><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p>生成完的檔案在”D:/VTK”中<br>開啟VTK.sln(透過Visual Studio開啟)<br>首先在右方ALL_BUILD點選右鍵build，要等很久請耐心等候(此操作等於sudo make)<br>接著ALL_BUILD建置完成後，找尋一樣在右方欄位ALL_BUILD下面的INSTALL點選右鍵build(此操作等於sudo make install)<br>兩者都build完後就大功告成拉</p><h3 id="使用VTK"><a href="#使用VTK" class="headerlink" title="使用VTK"></a>使用VTK</h3><p>欲使用VTK可以到剛剛CMAKE_INSTALL_PREFIX填寫的位置找尋，像我們這一篇紀錄的是放在”D:/VTK/install”中，那麼我們可以到該資料夾中找到bin(動態連結檔), include(標頭檔),lib(靜態連結檔)與plugins…<br>若他人需要這個third-party套件僅需提供”D:/VTK/install”資料夾即可</p><p>OK產出後我們就可以去導入並開始使用VTK囉 3D世界我來啦!</p><h2 id="補充-Python-VTK"><a href="#補充-Python-VTK" class="headerlink" title="補充(Python VTK)"></a>補充(Python VTK)</h2><p>Python使用VTK套件就沒拿麼複雜僅需簡單的至下方網站下載擴充包<br>至<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">非官方擴充包(Unofficial Windows Binaries for Python Extension Packages)</a>下載VTK-8.2.0-cp36-cp36m-win32.whl，這檔名36的部分指的是Python版本，載完解壓縮完後，至cmd中執行python install VTK-8.2.0-cp36-cp36m-win32.whl開始安裝<br>完成後在欲使用VTK的專案中上方添加import vtk</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/VTK" target="_blank" rel="noopener">VTK - 维基百科，自由的百科全书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要繼續來研究3D相關的課題了，繼上次困難的OpenGL我的另一篇文章所記錄的&lt;a href=&quot;https://teddybearfp.g
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="CMake GUI" scheme="https://teddybearfp.github.io/tags/CMake-GUI/"/>
    
  </entry>
  
  <entry>
    <title>Python sqlite3 SqlDBHandler</title>
    <link href="https://teddybearfp.github.io/2019/06/23/Python-sqlite3-SqlDBHandler/"/>
    <id>https://teddybearfp.github.io/2019/06/23/Python-sqlite3-SqlDBHandler/</id>
    <published>2019-06-23T04:05:16.000Z</published>
    <updated>2019-07-05T14:08:39.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在程式的執行時，我們可以產出一些參數在資料庫中讓程式一開始有預設行為，也便於後續更改行為時不用改程式碼僅需更改資料庫參數，這一篇紀錄使用python中的sqlite3簡易的database CRUD操作模組製作的SqlDBHandler，完成了SqlDBHandler可以在往後有資料庫需求時快速的建立資料庫，那麼看一下該怎麼使用這個SqlDBHandler吧</p><h2 id="SqlDBHandler"><a href="#SqlDBHandler" class="headerlink" title="SqlDBHandler"></a>SqlDBHandler</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment">#創建資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(levelname)s : %(message)s'</span>, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDB</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">            logging.info(path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">                os.mkdir(path)</span><br><span class="line">                logging.info(<span class="string">"mkdir "</span> + path +<span class="string">" successfully"</span>)</span><br><span class="line">            <span class="comment">#資料夾創建成功後連結資料庫</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.conn = sqlite3.connect(<span class="string">'C:\\ProgramData\\'</span> + folderName + <span class="string">'\\'</span> + databaseName + <span class="string">".sqlite"</span>)</span><br><span class="line">                self.c = self.conn.cursor()</span><br><span class="line">                logging.info(<span class="string">"Opened database successfully"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.warning(<span class="string">"Opened database Failed"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"mkdir Failed. Do you remember import os?"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createTable</span><span class="params">(self, tableName, tableStructure)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#Sql語法 建立表格,表格名 欄位名 欄位型別</span></span><br><span class="line">            <span class="comment">#執行Sql語法</span></span><br><span class="line">            self.c.execute(<span class="string">"CREATE TABLE "</span> + tableName + <span class="string">"("</span> + tableStructure + <span class="string">");"</span>)</span><br><span class="line">            logging.info(<span class="string">"Table created successfully"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.info(<span class="string">"CreateTable Error maybe database is exits!"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, tableName, tableFields, tableValue)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"INSERT INTO "</span> + tableName + <span class="string">" ("</span> + tableFields + <span class="string">") VALUES ("</span> + tableValue + <span class="string">")"</span></span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAll</span><span class="params">(self, tableName)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectByCondition</span><span class="params">(self, tableName, searchCondition)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" WHERE "</span> + searchCondition</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, updateCondition)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"UPDATE "</span> + tableName + <span class="string">" SET "</span> + recordToChange + <span class="string">" where "</span> + updateCondition</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, tableName, deleteCondition)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tableName <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> tableName != <span class="string">''</span>:</span><br><span class="line">            self.dbsql = <span class="string">"DELETE from "</span> + tableName + <span class="string">" where "</span> + deleteCondition</span><br><span class="line">            logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">            result = self.execSql(self.dbsql)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSql</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 執行sql語句 </span></span><br><span class="line">            self.c.execute(dbsql)</span><br><span class="line">        <span class="comment"># 進行資料庫語句的提交操作，不提交則無法生效，每次執行後都要提交</span></span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.info(<span class="string">"Operate Dababase Error !"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSqlWithReturn</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor = self.conn.execute(dbsql)</span><br><span class="line">            <span class="comment"># 用一個變數來接受fetchall（）查詢所有這個函式返回的值。,fetchone ()是查詢一個，只有一個結果和fetchall有區別</span></span><br><span class="line">            <span class="keyword">return</span> self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"select Record Error !"</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 關閉遊標</span></span><br><span class="line">            self.c.close()</span><br><span class="line">            <span class="comment"># 關閉資料庫連結,在資料庫操作完成後需要把游標與連結都關掉</span></span><br><span class="line">            self.conn.close()</span><br><span class="line">            logging.info(<span class="string">"Closed database successfully"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"Closed database Failed"</span>)</span><br></pre></td></tr></table></figure><h2 id="檔案放置架構"><a href="#檔案放置架構" class="headerlink" title="檔案放置架構"></a>檔案放置架構</h2><pre><code>D:\Application├── modules│   └── SqlDBHandler.py|        └── SqlDBHandler.py└── modulesTester    └── SqlDBHandlerTester.py        └── SqlDBHandlerTester.py</code></pre><h2 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"D:\Application"</span>)</span><br><span class="line"><span class="keyword">from</span> modules.SqlDBHandler.SqlDBHandler <span class="keyword">import</span> SqlDB</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#填寫欲創建的資料庫相關資料</span></span><br><span class="line">    folderName = <span class="string">"DBHandler"</span></span><br><span class="line">    databaseName = <span class="string">"ExchangeHelper"</span></span><br><span class="line">    tableName = <span class="string">"TARGET"</span></span><br><span class="line">    fieldsName = <span class="string">"幣別, 目標匯率, 爬取日期, 今日是否觸價, 是否爬取"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#implement SqlDB 傳入(資料夾名稱, 資料庫名稱)</span></span><br><span class="line">    db = SqlDB( folderName, databaseName )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#=====SqlDB CRUD=====</span></span><br><span class="line">    <span class="comment">#1.建立資料表 傳入(資料表格名稱, 表格結構)</span></span><br><span class="line">    db.createTable( tableName, </span><br><span class="line">                    <span class="string">'''</span></span><br><span class="line"><span class="string">                    '幣別'          TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                    '目標匯率'       INT     NOT NULL,</span></span><br><span class="line"><span class="string">                    '爬取日期'       DATE    NOT NULL,</span></span><br><span class="line"><span class="string">                    '今日是否觸價'   TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                    '是否爬取'       TEXT    NOT NULL</span></span><br><span class="line"><span class="string">                    '''</span></span><br><span class="line">                  )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#2.insert用法: 插入資料 傳入(資料表格名稱, 欄位名稱, 資料)</span></span><br><span class="line">    <span class="comment">#導入datetime取得時間</span></span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">    date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    tableValue = <span class="string">"'美金 (USD)', 30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y'"</span></span><br><span class="line">    db.insert( tableName, fieldsName, tableValue)</span><br><span class="line">    tableValue = <span class="string">"'日圓 (JPY)', 0.30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y'"</span></span><br><span class="line">    db.insert( tableName, fieldsName, tableValue)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#3.selectAll用法: 取得整個資料表格資料</span></span><br><span class="line">    dataAll = db.selectAll( tableName )</span><br><span class="line">    <span class="comment">#逐一列出資料</span></span><br><span class="line">    print( <span class="string">"Original data: SELECT * FROM TARGET"</span> )</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dataAll:</span><br><span class="line">        print( c )</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#4.selectByCondition用法: 取得資料表格特定條件資料</span></span><br><span class="line">    searchCondition = <span class="string">'"幣別" = "日圓 (JPY)"'</span></span><br><span class="line">    data = db.selectByCondition( tableName, searchCondition )</span><br><span class="line">    print( <span class="string">"selectByCondition: SELECT * FROM TARGET WHERE \"幣別\" = \"日圓 (JPY)\""</span> )</span><br><span class="line">    print( data )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#5.update用法: </span></span><br><span class="line">    recordToChange = <span class="string">'"目標匯率" = 29'</span></span><br><span class="line">    updateCondition= <span class="string">'"幣別" = "美金 (USD)"'</span></span><br><span class="line">    db.update( tableName, recordToChange, updateCondition )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#6.delete用法:</span></span><br><span class="line">    deleteCondition = <span class="string">'"幣別" = "日圓 (JPY)"'</span></span><br><span class="line">    db.delete( tableName, deleteCondition )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#再次讀取整個表格資料查看修改後的結果</span></span><br><span class="line">    dataAll = db.selectAll( tableName )</span><br><span class="line">    <span class="comment">#逐一列出資料</span></span><br><span class="line">    print( <span class="string">"After update/delete data"</span> )</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dataAll:</span><br><span class="line">        print( c )</span><br><span class="line">        <span class="comment">#陣列方式可以分別取得每筆資料的各個欄位值</span></span><br><span class="line">        <span class="comment">#c[0]: 美金 (USD)</span></span><br><span class="line">        <span class="comment">#c[1]: 29</span></span><br><span class="line">        <span class="comment">#c[2]: 2019-06-23</span></span><br><span class="line">        <span class="comment">#c[3]: N</span></span><br><span class="line">        <span class="comment">#c[4]: Y</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#7.關閉cursor, 關閉資料庫連結</span></span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><h2 id="輸出結果"><a href="#輸出結果" class="headerlink" title="輸出結果"></a>輸出結果</h2><p><img src="https://i.imgur.com/8wqhnDQ.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://kaiching.org/pydoing/py/python-library-sqlite3.html" target="_blank" rel="noopener">Python 速查手冊- 12.6 資料庫sqlite3 - 程式語言教學誌</a><br><a href="https://www.google.com/search?ei=UeUOXdKzEY7_0gSsx7qgDg&amp;q=python+sqlite3+&amp;oq=python+sqlite3+&amp;gs_l=psy-ab.3..0l10.5367.9993..10405...7.0..0.74.869.15......0....1..gws-wiz.......0i13j0i10.ZZKlmg1fkvQ" target="_blank" rel="noopener">透過Python 將資料存入SQLite 教學– 小魚的資訊技術學習路– Medium</a></p><p>本篇以下列網站為範本做修改<br><a href="http://qinfei.glrsmart.com/2017/03/08/python-sqlite3-shu-ju-ku-cao-zuo-li-cheng/" target="_blank" rel="noopener">Python Sqlite3 数据库操作例程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在程式的執行時，我們可以產出一些參數在資料庫中讓程式一開始有預設行為，也便於後續更改行為時不用改程式碼僅需更改資料庫參數，這一篇紀錄使用py
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="sqlite3" scheme="https://teddybearfp.github.io/tags/sqlite3/"/>
    
  </entry>
  
  <entry>
    <title>Python 匯率觸價通知小幫手</title>
    <link href="https://teddybearfp.github.io/2019/06/21/Python-%E5%8C%AF%E7%8E%87%E8%A7%B8%E5%83%B9%E9%80%9A%E7%9F%A5%E5%B0%8F%E5%B9%AB%E6%89%8B/"/>
    <id>https://teddybearfp.github.io/2019/06/21/Python-匯率觸價通知小幫手/</id>
    <published>2019-06-21T04:05:16.000Z</published>
    <updated>2019-07-10T13:16:18.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子難得出國郊遊，遇到了美中貿易大戰，日幣瘋狂漲漲漲一路飆到0.29多，我一整個傻眼貓咪，少吃好幾碗拉麵的我就決定了以後有匯率觸價就在低點購入一些，這篇記錄我編寫的匯率觸價通知小幫手，當匯率達到你心中可接受的範圍後便會寄信到你的email信箱中，告訴你484該入手各種幣別了</p><h2 id="匯率小幫手介紹"><a href="#匯率小幫手介紹" class="headerlink" title="匯率小幫手介紹"></a>匯率小幫手介紹</h2><p>這個小幫手在執行時會顯示台灣銀行的匯率，接著你可以輸入心中能接受的日幣價位，例如0.29那麼當日幣低於0.29時便會寄信給你，有了這小工具對於要出國的人或是投資的人都是個不錯的小幫手!<br>後續可能新增走勢圖之類</p><p>收到信件時的訊息截圖</p><p><img src="https://i.imgur.com/a3hJSkq.png" alt=""></p><h2 id="程式流程"><a href="#程式流程" class="headerlink" title="程式流程"></a>程式流程</h2><p>匯率小幫手程式流程大概是以下四個步驟</p><h3 id="導入TBLogger"><a href="#導入TBLogger" class="headerlink" title="導入TBLogger"></a>導入TBLogger</h3><p>首先導入這個<a href="https://teddybearfp.github.io/2019/04/28/Python-logger/#more">TBLogger</a>是我另一篇文章介紹的Logger，是負責用來幫忙在程式開發時幫忙除錯與程式完成時輔助維護的好工具，在導入的同時會在”C:\ProgramData\ExchangeHelper”中建立資料夾並生成Log檔</p><h3 id="導入DBHandler"><a href="#導入DBHandler" class="headerlink" title="導入DBHandler"></a>導入DBHandler</h3><p>接著我們導入資料庫小幫手，一樣會生成在”C:\ProgramData\ExchangeHelper”中，內部會有些預設的參數，即使使用者要修改爬取的內容也不需要重新編寫程式碼，只要將資料庫中的值修改即可</p><h3 id="爬取台灣銀行資訊"><a href="#爬取台灣銀行資訊" class="headerlink" title="爬取台灣銀行資訊"></a>爬取台灣銀行資訊</h3><p>再來我們該進入這個匯率小幫手的核心囉，爬取台灣銀行的匯率資訊，爬到的表格進行資料清理變成我們要的資料</p><h3 id="資料比對並寄出Email"><a href="#資料比對並寄出Email" class="headerlink" title="資料比對並寄出Email"></a>資料比對並寄出Email</h3><p>最後我們讀取資料庫預設的值or使用者需要爬取的匯率去跟我們的爬到的資料比對，符合的就寄信通知給使用者，收到信後就大功告成啦!!!</p><h2 id="匯率小幫手實作"><a href="#匯率小幫手實作" class="headerlink" title="匯率小幫手實作"></a>匯率小幫手實作</h2><h3 id="TBLogger"><a href="#TBLogger" class="headerlink" title="TBLogger"></a>TBLogger</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBLog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">        <span class="comment">#如果資料夾不存在則創建資料夾</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">            os.mkdir(path)</span><br><span class="line">        self.user = getpass.getuser()</span><br><span class="line">        self.logger = logging.getLogger(self.user)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        format = <span class="string">'%(asctime)s [%(threadName)s][%(levelname)s] %(name)s : %(funcName)s() %(message)s'</span></span><br><span class="line">        self.formatter = logging.Formatter(format)</span><br><span class="line">        self.streamhandler = logging.StreamHandler()</span><br><span class="line">        self.streamhandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.streamhandler)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetPath</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        logfile = path + self.user + <span class="string">'.log'</span></span><br><span class="line">        self.filehandler = logging.FileHandler(logfile)</span><br><span class="line">        self.filehandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.filehandler)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.error(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, level, msg)</span>:</span></span><br><span class="line">        self.logger.log(level, msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLevel</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disable</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.disable(<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">RemoveHandle</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.logger.removeHandler(self.streamhandler)</span><br><span class="line">        self.logger.removeHandler(self.filehandler)</span><br><span class="line">        self.streamhandler.flush()</span><br><span class="line">        self.filehandler.flush()</span><br><span class="line">        self.streamhandler.close()</span><br><span class="line">        self.filehandler.close()</span><br></pre></td></tr></table></figure><h4 id="TBLog-截圖"><a href="#TBLog-截圖" class="headerlink" title="TBLog 截圖"></a>TBLog 截圖</h4><p><img src="https://i.imgur.com/ooEPQuH.png" alt=""></p><h3 id="DBHandler"><a href="#DBHandler" class="headerlink" title="DBHandler"></a>DBHandler</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment">#創建資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(levelname)s : %(message)s'</span>, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDB</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fileName, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = <span class="string">"C:\\ProgramData\\"</span> + fileName</span><br><span class="line">            logging.info(path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">                os.mkdir(path)</span><br><span class="line">                logging.info(<span class="string">"mkdir "</span> + path +<span class="string">" successfully"</span>)</span><br><span class="line">            <span class="comment">#資料夾創建成功後連結資料庫</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.conn = sqlite3.connect(<span class="string">'C:\\ProgramData\\'</span> + fileName + <span class="string">'\\'</span> + databaseName + <span class="string">".sqlite"</span>)</span><br><span class="line">                self.c = self.conn.cursor()</span><br><span class="line">                logging.info(<span class="string">"Opened database successfully"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.warning(<span class="string">"Opened database Failed"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"mkdir Failed. Do you remember import os?"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 關閉遊標</span></span><br><span class="line">            self.c.close()</span><br><span class="line">            <span class="comment"># 關閉資料庫連結,在資料庫操作完成後需要把游標與連結都關掉</span></span><br><span class="line">            self.conn.close()</span><br><span class="line">            logging.info(<span class="string">"Closed database successfully"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"Closed database Failed"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createTable</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#獲得游標cursor</span></span><br><span class="line">            self.c = self.conn.cursor()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#Sql語法 建立表格,表格名 欄位名 欄位型別</span></span><br><span class="line">                <span class="comment">#執行Sql語法</span></span><br><span class="line">                self.c.execute(<span class="string">'''CREATE TABLE TARGET</span></span><br><span class="line"><span class="string">                       ('幣別'           TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                        '目標匯率'       INT     NOT NULL,</span></span><br><span class="line"><span class="string">                        '爬取日期'       DATE    NOT NULL,</span></span><br><span class="line"><span class="string">                        '今日是否觸價'   TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                        '是否爬取'       TEXT    NOT NULL);'''</span>)</span><br><span class="line">                logging.info(<span class="string">"Table created successfully"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.info(<span class="string">"CreateTable Error maybe database is exits!"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"You need to createDatabase and then createTable."</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, tableName, tableStrcture, tableValue)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"INSERT INTO "</span> + tableName + <span class="string">" "</span> + tableStrcture + <span class="string">" VALUES "</span> + tableValue</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSql</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">        <span class="comment"># 執行sql語句 </span></span><br><span class="line">        self.c.execute(dbsql)</span><br><span class="line">        <span class="comment"># 進行資料庫語句的提交操作，不提交則無法生效，每次執行後都要提交</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line">        <span class="comment"># return 1</span></span><br><span class="line">        <span class="comment"># except:</span></span><br><span class="line">            <span class="comment"># logging.info("Operate Dababase Error !")</span></span><br><span class="line">            <span class="comment"># return 0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAll</span><span class="params">(self, tableName)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        record = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> record</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOne</span><span class="params">(self, tableName, racordToSearch)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" WHERE "</span> + racordToSearch</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        record = self.execSqlWithReturn(self.dbsql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, racordToSearch)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"UPDATE "</span> + tableName + <span class="string">" SET "</span> + recordToChange + <span class="string">" where "</span> + racordToSearch</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, tableName, recordToDelete)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tableName <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> tableName != <span class="string">''</span>:</span><br><span class="line">            self.dbsql = <span class="string">"DELETE from "</span> + tableName + <span class="string">" where "</span> + recordToDelete</span><br><span class="line">            logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">            result = self.execSql(self.dbsql)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSqlWithReturn</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor = self.conn.execute(dbsql)</span><br><span class="line">            <span class="comment"># 用一個變數來接受fetchall（）查詢所有這個函式返回的值。,fetchone ()是查詢一個，只有一個結果和fetchall有區別</span></span><br><span class="line">            <span class="keyword">return</span> self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"select Record Error !"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="創建的Database截圖"><a href="#創建的Database截圖" class="headerlink" title="創建的Database截圖"></a>創建的Database截圖</h4><p>程式執行時在”C:\ProgramData\ExchangeHelper”中創建這些資料庫<br><img src="https://i.imgur.com/aaxAZbN.png" alt=""></p><h3 id="ExchangeHelper"><a href="#ExchangeHelper" class="headerlink" title="ExchangeHelper"></a>ExchangeHelper</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用pandas取得dataframe</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#取得當下時間</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="comment">#用python的sqlite3做資料庫存取</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="comment">#發送信件</span></span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="comment">#創資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#忽略警告</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"><span class="comment">#導入TBLogger</span></span><br><span class="line"><span class="keyword">from</span> TBLogger <span class="keyword">import</span> TBLog</span><br><span class="line"><span class="keyword">from</span> DBHandler <span class="keyword">import</span> SqlDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBHandler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, databaseFilePath, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#implement SqlDB</span></span><br><span class="line">        <span class="comment">#創建資料庫檔案</span></span><br><span class="line">        self.db = SqlDB(databaseFilePath, databaseName)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeTarget</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#如果資料庫表格未被創建則創建資料庫檔案內的表格</span></span><br><span class="line">        <span class="keyword">if</span>( self.db.createTable() ):</span><br><span class="line">            <span class="comment">#表格名稱</span></span><br><span class="line">            tableName = <span class="string">"TARGET"</span></span><br><span class="line">            <span class="comment">#表格欄位名稱</span></span><br><span class="line">            tableStrcture = <span class="string">"(幣別, 目標匯率, 爬取日期, 今日是否觸價, 是否爬取)"</span></span><br><span class="line">            <span class="comment">#取得日期</span></span><br><span class="line">            date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">            <span class="comment">#表格內容,日期要以"字串"形式送入Date中</span></span><br><span class="line">            tableValue = <span class="string">"('美金 (USD)', 30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y')"</span></span><br><span class="line">            <span class="comment">#插入表格中(表格名稱, 表格欄位名稱, 表格內容)</span></span><br><span class="line">            self.db.insert( tableName, tableStrcture, tableValue )</span><br><span class="line">            tableValue = <span class="string">"('日圓 (JPY)', 0.30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y')"</span></span><br><span class="line">            self.db.insert( tableName, tableStrcture, tableValue )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readTarget</span><span class="params">(self)</span>:</span></span><br><span class="line">        tableName = <span class="string">"TARGET"</span></span><br><span class="line">        row = self.db.selectAll(tableName)</span><br><span class="line">        targetCurrency = []</span><br><span class="line">        targetPrice = []</span><br><span class="line">        crawlDate = []</span><br><span class="line">        isTodayTouched = []</span><br><span class="line">        isNeeded = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> row:</span><br><span class="line">            <span class="keyword">if</span> ( c[<span class="number">4</span>].upper() == <span class="string">'Y'</span> ):</span><br><span class="line">                targetCurrency.append(c[<span class="number">0</span>])</span><br><span class="line">                targetPrice.append(c[<span class="number">1</span>])</span><br><span class="line">                crawlDate.append(c[<span class="number">2</span>])</span><br><span class="line">                isTodayTouched.append(c[<span class="number">3</span>])</span><br><span class="line">                isNeeded.append(c[<span class="number">4</span>])</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> targetCurrency,targetPrice,crawlDate,isTodayTouched</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, racordToSearch)</span>:</span></span><br><span class="line">        self.db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span>      </span><br><span class="line">        self.db.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#匯率小幫手</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExchangeRateHelper</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.exchangeRate = <span class="string">""</span></span><br><span class="line">        self.sender = <span class="string">""</span></span><br><span class="line">        self.receiver=<span class="string">""</span></span><br><span class="line">        self.msg = MIMEMultipart()</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#爬取匯率表格</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CrawlExchangeRate</span><span class="params">(self, targetWeb)</span>:</span></span><br><span class="line">        <span class="comment">#臺灣銀行牌告匯率表格</span></span><br><span class="line">        dfs = pd.read_html(targetWeb)</span><br><span class="line">        self.exchangeRate = dfs[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#取得row全部19種幣別、5個col</span></span><br><span class="line">        self.exchangeRate = self.exchangeRate.ix[:,<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#設定col標頭</span></span><br><span class="line">        self.exchangeRate.columns = [<span class="string">u'幣別'</span>, <span class="string">u'現金匯率-本行買入'</span>, <span class="string">u'現金匯率-本行賣出'</span>, <span class="string">u'即期匯率-本行買入'</span>, <span class="string">u'即期匯率-本行賣出'</span>]</span><br><span class="line">        <span class="comment">#將  "美金 (USD)  美金 (USD)"  切成  "美金 (USD)", 使用str函式相關時要先.str</span></span><br><span class="line">        self.exchangeRate[<span class="string">u'幣別'</span>] = self.exchangeRate[<span class="string">u'幣別'</span>].str.split(<span class="string">' '</span>,<span class="number">2</span>).str[<span class="number">2</span>].str.strip(<span class="string">" "</span>)</span><br><span class="line">        <span class="comment">#exchangeRate加入時間欄位格式化時間為年-月-日 時:分:秒</span></span><br><span class="line">        self.exchangeRate[<span class="string">'資料截取時間'</span>] = datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#將時間欄位轉換成時間格式存放</span></span><br><span class="line">        self.exchangeRate[<span class="string">'資料截取時間'</span>] = pd.to_datetime(self.exchangeRate[<span class="string">'資料截取時間'</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#寫入資料庫</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            self.exchangeRate.to_sql(<span class="string">'exchangeRate'</span>, con = db, if_exists=<span class="string">'replace'</span>, index = <span class="keyword">False</span>) <span class="comment">#增加到資料後方if_exists='append', 整份覆寫if_exists='replace'</span></span><br><span class="line">        <span class="comment">#讀取資料庫</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            df = pd.read_sql_query(<span class="string">'select * from exchangeRate'</span>, con = db)</span><br><span class="line">            </span><br><span class="line">        db.close()</span><br><span class="line">        print(df)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ExchangeRateNotice</span><span class="params">(self, targetCurrency, targetPrice)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            <span class="comment">#取得幣別為"日幣"</span></span><br><span class="line">            df = pd.read_sql_query(<span class="string">r'select * from exchangeRate where "幣別" = "'</span> + targetCurrency + <span class="string">'" order by "資料截取時間" limit 1'</span></span><br><span class="line">                                   , con = db)</span><br><span class="line">        <span class="keyword">if</span>( float(df[<span class="string">u'現金匯率-本行賣出'</span>]) &lt;= targetPrice ):</span><br><span class="line">            <span class="comment">#初始化</span></span><br><span class="line">            self.msg = MIMEMultipart()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#設定寄收信箱帳號</span></span><br><span class="line">            self.senderName = <span class="string">"匯率小幫手"</span></span><br><span class="line">            self.sender = <span class="string">'寄件者信箱@gmail.com'</span></span><br><span class="line">            self.senderPassword = <span class="string">'寄件者密碼'</span></span><br><span class="line">            self.receiver   = <span class="string">'收件者信箱@gmail.com'</span></span><br><span class="line">            self.msg[<span class="string">'From'</span>] = self.senderName</span><br><span class="line">            self.msg[<span class="string">'To'</span>]   = self.receiver</span><br><span class="line">            self.msg[<span class="string">'Subject'</span>] = <span class="string">'[匯率觸價通知]'</span></span><br><span class="line">            </span><br><span class="line">            self.msg.attach(MIMEText(df.to_html(index=<span class="keyword">False</span>), <span class="string">'html'</span>))</span><br><span class="line">            self.msg.attach(MIMEText(<span class="string">"匯率觸價 484該買"</span> + targetCurrency + <span class="string">"啦!!!"</span>, <span class="string">'plain'</span>))</span><br><span class="line">            server = smtplib.SMTP(<span class="string">'smtp.gmail.com'</span>, <span class="number">587</span>)</span><br><span class="line">            server.starttls()</span><br><span class="line">            server.login(self.sender, self.senderPassword)</span><br><span class="line">            text = self.msg.as_string()</span><br><span class="line">            server.sendmail(self.sender, self.receiver, text)</span><br><span class="line">            server.quit()</span><br><span class="line">            tbLog.info(targetCurrency + <span class="string">"匯率觸價 Email 已寄出!"</span>)</span><br><span class="line">            databaseFilePath = <span class="string">"ExchangeRateHelper"</span></span><br><span class="line">            databaseName = <span class="string">"target"</span></span><br><span class="line">            db = DBHandler(databaseFilePath, databaseName)</span><br><span class="line">            tableName = <span class="string">"TARGET"</span></span><br><span class="line">            recordToChange = <span class="string">'"今日是否觸價" = "Y"'</span></span><br><span class="line">            racordToSearch = <span class="string">'"幣別" = '</span> + <span class="string">'"'</span> + targetCurrency + <span class="string">'"'</span></span><br><span class="line">            db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tbLog.info(targetCurrency + <span class="string">"換匯再等等吧!"</span>)</span><br><span class="line">        </span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tbLog = TBLog(<span class="string">"ExchangeRateHelper"</span>)</span><br><span class="line">    tbLog.SetPath(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\'</span>)</span><br><span class="line">    tbLog.info(<span class="string">"***** ExchangeRateHelper Started *****"</span>)</span><br><span class="line">    exchangeRateHelper = ExchangeRateHelper()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果不存在檔案則創建爬取幣別與匯率目標的資料庫</span></span><br><span class="line">    databaseFilePath = <span class="string">"ExchangeRateHelper"</span></span><br><span class="line">    databaseName = <span class="string">"target"</span></span><br><span class="line">    db = DBHandler(databaseFilePath, databaseName)</span><br><span class="line">    db.makeTarget()</span><br><span class="line">    targetCurrency = []</span><br><span class="line">    targetPrice = []</span><br><span class="line">    crawlDate = []</span><br><span class="line">    isTodayTouched = []</span><br><span class="line">    isNeeded = []</span><br><span class="line">    targetCurrency, targetPrice, crawlDate, isTodayTouched= db.readTarget()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#測試換日用</span></span><br><span class="line">    <span class="comment">#date = (datetime.now()+ timedelta(days=2)).strftime('%Y-%m-%d') </span></span><br><span class="line">    date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#爬取台灣銀行匯率</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> targetCurrency:</span><br><span class="line">        tbLog.info(<span class="string">"target is null, please check your database and what you want to observe set Y."</span>)</span><br><span class="line">    <span class="keyword">else</span>:     </span><br><span class="line">        exchangeRateHelper.CrawlExchangeRate(<span class="string">'http://rate.bot.com.tw/xrt?Lang=zh-TW'</span>)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(targetCurrency):</span><br><span class="line">            <span class="keyword">if</span>( crawlDate[i] != date ):</span><br><span class="line">                tableName = <span class="string">"TARGET"</span></span><br><span class="line">                recordToChange = <span class="string">'"今日是否觸價" = "N"'</span></span><br><span class="line">                racordToSearch = <span class="string">'"幣別" = '</span> + <span class="string">'"'</span> + targetCurrency[i] + <span class="string">'"'</span></span><br><span class="line">                db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">            <span class="keyword">if</span>( crawlDate[i] == date <span class="keyword">and</span> isTodayTouched[i] == <span class="string">'Y'</span>):</span><br><span class="line">                tbLog.info(targetCurrency[i] + <span class="string">"匯率觸價, 今日已通知."</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exchangeRateHelper.ExchangeRateNotice( targetCurrency[i], targetPrice[i] )</span><br><span class="line">            </span><br><span class="line">    tbLog.info(<span class="string">"***** ExchangeRateHelper  Closed *****"</span>)</span><br><span class="line">    tbLog.RemoveHandle()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><h2 id="資料庫的設定"><a href="#資料庫的設定" class="headerlink" title="資料庫的設定"></a>資料庫的設定</h2><p>在程式第一次執行時，會自動產出預設的資料庫檔案在”C:\ProgramData\ExchangeHelper”資料夾中，可以下載sqliteStudio或是DBsqlite查看其內容，若是某個幣別不想爬取則把Y改成N反之從N改Y</p><h3 id="目標資料庫內容截圖"><a href="#目標資料庫內容截圖" class="headerlink" title="目標資料庫內容截圖"></a>目標資料庫內容截圖</h3><p><img src="https://i.imgur.com/p08582O.png" alt=""></p><h3 id="僅有唯讀權限"><a href="#僅有唯讀權限" class="headerlink" title="僅有唯讀權限"></a>僅有唯讀權限</h3><p>在更改資料庫的時候若出現權限不足，僅有唯讀權限時</p><pre><code>針對該資料庫右鍵-&gt;內容-&gt;安全性-&gt;編輯-&gt;Users-&gt;將寫入打勾並確定</code></pre><p>更改安全性設定後的資料庫便可以改寫囉!</p><h2 id="工作排程器"><a href="#工作排程器" class="headerlink" title="工作排程器"></a>工作排程器</h2><p>將匯率小幫手加到電腦的工作排程器中，可以在電腦啟動的時候在排定的時間執行程式幫忙監看匯率，例如:每隔半小時執行一次或是想要執行的頻率或特定時間點執行</p><p>可以看我另一篇編寫的<a href="https://teddybearfp.github.io/2019/06/20/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/">工作排程器</a> 了解如何讓我們的匯率小幫手默默為你查看匯率</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.youtube.com/watch?v=Wbk9hxntMjY" target="_blank" rel="noopener">[爬蟲實戰] 如何設定工作排程自動將牌告匯率存進資料庫之中?</a><br><a href="http://qinfei.glrsmart.com/2017/03/08/python-sqlite3-shu-ju-ku-cao-zuo-li-cheng/" target="_blank" rel="noopener">Python Sqlite3 数据库操作例程</a><br><a href="https://kaiching.org/pydoing/py/python-library-sqlite3.html" target="_blank" rel="noopener">Python 速查手冊- 12.6 資料庫sqlite3 - 程式語言教學誌</a><br><a href="https://www.largitdata.com/course/81/" target="_blank" rel="noopener">[爬蟲實戰] 如何撰寫Python爬蟲抓取台灣銀行的牌告匯率? - 大數學堂</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前陣子難得出國郊遊，遇到了美中貿易大戰，日幣瘋狂漲漲漲一路飆到0.29多，我一整個傻眼貓咪，少吃好幾碗拉麵的我就決定了以後有匯率觸價就在低點
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="sqlite3" scheme="https://teddybearfp.github.io/tags/sqlite3/"/>
    
      <category term="工作排程器" scheme="https://teddybearfp.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/"/>
    
      <category term="email" scheme="https://teddybearfp.github.io/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>工作排程器</title>
    <link href="https://teddybearfp.github.io/2019/06/20/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/"/>
    <id>https://teddybearfp.github.io/2019/06/20/工作排程器/</id>
    <published>2019-06-20T04:05:16.000Z</published>
    <updated>2019-07-05T14:26:19.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作排程器可以將我們寫好的程式，在特定時間或是規律的日復一日執行著，例如:網路爬蟲、或是一些重複性的工作內容我們就藉由工作排程器執行我們的程式進而達到目的</p><p>但是工作排程器需要開啟電腦才會在背景默默運行，而不像我之前編寫的Linebot<a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">[Python 如何打造專屬的LineBot呢]</a>或是網頁直接架在server上無時無刻的可被喚醒或是持續運作著</p><p>那麼這次主要會紀錄這一篇工作排程器是因為另一篇<a href="https://teddybearfp.github.io/2019/06/21/python-%E5%8C%AF%E7%8E%87%E8%A7%B8%E5%83%B9%E9%80%9A%E7%9F%A5%E5%B0%8F%E5%B9%AB%E6%89%8B/#more">Python 匯率觸價通知小幫手</a>純粹想做幾個想法的結合的順便當作練習</p><h2 id="工作排程器"><a href="#工作排程器" class="headerlink" title="工作排程器"></a>工作排程器</h2><p>將寫好的程式加到電腦的工作排程器中，可以在電腦啟動的時候在排定的時間執行程式幫忙監看匯率，例如:每隔半小時執行一次或是想要執行的頻率或特定時間點</p><h3 id="開啟工作排程器"><a href="#開啟工作排程器" class="headerlink" title="開啟工作排程器"></a>開啟工作排程器</h3><p>首先在windows搜尋內輸入排程便會找到工作排程器</p><h3 id="建立工作"><a href="#建立工作" class="headerlink" title="建立工作"></a>建立工作</h3><p>開啟工作排程器接著在右邊動作欄位中選建立工作</p><p><img src="https://i.imgur.com/38Nt4lU.png" alt=""></p><h4 id="欄位-一般"><a href="#欄位-一般" class="headerlink" title="欄位:一般"></a>欄位:一般</h4><p>一般欄位輸入工作名稱例如:匯率小幫手，接著勾選”不論使用者登入與否均執行”、”以最高權限執行並”設定選擇Windows 10 or 你的作業系統</p><p><img src="https://i.imgur.com/Vf9R2qE.png" alt=""></p><h4 id="欄位-觸發程序"><a href="#欄位-觸發程序" class="headerlink" title="欄位:觸發程序"></a>欄位:觸發程序</h4><p>這邊新增你想要匯率小幫手的執行時間與頻率</p><p><img src="https://i.imgur.com/AJO1oiH.png" alt=""></p><h4 id="欄位-動作"><a href="#欄位-動作" class="headerlink" title="欄位:動作"></a>欄位:動作</h4><p>新增動作時選擇啟動程式<br>程式或指令碼輸入: python<br>新增引數: 完整檔案位置<br>並按下確認</p><p>例如:<br>程式或指令碼: </p><pre><code>python</code></pre><p>新增引數:</p><pre><code>D:\Application\_ExchangeRateHelper\ExchangeRateHelper.py</code></pre><p>那麼他就會用cmd 下python ExchangeRateHelper.py的動作</p><p><img src="https://i.imgur.com/k5xGX9Q.png" alt=""></p><h4 id="欄位-條件"><a href="#欄位-條件" class="headerlink" title="欄位:條件"></a>欄位:條件</h4><p>這部分建議把”只有在電腦是使用AC電源時才啟動這個工作”取消</p><p><img src="https://i.imgur.com/LW815Cv.png" alt=""></p><h4 id="欄位-歷程紀錄"><a href="#欄位-歷程紀錄" class="headerlink" title="欄位:歷程紀錄"></a>欄位:歷程紀錄</h4><p>這邊可以查看工作執行的歷史紀錄<br>若是無法查看寫已停用的話在工作排程器左邊欄位”工作排程器程式庫”點擊右鍵”啟用所有工作歷程紀錄”</p><h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p><img src="https://i.imgur.com/00uhqH6.png" alt=""></p><h3 id="可能會遇到的問題"><a href="#可能會遇到的問題" class="headerlink" title="可能會遇到的問題"></a>可能會遇到的問題</h3><p>一切都設定好了為什麼時間到沒有動作呢?</p><p>可以至你的工作排程中點選右鍵-&gt;內容-&gt;條件<br>看看電源選項是否勾選了”只有在電腦是使用AC電源時才啟動這個工作”<br>若是勾選在沒接Adapter的時候到指定時間就不會執行囉<br>所以解決辦法就是取消勾選這個項目</p><p><img src="https://i.imgur.com/LW815Cv.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工作排程器可以將我們寫好的程式，在特定時間或是規律的日復一日執行著，例如:網路爬蟲、或是一些重複性的工作內容我們就藉由工作排程器執行我們的程
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="工作排程器" scheme="https://teddybearfp.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>LLVM Coding rule小幫手</title>
    <link href="https://teddybearfp.github.io/2019/06/17/LLVM-Coding-rule%E5%B0%8F%E5%B9%AB%E6%89%8B/"/>
    <id>https://teddybearfp.github.io/2019/06/17/LLVM-Coding-rule小幫手/</id>
    <published>2019-06-17T04:05:16.000Z</published>
    <updated>2019-07-05T14:21:01.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家一起共同開發專案時必須遵守團隊的coding rule，但是coding rule那麼多有些又跟平常的編寫習慣不同常常忘記，來看看怎麼用LLVM解決這個問題吧，這一篇記錄LLVM底層虛擬機器（Low Level Virtual Machine），LLVM是一個自由軟體專案，它是一種編譯器基礎設施，以C++寫成，包含一系列模組化的編譯器元件和工具鏈，用來開發編譯器前端和後端。</p><h2 id="下載LLVM"><a href="#下載LLVM" class="headerlink" title="下載LLVM"></a>下載LLVM</h2><p><a href="http://releases.llvm.org/download.html#8.0.0" target="_blank" rel="noopener">LLVM載點</a><br>載對應的環境位元數</p><p><a href="http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-apple-darwin.tar.xz" target="_blank" rel="noopener">macOS (.sig)</a><br><a href="http://releases.llvm.org/8.0.0/LLVM-8.0.0-win32.exe" target="_blank" rel="noopener">Windows (32-bit) (.sig)</a><br><a href="http://releases.llvm.org/8.0.0/LLVM-8.0.0-win64.exe" target="_blank" rel="noopener">Windows (64-bit) (.sig)</a> </p><h2 id="安裝LLVM"><a href="#安裝LLVM" class="headerlink" title="安裝LLVM"></a>安裝LLVM</h2><p>開啟LLVM-8.0.0-win64.exe安裝<br>一直按下一步</p><h2 id="設定LLVM"><a href="#設定LLVM" class="headerlink" title="設定LLVM"></a>設定LLVM</h2><p>安裝完成後，開啟Qt Creator<br>接著在上方Navigation bar中找尋</p><pre><code>Help -&gt; About Plugins -&gt; C++中的Beautiful(experimental)打勾Load</code></pre><p><img src="https://i.imgur.com/Yd0CkLy.png" alt=""></p><p>勾選完成後重開Qt Creator</p><p>在上方Navigation bar</p><pre><code>Tool -&gt; Options -&gt; Beautifier中 Clang Format設定ClangFormat command選擇&quot;C:\Program Files (x86)\LLVM\bin\clang-format.exe&quot;</code></pre><p><img src="https://i.imgur.com/T5FckqH.png" alt=""></p><p>接著並在Options中選擇Use customized style, 新增style<br>內容可以為如下</p><pre><code>BasedOnStyle: WebKitAlignTrailingComments: trueBinPackParameters: trueAlignEscapedNewlines: LeftBreakBeforeBraces: AllmanAllowShortIfStatementsOnASingleLine: trueIndentCaseLabels: trueSpaceAfterCStyleCast: trueSpacesInParentheses: trueSpacesInSquareBrackets: trueSpacesInContainerLiterals: trueSpaceBeforeAssignmentOperators: trueDerivePointerAlignment: truePointerAlignment: RightMaxEmptyLinesToKeep: 1</code></pre><h2 id="觸發LLVM"><a href="#觸發LLVM" class="headerlink" title="觸發LLVM"></a>觸發LLVM</h2><p>觸發LLVM分兩種一種是設為快捷鍵<br>一種是每當儲存時自動執行LLVM</p><h3 id="快捷鍵方式設定"><a href="#快捷鍵方式設定" class="headerlink" title="快捷鍵方式設定"></a>快捷鍵方式設定</h3><p>可以至Keyboard的地方找ClangFormat 設定FormatFile的快捷鍵</p><p><img src="https://i.imgur.com/MdWX3qI.png" alt=""></p><h3 id="儲存時自動執行設定"><a href="#儲存時自動執行設定" class="headerlink" title="儲存時自動執行設定"></a>儲存時自動執行設定</h3><p><img src="https://i.imgur.com/6G9YEsc.png" alt=""></p><p>以上步驟完成後即使coding rule忘記了，還是可以幫你自動遵守哦!</p><p>牛刀小試一下,不好的coding style經過LLVM後自動展開<br><img src="https://i.imgur.com/wjapLkh.png" alt=""></p><p><img src="https://i.imgur.com/CJzhKfI.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家一起共同開發專案時必須遵守團隊的coding rule，但是coding rule那麼多有些又跟平常的編寫習慣不同常常忘記，來看看怎麼用
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="LLVM" scheme="https://teddybearfp.github.io/tags/LLVM/"/>
    
  </entry>
  
  <entry>
    <title>Qt 取得螢幕寬高</title>
    <link href="https://teddybearfp.github.io/2019/05/29/Qt-%E5%8F%96%E5%BE%97%E8%9E%A2%E5%B9%95%E5%AF%AC%E9%AB%98/"/>
    <id>https://teddybearfp.github.io/2019/05/29/Qt-取得螢幕寬高/</id>
    <published>2019-05-29T02:05:16.000Z</published>
    <updated>2019-05-29T10:48:51.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>設計介面的時候，需要掌握螢幕寬高比較好做調整介面大小，這一篇記錄Qt在c++端與qml端分別怎麼取得螢幕寬高</p><h2 id="偵測螢幕寬高實作"><a href="#偵測螢幕寬高實作" class="headerlink" title="偵測螢幕寬高實作"></a>偵測螢幕寬高實作</h2><p><strong>我們以1920 * 1080 雙螢幕的環境去做以下螢幕偵測</strong></p><h3 id="qml端"><a href="#qml端" class="headerlink" title="qml端"></a>qml端</h3><p>設計UI時都要做個scale來適應各解析度與dpi，這樣在各個環境中都能呈現與開發時一樣的UI介面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">ApplicationWindow  &#123;</span><br><span class="line">    id:application</span><br><span class="line">    property double dpi: Screen.pixelDensity * <span class="number">25.4</span></span><br><span class="line">    property double dpiScale: dpi / <span class="number">72</span><span class="comment">//以dpi 72為base</span></span><br><span class="line">    property double width: Screen.width</span><br><span class="line">    property double height: Screen.height</span><br><span class="line">    property double widthScale: Screen.width / <span class="number">1920</span> <span class="comment">//以寬1920設計介面為base</span></span><br><span class="line">    property double heightScale: Screen.height / <span class="number">1080</span><span class="comment">//以高1080設計介面為base</span></span><br><span class="line">    property double whScale: (Screen.width / <span class="number">1920</span>) / dpiScale</span><br><span class="line">    </span><br><span class="line">    color: <span class="string">"transparent"</span> <span class="comment">//將背景的部分設為透明化</span></span><br><span class="line">    <span class="comment">//無框、置頂、不會取得Focus</span></span><br><span class="line">    flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鍵盤置中</span></span><br><span class="line">    title: qsTr(<span class="string">"Virtual Keyboard"</span>)</span><br><span class="line">    x: <span class="number">0</span></span><br><span class="line">    y: Screen.height - application.height</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: Screen.width</span><br><span class="line">    height: Screen.height / <span class="number">3</span> + ( <span class="number">75</span> * heightScale)</span><br><span class="line">    </span><br><span class="line">    Component.onCompleted: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen width:"</span>,Screen.width)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen height:"</span>,Screen.height)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen pixelDensity:"</span>,Screen.pixelDensity)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen dpi"</span>,Screen.pixelDensity * <span class="number">25.4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的值如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Screen width: <span class="number">1920</span></span><br><span class="line">Screen height: <span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//qml的pixelDensity取得到的值為每mm多少pixel</span></span><br><span class="line">Screen pixelDensity: <span class="number">2.8353435141139114</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//轉換成dpi的話要將mm轉成英吋 1inch = 2.54cm, 2.54cm = 25.4mm</span></span><br><span class="line"><span class="comment">//(所以 Screen pixelDensity * 25.4 = Screen dpi)</span></span><br><span class="line"><span class="comment">//dpi在變換螢幕解析度時不太會有變化，在更改螢幕上的文字極其他項目大小100%、125%、150%會有變化</span></span><br><span class="line"><span class="comment">//例如:125%時dpi可能會是72那麼在150%時可能為36所以要做大小轉換要乘上scale</span></span><br><span class="line">Screen dpi <span class="number">72.01772525849334</span></span><br></pre></td></tr></table></figure></p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDesktopWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QRect&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tester"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Tester::Tester()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> virtualWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> virtualHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> availableWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> availableHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> screenWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> screenHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    QDesktopWidget *deskWgt = QApplication::desktop();</span><br><span class="line">    <span class="keyword">if</span> (deskWgt) &#123;</span><br><span class="line">        virtualWidth = deskWgt-&gt;width();</span><br><span class="line">        virtualHeight = deskWgt-&gt;height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"virtual width:"</span> &lt;&lt; virtualWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; virtualHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        QRect availableRect = deskWgt-&gt;availableGeometry();</span><br><span class="line">        availableWidth = availableRect.width();</span><br><span class="line">        availableHeight = availableRect.height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"available width:"</span> &lt;&lt;availableWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; availableHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        QRect screenRect = deskWgt-&gt;screenGeometry();</span><br><span class="line">        screenWidth = screenRect.width();</span><br><span class="line">        screenHeight = screenRect.height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"screen width:"</span> &lt;&lt;screenWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; screenHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的值如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//virtual width會將雙螢幕的寬高加進去</span></span><br><span class="line"><span class="keyword">virtual</span> width:<span class="number">3840</span>,height:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//available width主畫面的寬高並且扣掉工具列</span></span><br><span class="line">available width:<span class="number">1920</span>,height:<span class="number">1032</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//screen width完整的主畫面的寬高不扣工具列</span></span><br><span class="line">screen width:<span class="number">1920</span>,height:<span class="number">1080</span></span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/ieearth/article/details/43669821" target="_blank" rel="noopener">【QT】在Qt中获取屏幕大小</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;設計介面的時候，需要掌握螢幕寬高比較好做調整介面大小，這一篇記錄Qt在c++端與qml端分別怎麼取得螢幕寬高&lt;/p&gt;
&lt;h2 id=&quot;偵測螢
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="螢幕寬高" scheme="https://teddybearfp.github.io/tags/%E8%9E%A2%E5%B9%95%E5%AF%AC%E9%AB%98/"/>
    
  </entry>
  
  <entry>
    <title>互斥鎖 (Mutex lock)</title>
    <link href="https://teddybearfp.github.io/2019/05/27/%E4%BA%92%E6%96%A5%E9%8E%96-Mutex-lock/"/>
    <id>https://teddybearfp.github.io/2019/05/27/互斥鎖-Mutex-lock/</id>
    <published>2019-05-27T02:05:16.000Z</published>
    <updated>2019-05-27T10:48:00.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mutex-lock實作"><a href="#Mutex-lock實作" class="headerlink" title="Mutex lock實作"></a>Mutex lock實作</h2><p>MutexTester.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TB_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TB_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MutexTester</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doThreadFuction</span><span class="params">()</span></span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex gMutex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TB</span></span></span><br></pre></td></tr></table></figure></p><p>MutexTester.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MutexTester::MutexTester()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MutexTester::doThreadFuction()</span><br><span class="line">&#123;</span><br><span class="line">    lock_guard&lt;mutex&gt; mLock( gMutex );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//doSomething...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mutex-lock實作&quot;&gt;&lt;a href=&quot;#Mutex-lock實作&quot; class=&quot;headerlink&quot; title=&quot;Mutex lock實作&quot;&gt;&lt;/a&gt;Mutex lock實作&lt;/h2&gt;&lt;p&gt;MutexTester.h&lt;br&gt;&lt;figure class
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="互斥鎖" scheme="https://teddybearfp.github.io/tags/%E4%BA%92%E6%96%A5%E9%8E%96/"/>
    
      <category term="Mutex lock" scheme="https://teddybearfp.github.io/tags/Mutex-lock/"/>
    
  </entry>
  
  <entry>
    <title>Qt SystemTray implement</title>
    <link href="https://teddybearfp.github.io/2019/05/25/Qt-SystemTray-implement/"/>
    <id>https://teddybearfp.github.io/2019/05/25/Qt-SystemTray-implement/</id>
    <published>2019-05-25T09:05:16.000Z</published>
    <updated>2019-07-05T14:22:25.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要實作常駐程式，讓程式不出現在工具列，而是將程式最小化到系統托盤中，並且點擊右鍵可以做喚醒(最大化)與關閉的動作，甚至用另一隻程式透過windows api開啟、最大化或關閉這個系統托盤中的程式，例如:編寫一個程式搭載了我另一篇編寫的虛擬鍵盤<a href="https://teddybearfp.github.io/2018/10/26/Qt-Virtual-Keyboard/">(Qt 如何製作Windows多國輸入法的虛擬鍵盤)</a>，那麼我們的虛擬鍵盤就可以將它編寫成常駐程式由主程式做控制，這篇記錄的是如何在Qt實作這個功能</p><p>先來看成果<br>我們的應用程式會在系統托盤出現<br><img src="https://i.imgur.com/TELnHNh.png" alt=""></p><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p>我們可以將SystemTray寫成一個class使用，與使用QSystemTrayIcon這個class在C++與qml達到系統托盤功能</p><h2 id="實作SystemTray"><a href="#實作SystemTray" class="headerlink" title="實作SystemTray"></a>實作SystemTray</h2><h3 id="MySystemTray-pro"><a href="#MySystemTray-pro" class="headerlink" title="MySystemTray.pro"></a>MySystemTray.pro</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATE = app</span><br><span class="line"> </span><br><span class="line">QT += qml quick widgets</span><br><span class="line"> </span><br><span class="line">SOURCES += main.cpp \</span><br><span class="line">    systemtray.cpp</span><br><span class="line"> </span><br><span class="line">RESOURCES += qml.qrc</span><br><span class="line"> </span><br><span class="line"># Additional <span class="keyword">import</span> path used to resolve QML modules in Qt Creator's code model</span><br><span class="line">QML_IMPORT_PATH =</span><br><span class="line"> </span><br><span class="line"># Default rules <span class="keyword">for</span> deployment.</span><br><span class="line">include(deployment.pri)</span><br><span class="line"> </span><br><span class="line">HEADERS += \</span><br><span class="line">    systemtray.h</span><br></pre></td></tr></table></figure><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;systemtray.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"> </span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// We declare and initialize the class object to work with system tray</span></span><br><span class="line">    SystemTray * systemTray = <span class="keyword">new</span> SystemTray();</span><br><span class="line">    QQmlContext * context = engine.rootContext();</span><br><span class="line">    <span class="comment">// Set access to an object of class properties in QML context</span></span><br><span class="line">    context-&gt;setContextProperty(<span class="string">"systemTray"</span>, systemTray);</span><br><span class="line"> </span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="systemtray-h"><a href="#systemtray-h" class="headerlink" title="systemtray.h"></a>systemtray.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SYSTEMTRAY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEMTRAY_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QAction&gt; //用來控制視窗與關閉程式</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt; //系統托盤功能核心</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//繼承QObject</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemTray</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">SystemTray</span><span class="params">(QObject *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//創建信號</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalIconActivated</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalShow</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalQuit</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">//slot會接收從系統托盤中點擊應用程式的事件信號</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">iconActivated</span><span class="params">(QSystemTrayIcon::ActivationReason reason)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideIconTray</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* Declare the object of future applications for the tray icon*/</span></span><br><span class="line">    QSystemTrayIcon *trayIcon;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SYSTEMTRAY_H</span></span></span><br></pre></td></tr></table></figure><h3 id="systemtray-cpp"><a href="#systemtray-cpp" class="headerlink" title="systemtray.cpp"></a>systemtray.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"systemtray.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenu&gt;</span></span></span><br><span class="line"> </span><br><span class="line">SystemTray::SystemTray(QObject *parent) : QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用QMenu創建擁有最大化與關閉程式兩個選項的菜單</span></span><br><span class="line">    QMenu *trayIconMenu = <span class="keyword">new</span> QMenu();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      QAction類別代表窗口的一個動作，這個動作可顯示在選單，也可在工具欄，</span></span><br><span class="line"><span class="comment">      當使用者點擊工具欄時做出反應，並且兩者所執行的動作一樣顯示的圖標也會同步，</span></span><br><span class="line"><span class="comment">      因此，Qt並沒有專門的選單類或工具欄類，只使用同樣的QAction類別，當我們把QAction對象添加到選單，就顯示成一個選單項，添加到工具欄，就顯示成一個工具按鈕。</span></span><br><span class="line"><span class="comment">      QAction包含了圖標、選單文字、快捷鍵、浮動幫助等等</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//創建開啟視窗QAction</span></span><br><span class="line">    QAction * viewWindow = <span class="keyword">new</span> QAction(trUtf8(<span class="string">"Open TB VirtualKeyboard"</span>), <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//創建結束程式QAction</span></span><br><span class="line">    QAction * quitAction = <span class="keyword">new</span> QAction(trUtf8(<span class="string">"Quit"</span>), <span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line">    viewWindow-&gt;setIcon(QIcon(<span class="string">":/Image/launch.png"</span>));</span><br><span class="line">    quitAction-&gt;setIcon(QIcon(<span class="string">":/Image/close.png"</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//連結信號 操作Menu上的項目時給予Qml適當的信號</span></span><br><span class="line">    connect(viewWindow, &amp;QAction::triggered, <span class="keyword">this</span>, &amp;SystemTray::signalShow);</span><br><span class="line">    connect(quitAction, &amp;QAction::triggered, <span class="keyword">this</span>, &amp;SystemTray::signalQuit);</span><br><span class="line"> </span><br><span class="line">    trayIconMenu-&gt;addAction(viewWindow);</span><br><span class="line">    trayIconMenu-&gt;addAction(quitAction);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//初始化托盤圖標，圖標集，然後指定工具提示</span></span><br><span class="line">    trayIcon = <span class="keyword">new</span> QSystemTrayIcon();</span><br><span class="line">    trayIcon-&gt;setContextMenu(trayIconMenu);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      QIcon除了寫絕對位置外亦可將圖片放置與qrc.qml的相對位置中</span></span><br><span class="line"><span class="comment">      例如:放在qrc.qml檔案旁的Image資料夾中檔名為keyboard.png</span></span><br><span class="line"><span class="comment">      並且在專案中找到qrc點擊右鍵選擇open with-&gt;open plain text將相對位置加入檔案中</span></span><br><span class="line"><span class="comment">      &lt;file&gt;Image/keyboard.png&lt;/file&gt;</span></span><br><span class="line"><span class="comment">      c++中如果要使用嵌入的qrc資源，則要在路徑的前端放置:/</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    trayIcon-&gt;setIcon(QIcon(<span class="string">":/Image/keyboard.png"</span>));</span><br><span class="line">    trayIcon-&gt;show();</span><br><span class="line">    trayIcon-&gt;setToolTip(<span class="string">"TB VirtualKeyboard"</span> <span class="string">"\n"</span></span><br><span class="line">                         <span class="string">"On-Screen Keyboard"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//連結Icon按下後信號觸發行為</span></span><br><span class="line">    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),</span><br><span class="line">            <span class="keyword">this</span>, SLOT(iconActivated(QSystemTrayIcon::ActivationReason)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//處理當系統托盤中Icon被按下後的行為</span></span><br><span class="line"><span class="keyword">void</span> SystemTray::iconActivated(QSystemTrayIcon::ActivationReason reason)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (reason)&#123;</span><br><span class="line">    <span class="keyword">case</span> QSystemTrayIcon::Trigger:</span><br><span class="line">        <span class="comment">// In the case of pressing the signal on the icon tray in the call signal QML layer</span></span><br><span class="line">        <span class="function">emit <span class="title">signalIconActivated</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> SystemTray::hideIconTray()</span><br><span class="line">&#123;</span><br><span class="line">    trayIcon-&gt;hide();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.5</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">1.4</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.0</span></span><br><span class="line"> </span><br><span class="line">ApplicationWindow &#123;</span><br><span class="line">    id: application</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"TB VirtualKeyboard"</span>)</span><br><span class="line"> </span><br><span class="line">    flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Chance to ignore the checkbox</span></span><br><span class="line">    property bool ignoreCheck: <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//連結SystemTray並當signalShow信號觸發時slot onSignalShow將應用程式畫面顯示(最大化)</span></span><br><span class="line">    Connections &#123;</span><br><span class="line">        target: systemTray</span><br><span class="line">        onSignalShow: &#123;</span><br><span class="line">            application.show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//當signalQuit信號觸發時slot onSignalQuit將ignorecheck設為true並將應用程式關閉</span></span><br><span class="line">        onSignalQuit: &#123;</span><br><span class="line">            ignoreCheck = <span class="literal">true</span></span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//點擊托盤圖示最大化或最小化應用程式</span></span><br><span class="line">        onSignalIconActivated: &#123;</span><br><span class="line">             <span class="keyword">if</span>(application.visibility === Window.Hidden) &#123;</span><br><span class="line">                 application.show()</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 application.hide()</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Test check box to control the closing of the window</span></span><br><span class="line">    CheckBox &#123;</span><br><span class="line">        id: checkTray</span><br><span class="line">        anchors.centerIn: parent</span><br><span class="line">        text: qsTr(<span class="string">"Enable minimizing to system tray during the window closing"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 處理視窗被關閉的行為</span></span><br><span class="line">    onClosing: &#123;</span><br><span class="line">        <span class="comment">//如果checkbox不被忽略那麼關閉視窗時都是對應用程式做最小化，相反的當checkbox被忽略則關閉應用程式</span></span><br><span class="line">        <span class="keyword">if</span>(checkTray.checked === <span class="literal">true</span> &amp;&amp; ignoreCheck === <span class="literal">false</span>)&#123;</span><br><span class="line">            close.accepted = <span class="literal">false</span></span><br><span class="line">            application.hide()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Qt.quit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成圖"><a href="#完成圖" class="headerlink" title="完成圖"></a>完成圖</h2><p><img src="https://i.imgur.com/nSvUN3k.png" alt="" title="顯示應用程式名稱與提示"></p><p><img src="https://i.imgur.com/uy71NNH.png" alt="" title="點擊右鍵出現菜單選項"></p><h2 id="Qt-實用的介面設計技巧"><a href="#Qt-實用的介面設計技巧" class="headerlink" title="Qt 實用的介面設計技巧"></a>Qt 實用的介面設計技巧</h2><p>setWindowFlags(Qt::WindowCloseButtonHint);//只要關閉按鈕<br>Qt::FramelessWindowHint: 沒有邊框的應用程式視窗<br>Qt::WindowStaysOnTopHint: 應用程式永遠在最上面的視窗<br>Qt::X11BypassWindowManagerHint: 隱藏工作列顯示應用程式Icon<br>Qt::WA_ShowWithoutActivating: 不取得Focus</p><p>第一種: </p><pre><code>clientMainWindow::clientMainWindow(QWidget *parent):QMainWindow(parent) {    //setWindowFlags(Qt::WindowFlags type) 可以放各種flag    setWindowFlages(Qt::Tool | Qt::X11BypassWindowManagerHint)}</code></pre><p>第二種:</p><p>在qml中設定</p><pre><code>flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</code></pre><h2 id="Icon下載"><a href="#Icon下載" class="headerlink" title="Icon下載"></a>Icon下載</h2><p>對於寫軟體的來說可能美感部分是非常艱困的一個環節，所以必須找個免費且無版權的Icon素材下載網站，那麼我這邊推薦的是<a href="https://material.io/tools/icons/?icon=launch&amp;style=baseline" target="_blank" rel="noopener">Google Icon</a>畫風簡單明瞭又易於下載 讚讚</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2018/10/26/Qt-Virtual-Keyboard/">Qt 如何製作Windows多國輸入法的虛擬鍵盤</a><br>看看如何編寫一個客製化多國輸入法的虛擬鍵盤</p><p><img src="https://i.imgur.com/TAwJE04.png" alt=""></p><p><img src="https://i.imgur.com/GmxzAQ2.png" alt=""></p><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p>本篇記錄的實作是以下網站兩種方法的第一種方式<br><a href="https://evileg.com/en/post/180/" target="_blank" rel="noopener">QML - Lesson 008. How to work with system tray (QSystemTrayIcon)</a></p><p>QAction解析<br><a href="http://monkeycoding.com/?tag=qaction" target="_blank" rel="noopener">QAction | 阿洲的程式教學</a></p><p>更多的程式介面設計介紹<br><a href="https://www.itread01.com/content/1549643957.html" target="_blank" rel="noopener">QT常用實用的介面設計技巧</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要實作常駐程式，讓程式不出現在工具列，而是將程式最小化到系統托盤中，並且點擊右鍵可以做喚醒(最大化)與關閉的動作，甚至用另一隻程式透過w
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="系統托盤" scheme="https://teddybearfp.github.io/tags/%E7%B3%BB%E7%B5%B1%E6%89%98%E7%9B%A4/"/>
    
      <category term="SystemTray" scheme="https://teddybearfp.github.io/tags/SystemTray/"/>
    
  </entry>
  
  <entry>
    <title>PyDash 建置</title>
    <link href="https://teddybearfp.github.io/2019/04/30/PyDash%E5%BB%BA%E7%BD%AE/"/>
    <id>https://teddybearfp.github.io/2019/04/30/PyDash建置/</id>
    <published>2019-04-30T10:05:16.000Z</published>
    <updated>2019-07-05T14:29:31.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pyDash 是一個輕量且 基於 web 的 linux 性能監測工具 ，它是用 python 和 Django 加上 Chart.js 來編寫的。<br>可以使用這個工具來監視你的 Linux 個人電腦/服務器資源，比如 CPU、內存、網絡統計，包括在線用戶的進程以及更多。儀表盤完全由主要的 Python 發行版本所提供的 Python 庫開發所以不需要額外安裝太多的函式庫，這篇文章記錄如何使用Django建置虛擬環境執行程式碼</p><h2 id="建置流程"><a href="#建置流程" class="headerlink" title="建置流程"></a>建置流程</h2><p>1.首先安裝pip<br>    下載<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a><br>    安裝pip</p><pre><code>python get-pip.py</code></pre><p>2.安裝虛擬環境</p><pre><code>pip install virtualenv</code></pre><p>3.下載檔案<br>    <a href="https://gitlab.com/k3oni/pydash" target="_blank" rel="noopener">https://gitlab.com/k3oni/pydash</a><br>    下載檔案或是git下來</p><pre><code>git clone https://github.com/k3oni/pydash.git</code></pre><p>並切換到當層路徑</p><pre><code>cd pydash</code></pre><p>4.創建虛擬環境<br>    取名為pydashtest(可任意命名)</p><pre><code>virtualenv pydashtest</code></pre><p>5.激活虛擬環境<br>    切換到剛剛創建的虛擬環境pydashtest資料夾中的Scripts啟動</p><pre><code>activate</code></pre><p>輸入成功會命令提示字元指令最前方會出現虛擬環境名稱例如:(pydashtest)</p><p><img src="https://i.imgur.com/jaKo0vb.png" alt=""></p><p>6.安裝所需函式庫<br>    切換到與requirements.txt同一層中執行以下指令(以這個pydash來說僅需要另外安裝django==1.6.8)</p><pre><code>pip install -r requirements.txt</code></pre><p>7.進入pydash資料夾中將settings.py檔案中的SECRET_KEY設定密鑰存取並退出</p><p><img src="https://i.imgur.com/olpy66E.png" alt=""></p><p>8.創建資料庫與身分驗證(輸入信箱與密碼)</p><pre><code>python manage.py syncdb</code></pre><p><img src="https://i.imgur.com/xAWxyv1.png" alt=""></p><p>9.執行 Django 開發服務器<br>    python manage.py runserver<br>    若出現一些錯誤訊息可能是缺少一些函式庫<br>    那麼我們只要安裝缺少的函式庫即可</p><pre><code>例如:pip install keras</code></pre><p>一直重複執行python manage.py runserver直到沒有缺少函式庫</p><pre><code>from django.conf.urls import patterns, urlImportError: cannot import name &apos;patterns&apos;出現上面這個問題的話解決辦法是呼叫下列指令pip install Django==1.8</code></pre><p>出現以下畫面代表正確</p><p><img src="https://i.imgur.com/z7uWs6S.png" alt=""></p><p>10.登入<br>    接著打開瀏覽器輸入網址<br>    <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a><br>    (特別注意:第一格是輸入Username不是信箱帳號)</p><p><img src="https://i.imgur.com/JHlINId.png" alt=""></p><p>登入成功後觀看數據囉</p><p><img src="https://i.imgur.com/5mzyqbE.png" alt=""></p><p>結束runserver</p><pre><code>Ctrl+C</code></pre><p>離開虛擬環境</p><pre><code>deactivate</code></pre><p>__init__.py 用來告訴Python這個資料夾是一個模組，裡面通常是空的，不過也可以寫一些程式碼在裡面。<br>manage.py 用來操作整個Django專案的小工具，例如啟動伺服器python manage.py runserver，或是同步資料庫python manage.py syncdb<br>settings.py 設定檔<br>urls.py 負責網站的路由。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://kknews.cc/zh-tw/other/92rgx6b.html[]" target="_blank" rel="noopener">pyDash：一個基於 web 的 Linux 性能監測工具</a><br><a href="https://kaochenlong.com/2011/10/18/django-your-first-django-project/" target="_blank" rel="noopener">開始你的第一個專案| 高見龍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;pyDash 是一個輕量且 基於 web 的 linux 性能監測工具 ，它是用 python 和 Django 加上 Chart.js 來
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="PyDash" scheme="https://teddybearfp.github.io/tags/PyDash/"/>
    
  </entry>
  
  <entry>
    <title>Python logger</title>
    <link href="https://teddybearfp.github.io/2019/04/28/Python-logger/"/>
    <id>https://teddybearfp.github.io/2019/04/28/Python-logger/</id>
    <published>2019-04-28T02:05:16.000Z</published>
    <updated>2019-07-05T14:34:39.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近開始要編寫Python程式碼，上一篇<a href="https://teddybearfp.github.io/2019/04/08/C-logger/#more">C Logger</a>幫助我開發與維護程式覺得十分好用，更確定Logger是編寫程式碼的必備品，所以也想要在Python開發時也能有一隻良好的Logger幫忙紀錄日誌，了解使用者的行為，這一篇就來記錄如何做出我們Python版本的Logger吧!</p><p>先來看成果吧</p><p><img src="https://i.imgur.com/WXfItPR.png" alt=""></p><p>Log訊息組成:</p><pre><code>年-月-日 時:分:秒,毫秒 [Log層級] 使用者: 函式名稱 Log訊息 [執行緒名稱]</code></pre><h2 id="TBLogger"><a href="#TBLogger" class="headerlink" title="TBLogger"></a>TBLogger</h2><p>TBLogger記錄了時間、Log層級、使用者、函式名稱、Log訊息與執行緒名稱同時亦會寫檔儲存</p><p>備註:此段程式碼出處為<a href="http://yhhuang1966.blogspot.com/2018/04/python-logging_24.html" target="_blank" rel="noopener">小狐狸事務所Python 學習筆記 : 日誌 (logging) 模組測試</a><br>將其稍作改寫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBLog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">        <span class="comment">#如果資料夾不存在則創建資料夾</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">            os.mkdir(path)</span><br><span class="line">        self.user = getpass.getuser()</span><br><span class="line">        self.logger = logging.getLogger(self.user)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        format = <span class="string">'%(asctime)s [%(threadName)s][%(levelname)s] %(name)s : %(funcName)s() %(message)s'</span></span><br><span class="line">        self.formatter = logging.Formatter(format)</span><br><span class="line">        self.streamhandler = logging.StreamHandler()</span><br><span class="line">        self.streamhandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.streamhandler)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetPath</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        logfile = path + self.user + <span class="string">'.log'</span></span><br><span class="line">        self.filehandler = logging.FileHandler(logfile)</span><br><span class="line">        self.filehandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.filehandler)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.error(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, level, msg)</span>:</span></span><br><span class="line">        self.logger.log(level, msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLevel</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disable</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.disable(<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.logger.removeHandler(self.streamhandler)</span><br><span class="line">        self.logger.removeHandler(self.filehandler)</span><br><span class="line">        self.streamhandler.flush()</span><br><span class="line">        self.filehandler.flush()</span><br><span class="line">        self.streamhandler.close()</span><br><span class="line">        self.filehandler.close()</span><br></pre></td></tr></table></figure><h2 id="Test-py"><a href="#Test-py" class="headerlink" title="Test.py"></a>Test.py</h2><p>在其他專案中導入TBLogger</p><p>例如:Test.py中可以將TBLogger.py導入</p><pre><code>from TBLogger import TBLog</code></pre><p>Implement TBLog class<br>先設定Log檔案儲存路徑並且在最後用完時要把handle移除,否則持續使用會出現重複的Log</p><pre><code>tbLog = TBLog(&quot;FolderName&quot;)tbLog.SetPath(&apos;C:\\ProgramData\\FolderName\\&apos;)tbLog.info(&quot;***** Project Started *****&quot;)tbLog.info(&quot;***** Project  Closed *****&quot;)tbLog.Close()</code></pre><p>Python Console</p><p><img src="https://i.imgur.com/QbUelH4.png" alt=""></p><p>亦可在程式執行與結束分別編寫Log訊息表示</p><p><img src="https://i.imgur.com/Oou9VAR.png" alt=""></p><p>這就是我要的Logger</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://yhhuang1966.blogspot.com/2018/04/python-logging_24.html" target="_blank" rel="noopener">小狐狸事務所Python 學習筆記 : 日誌 (logging) 模組測試</a><br><a href="https://stackoverflow.max-everyday.com/2017/10/python-logging/" target="_blank" rel="noopener">[Python] logging 教學– Max的程式語言筆記</a><br><a href="https://javawithravi.com/how-to-display-thread-id-in-python-logs/" target="_blank" rel="noopener">How to display thread id in python logs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近開始要編寫Python程式碼，上一篇&lt;a href=&quot;https://teddybearfp.github.io/2019/04/08/
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Logger" scheme="https://teddybearfp.github.io/tags/Logger/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm安裝與Anaconda使用</title>
    <link href="https://teddybearfp.github.io/2019/04/26/PyCharm-%E5%AE%89%E8%A3%9D/"/>
    <id>https://teddybearfp.github.io/2019/04/26/PyCharm-安裝/</id>
    <published>2019-04-26T09:05:16.000Z</published>
    <updated>2019-07-05T14:38:05.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安裝編譯環境是個非常重要的環節，好的開始是成功的一半，若是能順利安裝並編譯出自己的第一支程式是個讓人興奮的事情，這邊紀錄一下Python安裝與PyCharm安裝過程與Anaconda使用方式</p><p>本篇安裝環境為<br>Python 3.6.7(64bits)<br>PyCharm 2019.01.01<br>Anaconda 2019.03 Python 3.7 version</p><h2 id="Python-安裝"><a href="#Python-安裝" class="headerlink" title="Python 安裝"></a>Python 安裝</h2><h3 id="Python-2-vs-Python-3"><a href="#Python-2-vs-Python-3" class="headerlink" title="Python 2 vs Python 3"></a>Python 2 vs Python 3</h3><ul><li>print 語法差異</li><li>整數相除python2為整數,python3為浮點數</li><li>型態比較python2型態比較可以不同型態,python3會提醒型態錯誤</li><li>python3幾乎支援並相容所有函式庫</li><li>python3支援Unicode字符串</li><li><p>python3的xrange執行是比python2慢的</p><p>  長期遠觀來說應該選擇python3</p></li></ul><h3 id="Python-3-install"><a href="#Python-3-install" class="headerlink" title="Python 3 install"></a>Python 3 install</h3><p>首先要先安裝Python再去安裝編譯環境<br><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Python安裝(Windows)</a><br><a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener">Python安裝(MacOSX)</a></p><p>電腦如果是64位元的話就要下載64bits的版本</p><p><img src="https://i.imgur.com/GeZeEJt.png" alt=""></p><p>安裝時將add to path打勾，這樣便會自動新增環境變數</p><h2 id="PyCharm-安裝"><a href="#PyCharm-安裝" class="headerlink" title="PyCharm 安裝"></a>PyCharm 安裝</h2><p>PyCharm是一個用於計算機編程的集成開發環境（IDE），主要用於Python語言開發，由捷克公司JetBrains開發，提供代碼分析、圖形化調試器，集成測試器、集成版本控制系統，並支持使用Django進行網頁開發。</p><h3 id="好用IDE推薦"><a href="#好用IDE推薦" class="headerlink" title="好用IDE推薦"></a>好用IDE推薦</h3><ul><li>PyCharm<pre><code>1.有非常好的除錯器2.可以方便的處理虛擬環境3.良好的介面環境4.免費</code></pre></li><li>JupyterNotebook<br>  簡潔的介面<br>  方便的快捷鍵<br>  之前我都使用jupyter編寫爬蟲與畫圖執行非常方便 大推!</li></ul><h3 id="PyCharm-安裝-1"><a href="#PyCharm-安裝-1" class="headerlink" title="PyCharm 安裝"></a>PyCharm 安裝</h3><p><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">Pycharm下載</a></p><p><img src="https://i.imgur.com/Q5dJhNp.png" alt=""><br>沒有特別購買的話就下載右邊的Community版本</p><p>下載完畢後開啟安裝檔</p><ul><li>64-bits若電腦是64位元的安裝時務必勾選</li><li>.py association這一項勾選的意思是以後python檔案皆由PyCharm開啟</li></ul><p>精美的開啟畫面</p><p><img src="https://i.imgur.com/i0jhGu9.png" alt=""></p><p><img src="https://i.imgur.com/0SdWmAE.png" alt=""></p><p>剛進入PyCharm時，字體非常的小，我平常連手機都用特大字型這樣看很不習慣<br>那麼我們到Setting裡面找尋Font去設定<br><img src="https://i.imgur.com/EWTITRt.png" alt=""><br>我是將字型大小調到20</p><p>在介面上看起來的大小<br><img src="https://i.imgur.com/IpqviDP.png" alt=""></p><p>此時雖然安裝好了開啟新專案但是我們的Interpreter設定尚未完全<br>我們來繼續往下看如何使用Anaconda管理我們的Interpreter吧!</p><h2 id="Anaconda-安裝與使用"><a href="#Anaconda-安裝與使用" class="headerlink" title="Anaconda 安裝與使用"></a>Anaconda 安裝與使用</h2><h3 id="Python專案環境選擇"><a href="#Python專案環境選擇" class="headerlink" title="Python專案環境選擇"></a>Python專案環境選擇</h3><ul><li>Anaconda易於管理便於更新</li></ul><p><a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">Anaconda下載</a></p><p><img src="https://i.imgur.com/JfOWMKX.png" alt=""></p><h3 id="Anaconda用法"><a href="#Anaconda用法" class="headerlink" title="Anaconda用法"></a>Anaconda用法</h3><p>Anaconda用法其實跟python的virtualenv用法類似</p><h4 id="執行Anaconda-prompt"><a href="#執行Anaconda-prompt" class="headerlink" title="執行Anaconda prompt"></a>執行Anaconda prompt</h4><pre><code>conda create -n myenv python=3.6 packages    #myenv環境名稱可以自己取    #packages可以自行添增例如numpy=1.7 matplotlib    #python=3.6是選擇interpreter版本conda create -n myenv python=3.6 numpy pandas matplotlib pip</code></pre><h4 id="啟動虛擬環境"><a href="#啟動虛擬環境" class="headerlink" title="啟動虛擬環境"></a>啟動虛擬環境</h4><pre><code>activate myenv</code></pre><p>啟動成功在最前方的()內會變成虛擬環境的名稱<br><img src="https://i.imgur.com/yjTfgR8.png" alt=""></p><h4 id="檢測環境-用來看目前創建了幾個虛擬環境"><a href="#檢測環境-用來看目前創建了幾個虛擬環境" class="headerlink" title="檢測環境(用來看目前創建了幾個虛擬環境)"></a>檢測環境(用來看目前創建了幾個虛擬環境)</h4><pre><code>conda env list</code></pre><p><img src="https://i.imgur.com/tkCe7xx.png" alt=""></p><h4 id="檢測當下虛擬環境的packages"><a href="#檢測當下虛擬環境的packages" class="headerlink" title="檢測當下虛擬環境的packages"></a>檢測當下虛擬環境的packages</h4><pre><code>conda list -n myenv若是activate狀態則conda list即可</code></pre><h4 id="安裝環境的packages"><a href="#安裝環境的packages" class="headerlink" title="安裝環境的packages"></a>安裝環境的packages</h4><pre><code>conda install -n myenv pipactivate myenvpip install SomePackageex:    conda install -n myenv pip  #在虛擬環境安裝pip裝完後才能裝其他缺少的函式庫(若虛擬環境已有安裝則可以省略)    activate myenv  #啟動虛擬環境    pip install numpy pandas tensorflow keras opencv-python </code></pre><h4 id="關閉環境"><a href="#關閉環境" class="headerlink" title="關閉環境"></a>關閉環境</h4><pre><code>deactive</code></pre><p>那麼完成後PyCharm便可以在Interpreter中找到剛剛設置的虛擬環境達到函式庫的更新與管理</p><pre><code>在Setting &gt; Project Interpreter去做設定</code></pre><p><img src="https://i.imgur.com/pMSqzVK.png" alt=""></p><pre><code>選擇設定 &gt; 勾選Existing environment</code></pre><p><img src="https://i.imgur.com/22MFEhi.png" alt=""></p><p>按下Run沒出現異常 exit code 0 大功告成拉~<br>可以開始編寫程式碼</p><p><img src="https://i.imgur.com/eSNdhIc.png" alt=""></p><p>下次再紀錄陪伴我最久的jupyter notebook~</p><p>參考資料:<br><a href="https://zh.wikipedia.org/zh-tw/PyCharm" target="_blank" rel="noopener">PyCharm - 維基百科，自由的百科全書 - Wikipedia</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;安裝編譯環境是個非常重要的環節，好的開始是成功的一半，若是能順利安裝並編譯出自己的第一支程式是個讓人興奮的事情，這邊紀錄一下Python安裝
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="PyCharm" scheme="https://teddybearfp.github.io/tags/PyCharm/"/>
    
      <category term="Anaconda" scheme="https://teddybearfp.github.io/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>C logger</title>
    <link href="https://teddybearfp.github.io/2019/04/08/C-logger/"/>
    <id>https://teddybearfp.github.io/2019/04/08/C-logger/</id>
    <published>2019-04-08T07:05:16.000Z</published>
    <updated>2019-07-05T14:39:53.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>編寫專案時，除了直接印出訊息來驗證與除錯之外，我們還需要LOG幫助我們維護程式，這一篇完整記錄了我編寫的LOG動態函式庫寫法與使用方式，LOG會顯示時間戳記(毫秒)、LOG層級、ThreadID、LOG訊息，讓我們來看看實作流程吧!</p><h2 id="顯示內容"><a href="#顯示內容" class="headerlink" title="顯示內容"></a>顯示內容</h2><p>先來看看成果</p><pre><code>//組成方式為(年-月-日 時:分:秒.毫秒),Log層級,ThreadID,類別名稱::函式名稱() 輸出訊息2019-04-09 10:08:08.337,[DEBUG],ThreadID:5140,Device::MotorMove() motorYStep:10.52019-04-09 10:08:08.339,[DEBUG],ThreadID:5876,I&apos;m Polling thread!2019-04-09 10:08:08.339,[TRACE],ThreadID:5876,Device::SetOffSetValue() SetOffSetValue:7</code></pre><p>透過上面記錄的方式可以清楚掌握程式狀況讓我們來看看如何實作Logger吧!</p><h2 id="stdarg-h"><a href="#stdarg-h" class="headerlink" title="stdarg.h"></a>stdarg.h</h2><p>stdarg.h 是C語言中C標準函式庫的標頭檔<br>我們透過stdarg.h主要目的是讓函式能夠接收不定量參數</p><p>va_list: 宣告一個指標，讓它指向引數串列。<br>va_start: 初始化這個指標，讓它真正指向正確的引數串列開頭。<br>va_arg: 來取得va_list中的資料。<br>va_end: 清除這個指標，把它設為NULL。範例如下：<br>va_copy: 拷貝va_list的內容</p><p>不定參數函式的參數數量是可變動的，它使用省略號來忽略之後的參數。例如printf函式一般。宣告方式如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">char</span> *b, ...)</span></span>;</span><br></pre></td></tr></table></figure></p><h2 id="vprintf"><a href="#vprintf" class="headerlink" title="vprintf"></a>vprintf</h2><p>其他由不定參數函式呼叫的函式<br>透過下面範例了解一下stdarg搭配vprintf的用法<br>參考vprintf - C++ Reference - Cplusplus.com<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* vprintf example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteFormatted</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * format, ... )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  va_list args;</span><br><span class="line">  va_start (args, format);</span><br><span class="line">  <span class="built_in">vprintf</span> (format, args);</span><br><span class="line">  va_end (args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   WriteFormatted (<span class="string">"Call with %d variable argument.\n"</span>,<span class="number">1</span>);</span><br><span class="line">   WriteFormatted (<span class="string">"Call with %d variable %s.\n"</span>,<span class="number">2</span>,<span class="string">"arguments"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Call with <span class="number">1</span> variable argument.</span><br><span class="line">Call with <span class="number">2</span> variable arguments.</span><br></pre></td></tr></table></figure></p><p>看完上面用法是不是跟printf用法十分相似呢</p><p>沒錯所以我們來編寫一個LOG函式呼叫方式跟printf類似卻能達到我們要的LOG效果</p><h2 id="Log分級"><a href="#Log分級" class="headerlink" title="Log分級"></a>Log分級</h2><p>我的TBLog分為八個層級以下是我目前理解的層級定義:</p><p>ALL     所有的層級。<br>TRACE     比 DEBUG 層級更細膩的事件訊息<br>DEBUG     細膩的事件訊息，開發中對開發與除錯有幫助。在正式運行一般不輸出<br>INFO     描述訊息，描述程式運行過程。<br>WARN     表示有潛在的危險狀況<br>ERROR     表示發生錯誤事件，但程式可能還能運行。<br>FATAL     表示發生非常嚴重錯誤事件，可能會導致程式終止。<br>OFF     最高级别，用來關閉LOGGER訊息日誌。</p><h2 id="創建TBLog-dll"><a href="#創建TBLog-dll" class="headerlink" title="創建TBLog.dll"></a>創建TBLog.dll</h2><p>先在專案new subproject中選擇library新增</p><h2 id="TBLog-pro"><a href="#TBLog-pro" class="headerlink" title="TBLog.pro"></a>TBLog.pro</h2><p>可以加入下面兩句指令，讓dll檔產出在與執行檔同一層<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Debug:DESTDIR = ../(你的專案名稱)/debug</span><br><span class="line">Release:DESTDIR = ../(你的專案名稱)/release</span><br></pre></td></tr></table></figure></p><h2 id="TBLog-h"><a href="#TBLog-h" class="headerlink" title="TBLog.h"></a>TBLog.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma once是一個非標準但是被廣泛支援的前置處理符號，會讓所在的檔案在一個單獨的編譯中只被包含一次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBLOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBLOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TBLOG_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport) <span class="comment">//使用 __declspec(dllexport) 從 DLL 匯出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//設置LOG層級 將層級分為六級</span></span><br><span class="line"><span class="keyword">enum</span> LogLevels</span><br><span class="line">&#123;</span><br><span class="line">    LOGALL,</span><br><span class="line">    LOGTRACE,</span><br><span class="line">    LOGDEBUG,</span><br><span class="line">    LOGINFO,</span><br><span class="line">    LOGWARN,</span><br><span class="line">    LOGERROR,</span><br><span class="line">    LOGFATAL,</span><br><span class="line">    LOGOFF</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同要求取得不同時間的格式</span></span><br><span class="line"><span class="keyword">enum</span> RequestType</span><br><span class="line">&#123;</span><br><span class="line">    LogTimeStamp,</span><br><span class="line">    LogFileName</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogPath</span><span class="params">(<span class="keyword">char</span> *path)</span></span>; <span class="comment">//給上層設置路徑用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level = LOGINFO)</span></span>; <span class="comment">//將LOGLEVEL閥值預設為LOGINFO,表示LOGINFO以上的層級才會顯示與寫檔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">MyLog</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">char</span>* message, ...)</span></span>; <span class="comment">//不定參數函式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TBLOG_H</span></span></span><br></pre></td></tr></table></figure><h2 id="TBLog-cpp"><a href="#TBLog-cpp" class="headerlink" title="TBLog.cpp"></a>TBLog.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tblog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; //printf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt; //va_list, va_arg, va_start, va_end</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;    //取得時間</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; //取得時間</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt; //_access</span></span></span><br><span class="line"></span><br><span class="line">LogLevels logThreshold; <span class="comment">//用來當LOGLEVEL的Filter</span></span><br><span class="line"><span class="keyword">char</span> folderPath[<span class="number">200</span>];   <span class="comment">//資料夾位置</span></span><br><span class="line"><span class="keyword">char</span> filePath[<span class="number">200</span>];     <span class="comment">//LOG檔案路徑</span></span><br><span class="line"><span class="keyword">bool</span> isFirst = <span class="literal">true</span>;    <span class="comment">//第一次進來時初始化值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//LOGLEVEL的Filter</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">GetLogLevel</span><span class="params">(<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//inline行內函式只能建議編譯器，也就是說建議並不一定會被採納，這視您的編譯器而定</span></span><br><span class="line"><span class="comment">//如果建議被採納，則該函式會自動在呼叫點展開程式碼</span></span><br><span class="line">    <span class="keyword">switch</span>(level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//由輕微到嚴重分級</span></span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGTRACE: <span class="keyword">return</span> <span class="string">"[TRACE]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGDEBUG: <span class="keyword">return</span> <span class="string">"[DEBUG]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGINFO:  <span class="keyword">return</span> <span class="string">"[INFO ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGWARN:  <span class="keyword">return</span> <span class="string">"[WARN ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGERROR: <span class="keyword">return</span> <span class="string">"[ERROR]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGFATAL: <span class="keyword">return</span> <span class="string">"[FATAL]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得時間(依照傳進的參數分別回傳檔案年月或是LOG時間戳記)</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">GetTime</span><span class="params">(RequestType request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化char[]</span></span><br><span class="line">    <span class="keyword">char</span> currentTime[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(currentTime, <span class="number">0</span>, <span class="keyword">sizeof</span>(currentTime));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//C取得現在時間,但是C的取得時間方式僅能取到秒,並無法得到毫秒</span></span><br><span class="line">    <span class="keyword">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//毫秒我們用SYSTEMTIME取得</span></span><br><span class="line">    SYSTEMTIME time;</span><br><span class="line">    GetSystemTime(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得毫秒</span></span><br><span class="line">    <span class="keyword">char</span> ms[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> time_ms = time.wMilliseconds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面這段回傳時間格式為2019-04-08 17:15:11.703</span></span><br><span class="line">    <span class="keyword">if</span>(request == LogTimeStamp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//%F 等於 %Y-%m-%d, %T 等於 %H:%M:%S</span></span><br><span class="line">        strftime(currentTime, <span class="number">30</span>, <span class="string">"%F %T"</span>, localtime(&amp;now));</span><br><span class="line">        <span class="comment">//使用 sprintf() 將數字轉成字串 </span></span><br><span class="line">        <span class="built_in">sprintf</span>(ms, <span class="string">"%03d"</span>, time_ms);<span class="comment">//用0將數字填滿三位數例如:7會變成007</span></span><br><span class="line">        <span class="built_in">strcat</span>(currentTime, <span class="string">"."</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(currentTime, ms);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面這段回傳時間格式為201904</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        strftime(currentTime, <span class="number">30</span>, <span class="string">"%Y%m"</span>, localtime(&amp;now));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一種路徑:固定的路徑(不推薦)</span></span><br><span class="line"><span class="comment">// void Initial()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     isFirst = false;</span></span><br><span class="line"><span class="comment">//     //取得年月來當LOG檔名</span></span><br><span class="line"><span class="comment">//     char *date = GetTime(LogFileName);</span></span><br><span class="line"><span class="comment">//     strcat(filePath,"D:\\TBLog\\TBLog_");</span></span><br><span class="line"><span class="comment">//     strcat(filePath, date);</span></span><br><span class="line"><span class="comment">//     strcat(filePath, ".txt");</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二種路徑:開放給上層設置的路徑</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogPath</span><span class="params">(<span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>( folderPath, path, <span class="keyword">sizeof</span>(folderPath) );</span><br><span class="line">    <span class="built_in">memcpy</span>( filePath, folderPath, <span class="keyword">sizeof</span>(filePath) );</span><br><span class="line">    <span class="keyword">char</span> *date = GetTime(LogFileName);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, <span class="string">"\\TBLog_"</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, date);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, <span class="string">".txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//設定閥值</span></span><br><span class="line">    logThreshold = level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">MyLog</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一次使用時設定固定路徑(不推薦)</span></span><br><span class="line">    <span class="comment">//if(isFirst)</span></span><br><span class="line">        <span class="comment">//Initial();</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//or使用上層設定的路徑若沒設路徑則不寫入   </span></span><br><span class="line">    <span class="keyword">if</span>(filePath[<span class="number">0</span>] == <span class="string">'\0'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> message[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message, <span class="number">0</span>, <span class="keyword">sizeof</span>(message));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> message2[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message2, <span class="number">0</span>, <span class="keyword">sizeof</span>(message2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//檢測LOG層級,如果跟LOGDEBUG同級或是更高級就在console log顯示</span></span><br><span class="line">    <span class="keyword">if</span>(level &gt;= LOGDEBUG)</span><br><span class="line">    &#123;</span><br><span class="line">        FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//C語言用來檢查檔案是否存在的寫法</span></span><br><span class="line">        <span class="keyword">if</span>((_access(folderPath, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( _mkdir( folderPath ) == <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"File"</span>,folderPath,<span class="string">"add!\n"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"Can't add File"</span>,folderPath,<span class="string">"\n"</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        strcat_s(message, GetTime(LogTimeStamp));</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line">        strcat_s(message, GetLogLevel(level));</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得執行緒</span></span><br><span class="line">        <span class="keyword">int</span> threadID = GetCurrentThreadId(); </span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">20</span>];</span><br><span class="line">        <span class="comment">//將int轉char[]</span></span><br><span class="line">        <span class="built_in">sprintf</span>(buffer, <span class="string">"%d"</span>, threadID);</span><br><span class="line"></span><br><span class="line">        strcat_s(message, <span class="string">"ThreadID:"</span>);</span><br><span class="line">        strcat_s(message, buffer);</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line">        strcat_s(message, fmt);</span><br><span class="line"></span><br><span class="line">        va_list args; <span class="comment">//用來儲存宏va_arg與宏va_end所需資訊</span></span><br><span class="line">        va_start (args, fmt); <span class="comment">//使va_list指向起始的參數</span></span><br><span class="line">        <span class="built_in">vprintf</span> (message, args);    <span class="comment">//Console logging(印在IDE console log顯示)</span></span><br><span class="line">        strcat_s(message, <span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int fprintf(FILE *stream, const char *format, ...),stdout也是個文檔，把資料輸出到stdout</span></span><br><span class="line">        <span class="built_in">fprintf</span>( <span class="built_in">stdout</span>, <span class="string">"\n"</span>); <span class="comment">//在message結尾加上\n 這樣使用者就不用再加上\n</span></span><br><span class="line">        <span class="built_in">vsprintf</span>(message2, message, args); <span class="comment">//File logging(save message and write file)</span></span><br><span class="line">        va_end (args); <span class="comment">//釋放va_list</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(level &gt;= logThreshold)<span class="comment">//檢測LOG層級,如果跟LOGDEBUG同級或是更高級就寫檔</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//LOG會編寫在D:\\TBLog資料夾中檔名為TBLog_年月.txt,若有同個月分的則不創建新的txt檔案繼續編寫</span></span><br><span class="line">            fp=fopen(filePath,<span class="string">"a"</span>);<span class="comment">//"a"表示檔案存在的話直接接續寫檔，"w"表示檔案存在的話覆寫</span></span><br><span class="line">            <span class="built_in">fprintf</span>(fp,<span class="string">"%s"</span>,message2);<span class="comment">//寫檔</span></span><br><span class="line">            fclose(fp);<span class="comment">//關閉檔案</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因為printf是緩衝輸出，我們透過fflush達到即時輸出</span></span><br><span class="line">        <span class="comment">//flush(stdin)刷新標準輸入緩衝區，把輸入緩衝區裡的東西丟棄  </span></span><br><span class="line">        fflush(<span class="built_in">stdout</span>) <span class="comment">//刷新標準輸出緩衝區，把輸出緩衝區裡的東西打印到標準輸出設備上。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h2><p>先在使用的pro檔中導入TBLog.dll的library<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/release/ -lTBLog</span><br><span class="line"><span class="keyword">else</span>:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/debug/ -lTBLog</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += $$PWD/../TBLog</span><br><span class="line">DEPENDPATH += $$PWD/../TBLog</span><br></pre></td></tr></table></figure></p><p>接著導入完成後在使用的檔案中include標頭檔<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../TBLog/tblog.h"</span></span></span><br></pre></td></tr></table></figure></p><p>開始使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//設定存放Log的路徑位置</span></span><br><span class="line"><span class="keyword">char</span> folderPath[<span class="number">200</span>] = <span class="string">"D:\\TBLog"</span>;</span><br><span class="line">SetLogPath(folderPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定LOGLEVEL閥值若未設定只顯示LOGINFO以上的層級</span></span><br><span class="line">SetLogLevel(LOGINFO);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用MyLog方法跟printf一樣只是不用加上\n,在結尾會由Logger加上,層級低於LOGINFO不顯示、不寫入</span></span><br><span class="line">MyLog(LOGDEBUG,<span class="string">"%s"</span>, <span class="string">"SONGLAAAA"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用MyLog方法跟printf一樣只是不用加上\n,在結尾會由Logger加上,層級大於等於LOGINFO顯示並寫入</span></span><br><span class="line">MyLog(LOGINFO,<span class="string">"Introduce(), Hello my name is %s."</span>,<span class="string">"TeddyBear"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">輸出結果如下:</span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.337</span>,[DEBUG],ThreadID:<span class="number">5140</span>,Device::MotorLongRun() motorYStep:<span class="number">10.5</span></span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.339</span>,[DEBUG],ThreadID:<span class="number">5876</span>,I'm Polling thread!</span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.339</span>,[TRACE],ThreadID:<span class="number">5876</span>,Device::SetOffSetValue() SetOffSetValue:<span class="number">7</span></span><br><span class="line"></span><br><span class="line">使用方式如同<span class="built_in">printf</span>差異僅在於第一個參數先填上LOG層級,再輸入訊息內容,訊息內容目前定義為必須先輸入類別名稱::函式名稱() 再輸出訊息統一使用利於除錯</span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"Device::MotorLongRun() motorYStep:%.1f\n"</span>,motorYStep); <span class="comment">//取到浮點數小數位第一位</span></span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"I'm Polling thread!\n"</span>);</span><br><span class="line">    Logger(LOGTRACE,<span class="string">"Device::SetOffSetValue() OffSetValue:%d\n"</span>,SetOffSetValue);   <span class="comment">//%d整數</span></span><br></pre></td></tr></table></figure></p><h2 id="支援Unicode的Logger實作"><a href="#支援Unicode的Logger實作" class="headerlink" title="支援Unicode的Logger實作"></a>支援Unicode的Logger實作</h2><p>可以記錄各國語言Logger<br>我們用wchar_t寬字元來實作<br>先看成果</p><p><img src="https://i.imgur.com/AlYR7zz.png" alt=""></p><p>來看看如何達成吧!</p><h3 id="TBLog-h-1"><a href="#TBLog-h-1" class="headerlink" title="TBLog.h"></a>TBLog.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBLOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBLOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TBLOG_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> LogLevels</span><br><span class="line">&#123;</span><br><span class="line">    LOGALL,</span><br><span class="line">    LOGTRACE,</span><br><span class="line">    LOGDEBUG,</span><br><span class="line">    LOGINFO,</span><br><span class="line">    LOGWARN,</span><br><span class="line">    LOGERROR,</span><br><span class="line">    LOGFATAL,</span><br><span class="line">    LOGOFF</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> RequestType</span><br><span class="line">&#123;</span><br><span class="line">    LogTimeStamp,</span><br><span class="line">    LogFileName</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level = LOGINFO)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">Logger</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">wchar_t</span>* message, ...)</span></span>; <span class="comment">//w</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TBLOG_H</span></span></span><br></pre></td></tr></table></figure><h3 id="TBLog-cpp-1"><a href="#TBLog-cpp-1" class="headerlink" title="TBLog.cpp"></a>TBLog.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tblog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; //printf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt; //va_list, va_arg, va_start, va_end</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LogLevels logThreshold;</span><br><span class="line"><span class="keyword">wchar_t</span> filePath[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">bool</span> isFirst = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> wchar_t* <span class="title">GetLogLevel</span><span class="params">(<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGTRACE: <span class="keyword">return</span> <span class="string">L"[TRACE]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGDEBUG: <span class="keyword">return</span> <span class="string">L"[DEBUG]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGINFO:  <span class="keyword">return</span> <span class="string">L"[INFO ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGWARN:  <span class="keyword">return</span> <span class="string">L"[WARN ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGERROR: <span class="keyword">return</span> <span class="string">L"[ERROR]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGFATAL: <span class="keyword">return</span> <span class="string">L"[FATAL]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">L""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wchar_t</span>* GetTime(RequestType request)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">wchar_t</span> currentTime[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(currentTime, <span class="number">0</span>, <span class="keyword">sizeof</span>(currentTime));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME time;</span><br><span class="line">    GetSystemTime(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wchar_t</span> ms[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> time_ms = time.wMilliseconds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(request == LogTimeStamp)</span><br><span class="line">    &#123;</span><br><span class="line">        wcsftime (currentTime, <span class="number">30</span>, <span class="string">L"%F %T"</span>, localtime(&amp;now));</span><br><span class="line">        swprintf(ms, <span class="string">L"%03d"</span>, time_ms);</span><br><span class="line">        wcscat(currentTime, <span class="string">L"."</span>);</span><br><span class="line">        wcscat(currentTime, ms);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        wcsftime (currentTime, <span class="number">30</span>, <span class="string">L"%Y%m"</span>, localtime(&amp;now));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initial</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    isFirst = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">wchar_t</span> *date = GetTime(LogFileName);</span><br><span class="line">    wcscat(filePath,<span class="string">L"D:\\TBLog\\TBLog_"</span>);</span><br><span class="line">    wcscat(filePath, date);</span><br><span class="line">    wcscat(filePath, <span class="string">L".txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    logThreshold = level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">Logger</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">wchar_t</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isFirst)</span><br><span class="line">        Initial();</span><br><span class="line"></span><br><span class="line">    setlocale(LC_ALL, <span class="string">""</span>); <span class="comment">//超級關鍵!!! 只要處理wchar_t加入這個指令加入當前環境語系才不會怎樣印都?</span></span><br><span class="line">    <span class="keyword">wchar_t</span> message[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message, <span class="number">0</span>, <span class="keyword">sizeof</span>(message));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wchar_t</span> message2[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message2, <span class="number">0</span>, <span class="keyword">sizeof</span>(message2));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(level &gt;= logThreshold)</span><br><span class="line">    &#123;</span><br><span class="line">        FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>((_access(<span class="string">"D:\\TBLog"</span>, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( _mkdir( <span class="string">"D:\\TBLog"</span> ) == <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"File'D:\\TBLog'add!\n"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"Can't add File'D:\\TBLog'\n"</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wcscat(message, GetTime(LogTimeStamp));</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line">        wcscat(message, GetLogLevel(level));</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> threadID = GetCurrentThreadId();</span><br><span class="line">        <span class="keyword">wchar_t</span> buffer[<span class="number">20</span>];</span><br><span class="line">        swprintf(buffer, <span class="number">20</span>, <span class="string">L"%d"</span>, threadID);</span><br><span class="line"></span><br><span class="line">        wcscat(message, <span class="string">L"ThreadID:"</span>);</span><br><span class="line">        wcscat(message, buffer);</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line">        wcscat(message, fmt);</span><br><span class="line"></span><br><span class="line">        va_list args;</span><br><span class="line">        va_start (args, fmt);</span><br><span class="line">        vwprintf (message, args);    <span class="comment">//print</span></span><br><span class="line">        vswprintf(message2, <span class="number">300</span>, message, args); <span class="comment">//save message and write file.</span></span><br><span class="line">        va_end (args);</span><br><span class="line"></span><br><span class="line">        fp=_wfopen(filePath,<span class="string">L"a,ccs=UNICODE"</span>);<span class="comment">//檔案以UNICODE編寫</span></span><br><span class="line">        fwprintf(fp,<span class="string">L"%ls"</span>,message2);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用端-1"><a href="#使用端-1" class="headerlink" title="使用端"></a>使用端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::sendKey(QString key) &#123;<span class="comment">//QString以unicode編碼保存</span></span><br><span class="line">    CString str = key.toStdWString().c_str();<span class="comment">//將Unicode放到WString寬字串中</span></span><br><span class="line">    Logger(LOGDEBUG, <span class="string">L"Whole input Key:%ls\n"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.cplusplus.com/reference/cstdio/vprintf/" target="_blank" rel="noopener">vprintf - C++ Reference - Cplusplus.com</a><br><a href="https://zh.wikipedia.org/wiki/Stdarg.h" target="_blank" rel="noopener">stdarg.h - 维基百科，自由的百科全书</a><br><a href="https://dotblogs.com.tw/simplecestlavie/2013/01/02/86637" target="_blank" rel="noopener">軟體中的黑盒子 (介紹 va_lsit, va_start, va_end… 等)</a><br><a href="https://teddybearfp.github.io/2018/11/02/C-dll/#more">C/C++ 動態連結函式庫| 泰迪熊的程式足跡</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;編寫專案時，除了直接印出訊息來驗證與除錯之外，我們還需要LOG幫助我們維護程式，這一篇完整記錄了我編寫的LOG動態函式庫寫法與使用方式，LO
      
    
    </summary>
    
      <category term="C" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="Logger" scheme="https://teddybearfp.github.io/tags/Logger/"/>
    
      <category term="vprintf" scheme="https://teddybearfp.github.io/tags/vprintf/"/>
    
      <category term="stdarg.h" scheme="https://teddybearfp.github.io/tags/stdarg-h/"/>
    
  </entry>
  
</feed>
