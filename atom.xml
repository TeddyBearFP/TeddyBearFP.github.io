<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泰迪熊的程式足跡</title>
  
  <subtitle>遊走程式森林的泰迪熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teddybearfp.github.io/"/>
  <updated>2019-03-25T14:53:55.834Z</updated>
  <id>https://teddybearfp.github.io/</id>
  
  <author>
    <name>G.C.L.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 資料視覺化(Data Visualization)</title>
    <link href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/"/>
    <id>https://teddybearfp.github.io/2019/03/20/Python-資料視覺化/</id>
    <published>2019-03-20T04:05:16.000Z</published>
    <updated>2019-03-25T14:53:55.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>數字比較不能讓一目了然資料的變化，驗證數據時看這些數字比較無感，雖然excel就可以畫圖形了，但是我們編寫一個簡易的資料視覺化程式更方便更快速達成，可以將同層中的csv數據透過matplotlib分色畫成折線圖並存成圖檔<br><img src="https://i.imgur.com/UxYN8pR.png" alt=""></p><h2 id="編寫中文"><a href="#編寫中文" class="headerlink" title="編寫中文"></a>編寫中文</h2><p>Python編碼默認是ASCII格式，沒修改編碼的情況下無法編寫中文，所以輸入中文會報錯，解決辦法有以下兩種</p><p>第一種方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br></pre></td></tr></table></figure></p><p>第二種方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br></pre></td></tr></table></figure></p><h2 id="glob讀取-csv"><a href="#glob讀取-csv" class="headerlink" title="glob讀取.csv"></a>glob讀取.csv</h2><p>glob.iglob(pathname), 一次只獲取一個匹配路徑<br>glob.glob（pathname), 獲取所有的匹配路徑<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob </span><br><span class="line"></span><br><span class="line">f = glob.iglob(<span class="string">r'.\*.csv'</span>)</span><br><span class="line">input_files = glob.glob(<span class="string">r'*.csv'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> input_file <span class="keyword">in</span> input_files: <span class="comment">#檢視取得到的內容</span></span><br><span class="line">    print(input_file)</span><br></pre></td></tr></table></figure></p><h2 id="讀取CSV內容"><a href="#讀取CSV內容" class="headerlink" title="讀取CSV內容"></a>讀取CSV內容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">input_files = <span class="string">"Teddybearfp.csv"</span></span><br><span class="line">file = pd.read_csv(input_file,encoding = <span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開啟 CSV 檔案</span></span><br><span class="line"><span class="keyword">with</span> open(input_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> rFile:</span><br><span class="line"></span><br><span class="line"><span class="comment">#讀取 CSV 檔案內容</span></span><br><span class="line">filereader = csv.reader(rFile)</span><br><span class="line"></span><br><span class="line"><span class="comment">#filereader.next() 返回即为第一行的内容(通常為標題)</span></span><br><span class="line">header = next(filereader)</span><br><span class="line"></span><br><span class="line"><span class="comment">#剖析header得到title標題與count_header總數</span></span><br><span class="line">title = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_header = len(title)</span><br></pre></td></tr></table></figure><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(plt, data)</span>:</span></span><br><span class="line">    x = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    y = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    <span class="comment">#調整圖形大小</span></span><br><span class="line">    <span class="comment">#默認像素：[6.0,4.0]，分辨率100，圖形大小 600X400</span></span><br><span class="line">    <span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#畫出圖形</span></span><br><span class="line">    plt.xlabel(<span class="string">'Seconds'</span>) <span class="comment">#X軸</span></span><br><span class="line">    plt.ylabel(<span class="string">'Temperature'</span>) <span class="comment">#Y軸</span></span><br><span class="line">    <span class="comment">#plt.ylim((1, 8)) 可以設置極限值改變顯示區域</span></span><br><span class="line">    plt.plot(x, y,color = <span class="string">"red"</span>, label = <span class="string">"A"</span>, linewidth = <span class="number">1</span>) <span class="comment">#畫線並設置顏色與標籤和線寬</span></span><br><span class="line">    plt.legend(loc = <span class="string">'best'</span>,prop=&#123;<span class="string">'size'</span>:<span class="number">6</span>&#125;) <span class="comment">#將標籤找到數據較少的地方放置(盡可能不會遮蔽到數據),prop調整圖示大小</span></span><br><span class="line">    plt.savefig(filename + <span class="string">".png"</span>, dpi=<span class="number">300</span>)<span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#plt.plot(x, y) 線(預設)</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, 'o') 點</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, '-o') 線與點</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, '--o') 虛線與點</span></span><br><span class="line"></span><br><span class="line">data = [ (<span class="number">1</span>,<span class="number">2</span>), (<span class="number">2</span>,<span class="number">8</span>), (<span class="number">5</span>,<span class="number">2</span>), (<span class="number">7</span>,<span class="number">6</span>), (<span class="number">9</span>,<span class="number">10</span>) ]</span><br><span class="line"><span class="comment">#呼叫畫圖函式</span></span><br><span class="line">plotData(plt, data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/uOnyP1Z.png" alt=""></p><h2 id="實作csv資料視覺化"><a href="#實作csv資料視覺化" class="headerlink" title="實作csv資料視覺化"></a>實作csv資料視覺化</h2><p>以下實作是將同層的csv資料畫成折線圖(例如:溫度變化圖)讓我們繼續看下去<br><img src="https://i.imgur.com/VYcYMR0.png" alt="" title="眼花撩亂的csv數據"></p><p>不要懷疑上面的圖真的是模糊過的不是眼睛出問題</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(plt, data, color, filename, label)</span>:</span></span><br><span class="line">    x = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    y = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    plt.xlabel(<span class="string">'Seconds'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Temperature'</span>)</span><br><span class="line">    plt.rcParams[<span class="string">'savefig.dpi'</span>] = <span class="number">800</span></span><br><span class="line">    plt.plot(x, y, <span class="string">'-'</span>, color = color, label = label)</span><br><span class="line">    plt.legend(loc = <span class="string">'best'</span>,prop=&#123;<span class="string">'size'</span>:<span class="number">6</span>&#125;)<span class="comment">#prop調整圖示大小</span></span><br><span class="line">    plt.savefig(filename + <span class="string">".png"</span>, dpi=<span class="number">300</span>)<span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#讀檔取得標題</span></span><br><span class="line">input_files = glob.glob(<span class="string">r'*.csv'</span>)</span><br><span class="line"><span class="keyword">for</span> input_file <span class="keyword">in</span> input_files:</span><br><span class="line">    result_data = []</span><br><span class="line">    expect = []</span><br><span class="line">    file = pd.read_csv(input_file,encoding = <span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(input_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> rFile:</span><br><span class="line">        filereader = csv.reader(rFile)</span><br><span class="line">        header = next(filereader)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#剖析header得到title標題與count_header總數</span></span><br><span class="line">    title = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">    count_header = len(title)  </span><br><span class="line"></span><br><span class="line">    color = [<span class="string">"green"</span>, <span class="string">"skyblue"</span>, <span class="string">"orange"</span>, <span class="string">"gray"</span>, <span class="string">"blue"</span>, </span><br><span class="line">             <span class="string">"burlywood"</span>, <span class="string">"magenta"</span>, <span class="string">"cyan"</span>, <span class="string">"black"</span>, <span class="string">"red"</span>,</span><br><span class="line">             <span class="string">"purple"</span>, <span class="string">"brown"</span>, <span class="string">"forestgreen"</span>, <span class="string">"slateblue"</span>, <span class="string">"teal"</span>,</span><br><span class="line">             <span class="string">"mintcream"</span>, <span class="string">"navy"</span>, <span class="string">"gold"</span>, <span class="string">"bisque"</span>, <span class="string">"aqua"</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#讀取每一行的資料並放到list中</span></span><br><span class="line">    <span class="keyword">for</span> number, title_ <span class="keyword">in</span> enumerate(title):</span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> enumerate(file[title_]):</span><br><span class="line">            data.append(content)</span><br><span class="line">        </span><br><span class="line">        result_data.append(data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#畫目標曲線(若不需要這段可以拿掉)</span></span><br><span class="line">    data = []</span><br><span class="line">    dataLength = len(file[title[<span class="number">0</span>]])</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(<span class="number">110</span>)</span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    title.append(<span class="string">"target"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#繪製圖形</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(result_data)):</span><br><span class="line">        plotData(plt, result_data[n], color[n], input_file.strip(<span class="string">".csv"</span>),title[n])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ZibqG9k.png" alt="" title="完成溫度變化折線圖"></p><h2 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h2><p>關於溫度如何收斂呢?我們可以透過用PID控制器的方式達到數據收斂，PID控制器（比例-積分-微分控制器），由比例單元（P）、積分單元（I）和微分單元（D）組成[1]。可以透過調整這三個單元的增益Kp，Ki和Kd來調定其特性。PID控制器主要適用於基本上線性，且動態特性不隨時間變化的系統。<br>P控制器: Kp * Error(誤差)<br>PI控制器: Kp * Error(誤差) + Ki * SumOfError(N組)<br>​PID 的​參數​調整​指​的是​通過​設定 P、​I 與 D 的​最佳​增益來達成</p><h2 id="生活小記"><a href="#生活小記" class="headerlink" title="生活小記"></a>生活小記</h2><p>今天同事跟我說個驚人事實就是漫威屬於迪士尼的，後來我看到復仇者聯盟的宣傳照突然有種喜感，接下來換我告訴他驚人的事實，中國有嘻哈也是迪士尼的，因為Diss你~</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.itread01.com/articles/1476166832.html" target="_blank" rel="noopener">簡單掌握Python中glob模塊查找文件路徑的用法</a><br><a href="https://tree.rocks/python/python-matplotlib-simple-linechart/" target="_blank" rel="noopener">Python Matplotlib 簡單繪制圖表教學 ( 折線圖 )</a><br><a href="https://zh.wikipedia.org/zh-tw/PID%E6%8E%A7%E5%88%B6%E5%99%A8" target="_blank" rel="noopener">PID控制器- 维基百科，自由的百科全书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;數字比較不能讓一目了然資料的變化，驗證數據時看這些數字比較無感，雖然excel就可以畫圖形了，但是我們編寫一個簡易的資料視覺化程式更方便更快
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="資料視覺化" scheme="https://teddybearfp.github.io/tags/%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/"/>
    
      <category term="Data Visualization" scheme="https://teddybearfp.github.io/tags/Data-Visualization/"/>
    
      <category term="折線圖" scheme="https://teddybearfp.github.io/tags/%E6%8A%98%E7%B7%9A%E5%9C%96/"/>
    
      <category term="csv" scheme="https://teddybearfp.github.io/tags/csv/"/>
    
      <category term="matplotlib" scheme="https://teddybearfp.github.io/tags/matplotlib/"/>
    
      <category term="PID控制器" scheme="https://teddybearfp.github.io/tags/PID%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python 資料比對</title>
    <link href="https://teddybearfp.github.io/2019/03/19/Python-%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D/"/>
    <id>https://teddybearfp.github.io/2019/03/19/Python-資料比對/</id>
    <published>2019-03-19T05:05:16.000Z</published>
    <updated>2019-03-24T03:27:59.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如我們有兩個大型Excel(各四萬筆)要比對，要做三種資料(A∩B)、(A-A∩B)、(B-A∩B)那麼如果用excel篩選後複製貼上反覆操作後有錯誤風險且速度較慢，透過篩選複製貼上繁瑣且難發現有重複資料或是資料不全的項目，這一篇記錄了我去年前幫忙公務員解決的問題，想當初有公務員周期性的每個月需要做好幾筆，後來喝杯咖啡執行這程式資料就出來了輕鬆了不少呢</p><p>此篇使用的測試資料內容皆為亂掰的不是真實資料~</p><h2 id="舉例"><a href="#舉例" class="headerlink" title="舉例"></a>舉例</h2><p>一開始我們有兩份excel名單，一份名單內容是三月住宿而另一份是四月住宿的名單，那麼我們要產出新的三份excel且不同欄位需合併</p><ul><li>三月住宿四月皆住宿者</li><li>三月住宿四月沒住宿者</li><li>三月沒住四月新住宿者</li></ul><p>下圖為三月住宿名單(紅色為與四月相同的部分)<br><img src="https://i.imgur.com/6Vagz7A.png" alt="" title="三月住宿者"></p><p>下圖為三月住宿名單(紅色為與三月相同的部分)<br><img src="https://i.imgur.com/VMFyhq0.png" alt="" title="四月住宿者"></p><p>那麼接下來我們的目標是要產出以下三種excel(兩份資料欄位需合併)</p><p>第一種(三月住宿四月皆住宿者)<br><img src="https://i.imgur.com/9O9yAMS.png" alt=""></p><p>第二種(三月住宿四月沒住宿者)<br><img src="https://i.imgur.com/hSrL21x.png" alt=""></p><p>第三種(三月沒住四月新住宿者)<br><img src="https://i.imgur.com/5wLYGTl.png" alt=""></p><h2 id="實作Excel交叉比對"><a href="#實作Excel交叉比對" class="headerlink" title="實作Excel交叉比對"></a>實作Excel交叉比對</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">input_file1 = <span class="string">"a.csv"</span></span><br><span class="line">input_file2 = <span class="string">"b.csv"</span></span><br><span class="line">write_data = <span class="string">''</span></span><br><span class="line">result_title = []</span><br><span class="line">result_titlea = []</span><br><span class="line">result_titleb = []</span><br><span class="line">same = []</span><br><span class="line">diffa= []</span><br><span class="line">diffb = []</span><br><span class="line">IDb = []</span><br><span class="line"><span class="comment">#read two files</span></span><br><span class="line">file1 = pd.read_csv(input_file1,encoding = <span class="string">'utf8'</span>)</span><br><span class="line">file2 = pd.read_csv(input_file2,encoding = <span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">with</span> open(input_file1,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> filex1:</span><br><span class="line">    filereadera = csv.reader(filex1)</span><br><span class="line">    headera = next(filereadera)</span><br><span class="line"><span class="comment">#counting header and write headercontent</span></span><br><span class="line">titlea = [ n <span class="keyword">for</span> n <span class="keyword">in</span> headera <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_headera = len(titlea)      </span><br><span class="line"><span class="keyword">with</span> open(input_file2,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> filex2:</span><br><span class="line">    filereaderb = csv.reader(filex2)</span><br><span class="line">    headerb = next(filereaderb)</span><br><span class="line"><span class="comment">#counting header and write headercontent</span></span><br><span class="line">titleb = [ n <span class="keyword">for</span> n <span class="keyword">in</span> headerb <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_headerb = len(titleb)   </span><br><span class="line">l_a = len(file1[titlea[<span class="number">0</span>]])</span><br><span class="line">l_b = len(file2[titleb[<span class="number">0</span>]])</span><br><span class="line">count_a = <span class="number">0</span></span><br><span class="line">count_b = <span class="number">0</span></span><br><span class="line"><span class="comment">#diffb檔案的title</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">    result_titleb.append(b)</span><br><span class="line">diffb.append(result_titleb)</span><br><span class="line"><span class="comment">#a跟b title若重複,刪除重複者</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">del</span> titleb[n]</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"><span class="comment">#ab相同檔案title,diffa檔案title</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    result_title.append(a)</span><br><span class="line">    result_titlea.append(a)</span><br><span class="line">diffa.append(result_titlea)</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="string">'身分證號'</span><span class="keyword">or</span> b ==<span class="string">'身分證'</span><span class="keyword">or</span> b ==<span class="string">'身份證'</span><span class="keyword">or</span> b ==<span class="string">'身份證號'</span> <span class="keyword">or</span> b ==<span class="string">'id'</span><span class="keyword">or</span> b ==<span class="string">'ID'</span><span class="keyword">or</span> b ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> b ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result_title.append(b)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    <span class="keyword">if</span> a ==<span class="string">'身分證號'</span><span class="keyword">or</span> a ==<span class="string">'身分證'</span><span class="keyword">or</span> a ==<span class="string">'身份證'</span><span class="keyword">or</span> a ==<span class="string">'身份證號'</span> <span class="keyword">or</span> a ==<span class="string">'id'</span><span class="keyword">or</span> a ==<span class="string">'ID'</span><span class="keyword">or</span> a ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> a ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        IDa = [content <span class="keyword">for</span> content <span class="keyword">in</span> file1[a]]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count_a += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> result_titleb:</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="string">'身分證號'</span><span class="keyword">or</span> b ==<span class="string">'身分證'</span><span class="keyword">or</span> b ==<span class="string">'身份證'</span><span class="keyword">or</span> b ==<span class="string">'身份證號'</span> <span class="keyword">or</span> b ==<span class="string">'id'</span><span class="keyword">or</span> b ==<span class="string">'ID'</span><span class="keyword">or</span> b ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> b ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        IDb = [content <span class="keyword">for</span> content <span class="keyword">in</span> file2[b]]     </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count_b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">same.append(result_title)</span><br><span class="line">count_ac = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> IDa:</span><br><span class="line">    count_bc = <span class="number">0</span></span><br><span class="line">    same_temp = []</span><br><span class="line">    diff_temp = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> IDb:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">for</span> ta <span class="keyword">in</span> titlea:</span><br><span class="line">                <span class="keyword">if</span> type(file1[ta][count_ac]) != str <span class="keyword">and</span> np.isnan(float(file1[ta][count_ac])):</span><br><span class="line">                    same_temp.append(<span class="string">'none'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    same_temp.append(str(file1[ta][count_ac]))</span><br><span class="line">            bc = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> titleb:</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> type(file2[tb][count_bc]) != str <span class="keyword">and</span> np.isnan(float(file2[tb][count_bc])):</span><br><span class="line">                    same_temp.append(<span class="string">'none'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    same_temp.append(str(file2[tb][count_bc]))</span><br><span class="line">                bc += <span class="number">1</span></span><br><span class="line">            same.append(same_temp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> a!= b <span class="keyword">and</span> count_bc+<span class="number">1</span> == l_b:</span><br><span class="line">            <span class="keyword">for</span> ta <span class="keyword">in</span> titlea:</span><br><span class="line">                diff_temp.append(str(file1[ta][count_ac]))</span><br><span class="line">            diffa.append(diff_temp)</span><br><span class="line">        count_bc += <span class="number">1</span></span><br><span class="line">    count_ac += <span class="number">1</span></span><br><span class="line">count_bc = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> IDb:</span><br><span class="line">    count_ac = <span class="number">0</span></span><br><span class="line">    same_temp = []</span><br><span class="line">    diff_temp = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> IDa:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> a!= b <span class="keyword">and</span> count_ac+<span class="number">1</span> == l_a:</span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> result_titleb:</span><br><span class="line">                diff_temp.append(str(file2[tb][count_bc]))</span><br><span class="line">            diffb.append(diff_temp)</span><br><span class="line">        count_ac += <span class="number">1</span></span><br><span class="line">    count_bc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ab檔案皆存在者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    filewriter = csv.writer(file)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> same:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'僅存在a檔案者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file2:</span><br><span class="line">    filewriter = csv.writer(file2)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> diffa:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'僅存在b檔案者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file3:</span><br><span class="line">    filewriter = csv.writer(file3)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> diffb:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'感謝seafood 讚嘆seafood'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="可能遇到的問題"><a href="#可能遇到的問題" class="headerlink" title="可能遇到的問題"></a>可能遇到的問題</h2><p>將excel轉成csv的格式可能會遇到編碼問題</p><p>解決方法:<br>1.excel檔案另存新檔為類型csv<br>2.再用Notepad++編輯csv<br>3.上方選項&gt;&gt;編碼&gt;&gt;轉換至UTF-8碼格式(檔首無BOM)<br>4.存檔<br>5.執行程式<br>6.Notepad++編輯csv<br>7.上方選項&gt;&gt;編碼&gt;&gt;轉換至ANSI碼格式<br>8.存檔</p><p>因為要處理中文字時需轉為UTF-8格式，處理完後因為csv的顯示需要用ANSI所以回覆他為ANSI編碼</p><h2 id="笑話一則"><a href="#笑話一則" class="headerlink" title="笑話一則"></a>笑話一則</h2><p>哪個藝人很會阻擋人?</p><p>周杰倫<br>因為周董(台語:阻擋)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;假如我們有兩個大型Excel(各四萬筆)要比對，要做三種資料(A∩B)、(A-A∩B)、(B-A∩B)那麼如果用excel篩選後複製貼上反覆
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="csv" scheme="https://teddybearfp.github.io/tags/csv/"/>
    
      <category term="資料比對" scheme="https://teddybearfp.github.io/tags/%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D/"/>
    
  </entry>
  
  <entry>
    <title>專案_介面與動態連結檔架構</title>
    <link href="https://teddybearfp.github.io/2019/03/12/%E5%B0%88%E6%A1%88-%E4%BB%8B%E9%9D%A2%E8%88%87%E5%8B%95%E6%85%8B%E9%80%A3%E7%B5%90%E6%AA%94%E6%9E%B6%E6%A7%8B/"/>
    <id>https://teddybearfp.github.io/2019/03/12/專案-介面與動態連結檔架構/</id>
    <published>2019-03-12T04:05:16.000Z</published>
    <updated>2019-03-19T14:05:58.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一個專案的架構編寫是非常重要的，若是架構不太好，事隔多時回來看程式碼，應該都忘光光了，所以好的架構可以讓維護更方便，並且除錯也比較快速，今天所紀錄的是介面與<a href="https://teddybearfp.github.io/2018/11/02/C-dll/#more">動態連結檔</a>溝通的架構方法之一，而整個專案架構是遵守Model-View-ViewModel(MVVM)</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>透過上層介面MyProj(project)呼叫MyCore(dll)使用底層函式，這樣做的好處有</p><ul><li>可以將前端與底層分開進行開發(開發速度快與分工詳細)</li><li>函式呼叫正確與否就知道dll正確性(除錯與責任歸屬快速)</li></ul><h2 id="動態連結檔概述"><a href="#動態連結檔概述" class="headerlink" title="動態連結檔概述"></a>動態連結檔概述</h2><p><img src="https://i.imgur.com/NrWFEhc.png" alt=""></p><h2 id="動態連結檔各檔描述"><a href="#動態連結檔各檔描述" class="headerlink" title="動態連結檔各檔描述"></a>動態連結檔各檔描述</h2><h3 id="MyCore-h-MyCore-cpp"><a href="#MyCore-h-MyCore-cpp" class="headerlink" title="MyCore.h / MyCore.cpp"></a>MyCore.h / MyCore.cpp</h3><p>提供純C介面給上層呼叫<br>純C的目的是之後這個動態連結檔的相容性很高</p><p>函式內參數為下方例子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> “C” Initiate(<span class="keyword">void</span> *dev);</span><br></pre></td></tr></table></figure></p><p>在此接收到void *dev只有一個目的就是為了轉成Core呼叫Core內部函式*dev = new Core(獲得Core的Class得予再往下呼叫)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Core *core = (Core*)*dev;</span><br><span class="line">CoreRetCide ret = core-&gt;initiate(dev,ctx);</span><br></pre></td></tr></table></figure></p><p>編寫結構與列舉<br>enum, struct<br>在此注意要導入其它的.h(例如core.h, TBFP03.h)</p><h3 id="Core-h-Core-cpp"><a href="#Core-h-Core-cpp" class="headerlink" title="Core.h / Core.cpp"></a>Core.h / Core.cpp</h3><p>這一層就是整台機器</p><p>增加所有板子、Sensor函式<br>    (例如:目前有TBFP03板子往後可能新增TBFP04…)</p><p>函式呼叫板子與Sensor功能</p><h3 id="Controlboard-h-Controlboard-cpp"><a href="#Controlboard-h-Controlboard-cpp" class="headerlink" title="Controlboard.h / Controlboard.cpp"></a>Controlboard.h / Controlboard.cpp</h3><p>基類，用來讓類似的新板子有同個雛形</p><p>Virtual Function = 0 的要實作</p><p>Virtual Function { do Something }可實作可不實作</p><p>Protected的內容，繼承者才可以使用其他人無法使用</p><h3 id="TBFP03-h-TBFP03-cpp"><a href="#TBFP03-h-TBFP03-cpp" class="headerlink" title="TBFP03.h / TBFP03.cpp"></a>TBFP03.h / TBFP03.cpp</h3><p>繼承Controlboard並實作</p><p>用到基類的enum,struct需加class(告訴編譯器屬於哪個class)<br>例如:<br>Controlboard.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> MotorID</span><br><span class="line">&#123;</span><br><span class="line">    MotorA,</span><br><span class="line">    MotorB,</span><br><span class="line">    MotorC,</span><br><span class="line">    MotorALL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MotorParam</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> id;</span><br><span class="line">    <span class="keyword">float</span> steps;</span><br><span class="line">    <span class="keyword">float</span> hz;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pace;</span><br><span class="line">    MotorParam()</span><br><span class="line">    &#123;</span><br><span class="line">        steps = <span class="number">1</span>;</span><br><span class="line">        hz = <span class="number">20</span>;</span><br><span class="line">        pace = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TBFP03.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controlboard::MotorID</span><br></pre></td></tr></table></figure></p><h2 id="動態連結檔實作"><a href="#動態連結檔實作" class="headerlink" title="動態連結檔實作"></a>動態連結檔實作</h2><h3 id="MyCore-h-MyCore-cpp-1"><a href="#MyCore-h-MyCore-cpp-1" class="headerlink" title="MyCore.h / MyCore.cpp"></a>MyCore.h / MyCore.cpp</h3><p>MyCore.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYCORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYCORE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(MYCORE_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> MYCORE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> MYCORE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* CoreDev;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoreMotorCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> moveSteps[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">float</span> moveSpeed[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">float</span> stopTime;</span><br><span class="line">    CoreMotorCtx()</span><br><span class="line">    &#123;</span><br><span class="line">        moveSteps[<span class="number">0</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        moveSpeed[<span class="number">0</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        stopTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">MYCORE_API CoreRetCode <span class="title">CoreMotorMove</span><span class="params">(CoreDev dev, CoreMotorCtx motorCtx)</span></span>;</span><br></pre></td></tr></table></figure></p><p>MyCore.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tbfp03.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"core.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">CVCORE_API CoreRetCode <span class="title">CoreMotorMove</span><span class="params">( CoreDev dev, CoreMotorCtx motorCtx )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( dev == <span class="literal">NULL</span> ) <span class="keyword">return</span> CoreFailed;</span><br><span class="line"></span><br><span class="line">    Core *core = (Core *)dev;</span><br><span class="line">    CoreRetCode ret = core-&gt;MotorMove(motorCtx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ret != CoreOk )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Core-h-Core-cpp-1"><a href="#Core-h-Core-cpp-1" class="headerlink" title="Core.h / Core.cpp"></a>Core.h / Core.cpp</h3><p>Core.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CORE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tbfp03.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Core</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Core();</span><br><span class="line">    </span><br><span class="line">    <span class="function">CoreRetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span></span>;</span><br><span class="line">    </span><br><span class="line">    TBFP03 tbfp03;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Core.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CoreRetCode Core::MotorMove(CoreMotorCtx motorCtx)</span><br><span class="line">&#123;</span><br><span class="line">    ControlBoard::RetCode status = tbfp03.MotorMove(motorCtx);</span><br><span class="line">    <span class="keyword">if</span>( status == ControlBoard::Failed)</span><br><span class="line">        <span class="keyword">return</span> CoreFailed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CoreOk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Controlboard-h-Controlboard-cpp-1"><a href="#Controlboard-h-Controlboard-cpp-1" class="headerlink" title="Controlboard.h / Controlboard.cpp"></a>Controlboard.h / Controlboard.cpp</h3><p>Controlboard.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONTROLBOARD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTROLBOARD_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlBoard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ControlBoard();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONTROLBOARD_H</span></span></span><br></pre></td></tr></table></figure></p><h3 id="TBFP03-h-TBFP03-cpp-1"><a href="#TBFP03-h-TBFP03-cpp-1" class="headerlink" title="TBFP03.h / TBFP03.cpp"></a>TBFP03.h / TBFP03.cpp</h3><p>TBFP03.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBFP03_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBFP03_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"controlboard.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBFP03</span>:</span> <span class="keyword">public</span> ControlBoard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TBFP03();</span><br><span class="line">    <span class="function">CoreRetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>TBFP03.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CoreRetCode status;</span><br><span class="line">status = doSomeThing;</span><br><span class="line"><span class="keyword">if</span>(status != CoreRetCode::Ok)&#123;</span><br><span class="line">    <span class="keyword">return</span> Failed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Ok</span><br></pre></td></tr></table></figure></p><h2 id="可能遇到的問題"><a href="#可能遇到的問題" class="headerlink" title="可能遇到的問題"></a>可能遇到的問題</h2><h3 id="問題一"><a href="#問題一" class="headerlink" title="問題一"></a>問題一</h3><p>Q  Complier Error C3646的定義為unknown override specifier</p><p>A   此次的解決方法是因為a.h include “c.h”了，這時候再用b.h include “a.h”又同時include “c.h”<br>        所以發生重複導入問題，應該只要include “a.h”</p><pre><code>專業解答:循環引用在分離式編譯中，我們往往習慣將不同的類或者函數分別寫在不同的函數中，提高工作效率。但如果在使用時出現兩個類分別在兩個不同的文件中編寫，並且相互引用，則會出現循環引用，引發此錯誤。原文網址：https://read01.com/J6k0yz.html</code></pre><h3 id="問題二"><a href="#問題二" class="headerlink" title="問題二"></a>問題二</h3><p>Q     使用別的class中的enum程式不認得，例如Class A中的enum MotorID<br>        在使用時MotorID不被認得</p><p>A       因為使用其他的class中的member需要在前面表示是屬於哪個class<br>        A::MotorID這樣就OK囉!</p><h3 id="問題三"><a href="#問題三" class="headerlink" title="問題三"></a>問題三</h3><p>Q      Qml中不能使用dll中的 enum  例如:enum MotorID</p><p>A      在main.cpp中註冊 qRegisterMetaType<motorid>(“MotorID”);</motorid></p><h3 id="問題四"><a href="#問題四" class="headerlink" title="問題四"></a>問題四</h3><p>Q       找不到內部library的 .lib</p><p>A       將pro的lib路徑檢查導入正確位置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一個專案的架構編寫是非常重要的，若是架構不太好，事隔多時回來看程式碼，應該都忘光光了，所以好的架構可以讓維護更方便，並且除錯也比較快速，今天
      
    
    </summary>
    
      <category term="架構" scheme="https://teddybearfp.github.io/categories/%E6%9E%B6%E6%A7%8B/"/>
    
    
      <category term="架構" scheme="https://teddybearfp.github.io/tags/%E6%9E%B6%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cyconsole</title>
    <link href="https://teddybearfp.github.io/2019/03/11/Cyconsole/"/>
    <id>https://teddybearfp.github.io/2019/03/11/Cyconsole/</id>
    <published>2019-03-11T04:05:16.000Z</published>
    <updated>2019-03-12T11:03:31.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在研發過程中，軟硬體與韌體都非常重要，某一個的錯誤都會導致異常現象，有時候檢驗不出軟體問題的時候我們就需要檢查韌體與硬體的問題，最近認識這個工具Cyconsole，可以透過Cyconsole下指令給firmware或是硬體，可以驗證Cypress或是FPGA Code正確性，這一篇記錄一下這個我很少用到的工具</p><h2 id="Cyconsole"><a href="#Cyconsole" class="headerlink" title="Cyconsole"></a>Cyconsole</h2><h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><p>是Cypress公司釋出的軟體，可以用來下指令到底層，來驅動韌體或是硬體，<br>用來檢測，Cyconsole它的Icon如下圖<br><img src="https://i.imgur.com/D7IIMh2.png" alt=""></p><h3 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h3><p>在連結裝置後，我們開Cyconsole並點選到Misc.可以找到我們的USB連結裝置，接著點選上方Options內的Ez-USB會跳出下方第二張圖<br><img src="https://i.imgur.com/IxVzPKs.png" alt=""></p><h3 id="EZ-USB"><a href="#EZ-USB" class="headerlink" title="EZ-USB"></a>EZ-USB</h3><p><img src="https://i.imgur.com/EyO6IMn.png" alt=""></p><h4 id="逐一輸入的方式-通常是直接下給FPGA"><a href="#逐一輸入的方式-通常是直接下給FPGA" class="headerlink" title="逐一輸入的方式(通常是直接下給FPGA)"></a>逐一輸入的方式(通常是直接下給FPGA)</h4><ul><li>Req輸入request方式</li><li>Value輸入計算出來的16進制值</li><li>Index輸入位置</li></ul><p>一組一組的輸入例如:<br>第一二組輸入的value為十進制4000<br>用兩個Byte表示十六進制為FA0</p><p>第三四組輸入的value為十進制1500<br>用兩個Byte表示十六進制為5DC<br>皆輸入完成後動作</p><p>第一組(HiByte)<br>req: 0x6e<br>value: 0x000f<br>index: 0x0a<br>Vend Req</p><p>第二組(LoByte)<br>req: 0x6e<br>value: 0x00a0<br>index: 0x0b<br>Vend Req</p><p>第三組(HiByte)<br>req: 0x6e<br>value: 0x0005<br>index: 0x0c<br>Vend Req</p><p>第四組(LoByte)<br>req: 0x6e<br>value: 0x00dc<br>index: 0x0d<br>Vend Req</p><h4 id="一整組buffer傳入-通常可能是先傳給Firmware處理"><a href="#一整組buffer傳入-通常可能是先傳給Firmware處理" class="headerlink" title="一整組buffer傳入(通常可能是先傳給Firmware處理)"></a>一整組buffer傳入(通常可能是先傳給Firmware處理)</h4><ul><li>request: Firmware定義的request</li><li>Length: buffer長度</li><li>Dir: 資料的方向性</li><li>Hex Byte: 照順序輸入值</li></ul><p>跟上方的輸入的值一樣但式輸入的request不一樣<br>req: 0x50<br>length: 5<br>dir: 0<br>Hex Byte: 00 0f a0 05 dc<br>Vend Req</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在研發過程中，軟硬體與韌體都非常重要，某一個的錯誤都會導致異常現象，有時候檢驗不出軟體問題的時候我們就需要檢查韌體與硬體的問題，最近認識這個
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Cyconsole" scheme="https://teddybearfp.github.io/tags/Cyconsole/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 筆記</title>
    <link href="https://teddybearfp.github.io/2019/03/04/LeetCode/"/>
    <id>https://teddybearfp.github.io/2019/03/04/LeetCode/</id>
    <published>2019-03-04T04:05:16.000Z</published>
    <updated>2019-03-05T12:44:47.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Leetcode裡面有許多有趣的題目，在作答過程中可以腦力激盪，答題完後還可以參考大家是怎麼來解決問題的，因為會發現程式不僅功能要正確，還要考慮到Runtime與Memory的消耗，所以此篇記錄了一些不錯的解題方法</p><h2 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136_Single Number"></a>136_Single Number</h2><p>這個題目是要從一個元素皆出現兩次的整數陣列中，找尋唯一出現過一次的整數<br>下面我們利用XOR互斥的概念解析這個題目<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e: nums) a ^= e;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Runtime: 16 ms<br>Memory: 9.7MB</p><h2 id="461-Hamming-Distance"><a href="#461-Hamming-Distance" class="headerlink" title="461_Hamming Distance"></a>461_Hamming Distance</h2><p>Hamming Distance指的是將2個數字轉二進位數字後計算漢明距離<br>ex:<br>Input: 1, 4<br>0 0 0 1<br>0 1 0 0</p><p>Output: 2<br>解題辦法:我們用XOR得到兩個數的互斥值取得漢明距離<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = x ^ y;</span><br><span class="line">    <span class="keyword">int</span> hd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">1</span>) hd++;</span><br><span class="line">        i &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二元樹題型"><a href="#二元樹題型" class="headerlink" title="二元樹題型"></a>二元樹題型</h2><h3 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104_Maximum Depth of Binary Tree"></a>104_Maximum Depth of Binary Tree</h3><p>這題要求二元樹的深度<br>所謂二元樹的深度就是從 根節點(root) 到 葉節點(leaf) 的距離。 (沒有子節點的節點稱做葉節點)<br>解題關鍵遞迴呼叫maxDepth()函式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    TreeNode* tmp = root-&gt;left;</span><br><span class="line">    root-&gt;left = invertTree(root-&gt;right);</span><br><span class="line">    root-&gt;right = invertTree(tmp);</span><br><span class="line">    <span class="keyword">return</span> max(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="226-Invert-Binary-Tree"><a href="#226-Invert-Binary-Tree" class="headerlink" title="226_Invert Binary Tree"></a>226_Invert Binary Tree</h3><p>用遞迴的方式二元樹以root為中心左右反轉<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    TreeNode* right = invertTree(root-&gt;right);</span><br><span class="line">    TreeNode* left = invertTree(root-&gt;left);</span><br><span class="line">    root-&gt;left = right;</span><br><span class="line">    root-&gt;right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Leetcode裡面有許多有趣的題目，在作答過程中可以腦力激盪，答題完後還可以參考大家是怎麼來解決問題的，因為會發現程式不僅功能要正確，還要
      
    
    </summary>
    
      <category term="Note" scheme="https://teddybearfp.github.io/categories/Note/"/>
    
    
      <category term="LeetCode" scheme="https://teddybearfp.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>StateMachine 狀態機</title>
    <link href="https://teddybearfp.github.io/2019/02/26/StateMachine/"/>
    <id>https://teddybearfp.github.io/2019/02/26/StateMachine/</id>
    <published>2019-02-26T04:05:16.000Z</published>
    <updated>2019-03-24T04:00:54.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們程式越寫越大型，可呼叫的函式越來越多的時候，就應該來做函式的控管，某些時候不能呼叫某些函式，否則可能導致不可預期的結果，例如:還沒Initial控制面板，卻呼叫函式要求馬達移動，這樣會有錯誤發生。所以我們可以編寫狀態機來解決這問題。</p><h2 id="狀態機舉例"><a href="#狀態機舉例" class="headerlink" title="狀態機舉例"></a>狀態機舉例</h2><p>可以透過這一篇<a href="http://nthucad.cs.nthu.edu.tw/~yyliu/personal/nou/04ds/fsm.html" target="_blank" rel="noopener">有限狀態機 (finite state machine)</a>舉例的販賣機行為了解狀態機的控管</p><h2 id="狀態機名詞簡介"><a href="#狀態機名詞簡介" class="headerlink" title="狀態機名詞簡介"></a>狀態機名詞簡介</h2><p>狀態<br>組成狀態機器的基本單位。 狀態機器可在任何特定時間進入一種狀態。</p><p>進入動作<br>進入狀態時所執行的動作</p><p>結束動作<br>結束狀態時所執行的動作</p><p>轉換<br>兩個狀態之間的定向關係，代表狀態機器對於發生特定事件類型的完整回應。</p><p>共用轉換<br>與一個或多個轉換共用來源狀態及觸發程序的轉換，但每個轉換各有其唯一的條件和動作。</p><p>觸發程序<br>會導致轉換發生的觸發活動。</p><p>條件<br>在發生觸發之後，條件約束必須評估為 true，才能使轉換完成。</p><p>轉換動作<br>在執行特定轉換時所執行的活動。</p><p>條件轉換<br>有明確條件的轉換。</p><p>自行轉換<br>從某狀態轉換成該狀態本身的轉換。</p><p>起始狀態<br>代表狀態機器起點的狀態。</p><p>最終狀態<br>代表狀態機器完成的狀態。</p><h2 id="狀態機設定"><a href="#狀態機設定" class="headerlink" title="狀態機設定"></a>狀態機設定</h2><ul><li><p>狀態可以有 Entry 和 Exit 動作。 (設定為最終狀態的狀態只能有一個進入動作)。</p></li><li><p>所有狀態都至少要有一個轉換，但最終狀態不能有任何轉換。</p></li></ul><h2 id="QState函式"><a href="#QState函式" class="headerlink" title="QState函式"></a>QState函式</h2><p>以下舉例為在statemachine.cpp中編寫的情況<br>statemachine為單例Inst()</p><h3 id="添加狀態"><a href="#添加狀態" class="headerlink" title="添加狀態"></a>添加狀態</h3><p>addState 添加狀態</p><p>ex:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InitState stateInit;</span><br><span class="line">addState(&amp;stateInit);</span><br></pre></td></tr></table></figure></p><h3 id="添加移轉狀態"><a href="#添加移轉狀態" class="headerlink" title="添加移轉狀態"></a>添加移轉狀態</h3><p>利用 QState::addTransition做state machine間的切換</p><p>ex:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line"><span class="comment">//上面這一句表示在stateNone狀態時接收到statemachine傳出的init()信號後會將state切換到stateInit狀態</span></span><br><span class="line"></span><br><span class="line">stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( move(<span class="keyword">float</span>, <span class="keyword">float</span>)), &amp;stateMotorMove );</span><br><span class="line"><span class="comment">//上面這一句表示在stateIdle狀態時接收到statemachine傳出的move(float, float)信號後會將state切換到stateMotorMove狀態</span></span><br></pre></td></tr></table></figure></p><h3 id="連結進入狀態與錯誤狀態"><a href="#連結進入狀態與錯誤狀態" class="headerlink" title="連結進入狀態與錯誤狀態"></a>連結進入狀態與錯誤狀態</h3><p>第一句將QAbstractState的entered信號跟自己創的on_state_entered信號槽連結<br>第二句是將每個狀態添加移轉狀態到errorstate<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> StateMachine::SetupState(BaseState *state)</span><br><span class="line">&#123;</span><br><span class="line">    connect( state, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()) );</span><br><span class="line">    state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</p><h3 id="設定初始狀態"><a href="#設定初始狀態" class="headerlink" title="設定初始狀態"></a>設定初始狀態</h3><p>透過setInitialState設定初始狀態</p><p>ex:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NoneState stateNone;</span><br><span class="line">setInitialState( &amp;stateNone );</span><br></pre></td></tr></table></figure></p><h3 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h3><p>在主執行緒(gui)中執行<br>start();</p><p>可以使用QObject的moveToThread將QObject的class創另一條新開的執行緒執行</p><p>statemachine.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QThread thd;</span><br></pre></td></tr></table></figure></p><p>statemachine.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">moveToThread(&amp;thd);</span><br><span class="line">connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line">thd.start();</span><br></pre></td></tr></table></figure></p><h2 id="狀態機流程"><a href="#狀態機流程" class="headerlink" title="狀態機流程"></a>狀態機流程</h2><h3 id="創建StateMachine-Class"><a href="#創建StateMachine-Class" class="headerlink" title="創建StateMachine Class"></a>創建StateMachine Class</h3><p>StateMachine class繼承QStateMachine並使用Q_OBJECT巨集，將class設為單例模式Static</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> :</span> <span class="keyword">public</span> QStateMachine</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    StateMachine();</span><br><span class="line">    ~StateMachine();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> StateMachine *<span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;sm; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> StateMachine sm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="創建BuildGraph-函式"><a href="#創建BuildGraph-函式" class="headerlink" title="創建BuildGraph()函式"></a>創建BuildGraph()函式</h3><p>接著在cpp內創建BuildGraph()函式新增狀態addState()、新增轉移addTrasition()、connect進入後的signal與slot<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> StateMachine::BuildGraph()</span><br><span class="line">&#123;</span><br><span class="line">    addState( &amp;stateNone );</span><br><span class="line">    addState( &amp;stateInit );</span><br><span class="line">    addState( &amp;stateHome );</span><br><span class="line">    addState( &amp;stateIdle );</span><br><span class="line"></span><br><span class="line">    stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line">    statePause.addTransition( <span class="keyword">this</span>, SIGNAL(cancel()), &amp;stateIdle );</span><br><span class="line"></span><br><span class="line">    SetupState(&amp;stateNone);</span><br><span class="line">    SetupState(&amp;stateInit);</span><br><span class="line"></span><br><span class="line">    setInitialState( &amp;stateNone );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the state machine with thread</span></span><br><span class="line">    moveToThread(&amp;thd);</span><br><span class="line">    connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line"></span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), QCoreApplication::instance(), SLOT(quit()));</span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), &amp;thd, SLOT(quit()));</span><br><span class="line"></span><br><span class="line">    connect(&amp;stateMotorMove, SIGNAL(moveOk()), <span class="keyword">this</span>, SLOT(onMoveOk()));</span><br><span class="line"></span><br><span class="line">    thd.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面步驟都完成後使用moveToThread將屬於QObject的class在新開的執行緒中執行<br>最後再透過ViewChanger呼叫BuildGraph()函式讓狀態機創建、連結與執行<br>例如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StateMachine::Inst()-&gt;BuildGraph();</span><br></pre></td></tr></table></figure></p><h2 id="程式關閉處理"><a href="#程式關閉處理" class="headerlink" title="程式關閉處理"></a>程式關閉處理</h2><p>為了避免程式運作時，按右上角的X終止程式<br>我們可以在qml中更改關閉行為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onClosing&#123;</span><br><span class="line">    close.accept =<span class="literal">false</span></span><br><span class="line">    mainWindow.closing()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改由C++內的狀態機去處理<br>運用connect的方式指定某些狀態可以關閉<br>某些狀態不可關閉(ex:RunningState、MotorMove…)</p><h2 id="實作狀態機"><a href="#實作狀態機" class="headerlink" title="實作狀態機"></a>實作狀態機</h2><p><img src="https://i.imgur.com/RJgHIb4.png" alt="" title="馬達控制狀態機圖"></p><h3 id="檔案名稱簡介"><a href="#檔案名稱簡介" class="headerlink" title="檔案名稱簡介"></a>檔案名稱簡介</h3><p>StateMachine: 定義狀態機、build graph<br>BaseState: 所有狀態的基類<br>InitialState: 初始化狀態<br>HomeState: 馬達歸位狀態<br>MotorMoveState: 馬達移動狀態<br>ErrorState: 錯誤狀態<br>Uninitial: 最終狀態</p><h3 id="StateMachine"><a href="#StateMachine" class="headerlink" title="StateMachine"></a>StateMachine</h3><p>statemachine.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STATEMACHINE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATEMACHINE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/nonestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/initstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/homestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/idlestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/motormovestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/errorstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/uninitstate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> :</span> <span class="keyword">public</span> QStateMachine</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    StateMachine();</span><br><span class="line">    ~StateMachine();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> StateMachine *<span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;sm; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildGraph</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">StopSMThread</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> StateMachine sm;</span><br><span class="line"></span><br><span class="line">    NoneState stateNone;</span><br><span class="line">    InitState stateInit;</span><br><span class="line">    HomeState stateHome;</span><br><span class="line">    IdleState stateIdle;</span><br><span class="line">    MotorMoveState stateMotorMove;</span><br><span class="line">    ErrorState stateError;</span><br><span class="line">    UninitState stateUninit;</span><br><span class="line"></span><br><span class="line">    QThread thd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch to next state by idle state</span></span><br><span class="line">    QString nextState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetupState</span><span class="params">(BaseState *state)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">//CommonState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uninit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">state_changed</span><span class="params">( QString )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MoveState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//HomeState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">home</span><span class="params">(CoreMotorID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STATEMACHINE_H</span></span></span><br></pre></td></tr></table></figure><p>statemachine.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line">StateMachine StateMachine::sm;</span><br><span class="line"></span><br><span class="line">StateMachine::StateMachine()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">StateMachine::~StateMachine()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::BuildGraph()</span><br><span class="line">&#123;</span><br><span class="line">    addState( &amp;stateNone );</span><br><span class="line">    addState( &amp;stateInit );</span><br><span class="line">    addState( &amp;stateHome );</span><br><span class="line">    addState( &amp;stateIdle );</span><br><span class="line">    addState( &amp;stateMotorMove);</span><br><span class="line">    addState( &amp;stateError );</span><br><span class="line">    addState( &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line"></span><br><span class="line">    stateInit.addTransition( &amp;stateInit, SIGNAL(ok()), &amp;stateHome );</span><br><span class="line">    stateInit.addTransition( &amp;stateInit, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line"></span><br><span class="line">    stateHome.addTransition( &amp;stateHome, SIGNAL(ok()), &amp;stateIdle );</span><br><span class="line">    stateHome.addTransition( &amp;stateHome, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">    stateHome.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( move(<span class="keyword">float</span> , <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)), &amp;stateMotorMove );</span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( home(CoreMotorID)), &amp;stateHome );</span><br><span class="line">    stateIdle.addTransition( &amp;stateIdle, SIGNAL( error(QState *)), &amp;stateError );</span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateMotorMove.addTransition( &amp;stateMotorMove, SIGNAL(ok()), &amp;stateIdle );</span><br><span class="line">    stateMotorMove.addTransition( &amp;stateMotorMove, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">    stateMotorMove.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateInit.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line">    stateError.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    SetupState(&amp;stateNone);</span><br><span class="line">    SetupState(&amp;stateInit);</span><br><span class="line">    SetupState(&amp;stateHome);</span><br><span class="line">    SetupState(&amp;stateIdle);</span><br><span class="line">    SetupState(&amp;stateMotorMove);</span><br><span class="line">    SetupState(&amp;stateError);</span><br><span class="line"></span><br><span class="line">    setInitialState( &amp;stateNone );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the state machine with thread</span></span><br><span class="line">    moveToThread(&amp;thd);</span><br><span class="line">    connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line"></span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), QCoreApplication::instance(), SLOT(quit()));</span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), &amp;thd, SLOT(quit()));</span><br><span class="line">    </span><br><span class="line">    thd.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::SetupState(BaseState *state)</span><br><span class="line">&#123;</span><br><span class="line">    connect( state, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()) );</span><br><span class="line">    state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    QString state = (*configuration().begin())-&gt;objectName();</span><br><span class="line">        </span><br><span class="line">    <span class="function">emit <span class="title">state_changed</span><span class="params">( state )</span></span>;</span><br><span class="line">    qDebug() &lt;&lt; state;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="BaseState"><a href="#BaseState" class="headerlink" title="BaseState"></a>BaseState</h3><p>basestate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BASESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BASESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QState&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTimer&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseState</span> :</span> <span class="keyword">public</span> QState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BaseState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">GetErrMsg</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> errMessage; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    QList&lt;QVariant&gt; arguments;</span><br><span class="line"></span><br><span class="line">    QString errMessage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">entering</span><span class="params">(QState *)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(QState *)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BASESTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>basestate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line">BaseState::BaseState(QObject *parent)</span><br><span class="line">&#123;</span><br><span class="line">    setParent(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BaseState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    arguments.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( objectName() != <span class="string">"NoneState"</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( (*(QStateMachine::SignalEvent *)event).sender() != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">                (*(QStateMachine::SignalEvent *)event).arguments().size() &gt; <span class="number">0</span> )</span><br><span class="line">            arguments = (*(QStateMachine::SignalEvent *)event).arguments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    connect( <span class="keyword">this</span>, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()), Qt::UniqueConnection );</span><br><span class="line"></span><br><span class="line">    entering( <span class="keyword">this</span> );</span><br><span class="line"></span><br><span class="line">    QState::onEntry( event );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="InitialState"><a href="#InitialState" class="headerlink" title="InitialState"></a>InitialState</h3><p>initialstate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INITSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QState&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">InitState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// INITSTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>initialstate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"initstate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"models/db.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">InitState::InitState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"InitState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InitState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InitState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. check DB  &amp; open DB        =&gt; emit error(this ) if fail</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Open db</span></span><br><span class="line">    DB::Inst()-&gt;connectToDataBase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. check HW base board       =&gt; emit error( this ) if fail</span></span><br><span class="line"></span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;Initiate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ret != Device::Ok )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( ret == Device::CtrlboardCommError )</span><br><span class="line">        &#123;</span><br><span class="line">            errMessage = <span class="string">"Cannot initiate the Device device ("</span> + QString::number(ret).rightJustified(<span class="number">3</span>, <span class="string">'0'</span>) + <span class="string">") "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//emit error(this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="HomeState"><a href="#HomeState" class="headerlink" title="HomeState"></a>HomeState</h3><p>homestate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HOMESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HOMESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">HomeState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorsHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorXHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorYHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorZHome</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// HOMESTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>homestate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"homestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line">HomeState::HomeState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"HomeState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( !arguments.isEmpty() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorALL )</span><br><span class="line">            MotorsHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorX )</span><br><span class="line">            MotorXHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorY )</span><br><span class="line">            MotorYHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorZ )</span><br><span class="line">            MotorZHome();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MotorsHome();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorsHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorALL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorXHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorX);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorYHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorZHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorZ);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="MotorMoveState"><a href="#MotorMoveState" class="headerlink" title="MotorMoveState"></a>MotorMoveState</h3><p>motormovestate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MOTORMOVESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTORMOVESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotorMoveState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MotorMoveState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorMove</span><span class="params">(<span class="keyword">float</span> motorXDis, <span class="keyword">float</span> motorYDis, <span class="keyword">float</span> motorZDis,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">float</span> motorXSpeed, <span class="keyword">float</span> motorYSpeed, <span class="keyword">float</span> motorZSpeed)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MOTORMOVESTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>motormovestate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"motormovestate.h"</span></span></span><br><span class="line"></span><br><span class="line">MotorMoveState::MotorMoveState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"MotorMoveState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    MotorMove(arguments[<span class="number">0</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">1</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">2</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">3</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">4</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">5</span>].toFloat());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::MotorMove(<span class="keyword">float</span> motorXDis, <span class="keyword">float</span> motorYDis, <span class="keyword">float</span> motorZDis,<span class="keyword">float</span> motorXSpeed, <span class="keyword">float</span> motorYSpeed, <span class="keyword">float</span> motorZSpeed)</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorMove(motorXDis,motorYDis,motorZDis,motorXSpeed,motorYSpeed,motorZSpeed);</span><br><span class="line">    <span class="keyword">if</span>(ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ErrorState"><a href="#ErrorState" class="headerlink" title="ErrorState"></a>ErrorState</h3><p>errorstate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ERRORSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERRORSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ErrorState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">BaseState *<span class="title">GetErrorState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    BaseState *errState;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ERRORSTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>errorstate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"errorstate.h"</span></span></span><br><span class="line"></span><br><span class="line">ErrorState::ErrorState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"ErrorState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ErrorState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line"></span><br><span class="line">    errState = qvariant_cast&lt;BaseState *&gt;(arguments[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ErrorState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"InitialState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"HomeState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"MotorMoveState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">        </span><br><span class="line">    emit ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BaseState *ErrorState::GetErrorState()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> errState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="UninitialState"><a href="#UninitialState" class="headerlink" title="UninitialState"></a>UninitialState</h3><p>uninitialstate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNINITSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNINITSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFinalState&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UninitState</span> :</span> <span class="keyword">public</span> QFinalState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">UninitState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// UNINITSTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>uninitialstate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uninitstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"models/db.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line">UninitState::UninitState()</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"UninitState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> UninitState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. close DB</span></span><br><span class="line">    DB::Inst()-&gt;closeDataBase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. uniniate HW base board</span></span><br><span class="line">    Device::Inst()-&gt;Uninitate();</span><br><span class="line"></span><br><span class="line">    QFinalState::onEntry(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://docs.microsoft.com/zh-tw/dotnet/framework/windows-workflow-foundation/state-machine-workflows" target="_blank" rel="noopener">狀態機器工作流程</a><br><a href="https://www.itread01.com/content/1548857553.html" target="_blank" rel="noopener">Qt圖元，場景，檢視，狀態機，狀態轉移，動畫設定等的示列（備忘）</a><br><a href="http://sevensavants.blogspot.com/2015/02/2015-02-11-qt-animation.html" target="_blank" rel="noopener">竹林七賢-2015-02-11-Qt-Animation</a><br><a href="https://pyqt4doc.appspot.com/qstate.html" target="_blank" rel="noopener">QState Class Reference</a><br><a href="https://pyqt4doc.appspot.com/qstatemachine.html#configuration" target="_blank" rel="noopener">QStateMachine Class Reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;當我們程式越寫越大型，可呼叫的函式越來越多的時候，就應該來做函式的控管，某些時候不能呼叫某些函式，否則可能導致不可預期的結果，例如:還沒In
      
    
    </summary>
    
      <category term="架構" scheme="https://teddybearfp.github.io/categories/%E6%9E%B6%E6%A7%8B/"/>
    
    
      <category term="StateMachine" scheme="https://teddybearfp.github.io/tags/StateMachine/"/>
    
  </entry>
  
  <entry>
    <title>Signal &amp; Slot</title>
    <link href="https://teddybearfp.github.io/2019/02/23/Signal-Slot/"/>
    <id>https://teddybearfp.github.io/2019/02/23/Signal-Slot/</id>
    <published>2019-02-23T04:05:16.000Z</published>
    <updated>2019-03-24T04:33:58.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這次編寫State Machine的時候遇到一個問題，如果先呼叫QState的函式再呼叫主執行緒的函式，得到的結果會是主執行緒得先完成跟預期順序不一致，因為QState本身也是一條執行緒所以導致這結果，所以我們運用Signal跟Slot機制傳遞事件完成信號，讓主執行緒知道QState內的函式完成函式內容了</p><h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><h3 id="檔案簡介"><a href="#檔案簡介" class="headerlink" title="檔案簡介"></a>檔案簡介</h3><p>A檔案: 狀態機某狀態(ex: Class MotorMoveState)<br>B檔案: 狀態機(Static) (Class StateMachine)<br>C檔案: UI介面cpp (Class FunctionTester)</p><h3 id="錯誤實例"><a href="#錯誤實例" class="headerlink" title="錯誤實例"></a>錯誤實例</h3><p>在C檔案中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> FunctionTester::MotorMove(<span class="keyword">float</span> steps, <span class="keyword">float</span> speed)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> xPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> yPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> zPosition = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    StateMachine::Inst()-&gt;move(steps, speed); <span class="comment">//move為StateMachine內的Signal, prototype為move(float, float);</span></span><br><span class="line">    GetMotorsPosition(&amp;xPosition, &amp;yPosition, &amp;zPosition);</span><br><span class="line">    </span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"xPosition:"</span>&lt;&lt;xPosition;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"yPosition:"</span>&lt;&lt;yPosition;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"zPosition:"</span>&lt;&lt;zPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上程式碼原本期許是馬達移動完後，將三組int記憶體位置傳下去，收到時會得到x,y,z的位置。<br>但是因為StateMachine的編寫是QState透過另一條執行緒達成的，所以會在馬達移動的同時繼續往下執行，先執行了取得馬達位置GetMotorsPosition(int*, int*, int*)，這樣取得的位置都會是上一次馬達移動完成後的位置，如上x,y,z第一次執行時會得到0,0,0</p><h2 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h2><p>我們要馬達移動完成後，數據自動更新的辦法就是要用，Signal跟Slot，這樣即使StateMachine自身為一條執行緒依舊會在完成時告訴我們上層UI.cpp完成事件</p><h3 id="Signal-amp-Slot"><a href="#Signal-amp-Slot" class="headerlink" title="Signal &amp; Slot"></a>Signal &amp; Slot</h3><p>Qt管理的物件必須繼承QObject類別，以提供Qt物件的Meta訊息，若要實作Signal與Slot機制，則必須包括Q_OBJECT巨集，moc會處理Qt的C++擴充（Meta-Object System），使用moc讀取C++標頭檔案，若發現類別定義中包括Q_OBJECT巨集，就會產生Qt meta-object相關的C++程式碼。</p><ul><li><p>一個Signal可以多次使用connect函式與多個Slot連結,但是Signal送出後這些Slot不能保證接收到的順序,但都會執行一次</p></li><li><p>多個Signal可以連結同一個Slot</p></li><li><p>Signal皆為void型態所以不能回傳值，只能放在參數中傳遞</p></li></ul><p>Signal與Slot的簽名是對應的，若Signal帶有參數，則對應的Slot也要帶有參數。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">valueChanged</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>Signal命名: 過去式動詞(ex: captured)<br>Slot命名: on大寫開頭的signal(ex:onCaptured)</p><h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>傳接球的概念</p><p>connect(恰恰, SIGNAL(丟球), 大師兄, SLOT(接球));</p><p>恰恰丟球給大師兄接到後再作後續處理</p><p>接球 {<br>    對接到的球做處理;<br>    }</p><h4 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h4><p>有connect就要disconnect才不會讓記憶體釋放的時候有異常</p><p>disconnect(恰恰, SIGNAL(丟球), 大師兄, SLOT(接球));</p><h4 id="簡易傳遞"><a href="#簡易傳遞" class="headerlink" title="簡易傳遞"></a>簡易傳遞</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span><span class="keyword">public</span> QObject <span class="comment">//Qt管理的物件必須繼承QObject類別</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//必須包括Q_OBJECT巨集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A();</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">received</span><span class="params">()</span></span>; <span class="comment">//負責送出</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">emit <span class="title">received</span><span class="params">()</span></span>; <span class="comment">//建構子完成時送出信號</span></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="comment">//B.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"A.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> QObject <span class="comment">//Qt管理的物件必須繼承QObject類別</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//必須包括Q_OBJECT巨集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onReceived</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.cpp</span></span><br><span class="line">B::B()</span><br><span class="line">&#123;</span><br><span class="line">    connect(&amp;a,SIGNAL(received()),<span class="keyword">this</span>,SLOT(onReceived()), Qt::DirectConnection);  <span class="comment">//DirectConnection指的是用同一條執行緒執行完才繼續</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> B::onReceived() &#123;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Received!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解決辦法實作"><a href="#解決辦法實作" class="headerlink" title="解決辦法實作"></a>解決辦法實作</h3><p>使用signal跟slot讓QState完成時得到通知<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.h</span></span><br><span class="line">signal:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">movedOk</span><span class="params">()</span></span>;</span><br><span class="line">A.cpp    </span><br><span class="line">    function &#123;</span><br><span class="line">        <span class="comment">//完成時</span></span><br><span class="line">        <span class="function">emit <span class="title">movedOk</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.h</span></span><br><span class="line">signal:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">positionChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onMovedOk</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.cpp    </span></span><br><span class="line">    <span class="comment">//build graph內部寫 (創狀態機時)</span></span><br><span class="line">    connect(&amp;A, movedOk(), <span class="keyword">this</span>, OnMovedOk());</span><br><span class="line">    <span class="keyword">void</span> B::onMovedOk &#123;</span><br><span class="line">        <span class="function">emit <span class="title">positionChanged</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.h</span></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPositionChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.cpp    </span></span><br><span class="line">    C::C &#123;</span><br><span class="line">        connect(B::Inst(), positionChanged(), <span class="keyword">this</span>, onPositionChanged()); </span><br><span class="line">        <span class="comment">//特別注意B::Inst()本身就為記憶體位置所以不用加上&amp;</span></span><br><span class="line">    &#125;</span><br><span class="line">    C::~C &#123;</span><br><span class="line">        disconnect(B::Inst(), positionChanged(), <span class="keyword">this</span>, onPositionChanged()); </span><br><span class="line">        <span class="comment">//要刪除否則會記憶體有問題</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> C::onPositionChanged &#123;</span><br><span class="line">        <span class="comment">//收到完成狀態 </span></span><br><span class="line">        dosomething;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p><a href="https://openhome.cc/Gossip/Qt4Gossip/CustomSignalSlot.html" target="_blank" rel="noopener">自訂Signal 與Slot - OpenHome.cc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這次編寫State Machine的時候遇到一個問題，如果先呼叫QState的函式再呼叫主執行緒的函式，得到的結果會是主執行緒得先完成跟預期
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Signal" scheme="https://teddybearfp.github.io/tags/Signal/"/>
    
      <category term="Slot" scheme="https://teddybearfp.github.io/tags/Slot/"/>
    
  </entry>
  
  <entry>
    <title>USB傳輸型態</title>
    <link href="https://teddybearfp.github.io/2019/02/20/USB%E5%82%B3%E8%BC%B8%E5%9E%8B%E6%85%8B-USB-Data-Transfer-Types/"/>
    <id>https://teddybearfp.github.io/2019/02/20/USB傳輸型態-USB-Data-Transfer-Types/</id>
    <published>2019-02-20T04:05:16.000Z</published>
    <updated>2019-03-24T04:03:42.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇大致了解<a href="https://teddybearfp.github.io/2019/01/31/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94/#more">步進馬達</a>後，當我們要對步進馬達給予指令時，需要透過USB傳輸資料，而USB傳輸資料的型態有四種，這一篇我們來了解一下這四種型態的功用與相對應的產品</p><h2 id="USB傳輸型態-USB-Data-Transfer-Types"><a href="#USB傳輸型態-USB-Data-Transfer-Types" class="headerlink" title="USB傳輸型態 (USB Data Transfer Types)"></a>USB傳輸型態 (USB Data Transfer Types)</h2><p>由於USB最初在設計時，為了傳輸率，響應時間以及錯誤偵錯等特性之許多不同的週邊類型來加以考量的。而其中，四種資料傳輸的每一個能夠掌握不同的需求。因應不同的周邊裝置的類型與應用，訂定了以下四種傳輸類型</p><ul><li>控制型傳輸(Control Transfer)</li><li>中斷型傳輸(Interrupt Transfer)</li><li>巨量型傳輸(Bulk Transfer)</li><li>同步型傳輸(Isochronous Transfer)</li></ul><p>注意:低速裝置僅支援控制型傳輸與中斷型傳輸而已</p><h3 id="控制型傳輸-Control-Transfer"><a href="#控制型傳輸-Control-Transfer" class="headerlink" title="控制型傳輸(Control Transfer)"></a>控制型傳輸(Control Transfer)</h3><p>是USB傳輸中最重要的傳輸類型，唯有正確的執行完控制傳輸，才能進一步地執行其他的傳輸模式。這種傳輸是用來提供給主機與裝置之間的配置</p><ul><li>注意:所有的USB裝置必須支援控制傳輸。</li></ul><h3 id="中斷型傳輸-Interrupt-Transfer"><a href="#中斷型傳輸-Interrupt-Transfer" class="headerlink" title="中斷型傳輸(Interrupt Transfer)"></a>中斷型傳輸(Interrupt Transfer)</h3><p>原本是屬於單向傳輸，並且僅從裝置輸入到PC主機，作輸入的傳送模式，現在已改為雙向傳輸，增加了輸出的傳送模式<br>早期是因為資料僅需輸入所以為單向例如:滑鼠、鍵盤</p><h3 id="巨量型傳輸-Bulk-Transfer"><a href="#巨量型傳輸-Bulk-Transfer" class="headerlink" title="巨量型傳輸(Bulk Transfer)"></a>巨量型傳輸(Bulk Transfer)</h3><p>是屬於單向或雙向的傳輸。這類型的傳輸是用來傳送大量的資料。由於這些大量的資料必須準確地傳輸，但相對的卻無傳輸速度上的限制(即沒有固定傳輸的速率)。</p><h3 id="同步型傳輸-Isochronous-Transfer"><a href="#同步型傳輸-Isochronous-Transfer" class="headerlink" title="同步型傳輸(Isochronous Transfer)"></a>同步型傳輸(Isochronous Transfer)</h3><p>可以是單向或雙向的傳輸。此種傳輸需要維持一定的傳輸速度，因此相對的就需犧牲些微錯誤的發生，就算發生了傳輸上的錯誤，也不會重新傳送。<br>應用這類型的傳輸裝置例如：USB麥克風、喇叭</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://blog.sina.com.tw/william_liao/article.php?entryid=659545" target="_blank" rel="noopener">USB傳輸型態(USB Data Transfer Types) - 阿威阿獠のNotepad</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇大致了解&lt;a href=&quot;https://teddybearfp.github.io/2019/01/31/%E6%AD%A5%E9%
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="USB傳輸型態" scheme="https://teddybearfp.github.io/tags/USB%E5%82%B3%E8%BC%B8%E5%9E%8B%E6%85%8B/"/>
    
  </entry>
  
  <entry>
    <title>用NSIS製作軟體安裝程式</title>
    <link href="https://teddybearfp.github.io/2019/02/01/%E7%94%A8NSIS%E8%A3%BD%E4%BD%9C%E8%BB%9F%E9%AB%94%E5%AE%89%E8%A3%9D%E7%A8%8B%E5%BC%8F/"/>
    <id>https://teddybearfp.github.io/2019/02/01/用NSIS製作軟體安裝程式/</id>
    <published>2019-02-01T06:05:16.000Z</published>
    <updated>2019-03-24T04:08:01.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過NSIS腳本可以將程式打包成安裝檔，提供給他人使用，這樣就可以把自己寫好的程式碼，給別人安裝與使用，好像很厲害的感覺，接下來了解一下如何看起來好像很厲害吧!</p><h2 id="生成需要的檔案"><a href="#生成需要的檔案" class="headerlink" title="生成需要的檔案"></a>生成需要的檔案</h2><p>在pro檔中，加上下列程式碼，並以Release去編譯。<br>目的是將所有需要的檔案集中到OUT_PWD(資料夾、執行檔、dll、vcredist_x86.exe)<br>vcredist_x86:可轉散發套件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">isEmpty(TARGET_EXT) &#123;</span><br><span class="line">    win32 &#123;</span><br><span class="line">        TARGET_CUSTOM_EXT = .exe</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    TARGET_CUSTOM_EXT = $$&#123;TARGET_EXT&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win32 &#123;</span><br><span class="line">    DEPLOY_COMMAND = windeployqt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">win32:CONFIG(debug, debug|release): DEPLOY_TARGET = $$shell_quote($$shell_path($$OUT_PWD/debug/$$&#123;TARGET&#125;$$&#123;TARGET_CUSTOM_EXT&#125;))</span><br><span class="line">win32:CONFIG(release, debug|release): DEPLOY_TARGET = $$shell_quote($$shell_path($$OUT_PWD/release/$$&#123;TARGET&#125;$$&#123;TARGET_CUSTOM_EXT&#125;))</span><br><span class="line"></span><br><span class="line">  # Uncomment the following line to help debug the deploy command when running qmake</span><br><span class="line">  warning($$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;)</span><br><span class="line"></span><br><span class="line">contains(QMAKE_TARGET.arch, x86) &#123;</span><br><span class="line">    QMAKE_POST_LINK = $$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;  --qmldir C:\Qt\Qt5<span class="number">.10</span><span class="number">.1</span>\<span class="number">5.10</span><span class="number">.1</span>\msvc2015\qml</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contains(QMAKE_TARGET.arch, x86_64) &#123;</span><br><span class="line">    QMAKE_POST_LINK = $$&#123;DEPLOY_COMMAND&#125; $$&#123;DEPLOY_TARGET&#125;  --qmldir C:\Qt\Qt5<span class="number">.10</span><span class="number">.1</span>\<span class="number">5.10</span><span class="number">.1</span>\msvc2015_64\qml</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="NSIS-程式碼"><a href="#NSIS-程式碼" class="headerlink" title="NSIS 程式碼"></a>NSIS 程式碼</h2><p>如果沒有driver要安裝可以拿掉driver相關程式碼<br><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">!include</span> x64.nsh</span><br><span class="line"><span class="keyword">!include</span> WordFunc.nsh</span><br><span class="line"><span class="keyword">!include</span> <span class="string">"MUI.nsh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;!insertmacro MUI_PAGE_DIRECTORY ;path selection page</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UninstPage</span> <span class="literal">uninstConfirm</span></span><br><span class="line"><span class="keyword">UninstPage</span> <span class="literal">instfiles</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> NAME <span class="string">"TeddyBearFP"</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_PUBLISHER <span class="string">"G.C.L."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> MAIN_FILE <span class="string">"release.zip"</span></span><br><span class="line"><span class="keyword">!define</span> UNINSTALL <span class="string">"Uninstall.exe"</span></span><br><span class="line"><span class="keyword">!define</span> DRIVER_INSTALL <span class="string">"win7DriverInstall.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> DRIVER_X64 <span class="string">"DriverX64"</span></span><br><span class="line"><span class="keyword">!define</span> DRIVER_X86 <span class="string">"DriverX86"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">!define</span> MAIN_PROGRAM_PATH <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The name of the installer</span></span><br><span class="line"><span class="keyword">Name</span> <span class="string">"<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The file to write</span></span><br><span class="line"><span class="keyword">OutFile</span> <span class="string">"<span class="variable">$&#123;NAME&#125;</span>.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; The default installation directory</span></span><br><span class="line"><span class="keyword">InstallDir</span> <span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span></span><br><span class="line"><span class="comment">;InstallDir $PROGRAMFILES\$&#123;NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Request application privileges for Windows Vista</span></span><br><span class="line"><span class="keyword">RequestExecutionLevel</span> <span class="literal">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Pages</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Page</span> <span class="literal">directory</span></span><br><span class="line"><span class="keyword">Page</span> <span class="literal">instfiles</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Var</span> DriverPath</span><br><span class="line"><span class="comment">;--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Install Section</span></span><br><span class="line"><span class="function"><span class="keyword">Section</span> "Install"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Set output path to the installation directory.</span></span><br><span class="line"><span class="keyword">SetOutPath</span> <span class="variable">$INSTDIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Put file there</span></span><br><span class="line"><span class="keyword">File</span> <span class="string">"<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span></span><br><span class="line"><span class="keyword">CreateDirectory</span> <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line"><span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span> <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;File "$&#123;MAIN_PROGRAM_PATH&#125;\vcredist_x86.exe"</span></span><br><span class="line"><span class="keyword">ExecWait</span> <span class="string">'"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>\vcredist_x86.exe" /q /norestart'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;If&#125;</span> <span class="variable">$&#123;RunningX64&#125;</span></span><br><span class="line"><span class="keyword">File</span> <span class="string">"DriverX64.zip"</span></span><br><span class="line"><span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>"</span></span><br><span class="line"><span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span> <span class="variable">$INSTDIR</span>  </span><br><span class="line"><span class="variable">$&#123;Else&#125;</span></span><br><span class="line"><span class="keyword">File</span> <span class="string">"DriverX86.zip"</span></span><br><span class="line"><span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>"</span></span><br><span class="line"><span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span> <span class="variable">$INSTDIR</span> </span><br><span class="line"><span class="variable">$&#123;EndIf&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DetailPrint</span> <span class="string">"Driver Setup..."</span></span><br><span class="line"><span class="keyword">ExecWait</span> <span class="string">"<span class="variable">$DriverPath</span>\<span class="variable">$&#123;DRIVER_INSTALL&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">WriteUninstaller</span> <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">CreateDirectory</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line"><span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.exe"</span> </span><br><span class="line"><span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>"</span> </span><br><span class="line"><span class="keyword">CreateShortCut</span> <span class="string">"<span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span> <span class="string">"<span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\dotNetFx40_Full_x86_x64.exe"</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MAIN_FILE&#125;</span>"</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="variable">$DriverPath</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span></span><br><span class="line"><span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">RMDir</span> /r <span class="variable">$DriverPath</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">MessageBox</span> <span class="params">MB_YESNO</span>|<span class="params">MB_ICONQUESTION</span>|<span class="params">MB_TOPMOST</span> <span class="string">"Please reboot computer"</span> <span class="params">IDNO</span> noreboot</span><br><span class="line"><span class="keyword">Reboot</span></span><br><span class="line">  </span><br><span class="line">noreboot:</span><br><span class="line"><span class="keyword">SectionEnd</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Section</span> "Uninstall"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Var</span> /GLOBAL INFNameBrard</span><br><span class="line"> </span><br><span class="line">  <span class="variable">$&#123;If&#125;</span> <span class="variable">$&#123;RunningX64&#125;</span></span><br><span class="line">    <span class="keyword">File</span> <span class="string">"DriverX64.zip"</span></span><br><span class="line">    <span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$TEMP</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>"</span></span><br><span class="line"><span class="keyword">StrCpy</span> <span class="variable">$INFNameBrard</span> <span class="string">"Usb_iCamBase64.inf"</span></span><br><span class="line">    <span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span> <span class="variable">$TEMP</span>  </span><br><span class="line">  <span class="variable">$&#123;Else&#125;</span></span><br><span class="line">    <span class="keyword">File</span> <span class="string">"DriverX86.zip"</span></span><br><span class="line">    <span class="keyword">StrCpy</span> <span class="variable">$DriverPath</span> <span class="string">"<span class="variable">$TEMP</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>"</span></span><br><span class="line"><span class="keyword">StrCpy</span> <span class="variable">$INFNameBrard</span> <span class="string">"Usb_iCamBase86.inf"</span></span><br><span class="line">    <span class="class">ZipDLL::extractall</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span> <span class="variable">$TEMP</span>   </span><br><span class="line">  <span class="variable">$&#123;EndIf&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">ExecWait</span> <span class="string">"<span class="variable">$DriverPath</span>\<span class="variable">$&#123;DRIVER_INSTALL&#125;</span> /S /U <span class="variable">$DriverPath</span>\<span class="variable">$INFNameBrard</span>"</span></span><br><span class="line">  <span class="comment">;ExecWait "$DriverPath\$&#123;DRIVER_INSTALL&#125; /S /U $DriverPath\RtsUVC.inf"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> /r <span class="variable">$DriverPath</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="variable">$INSTDIR</span>\<span class="variable">$&#123;UNINSTALL&#125;</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X86&#125;</span>.zip"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;DRIVER_X64&#125;</span>.zip"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> /r <span class="variable">$&#123;MAIN_PROGRAM_PATH&#125;</span></span><br><span class="line">  <span class="keyword">RMDir</span> <span class="variable">$INSTDIR</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>\<span class="variable">$&#123;UNINSTALL&#125;</span>.lnk"</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">"<span class="variable">$DESKTOP</span>\<span class="variable">$&#123;NAME&#125;</span>.lnk"</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">RMDir</span> <span class="string">"<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SectionEnd</span> <span class="comment">; end the section</span></span><br></pre></td></tr></table></figure></p><h2 id="壓縮需要的檔案"><a href="#壓縮需要的檔案" class="headerlink" title="壓縮需要的檔案"></a>壓縮需要的檔案</h2><p>Pro添加上述程式碼後，用release編譯後，將OUT_PWD(資料夾、執行檔、dll、vcredist_x86.exe)壓縮成release.zip</p><h2 id="產出安裝檔"><a href="#產出安裝檔" class="headerlink" title="產出安裝檔"></a>產出安裝檔</h2><h3 id="放在NSIS腳本同一層中"><a href="#放在NSIS腳本同一層中" class="headerlink" title="放在NSIS腳本同一層中"></a>放在NSIS腳本同一層中</h3><p><img src="https://i.imgur.com/hIRQ4Pk.png" alt=""></p><h3 id="執行NSIS"><a href="#執行NSIS" class="headerlink" title="執行NSIS"></a>執行NSIS</h3><p><img src="https://i.imgur.com/7Vtg8gd.png" alt=""></p><h3 id="選擇腳本-gt-編譯"><a href="#選擇腳本-gt-編譯" class="headerlink" title="選擇腳本 -&gt; 編譯"></a>選擇腳本 -&gt; 編譯</h3><p><img src="https://i.imgur.com/c09TvTT.png" alt=""></p><h3 id="產出安裝檔-1"><a href="#產出安裝檔-1" class="headerlink" title="產出安裝檔"></a>產出安裝檔</h3><p><img src="https://i.imgur.com/rCaQcrU.png" alt=""></p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p><img src="https://i.imgur.com/n9TDLUE.png" alt=""></p><p><img src="https://i.imgur.com/wvlxcqO.png" alt=""></p><h3 id="開始使用應用程式"><a href="#開始使用應用程式" class="headerlink" title="開始使用應用程式!"></a>開始使用應用程式!</h3><p><img src="https://i.imgur.com/0RTObiM.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;透過NSIS腳本可以將程式打包成安裝檔，提供給他人使用，這樣就可以把自己寫好的程式碼，給別人安裝與使用，好像很厲害的感覺，接下來了解一下如何
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="NSIS" scheme="https://teddybearfp.github.io/tags/NSIS/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬取Google學術網頁PDF</title>
    <link href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/"/>
    <id>https://teddybearfp.github.io/2019/01/31/Python-爬取學術網頁PDF/</id>
    <published>2019-01-31T14:05:16.000Z</published>
    <updated>2019-03-24T04:09:42.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近身邊朋友有爬取Google 學術搜尋需求，燃起我心中想挑戰這次的爬蟲任務，他的需求是要搜尋某個學術論文然後把所有搜尋到的PDF載下，這一篇紀錄開啟網頁自動爬取並換頁直到爬取完成所有搜尋，後續使用textract剖析PDF快速地分析內容。</p><p><img src="https://i.imgur.com/3mFKgvk.gif" alt="" title="自動搜尋爬取"></p><h2 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h2><p>透過selenium webdriver <a href="https://chromedriver.storage.googleapis.com/index.html?path=2.45/" target="_blank" rel="noopener">ChromeDriver</a>的方式爬取動態目標，首先設定Chromedriver跟user agent、session id偽裝，開啟網頁並自動搜尋目標，需要的檔案網址放進List中，自動換頁直到頁尾，爬取完所有檔案網址後，檢查是否有目標資料夾，再利用多進程(multiprocessing)分散式爬蟲，加速下載。<br>爬取完成後，使用textract剖析PDF快速地分析內容。</p><h2 id="創建資料夾"><a href="#創建資料夾" class="headerlink" title="創建資料夾"></a>創建資料夾</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:                   </span><br><span class="line">        os.makedirs(path)            </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  created Scholar folder...  ---"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  Scholar folder has already exist!  ---"</span>)</span><br></pre></td></tr></table></figure><h2 id="建立Chromedriver"><a href="#建立Chromedriver" class="headerlink" title="建立Chromedriver"></a>建立Chromedriver</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">search_scholar = <span class="string">"Teece"</span></span><br><span class="line">chrome_driver_path = <span class="string">"D:\chromedriver\chromedriver.exe"</span></span><br><span class="line">google_scholar = <span class="string">"https://scholar.google.com.tw/schhp?hl=zh-TW&amp;as_sdt=0,5"</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">prefs = &#123;<span class="string">'profile.default_content_settings.popups'</span>: <span class="number">0</span>, <span class="string">'download.default_directory'</span>: path&#125;</span><br><span class="line">option.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">option.add_argument(<span class="string">'headless'</span>)</span><br><span class="line"><span class="comment">#driver = webdriver.Chrome(chrome_driver_path,chrome_options=option) </span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">'D:\chromedriver\chromedriver.exe'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OpenSearchIndex</span><span class="params">()</span>:</span></span><br><span class="line">    driver.get(google_scholar)</span><br><span class="line">    session_id = driver.session_id</span><br><span class="line">    print(<span class="string">'session_id:'</span>,session_id)</span><br></pre></td></tr></table></figure><h2 id="自動輸入"><a href="#自動輸入" class="headerlink" title="自動輸入"></a>自動輸入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SearchScolar</span><span class="params">(searchTarget)</span>:</span></span><br><span class="line">    target = searchTarget</span><br><span class="line">    q = driver.find_element_by_name(<span class="string">'q'</span>)</span><br><span class="line">    q.send_keys(target)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">    q.send_keys(Keys.RETURN)</span><br></pre></td></tr></table></figure><h2 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Parse</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">    soup = BeautifulSoup(driver.page_source,<span class="string">'html.parser'</span>)</span><br><span class="line">    lis = []</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.select(<span class="string">'.gs_or_ggsm a'</span>):</span><br><span class="line">        <span class="comment">#title = item.select('gs_rt a').text</span></span><br><span class="line">        ref = item.text</span><br><span class="line">        ref_href = item.get(<span class="string">'href'</span>)</span><br><span class="line">        dic = &#123;<span class="string">'ref'</span>:ref,<span class="string">'ref_href'</span>:ref_href&#125;</span><br><span class="line">        lis.append(dic)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span>(c[<span class="string">'ref_href'</span>].endswith(<span class="string">'.pdf'</span>)):</span><br><span class="line">            file_name = c[<span class="string">'ref'</span>].strip(<span class="string">"[PDF]"</span>).strip(<span class="string">" "</span>)</span><br><span class="line">            Download(file_name, c[<span class="string">'ref_href'</span>])</span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="下載"><a href="#下載" class="headerlink" title="下載"></a>下載</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Download</span><span class="params">(file_name, url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">        d = urllib.request.URLopener()</span><br><span class="line">        d.retrieve(url, <span class="string">"D://Scholar/"</span> + file_name + <span class="string">".pdf"</span>)</span><br><span class="line">        print(file_name , url)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"HTTPError"</span>,e.code,url)</span><br></pre></td></tr></table></figure><h2 id="自動換頁"><a href="#自動換頁" class="headerlink" title="自動換頁"></a>自動換頁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NextPage</span><span class="params">()</span>:</span></span><br><span class="line">    driver.find_element_by_link_text(<span class="string">"下一頁"</span>).click()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/h98rpM1.gif" alt="" title="自動換頁爬取"></p><h2 id="關閉Chromedriver"><a href="#關閉Chromedriver" class="headerlink" title="關閉Chromedriver"></a>關閉Chromedriver</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">End</span><span class="params">()</span>:</span></span><br><span class="line">    driver.close()</span><br></pre></td></tr></table></figure><h2 id="剖析PDF"><a href="#剖析PDF" class="headerlink" title="剖析PDF"></a>剖析PDF</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textract, re</span><br><span class="line">text = textract.process(<span class="string">"sample.pdf"</span>)</span><br><span class="line">words = re.findall(<span class="string">r"[^\W_]+"</span>, text, re.MULTILINE)</span><br><span class="line">print(len(words))</span><br><span class="line">print(words)</span><br></pre></td></tr></table></figure><h2 id="完整實作"><a href="#完整實作" class="headerlink" title="完整實作"></a>完整實作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Empty</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process ,Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:                   </span><br><span class="line">        os.makedirs(path)            </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  created Scholar folder...  ---"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"---  Scholar folder has already exist!  ---"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Download</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        file_name = <span class="keyword">None</span></span><br><span class="line">        url = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = q.get(block=<span class="keyword">False</span>)</span><br><span class="line">            file_name = info[<span class="string">"file_name"</span>]</span><br><span class="line">            url = info[<span class="string">"url"</span>]</span><br><span class="line">            ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">            d = urllib.request.URLopener()</span><br><span class="line">            d.retrieve(url, <span class="string">"D://Scholar/"</span> + file_name + <span class="string">".pdf"</span>)</span><br><span class="line">            print(file_name , url)</span><br><span class="line">        <span class="keyword">except</span> Empty:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPARSE</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.search_scholar = <span class="string">"Teece"</span></span><br><span class="line">        self.chrome_driver_path = <span class="string">"D:\chromedriver\chromedriver.exe"</span></span><br><span class="line">        self.google_scholar = <span class="string">"https://scholar.google.com.tw/schhp?hl=zh-TW&amp;as_sdt=0,5"</span></span><br><span class="line">        self.path = os.path.join(<span class="string">'D:'</span>,<span class="string">'Scholar'</span>)</span><br><span class="line">        self.driver = self.Setdriver()</span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line">        self.needDownloadUrls = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.OpenSearchIndex()</span><br><span class="line">        self.SearchScolar(self.search_scholar)</span><br><span class="line">        self.Parse()</span><br><span class="line">        self.End()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Setdriver</span><span class="params">(self)</span>:</span></span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        prefs = &#123;<span class="string">'profile.default_content_settings.popups'</span>: <span class="number">0</span>, <span class="string">'download.default_directory'</span>: self.path&#125;</span><br><span class="line">        option.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">        option.add_argument(<span class="string">'headless'</span>)</span><br><span class="line">        driver = webdriver.Chrome(<span class="string">'D:\chromedriver\chromedriver.exe'</span>)</span><br><span class="line">        <span class="comment">#driver = webdriver.Chrome(self.chrome_driver_path, chrome_options=option)</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OpenSearchIndex</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.get(self.google_scholar)</span><br><span class="line">        session_id = self.driver.session_id</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">'session_id:'</span>,session_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SearchScolar</span><span class="params">(self, searchTarget)</span>:</span></span><br><span class="line">        target = searchTarget</span><br><span class="line">        q = self.driver.find_element_by_name(<span class="string">'q'</span>)</span><br><span class="line">        q.send_keys(target)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">        q.send_keys(Keys.RETURN)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NextPage</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self.counter &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.driver.find_element_by_link_text(<span class="string">"下一頁"</span>).click()</span><br><span class="line">            self.counter += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Parse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">            soup = BeautifulSoup(self.driver.page_source,<span class="string">'html.parser'</span>)</span><br><span class="line">            lis = []</span><br><span class="line">            dic = &#123;&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> soup.select(<span class="string">'.gs_or_ggsm a'</span>):</span><br><span class="line">                <span class="comment">#title = item.select('gs_rt a').text</span></span><br><span class="line">                ref = item.text</span><br><span class="line">                ref_href = item.get(<span class="string">'href'</span>)</span><br><span class="line">                dic = &#123;<span class="string">'ref'</span>:ref,<span class="string">'ref_href'</span>:ref_href&#125;</span><br><span class="line">                lis.append(dic)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> lis:</span><br><span class="line">                <span class="keyword">if</span>(c[<span class="string">'ref_href'</span>].endswith(<span class="string">'.pdf'</span>)):</span><br><span class="line">                    file_name = c[<span class="string">'ref'</span>].strip(<span class="string">"[PDF]"</span>).strip(<span class="string">" "</span>)</span><br><span class="line">                    _info = &#123;&#125;</span><br><span class="line">                    _info[<span class="string">"file_name"</span>] = file_name</span><br><span class="line">                    _info[<span class="string">"url"</span>] = c[<span class="string">'ref_href'</span>]</span><br><span class="line">                    self.needDownloadUrls.append(_info)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.NextPage():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">End</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.close()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDownloadList</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.needDownloadUrls</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    path = os.path.join(<span class="string">'D:'</span>,<span class="string">'Scholar'</span>)</span><br><span class="line">    mkdir(path)</span><br><span class="line">    </span><br><span class="line">    pOBJ = URLPARSE()</span><br><span class="line">    pOBJ.start()</span><br><span class="line">    downloadList = pOBJ.getDownloadList()</span><br><span class="line">    </span><br><span class="line">    downloadQueue = Queue()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> downloadList:</span><br><span class="line">        print(d)</span><br><span class="line">        downloadQueue.put(d, block=<span class="keyword">False</span>)</span><br><span class="line">    </span><br><span class="line">    Processes = [Process(target=Download, args=(downloadQueue,)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> Processes:</span><br><span class="line">        p.join()</span><br><span class="line">     </span><br><span class="line">    print(<span class="string">"Scholar download Finished!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近身邊朋友有爬取Google 學術搜尋需求，燃起我心中想挑戰這次的爬蟲任務，他的需求是要搜尋某個學術論文然後把所有搜尋到的PDF載下，這一
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="分散式爬蟲" scheme="https://teddybearfp.github.io/tags/%E5%88%86%E6%95%A3%E5%BC%8F%E7%88%AC%E8%9F%B2/"/>
    
      <category term="換頁爬取" scheme="https://teddybearfp.github.io/tags/%E6%8F%9B%E9%A0%81%E7%88%AC%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>步進馬達</title>
    <link href="https://teddybearfp.github.io/2019/01/31/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94/"/>
    <id>https://teddybearfp.github.io/2019/01/31/步進馬達/</id>
    <published>2019-01-31T05:05:16.000Z</published>
    <updated>2019-03-24T04:04:14.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步進馬達"><a href="#步進馬達" class="headerlink" title="步進馬達"></a>步進馬達</h2><p>步進馬達步級角構造，黃色部分為每次脈波行走量<br>步進馬達（Stepper motor; Step motor）是直流無刷馬達的一種，為具有如齒輪狀突起（小齒）相鍥合的定子和轉子，可藉由切換流向定子線圈中的電流，以一定角度逐步轉動的馬達。</p><p>步進馬達的特徵是採用開迴路控制（Open-loop control）處理，不需要運轉量檢知器（sensor）或編碼器，且切換電流觸發器的是脈波信號，不需要位置檢出和速度檢出的回授裝置，所以步進馬達可正確地依比例追隨脈波信號而轉動，因此就能達成精確的位置和速度控制，且穩定性佳。</p><h2 id="移動指令-Write"><a href="#移動指令-Write" class="headerlink" title="移動指令(Write)"></a>移動指令(Write)</h2><h3 id="Hz"><a href="#Hz" class="headerlink" title="Hz"></a>Hz</h3><p>一秒幾圈</p><h3 id="Step-Method"><a href="#Step-Method" class="headerlink" title="Step Method"></a>Step Method</h3><p>微步進方式(Full,二分之一,四分之一,八分之一…)影響移動流暢度，更換步進方式時Step與Hz也需一併變化</p><h3 id="計算方式"><a href="#計算方式" class="headerlink" title="計算方式"></a>計算方式</h3><p>假如預設馬達轉一圈為200 Step<br><img src="https://i.imgur.com/9nUaYW5.png" alt="以四分之一微步如上面表格"></p><h2 id="檢測狀態-Read-Status"><a href="#檢測狀態-Read-Status" class="headerlink" title="檢測狀態(Read Status)"></a>檢測狀態(Read Status)</h2><h3 id="運作方式"><a href="#運作方式" class="headerlink" title="運作方式"></a>運作方式</h3><p>看當前設計以下為舉例<br>第一個bit表示是否在Home<br>第三個bit表示Task是否完成</p><p><img src="https://i.imgur.com/1B64Gn5.png" alt=""></p><p>馬達在Home且還沒下任何指令時，讀取時值應該為5(0101)<br>移動時有未完成任務並且不在Home，讀取值應該為0(0000)<br>完成移動並且不在Home，讀取值應為4(0100)</p><p>一個在Home的馬達移動的過程為<br><img src="https://i.imgur.com/Qlg2GOq.png" alt=""></p><h2 id="資料傳遞方式"><a href="#資料傳遞方式" class="headerlink" title="資料傳遞方式"></a>資料傳遞方式</h2><p>1byte = 8bits<br>若是2 byte的16進制資料傳遞(Max = 二進制: 1111 1111 1111 1111  十進制: 65535  十六進制: FFFF)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> buffer = reg;</span><br><span class="line"><span class="keyword">int</span> loByte = buffer % <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> hiByte = buffer / <span class="number">256</span>;</span><br></pre></td></tr></table></figure></p><h3 id="檢測16進制資料"><a href="#檢測16進制資料" class="headerlink" title="檢測16進制資料"></a>檢測16進制資料</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> hexLoByte[<span class="number">33</span>];</span><br><span class="line">itoa(loByte, hexLoByte, <span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>這樣印出的hexLoByte就會以16進制顯示</p><ul><li>注意:以上方式只是改變<strong>顯示方式</strong>，事實上直接把原本所看到的10進制的數字傳入運算即可，因為電腦終究是以2進制去做運算</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94" target="_blank" rel="noopener">步進馬達- 维基百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;步進馬達&quot;&gt;&lt;a href=&quot;#步進馬達&quot; class=&quot;headerlink&quot; title=&quot;步進馬達&quot;&gt;&lt;/a&gt;步進馬達&lt;/h2&gt;&lt;p&gt;步進馬達步級角構造，黃色部分為每次脈波行走量&lt;br&gt;步進馬達（Stepper motor; Step motor）是直流無刷
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="步進馬達" scheme="https://teddybearfp.github.io/tags/%E6%AD%A5%E9%80%B2%E9%A6%AC%E9%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Python解析ts檔(XML)</title>
    <link href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/"/>
    <id>https://teddybearfp.github.io/2019/01/11/Python解析ts檔-XML/</id>
    <published>2019-01-11T05:05:16.000Z</published>
    <updated>2019-03-24T04:14:46.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用Qt Creator生成多國語言，步驟為生成ts檔，再生成qm檔，最後通過QTranslator類來載入qm文檔，實現多國語言的切換。那我們來看看怎麼處理ts檔呢</p><h2 id="ts-file"><a href="#ts-file" class="headerlink" title="ts file"></a>ts file</h2><p>ts file內容是XML編寫的，我們用python parsing的方式將特定內容取代達到目的</p><p>將默認為英文的應用程式，要翻譯成繁體中文，我們在XML內容中，要尋找並取代的地方就是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;尋找&lt;/source&gt;</span><br><span class="line">&lt;translation&gt;取代&lt;/translation&gt;</span><br></pre></td></tr></table></figure></p><p>例如:<br>下面範例我們先找到一樣的來源<source><br>並將csv檔中對應的<translation></translation>內容取代成翻譯過的文字</p><p>en-US.ts 英文<br>zh-TW.ts 繁體中文<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translation</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translation</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding: utf-8-*-</span></span><br><span class="line"><span class="comment">#Multi-Language</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> glob  <span class="comment">#取得所有同副檔名檔案</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree <span class="keyword">as</span> ET</span><br><span class="line">reference_file = <span class="string">"Multi-Language.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#取得所有ts檔名稱</span></span><br><span class="line">tsFile = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> glob.glob(<span class="string">'*.ts'</span>):</span><br><span class="line">    tsFile.append(file)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#讀取Multi-Language.csv檔案</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = pd.read_csv(reference_file,encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(reference_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf-8'</span>) <span class="keyword">as</span> filex:</span><br><span class="line">        filereader = csv.reader(filex)</span><br><span class="line">        header = next(filereader)</span><br><span class="line">    headers = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">    count_header = len(headers)</span><br><span class="line"><span class="comment">#確認編碼</span></span><br><span class="line"><span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'\n請檢查csv檔編碼是否改為UTF-8並再試一次!'</span>)</span><br><span class="line">    input(<span class="string">'請按任意鍵繼續。。。'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#將csv欄位名稱寫定</span></span><br><span class="line">csv_headers = [<span class="string">'German'</span>,<span class="string">'en-US'</span>,<span class="string">'Spanish'</span>,<span class="string">'French'</span>,<span class="string">'Italian'</span>,<span class="string">'Japanese'</span>,<span class="string">'zh-CN'</span>,<span class="string">'zh-TW'</span>]</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment">#讀取ts檔 XML內容</span></span><br><span class="line"><span class="keyword">for</span> inputFile <span class="keyword">in</span> tsFile:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(inputFile, <span class="string">'r'</span>,encoding =<span class="string">'utf-8'</span>) <span class="keyword">as</span> xml_file:</span><br><span class="line">            updateTree = ET.parse(xml_file)</span><br><span class="line">        root = updateTree.getroot()</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'\n請檢查xml檔編碼是否改為UTF-8並再試一次!'</span>)</span><br><span class="line">        input(<span class="string">'請按任意鍵繼續。。。'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'\n-------------------------------------------------'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'====================='</span>,inputFile,<span class="string">'====================='</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'-------------------------------------------------\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> context <span class="keyword">in</span> root.findall(<span class="string">'context'</span>):</span><br><span class="line">        <span class="keyword">for</span> message <span class="keyword">in</span> context.findall(<span class="string">'message'</span>):</span><br><span class="line">            <span class="keyword">for</span> index, content <span class="keyword">in</span> enumerate(file[<span class="string">'Source'</span>]):</span><br><span class="line">                <span class="keyword">if</span> type(file[csv_headers[count]][index]) == str:</span><br><span class="line">                    <span class="keyword">if</span> message.find(<span class="string">'source'</span>).text.lower() == content.lower():</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">'source:'</span>,message.find(<span class="string">'source'</span>).text,<span class="string">' content:'</span> ,content)</span><br><span class="line">                        print(<span class="string">'match:'</span>, file[csv_headers[count]][index],<span class="string">'\n'</span>)</span><br><span class="line">                        message.find(<span class="string">'translation'</span>).text = file[csv_headers[count]][index]</span><br><span class="line">                        <span class="keyword">if</span>(message.find(<span class="string">'translation'</span>).attrib):</span><br><span class="line">                            <span class="keyword">del</span> message.find(<span class="string">'translation'</span>).attrib[<span class="string">'type'</span>]</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> message.find(<span class="string">'source'</span>).text.lower() == content.lower():</span><br><span class="line">                        <span class="keyword">print</span> (<span class="string">'source:'</span>,message.find(<span class="string">'source'</span>).text,<span class="string">' content:'</span> ,content)</span><br><span class="line">                        print(<span class="string">'match:'</span>, file[csv_headers[count]][index],<span class="string">'\n'</span>)</span><br><span class="line">                        message.find(<span class="string">'translation'</span>).text = <span class="string">' '</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#寫檔</span></span><br><span class="line">    updateTree.write(inputFile,encoding =<span class="string">'utf-8'</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'完成～ 已生成所有翻譯檔!!!'</span>)</span><br><span class="line"><span class="comment">#input('請按任意鍵繼續。。。')</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;用Qt Creator生成多國語言，步驟為生成ts檔，再生成qm檔，最後通過QTranslator類來載入qm文檔，實現多國語言的切換。那我
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="XML" scheme="https://teddybearfp.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Qt 滑鼠事件偵測</title>
    <link href="https://teddybearfp.github.io/2019/01/09/Qt-%E6%BB%91%E9%BC%A0%E4%BA%8B%E4%BB%B6%E5%81%B5%E6%B8%AC/"/>
    <id>https://teddybearfp.github.io/2019/01/09/Qt-滑鼠事件偵測/</id>
    <published>2019-01-09T14:05:16.000Z</published>
    <updated>2019-03-24T04:11:21.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>透過事件的攔截，並且重新賦予事件的行為，這一篇記錄滑鼠相關的事件與處理<br>例如:</p><ul><li>滑鼠按鍵點擊與移動達到物體旋轉</li><li>滾輪滾動達到物體縮放效果</li></ul><h2 id="滑鼠事件偵測實作"><a href="#滑鼠事件偵測實作" class="headerlink" title="滑鼠事件偵測實作"></a>滑鼠事件偵測實作</h2><h3 id="h-標頭檔-宣告"><a href="#h-標頭檔-宣告" class="headerlink" title=".h 標頭檔(宣告)"></a>.h 標頭檔(宣告)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPoint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWheelEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> :</span> <span class="keyword">public</span> QDialog</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Dialog</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *object, QEvent *event)</span></span>; <span class="comment">//虛擬函式</span></span><br><span class="line">    ~Dialog();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Dialog *ui;</span><br><span class="line">    QPoint startPoint;</span><br><span class="line">    QPoint endPoint;</span><br><span class="line">    QPoint curPoint;</span><br><span class="line">    QPoint disPoint;</span><br><span class="line">    QPoint preDisPoint;</span><br><span class="line">    <span class="keyword">bool</span> isFirstTime;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cpp-實作檔-定義"><a href="#cpp-實作檔-定義" class="headerlink" title=".cpp 實作檔(定義)"></a>.cpp 實作檔(定義)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//實作eventFilter虛擬函式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Dialog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_Dialog.h"</span></span></span><br><span class="line"></span><br><span class="line">Dialog::Dialog(QWidget *parent) :</span><br><span class="line">    QDialog(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::Dialog)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;installEventFilter(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Dialog::eventFilter(QObject *obj, QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//偵測滑鼠press事件</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseButtonPress) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime)</span><br><span class="line">            startPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            startPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseButtonPress";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"startPoint:"&lt;&lt;startPoint;</span></span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠移動事件</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseMove) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime) &#123;</span><br><span class="line">            curPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            disPoint = curPoint - startPoint;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            curPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            disPoint = curPoint - startPoint + preDisPoint;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseMove";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"curPoint:"&lt;&lt;curPoint;</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"disPoint:"&lt;&lt;disPoint;</span></span><br><span class="line">        ui-&gt;sceneWidget-&gt;mouseRotate(disPoint.x(),disPoint.y());</span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠Release</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::MouseButtonRelease) &#123;</span><br><span class="line">        QMouseEvent *mouseEvent = <span class="keyword">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span>(isFirstTime) &#123;</span><br><span class="line">            endPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">            isFirstTime = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            endPoint = <span class="keyword">this</span>-&gt;mapToGlobal(mouseEvent-&gt;pos());</span><br><span class="line">        preDisPoint = disPoint;</span><br><span class="line">        isSetPreDisPoint = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"MouseButtonRelease";</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;"endPoint: "&lt;&lt;endPoint;</span></span><br><span class="line">        mouseEvent=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//偵測滑鼠滾輪變化</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;type() == QEvent::QEvent::Wheel) &#123;</span><br><span class="line">        QWheelEvent *wheelEvent = <span class="keyword">static_cast</span>&lt;QWheelEvent*&gt;(event);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(wheelEvent-&gt;delta() &gt; <span class="number">0</span>)</span><br><span class="line">            ui-&gt;sceneWidget-&gt;wheelScale -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ui-&gt;sceneWidget-&gt;wheelScale += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QObject::eventFilter(obj, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/zzwdkxx/article/details/71169361" target="_blank" rel="noopener">QPushButton的鼠標事件處理及EventFilter事件過濾器的用法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;透過事件的攔截，並且重新賦予事件的行為，這一篇記錄滑鼠相關的事件與處理&lt;br&gt;例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑鼠按鍵點擊與移動達到物體旋
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="滑鼠事件" scheme="https://teddybearfp.github.io/tags/%E6%BB%91%E9%BC%A0%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 邊緣偵測</title>
    <link href="https://teddybearfp.github.io/2019/01/09/OpenCV-%E9%82%8A%E7%B7%A3%E5%81%B5%E6%B8%AC/"/>
    <id>https://teddybearfp.github.io/2019/01/09/OpenCV-邊緣偵測/</id>
    <published>2019-01-09T13:05:16.000Z</published>
    <updated>2019-03-24T04:13:55.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些圖片數據需要將多餘的值去除或是透明化，需要先把邊緣<del>人</del>偵測出來，這樣才能掌握圖形<br>此篇文章記錄如何找出下方圖片的第一條曲線的上方邊緣<br><img src="https://i.imgur.com/24wvSeX.jpg" alt="" title="原圖"></p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><p>載入圖片(imread) -&gt; 高斯模糊(GaussianBlur) -&gt; 計算梯度(gradient) -&gt; 找出邊緣後影像處理(imgProc) -&gt; 存取圖片(imwrite)</p><h2 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h2><ul><li>src：輸入可以為多通道圖，會單獨處理各通道，但是通常使用單通道灰階圖，例如CV_8U或CV_16U。</li><li>dst：輸出圖會和輸入圖尺寸、型態相同。</li><li>ksize：模板大小，長寬可以不同，但是都必須為正的奇數。(幾個長寬分別幾個pixel去做平均)</li><li>sigmaX：x方向的標準差。</li><li>sigmaY：y方向的標準差。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寬做25個pixel平均、高做25個pixel平均</span></span><br><span class="line">GaussianBlur(src, gaussianBlurImg, Size(<span class="number">25</span>,<span class="number">25</span>) ,<span class="number">0</span> ,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://i.imgur.com/E1YNnpD.jpg" alt="" title="高斯模糊後的圖形"></p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>將一個512 * 512的影像垂直從上往下找到的第一條直線邊緣記錄起來</p><h3 id="讀取影像-gt-高斯模糊"><a href="#讀取影像-gt-高斯模糊" class="headerlink" title="讀取影像 -&gt; 高斯模糊"></a>讀取影像 -&gt; 高斯模糊</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gradientImg = QImage(imgWidth, imgHeight, QImage::Format_RGB888);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> currentNumber = <span class="number">0</span>; currentNumber &lt; <span class="number">10</span>; currentNumber++) &#123;</span><br><span class="line">    Mat src = imread(<span class="string">"D:/Frame/Test_"</span> + QString::number(currentNumber).toStdString() +<span class="string">".jpg"</span>);<span class="comment">//以迴圈讀取多張(其中必須把int轉成QString再轉乘stdString)</span></span><br><span class="line">    <span class="keyword">if</span> (src.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Load file failed!"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat gaussianBlurImg;</span><br><span class="line">    cvtColor(src, gaussianBlurImg,CV_BGR2RGB); <span class="comment">//將讀取出來的圖片轉成RGB</span></span><br><span class="line">    GaussianBlur(src, gaussianBlurImg, Size(<span class="number">25</span>,<span class="number">25</span>) ,<span class="number">0</span> ,<span class="number">0</span>);<span class="comment">//ksize：模板大小，長寬可以不同，但是都必須為正的奇數。</span></span><br><span class="line">    <span class="function">QImage <span class="title">gradientImg</span><span class="params">((uchar *) gaussianBlurImg.data, <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888)</span></span>;</span><br><span class="line">    gradient(gradientImg);<span class="comment">//做梯度跟其他處理...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>以這次範例來說是以垂直的方式去找變化量大的地方，找到並存入陣列中，這個陣列所存的是512個邊緣的Y座標</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>下一個pixel減掉上一個pixel得到梯度變化量，最後一個數給0不比較</p><p><img src="https://i.imgur.com/Bem5VkX.png" alt="" title="梯度垂直變化量"><br>取得512個變化量，而這個範例來說會有兩次變化量較大的正數值與兩次較小的負數值</p><blockquote><p>取得單獨的每筆梯度可以知道變化量(這個範例就是找到第一次變化最大的地方)<br>梯度 = (G2-G1) </p></blockquote><blockquote><p>(全部的梯度相加，可以簡易判斷影像清晰度)<br>梯度 = ((G1-G2)+(G1-G4))+((G2-G3)+(G2-G5))+… </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> FindBoundary::gradient(QImage gradientImg) &#123;</span><br><span class="line">    <span class="keyword">int</span> imgWidth = <span class="number">512</span>;</span><br><span class="line">    <span class="keyword">int</span> imgHeight = <span class="number">512</span>;</span><br><span class="line">    gradientBits = <span class="keyword">new</span> <span class="keyword">int</span>[imgWidth * imgHeight];</span><br><span class="line">    uchar *bits = gradientImg.bits();<span class="comment">//從上方高斯模糊後傳入的圖</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; imgWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgHeight; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = i*<span class="number">3</span> + j * imgWidth * <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">int</span> idx2 = i*<span class="number">3</span> + (j + <span class="number">1</span>)* imgWidth * <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(j == imgHeight - <span class="number">1</span>)</span><br><span class="line">                gradientBits[count] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                gradientBits[count] = (<span class="keyword">int</span>)(bits[idx2] - bits[idx]);</span><br><span class="line">            <span class="comment">//verify</span></span><br><span class="line"><span class="comment">//            if(i == 254) &#123;</span></span><br><span class="line"><span class="comment">//                //cout&lt;&lt;"gradientBits["&lt;&lt;i&lt;&lt;"]["&lt;&lt;j&lt;&lt;"]:"&lt;&lt;gradientBits[count]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//                cout&lt;&lt;gradientBits[count]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過上面方式得到512組(從X = 0開始掃512次一直到X = 511掃512次)的Y變化量，而我們要取的是第一個變化量最大的地方<br><img src="https://i.imgur.com/2OsF6p5.png" alt="第一組(X=0)的Y(0~511)變化量折線圖"></p><p>找到第一次最大變化量後將其記錄起來，再將它改pixel顏色或是其他處理得到下面的完成圖<br><img src="https://i.imgur.com/fazRSAo.jpg" alt="" title="找到邊緣人啦!!"></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>針對圖片邊緣的操作可以讓光學取得的資料轉換成有效數據，例如:將已知道小的銅幣透過光學拍照，再用邊緣偵測取得到數據與真實大小去做scale，即可做光學校正，另外在3D疊圖時，先將2D圖做些邊緣偵測並處理後再拿去疊圖，可以讓可讀性更高，所以邊緣偵測是個重要的技巧</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://monkeycoding.com/?p=570" target="_blank" rel="noopener">影像平滑(blur、GaussianBlur) | 阿洲的程式教學</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有些圖片數據需要將多餘的值去除或是透明化，需要先把邊緣&lt;del&gt;人&lt;/del&gt;偵測出來，這樣才能掌握圖形&lt;br&gt;此篇文章記錄如何找出下方圖片
      
    
    </summary>
    
      <category term="OpenCV" scheme="https://teddybearfp.github.io/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="https://teddybearfp.github.io/tags/OpenCV/"/>
    
      <category term="邊緣偵測" scheme="https://teddybearfp.github.io/tags/%E9%82%8A%E7%B7%A3%E5%81%B5%E6%B8%AC/"/>
    
  </entry>
  
  <entry>
    <title>標準化(Normalize)</title>
    <link href="https://teddybearfp.github.io/2019/01/08/normalize/"/>
    <id>https://teddybearfp.github.io/2019/01/08/normalize/</id>
    <published>2019-01-08T12:05:16.000Z</published>
    <updated>2019-03-24T04:17:28.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在將數據轉換至RGB時，時常會用到標準化的方式讓數值落在0~255之中</p><h2 id="標準化公式"><a href="#標準化公式" class="headerlink" title="標準化公式"></a>標準化公式</h2><p>需要以下幾組資料</p><h3 id="第一組"><a href="#第一組" class="headerlink" title="第一組"></a>第一組</h3><ul><li>newMax</li><li>newMin</li></ul><h3 id="第二組"><a href="#第二組" class="headerlink" title="第二組"></a>第二組</h3><ul><li>oldMax</li><li>oldMin</li><li>denominator = oldMax - oldMin</li></ul><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> output = newMin + ((<span class="keyword">float</span>)(value - oldMin)/(<span class="keyword">float</span>)denominator) * (newMax - newMin)</span><br></pre></td></tr></table></figure><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>下面的例子將傳入的數值標準化成100~255<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">normalize</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123; <span class="comment">//value 是介於oldMax與oldMin之間的值</span></span><br><span class="line">    <span class="keyword">int</span> newMax = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">int</span> newMin = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldMax = <span class="number">219</span>;</span><br><span class="line">    <span class="keyword">int</span> oldMin = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">int</span> denominator = oldMax - oldMin</span><br><span class="line">    <span class="keyword">float</span> output = newMin + ((<span class="keyword">float</span>)(value - oldMin)/(<span class="keyword">float</span>)denominator) * (newMax - newMin)</span><br><span class="line">    <span class="keyword">return</span>  output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述例子傳入211的話輸出為241.5<br>透過上面公式可以將數值標準化到某一區間</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在將數據轉換至RGB時，時常會用到標準化的方式讓數值落在0~255之中&lt;/p&gt;
&lt;h2 id=&quot;標準化公式&quot;&gt;&lt;a href=&quot;#標準化公式
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Normalize" scheme="https://teddybearfp.github.io/tags/Normalize/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL 3D 立體渲染</title>
    <link href="https://teddybearfp.github.io/2018/12/23/3D-Volume-Rendering/"/>
    <id>https://teddybearfp.github.io/2018/12/23/3D-Volume-Rendering/</id>
    <published>2018-12-23T02:05:16.000Z</published>
    <updated>2019-03-24T04:02:52.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子使用的QImage都是處理二維圖形，最近研究起3D的領域，透過OpenGL來實作立體渲染(Volume Rendering)，立體渲染簡單來說，就是將2D圖形數張疊成一個3D立體圖形，這立體渲染的技術可以運用在醫學上的CT與MRI斷層掃描中。這篇所寫的頂點與紋理處理搭配上一篇所編寫的<a href="https://teddybearfp.github.io/2018/12/22/OpenGL-GLSL%E8%91%97%E8%89%B2%E5%99%A8/#more">OpenGL GLSL著色器</a>就可以達到下圖3D立體渲染效果囉!</p><p><img src="https://media.giphy.com/media/fxCrCjSXyJBR83AFPb/giphy.gif" alt=""></p><h2 id="名詞概述"><a href="#名詞概述" class="headerlink" title="名詞概述"></a>名詞概述</h2><h3 id="Volume-Rendering"><a href="#Volume-Rendering" class="headerlink" title="Volume Rendering"></a>Volume Rendering</h3><p>立體渲染是一種用於顯示離散三維採樣數據集的二維投影的技術。一個典型的三維數據集是CT或者MRI採集的一組二維切面圖像。通常這些數據是按照一定規則如每毫米一個切面，並且通常有一定數目的圖像像素。為了渲染三維數據集的二維投影，首先需要定義相機相對於幾何體的空間位置。另外，需要定義每個點即體素的不透明性以及顏色，這通常使用RGBA（red, green, blue, alpha）傳遞函數定義每個體素可能值對應的RGBA值。</p><h2 id="Volume-Rendering原理"><a href="#Volume-Rendering原理" class="headerlink" title="Volume Rendering原理"></a>Volume Rendering原理</h2><p>目前已知有兩種方式達到Volume Rendering</p><ul><li>2D Array</li><li>3D Texture</li></ul><h3 id="2D-Array"><a href="#2D-Array" class="headerlink" title="2D Array"></a>2D Array</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>用一組2D QImage紋理數與頂點組伴隨著z軸的變化達到疊圖效果</p><p><img src="https://i.imgur.com/888pOxo.png" alt=""></p><h4 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h4><p>用2D Array疊成的3D模型會有個問題，就是在模型轉到90度與180度時從側面來看會是有間隙的甚至直接穿透看不到畫面，原因是這種畫法在yz軸上並沒有繪製圖形<br><img src="https://i.imgur.com/vD7BsCL.png" alt=""></p><h4 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h4><p>為了解決上述的YZ軸未繪製圖形，導致側邊觀看會沒有畫面甚至穿透，我們的解決辦法是使用3組的2D array去做立體渲染，<br><img src="https://i.imgur.com/opzvhX4.png" alt=""><br>準備好以上三組2D Array做出來的3D圖形在XY平面、YZ平面與XZ平面上都有像素資料，這樣解決了90度與180度沒畫面或是穿透的問題了，但是我們怎麼知道在哪種角度時顯示顯示哪組2D Array呢?<br><img src="https://i.imgur.com/XWHvtot.png" alt=""><br>透過上述方式可以切換平面，正確顯示數據但是在側面時會發生Popping Effect所以更正確的是在旋轉時就以當下面向我們的當作切面是最好的辦法!<br><img src="https://i.imgur.com/fI2erxE.png" alt=""></p><h3 id="3D-Texture"><a href="#3D-Texture" class="headerlink" title="3D Texture"></a>3D Texture</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>接下來講述的就是這篇繪製Volume Rendering的方式，將數組2D QImage以Buffer的方式放到3D Texture中進行處理，首先先將2D QImage的陣列存成一個buffer，迴圈執行共幾張QImage然後內容取RGBA存放，得到一個3D紋理，接下來準備個3D容器來準備放進這個3D紋理</p><p><img src="https://i.imgur.com/19PQu4z.png" alt="" title="3D容器貼上3D紋理示意圖"></p><p>最後是最重要的環節，當旋轉時我們旋轉的不是容器，而是3D紋理!<br>這樣的話我們容器永遠是XY平面面對攝影機，而選轉的3D紋理不像2D紋理有側邊透視問題，並且是做過Alpha test跟Blending的紋理。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>使用Qt編寫3D相關程式時，我們需要在安裝Qt的時候就要勾選Qt 3D選項透過OpenGL編寫。</p><h3 id="無法使用gl-相關函式"><a href="#無法使用gl-相關函式" class="headerlink" title="無法使用gl_相關函式"></a>無法使用gl_相關函式</h3><p>即使安裝了Qt 3D相關函式庫，在使用時也可能無法呼叫gl_相關函式，這時候我們只要在pro檔中，增加LIBS += -lopengl32</p><h3 id="無法使用glTexImage3D"><a href="#無法使用glTexImage3D" class="headerlink" title="無法使用glTexImage3D"></a>無法使用glTexImage3D</h3><p>如果在pro檔中已經增加了LIBS += -lopengl32卻還是無法使用glTexImage3D的時候，我們可以在使用glTexImage3D之前加上<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PFNGLTEXIMAGE3DPROC glTexImage3D;</span><br><span class="line">glTexImage3D = (PFNGLTEXIMAGE3DPROC) wglGetProcAddress(<span class="string">"glTexImage3D"</span>);</span><br></pre></td></tr></table></figure></p><p>加入上面這兩句指令後再使用就可以囉<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glTexImage3D(GL_TEXTURE_3D, <span class="number">0</span>, GL_RGBA, <span class="number">512</span>, <span class="number">512</span> , <span class="number">52</span>, <span class="number">0</span>,</span><br><span class="line">GL_RGBA, GL_UNSIGNED_BYTE, bits3D );</span><br></pre></td></tr></table></figure></p><h2 id="Volume-Rendering實作"><a href="#Volume-Rendering實作" class="headerlink" title="Volume Rendering實作"></a>Volume Rendering實作</h2><p>我們要在C++端配置頂點跟紋理的座標與屬性再傳送給著色器去渲染在畫面上</p><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>在編寫Volume Rendering需要先了解三個虛擬函式initializeGL() 、resizeGL() 和 paintGL()，透過這三個函式去render OpenGL的圖形。<br>它們三個的運作順序是initializeGL() -&gt; resizeGL() -&gt; paintGL() 。</p><ul><li><p>initializeGL() 會最先呼叫並初始設定 rendering 的預設參數。</p></li><li><p>resizeGL()設定OpenGL的觀看位置、矩陣型態、視野角度以及 OpenGL drawing 的範圍…等等。除了第一次 widget 被 create 時會被呼叫，之後只要 widget 有被 resized 時都會重新被呼叫。</p></li><li><p>paintGL() Rendering OpenGL 的畫面，你所畫的物件都應該在這個 function 裡定義。</p></li></ul><h3 id="Scene-h"><a href="#Scene-h" class="headerlink" title="Scene.h"></a>Scene.h</h3><p>首先我們先創建個類別繼承QOpenGLWidget宣告上面介紹的虛擬函式並覆寫<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLShaderProgram&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QOpenGLTexture&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scene</span> :</span> <span class="keyword">public</span> QOpenGLWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Scene( QWidget *parent = <span class="number">0</span> );</span><br><span class="line">    ~Scene();</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">slotUpdate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initializeGL</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintGL</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resizeGL</span><span class="params">( <span class="keyword">int</span> w, <span class="keyword">int</span> h )</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//頂點與紋理的相關配置</span></span><br><span class="line">    <span class="keyword">int</span> m_vertexAttr;</span><br><span class="line">    <span class="keyword">int</span> m_texCoordAttr;</span><br><span class="line">    <span class="keyword">int</span> m_modelUniform;</span><br><span class="line">    <span class="keyword">int</span> m_viewUniform;</span><br><span class="line">    <span class="keyword">int</span> m_projUniform;</span><br><span class="line">    QOpenGLTexture *m_texture;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Scene-cpp"><a href="#Scene-cpp" class="headerlink" title="Scene.cpp"></a>Scene.cpp</h3><h4 id="initializeGL"><a href="#initializeGL" class="headerlink" title="initializeGL()"></a>initializeGL()</h4><p>initializeGL()主要做的幾個動作</p><ul><li>清空畫布</li><li>將數個2D QImage存入3D buffer中</li><li>設置QOpenGLTexture目標圖形與寬、高、張數</li><li>設置3D Texture</li><li>連結著色器<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::initializeGL()</span><br><span class="line">&#123;</span><br><span class="line">    glClearColor( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span> );</span><br><span class="line"></span><br><span class="line">    QImage imgXY = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888);</span><br><span class="line">    QImage checkBits3D = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGBA8888);</span><br><span class="line">    uchar* bits3D = <span class="keyword">new</span> uchar[<span class="number">512</span> * <span class="number">4</span> * <span class="number">512</span> * <span class="number">52</span>];<span class="comment">//width * RGBA * height * count</span></span><br><span class="line">    <span class="comment">//multi-QImage to 3Dbuffer</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; m_triangle.numbers ;n++) &#123;</span><br><span class="line">        imgXY = QImage(<span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888);</span><br><span class="line">        imgXY.load(<span class="string">"D:/dn40_50_100_01.png"</span>,<span class="string">"PNG"</span>);</span><br><span class="line">        <span class="comment">//imgXY.load("D:/testpic.png","PNG");</span></span><br><span class="line">        imgXY = imgXY.scaled(<span class="number">512</span>,<span class="number">512</span>);</span><br><span class="line">        imgXY = imgXY.convertToFormat(QImage::Format_RGBA8888);</span><br><span class="line">        bits = imgXY.bits();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">512</span> * <span class="number">512</span> * <span class="number">4</span> ; i += <span class="number">4</span>) &#123;</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i] = bits[i];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">1</span>] = bits[i+<span class="number">1</span>];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">2</span>] = bits[i+<span class="number">2</span>];</span><br><span class="line">            bits3D[(n*<span class="number">512</span>*<span class="number">512</span>*<span class="number">4</span>) + i + <span class="number">3</span>] = bits[i+<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setQOpenGLTexture Target3D</span></span><br><span class="line">    m_texture = <span class="keyword">new</span> QOpenGLTexture( QOpenGLTexture::Target3D );</span><br><span class="line">    m_texture-&gt;setSize(<span class="number">512</span>,<span class="number">512</span>,<span class="number">52</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Target3D</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="number">0</span> != m_nTexId )</span><br><span class="line">    &#123;</span><br><span class="line">        glDeleteTextures( <span class="number">1</span>, (GLuint*)&amp;m_nTexId );</span><br><span class="line">    &#125;</span><br><span class="line">    glGenTextures(<span class="number">1</span>,(GLuint*)&amp;m_nTexId );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">    glBindTexture( GL_TEXTURE_3D, m_nTexId );</span><br><span class="line">    glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_BORDER);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line">    glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line">    PFNGLTEXIMAGE3DPROC glTexImage3D;</span><br><span class="line">    glTexImage3D = (PFNGLTEXIMAGE3DPROC) wglGetProcAddress(<span class="string">"glTexImage3D"</span>);</span><br><span class="line">    glTexImage3D(GL_TEXTURE_3D, <span class="number">0</span>, GL_RGBA, <span class="number">512</span>, <span class="number">512</span> , <span class="number">52</span>, <span class="number">0</span>,</span><br><span class="line">        GL_RGBA, GL_UNSIGNED_BYTE, (GLvoid *)bits3D );</span><br><span class="line">    glBindTexture( GL_TEXTURE_3D, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setShader</span></span><br><span class="line">    <span class="function">QOpenGLShader <span class="title">vShader</span><span class="params">( QOpenGLShader::Vertex )</span></span>;</span><br><span class="line">    vShader.compileSourceFile( <span class="string">":/Shaders/vShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="function">QOpenGLShader <span class="title">fShader</span><span class="params">( QOpenGLShader::Fragment )</span></span>;</span><br><span class="line">    fShader.compileSourceFile( <span class="string">":/Shaders/fShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">    m_program.addShader( &amp;vShader );</span><br><span class="line">    m_program.addShader( &amp;fShader );</span><br><span class="line">    m_program.link();</span><br><span class="line"></span><br><span class="line">    m_vertexAttr = m_program.attributeLocation( <span class="string">"vertex"</span> );</span><br><span class="line">    m_texCoordAttr = m_program.attributeLocation( <span class="string">"texCoord"</span> );</span><br><span class="line">    m_verMatrixUniform = m_program.uniformLocation( <span class="string">"verMatrix"</span> );</span><br><span class="line">    m_toMatrixUniform = m_program.uniformLocation( <span class="string">"toMatrix"</span> );</span><br><span class="line">    m_toTexMatrixUniform = m_program.uniformLocation( <span class="string">"toTexMatrix"</span> );</span><br><span class="line">    m_backMatrixUniform = m_program.uniformLocation( <span class="string">"backMatrix"</span> );</span><br><span class="line">    m_texMatrixUniform = m_program.uniformLocation( <span class="string">"texMatrix"</span> );</span><br><span class="line">    m_modelUniform = m_program.uniformLocation( <span class="string">"model"</span> );</span><br><span class="line">    m_viewUniform = m_program.uniformLocation( <span class="string">"view"</span> );</span><br><span class="line">    m_projUniform = m_program.uniformLocation( <span class="string">"proj"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//m_texUniform = m_program.uniformLocation( "tex" ); //2D</span></span><br><span class="line">    m_texUniform = m_program.uniformLocation( <span class="string">"tex3D"</span> ); <span class="comment">//3D</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="paintGL"><a href="#paintGL" class="headerlink" title="paintGL()"></a>paintGL()</h4><p>paintGL()主要做個幾個動作</p><ul><li>設置MVP</li><li>呼叫:drawTriangle()配置頂點與紋理<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::paintGL()</span><br><span class="line">&#123;</span><br><span class="line">    QMatrix4x4 modelViewVertex; <span class="comment">//vertex</span></span><br><span class="line">    QMatrix4x4 modeltoVertex;</span><br><span class="line">    QMatrix4x4 modeltoTexVertex;</span><br><span class="line">    QMatrix4x4 modelbackVertex;</span><br><span class="line"></span><br><span class="line">    QMatrix4x4 modelUniform;</span><br><span class="line">    QMatrix4x4 viewUniform;</span><br><span class="line">    QMatrix4x4 projUniform;</span><br><span class="line">    modeltoVertex.translate( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-0.5f</span> ); viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br><span class="line"></span><br><span class="line">    QMatrix4x4 modelViewTexture; <span class="comment">//texture</span></span><br><span class="line">    modeltoTexVertex.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    <span class="keyword">if</span> (direction == <span class="number">0</span>)   <span class="comment">//horizontal 0 / vertical 1</span></span><br><span class="line">        modelViewTexture.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        modelViewTexture.rotate( m_angle, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">    modelbackVertex.translate(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !m_program.bind() )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    m_program.setUniformValue( m_verMatrixUniform, modelViewVertex );</span><br><span class="line">    m_program.setUniformValue( m_texMatrixUniform, modelViewTexture );</span><br><span class="line">    m_program.setUniformValue( m_toMatrixUniform, modeltoVertex );</span><br><span class="line">    m_program.setUniformValue( m_toTexMatrixUniform, modeltoTexVertex );</span><br><span class="line">    m_program.setUniformValue( m_backMatrixUniform, modelbackVertex );</span><br><span class="line"></span><br><span class="line">    m_program.setUniformValue( m_modelUniform, modelUniform );</span><br><span class="line">    m_program.setUniformValue( m_viewUniform, viewUniform );</span><br><span class="line">    m_program.setUniformValue( m_projUniform, projUniform );</span><br><span class="line">    drawTriangle();<span class="comment">//存放頂點與紋理的座標位置</span></span><br><span class="line"></span><br><span class="line">    m_program.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="resizeGL"><a href="#resizeGL" class="headerlink" title="resizeGL()"></a>resizeGL()</h4><ul><li>resize<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::resizeGL( <span class="keyword">int</span> w, <span class="keyword">int</span> h )</span><br><span class="line">&#123;</span><br><span class="line">    glViewport( <span class="number">0</span>, <span class="number">0</span>, w, h );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="drawTriangle"><a href="#drawTriangle" class="headerlink" title="drawTriangle()"></a>drawTriangle()</h4><ul><li>配置頂點與紋理並以三角形繪製<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scene::drawTriangle()</span><br><span class="line">&#123;</span><br><span class="line">    m_texture-&gt;bind();</span><br><span class="line"></span><br><span class="line">    m_program.setAttributeArray( m_vertexAttr, m_triangle.vertices.data(), <span class="number">3</span> );</span><br><span class="line">    m_program.setAttributeArray( m_texCoordAttr, m_triangle.texCoords.data(), <span class="number">3</span> );</span><br><span class="line">    m_program.setUniformValue( m_texUniform, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    m_program.enableAttributeArray( m_vertexAttr );</span><br><span class="line">    m_program.enableAttributeArray( m_texCoordAttr );</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0f</span> / m_triangle.numbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2D</span></span><br><span class="line">    <span class="comment">//glEnable(GL_TEXTURE_2D);</span></span><br><span class="line">    <span class="comment">//3D </span></span><br><span class="line">    glClear( GL_COLOR_BUFFER_BIT  | GL_DEPTH_BUFFER_BIT );</span><br><span class="line"></span><br><span class="line">    glEnable(GL_TEXTURE_3D);</span><br><span class="line">    glBindTexture(GL_TEXTURE_3D, m_nTexId);</span><br><span class="line">    glEnable( GL_ALPHA_TEST );</span><br><span class="line">    glAlphaFunc( GL_GREATER, <span class="number">0.03f</span> );</span><br><span class="line"></span><br><span class="line">    glEnable(GL_BLEND);</span><br><span class="line">    glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );</span><br><span class="line"></span><br><span class="line">    glMatrixMode( GL_TEXTURE );</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_triangle.numbers ; i++) &#123;</span><br><span class="line">        <span class="comment">//3D</span></span><br><span class="line">        glDrawArrays( GL_TRIANGLE_STRIP, <span class="number">0</span> + <span class="number">4</span> * i, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    glBindTexture(GL_TEXTURE_3D, <span class="number">0</span>);</span><br><span class="line">    m_program.disableAttributeArray( m_vertexAttr );</span><br><span class="line">    m_program.disableAttributeArray( m_texCoordAttr );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Triangle-h"><a href="#Triangle-h" class="headerlink" title="Triangle.h"></a>Triangle.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Triangle();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVertices</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initTexCoords</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; vertices;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; texCoords;</span><br><span class="line">    <span class="keyword">int</span> numbers;</span><br><span class="line">    <span class="keyword">int</span> texcStep;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Triangle-cpp"><a href="#Triangle-cpp" class="headerlink" title="Triangle.cpp"></a>Triangle.cpp</h3><ul><li>存放頂點與紋理的座標<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Triangle::initVertices()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//2D array</span></span><br><span class="line">    numbers = <span class="number">52</span>;</span><br><span class="line">    vertices.clear();</span><br><span class="line">    vertices.resize( <span class="number">12</span> * numbers );</span><br><span class="line">    <span class="keyword">float</span> z = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0</span> / <span class="keyword">float</span>(numbers);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers ; i++) &#123;</span><br><span class="line">        vertices[<span class="number">0</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">1</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">2</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">3</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">4</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">5</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">6</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        vertices[<span class="number">7</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">8</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        vertices[<span class="number">9</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">10</span> + <span class="number">12</span> * i] = <span class="number">-1.0f</span>;</span><br><span class="line">        vertices[<span class="number">11</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Triangle::initTexCoords()</span><br><span class="line">&#123;</span><br><span class="line">    texCoords.clear();</span><br><span class="line">    texCoords.resize( <span class="number">12</span> * numbers );</span><br><span class="line">    <span class="keyword">float</span> z = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">float</span> step = <span class="number">1.0</span> / <span class="keyword">float</span>(numbers);</span><br><span class="line">    <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numbers ; i++) &#123;</span><br><span class="line">        texCoords[<span class="number">0</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">1</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">2</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">        <span class="comment">// 1</span></span><br><span class="line">        texCoords[<span class="number">3</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">4</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">5</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        texCoords[<span class="number">6</span> + <span class="number">12</span> * i] = <span class="number">0.0f</span>;</span><br><span class="line">        texCoords[<span class="number">7</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">8</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line"></span><br><span class="line">        texCoords[<span class="number">9</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">10</span> + <span class="number">12</span> * i] = <span class="number">1.0f</span>;</span><br><span class="line">        texCoords[<span class="number">11</span> + <span class="number">12</span> * i] = step * <span class="keyword">float</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>透過這次的3D Volume Rendering對於圖形上的處理與3D觀念有了更深刻的理解，像是3D世界中物體的移動通常並非是物體真的在移動而是攝影機的移動使觀察畫面有變化，還有頂點與紋理傳遞給著色器Shader處理的運作，更特別是容器不動紋理去做旋轉這個想法也是讓我有新的思維。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%AB%8B%E4%BD%93%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">立體渲染- 維基百科，自由的百科全書 - Wikipedia</a><br><a href="https://tw.news.yahoo.com/%E7%9C%BC%E7%A7%91%E6%AA%A2%E6%9F%A5%E5%88%A9%E5%99%A8%E3%80%8Coct%E3%80%8D%E8%A7%A3%E6%9E%90%E5%BA%A6%E8%B6%85%E9%AB%98%E3%80%80%E6%8F%AA%E5%87%BA%E7%9C%BC%E7%96%BE%E5%8F%AA%E9%9C%803%E7%A7%92-070029677.html" target="_blank" rel="noopener">眼科檢查利器「OCT」解析度超高</a> OCT文獻參考<br><a href="https://www.codeproject.com/Articles/352270/%2FArticles%2F352270%2FGetting-started-with-Volume-Rendering" target="_blank" rel="noopener">Getting started with Volume Rendering using OpenGL</a> 主要觀念與程式邏輯參考處<br><a href="http://aboutdada.com/?p=1739" target="_blank" rel="noopener">Rendering OpenGL Graphics in Qt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前陣子使用的QImage都是處理二維圖形，最近研究起3D的領域，透過OpenGL來實作立體渲染(Volume Rendering)，立體渲染
      
    
    </summary>
    
      <category term="OpenGL" scheme="https://teddybearfp.github.io/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="https://teddybearfp.github.io/tags/OpenGL/"/>
    
      <category term="Volume Rendering" scheme="https://teddybearfp.github.io/tags/Volume-Rendering/"/>
    
      <category term="3D" scheme="https://teddybearfp.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL GLSL著色器</title>
    <link href="https://teddybearfp.github.io/2018/12/22/OpenGL-GLSL%E8%91%97%E8%89%B2%E5%99%A8/"/>
    <id>https://teddybearfp.github.io/2018/12/22/OpenGL-GLSL著色器/</id>
    <published>2018-12-22T07:05:16.000Z</published>
    <updated>2019-03-24T04:18:56.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>3D是結合容器與紋理呈現在畫面上，透過著色器我們就可以把現有的每點位置與該點像素顏色精準的繪製在其中，接下來我們就來了解一下GLSL這語言，其變數型態與傳遞方式需要先有所了解才能跟c++端資料互相傳遞，此篇文章將會記錄如何使用這兩種著色器處理字串集傳送到驅動中。</p><h2 id="GLSL-OpenGL-Shading-Language"><a href="#GLSL-OpenGL-Shading-Language" class="headerlink" title="GLSL(OpenGL Shading Language)"></a>GLSL(OpenGL Shading Language)</h2><ul><li>OpenGL繪製圖形是透過GLSL(OpenGL Shading Language)也稱作 GLslang，是一個以C語言為基礎的高階著色語言。</li><li>GLSL 著色器不是獨立的應用程式；其需要使用 OpenGL API 的應用程式。C、C++、C#、Delphi 和 Java 皆支援 OpenGL API，且支援 OpenGL 著色語言。</li><li>GLSL 著色器本身只是簡單的字串集，這些字串集會傳送到硬體廠商的驅動程式，並從程式內部的 OpenGL API 進入點編譯。</li></ul><h2 id="著色器-shader"><a href="#著色器-shader" class="headerlink" title="著色器(shader)"></a>著色器(shader)</h2><p>透過著色器可以透過glsl這個語言來將vertex與texture繪製呈現在program中，著色器的檔案格式為glsl<br>繪製成圖形基本上會運用到以下兩個檔案</p><ul><li>頂點著色器(vertex shader.glsl)</li><li>片段著色器(fragment shader.glsl)</li></ul><h3 id="著色器執行順序"><a href="#著色器執行順序" class="headerlink" title="著色器執行順序"></a>著色器執行順序</h3><p>著色器的執行順序會由vertex shader.glsl先執行再執行fragment shader.glsl<br><img src="https://i.imgur.com/ZInohLH.jpg" alt="" title="vertex shader.glsl -&gt; fragment shader.glsl"></p><h3 id="頂點著色器-vertex-shader"><a href="#頂點著色器-vertex-shader" class="headerlink" title="頂點著色器(vertex shader)"></a>頂點著色器(vertex shader)</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>頂點著色器目的return gl_Position</p><h4 id="運作原理"><a href="#運作原理" class="headerlink" title="運作原理"></a>運作原理</h4><p><img src="https://i.imgur.com/dLfGjj1.png" alt="" title="Model,View,Projection matrix是三種不同的變換矩陣"></p><h5 id="Model-matrix"><a href="#Model-matrix" class="headerlink" title="Model matrix"></a>Model matrix</h5><p>將模型自己的座標系對應到空間座標系(針對空間座標處理縮放、旋轉、平移)<br><img src="https://i.imgur.com/O8unXl6.png" alt=""></p><h6 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h6><p>translate(x位移, y位移, z位移)<br>下面這個例子是向量(10,10,10,1)沿著X軸平移3個單位<br><img src="https://i.imgur.com/YbKDutP.png" alt=""><br>經過上述運算就得到了(13,10,10,1)的齊次座標，其中的1代表的是這向量為一個點而不是一個方向，即使經過變換矩陣點還是點</p><h6 id="縮放"><a href="#縮放" class="headerlink" title="縮放"></a>縮放</h6><p>scale(2.0f, 2.0f ,2.0f);<br><img src="https://i.imgur.com/ESaXAVc.png" alt=""></p><h6 id="example"><a href="#example" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//translate(x位移-0.5, y位移-0.5, z位移0.0)</span></span><br><span class="line">modelUniform.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="comment">//rotate(旋轉角度, 0.0, 1.0, 0.0) 以y軸做旋轉 </span></span><br><span class="line">modelUniform.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br></pre></td></tr></table></figure><h5 id="View-matrix"><a href="#View-matrix" class="headerlink" title="View matrix"></a>View matrix</h5><p>將空間座標系對應到攝影機所看到的座標系(將世界的視野重新定義)<br>設定鏡頭位置、世界中心位置、觀看方向<br><img src="https://i.imgur.com/SGqaund.png" alt=""></p><h6 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lookAt(鏡頭位置, 世界中心位置, 觀看角度)</span></span><br><span class="line">viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h5 id="Projection-matrix"><a href="#Projection-matrix" class="headerlink" title="Projection matrix"></a>Projection matrix</h5><p>確定了物體的形狀位置和攝影機的位置以後，最後還要確定攝影機的攝影區域。<br>設定視野跟最近處與最遠處，若是物體小於最近處或是大於最遠處將會看不到物體<br><img src="https://i.imgur.com/SAt0L7e.png" alt="" title="設定視野跟最近處與最遠處"></p><h6 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//perspective (視角多大, 螢幕長寬比, 最近處, 最遠處)</span></span><br><span class="line">projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br></pre></td></tr></table></figure><p>頂點著色器主要將頂點vertex去做變換矩陣(model縮放、旋轉、平移)與世界視角變化(view)，最後乘上投影機設定(projector)得到最終的gl_Position回傳</p><h4 id="運作順序"><a href="#運作順序" class="headerlink" title="運作順序"></a>運作順序</h4><p>將Vertex乘上變化矩陣後得到齊次座標(Homogeneous Coordinates)後賦值給gl_Position回傳<br><img src="https://i.imgur.com/NmbpLFB.png" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl_Position = P * (V * (M * vertex));</span><br></pre></td></tr></table></figure></p><p>Model coordinates - (<em>Model Matrix) &gt; World coordinates - (</em>View Matrix) &gt; Camera coordinates</p><h5 id="example-3"><a href="#example-3" class="headerlink" title="example"></a>example</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">attribute highp vec4 vertex;</span><br><span class="line">uniform mediump mat4 toMatrix;<span class="comment">//平移要比旋轉先處理否則結果不同(因為旋轉會比較先處理所以拉到glsl自行設定)</span></span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = proj *(view *(model * vertex))) ;</span><br><span class="line">    <span class="comment">//equal to (proj * view * model) * vertex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>proj <em>(view </em>(model <em>(toMatrix </em> vertex)))<br>equal to<br>(proj <em> view </em> model) * vertex</p></blockquote><h3 id="片段著色器-fragment-shader"><a href="#片段著色器-fragment-shader" class="headerlink" title="片段著色器(fragment shader)"></a>片段著色器(fragment shader)</h3><p>片段著色器最主要的return值為原生變數gl_FragColor來決定最終的像素顏色，而gl_FragColor會把值傳去做透明度(Alpha test)跟混合(Blending)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_FragColor = vec4(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//把輸出變量設置為紅色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/NWf4c7J.png" alt=""></p><h2 id="變數型態"><a href="#變數型態" class="headerlink" title="變數型態"></a>變數型態</h2><p>較常使用到的有以下幾種變數型態</p><ul><li>attribute</li><li>vec2, vec3, vec4</li><li>mat2, mat3, mat4</li><li>Uniform</li><li>varying</li><li>sampler2D, sampler3D<h3 id="Vec-向量"><a href="#Vec-向量" class="headerlink" title="Vec 向量"></a>Vec 向量</h3>glsl中的向量分為以下三種</li><li>vec2 二分量的浮點向量</li><li>vec3 三分量的浮點向量</li><li>vec4 四分量的浮點向量</li></ul><p>值可以為空間座標(x,y,z,w)或是顏色(r,g,b,a)或是紋理座標(s,t,p,q)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vec4 <span class="built_in">vector</span>;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">0</span>] = <span class="built_in">vector</span>.r = <span class="built_in">vector</span>.x = <span class="built_in">vector</span>.s;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">1</span>] = <span class="built_in">vector</span>.g = <span class="built_in">vector</span>.y = <span class="built_in">vector</span>.t;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">2</span>] = <span class="built_in">vector</span>.b = <span class="built_in">vector</span>.z = <span class="built_in">vector</span>.p;</span><br><span class="line"><span class="built_in">vector</span>[<span class="number">3</span>] = <span class="built_in">vector</span>.a = <span class="built_in">vector</span>.w = <span class="built_in">vector</span>.q;</span><br></pre></td></tr></table></figure><h4 id="分量與向量與純量差異"><a href="#分量與向量與純量差異" class="headerlink" title="分量與向量與純量差異"></a>分量與向量與純量差異</h4><blockquote><p>向量具有方向以及不為零的值，而純量只有值，一向量可分解成x,y分量，而x,y分量還是向量，因為它依然還是有方向，只是一個方向會垂直於x軸，另一個方向會垂直於y軸。</p></blockquote><h4 id="空間座標"><a href="#空間座標" class="headerlink" title="空間座標"></a>空間座標</h4><p>這裡我們所講述的四分量浮點向量為齊次座標因為齊次座標了方便將空間的平移、縮放、旋轉等轉換使用矩陣來記錄。<br>所以空間座標為(x,y,z,w)</p><h5 id="齊次座標"><a href="#齊次座標" class="headerlink" title="齊次座標"></a>齊次座標</h5><p>在3D世界中(x,y,z)可能是一個點也可能是一個向量，點只有位置，向量則是沒有位置只有大小與方向，當(x,y,z,0)時我們規定他為向量，而(x,y,z,1)或(x,y,z,2)當w不為0時我們稱為位置。</p><blockquote><p>補充說明<br>齊次座標除了能夠區分點和向量，在3D圖形學中還有重要的意義。齊次座標系使得我們可以在一中特殊的方程組中求出解，這個方程組中每一個方程都表示一個與系統中其他直線平行的直線。我們知道在歐幾里得空間中，對這種方程組是無解的，因爲他們沒有交點。然而在現實世界中我們是可以看到兩條平行線相交的。<br>三維點的齊次座標爲（X, Y, Z, w）,那麼它的3D空間座標爲：<br>x = X / w<br>y = Y / w<br>z = Z / w<br>我們可以看到的齊次座標(1, 2, 3, 1)與(2, 4, 6, 2)表示的都是3d空間中的點（1， 2， 3）；所以通常在程序設計中我們都取w爲1.</p></blockquote><h4 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h4><p>顏色(r,g,b,a)<br>r代表的是紅色<br>g代表的是綠色<br>b代表的是藍色<br>a代表的是透明度<br>值介於0~1</p><h3 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a>attribute</h3><p>這個屬性只能存在於頂點著色器中，所以一般只存放vertex(頂點座標)與texCoord(紋理座標)</p><p>example<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">attribute highp vec4 vertex;  <span class="comment">//頂點座標</span></span><br><span class="line">attribute highp vec4 texCoord;<span class="comment">//紋理座標</span></span><br></pre></td></tr></table></figure></p><h3 id="Uniforms"><a href="#Uniforms" class="headerlink" title="Uniforms"></a>Uniforms</h3><p>CPU給每個線程輸入數據所有線程的輸入值必須統一（uniform），而且必須設為只讀。也就是說，每條線程接收相同的數據，並且是不可改變的數據。shader在運行的時候是無法改變Unifroms的數值。<br>資料型態通常為：float、vec2、vec3、vec4、mat2、mat3、mat4、，sampler2D、sampler3D和samplerCube。</p><blockquote><p>一般用來存放變換矩陣(縮放、旋轉、位移),與光照</p></blockquote><h4 id="example-4"><a href="#example-4" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uniform mediump mat4 model;<span class="comment">//處理縮放、旋轉、位移</span></span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br></pre></td></tr></table></figure><h3 id="varying"><a href="#varying" class="headerlink" title="varying"></a>varying</h3><p>從vertex shader傳遞給fragment shader的媒介，在vertex shader修改完然後給fragment shader使用，但是在fragment shader中並不能修改它。</p><h4 id="example-5"><a href="#example-5" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">attribute highp vec4 vertex;   <span class="comment">//頂點座標</span></span><br><span class="line">attribute highp vec4 texCoord; <span class="comment">//紋理座標</span></span><br><span class="line">varying highp vec4 texc;       <span class="comment">//將紋理座標傳送給片段著色器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = MVP * vertex;</span><br><span class="line">    texc = texCoord; <span class="comment">//透過varying傳送給片段著色器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><p>float型態在shader中扮演重要角色，所以精度非常重要，低的精度可以加快渲染速度，但是質量就差，相對的高精度的質量較好，渲染速度則較慢，glsl光柵著色時，會有大量的浮點運算，設備可能不一定能承受，glsl提供了三種浮點數的精度，我們可以在變數前面加上highp, mediump, lowp達到該變數的精度聲明</p><h4 id="設定默認精度"><a href="#設定默認精度" class="headerlink" title="設定默認精度"></a>設定默認精度</h4><p>可以直接統一設定，在片段著色器最開始時，直接加上precision mediump float;這樣就默認了所有精度，若是變數沒特別聲明則會以默認精度來處理。</p><h4 id="精度套用"><a href="#精度套用" class="headerlink" title="精度套用"></a>精度套用</h4><p>在運算時會套用已知最高的精度參數為運算精度，若沒有已知最高的則會套用默認精度或是更高的精度。</p><h4 id="example-6"><a href="#example-6" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lowp <span class="keyword">float</span> color;</span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line">varying highp vec4 texc;</span><br></pre></td></tr></table></figure><h2 id="矩陣"><a href="#矩陣" class="headerlink" title="矩陣"></a>矩陣</h2><p>矩陣乘法講究次序<br>矩陣運算A * B != B * A<br>所以先後順序很重要</p><h3 id="example-7"><a href="#example-7" class="headerlink" title="example"></a>example</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transformedVector = translateMatrix * rotationMatrix * scaleMatrix * originalVector;</span><br></pre></td></tr></table></figure><p>上述的程式碼會先執行縮放再執行旋轉最後才執行平移，這就是矩陣乘法的運算方式</p><h2 id="GLSL好用的函式"><a href="#GLSL好用的函式" class="headerlink" title="GLSL好用的函式"></a>GLSL好用的函式</h2><h3 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h3><p>step() 插值函數需要輸入兩個參數。第一個是極限或閥值，第二個是我們想要檢測或通過的值。<br>對任何小於閥值的值，返回 0.0，大於閥值，則返回 1.0。</p><h4 id="example-8"><a href="#example-8" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若是st.x &gt; 0.5則回傳1.0否則回傳0.0</span></span><br><span class="line"><span class="keyword">float</span> y = step(<span class="number">0.5</span>,st.x);</span><br></pre></td></tr></table></figure><h3 id="Smoothstep"><a href="#Smoothstep" class="headerlink" title="Smoothstep"></a>Smoothstep</h3><p>smoothstep()當給定一個範圍的上下限和一個數值，這個函數會在已有的範圍內給出插值。<br>前兩個參數規定轉換的開始和結束點，第三個是給出一個值用來插值。</p><h4 id="example-9"><a href="#example-9" class="headerlink" title="example"></a>example</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Smooth interpolation between 0.1 and 0.9</span></span><br><span class="line"><span class="keyword">float</span> y = smoothstep(<span class="number">0.1</span>,<span class="number">0.9</span>,st.x);</span><br></pre></td></tr></table></figure><h3 id="其他有用函式"><a href="#其他有用函式" class="headerlink" title="其他有用函式"></a>其他有用函式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">y = mod(x,<span class="number">0.5</span>); <span class="comment">// 返回 x 對 0.5 取mod的值</span></span><br><span class="line">y = fract(x); <span class="comment">// 僅僅返回數的小數部分</span></span><br><span class="line">y = <span class="built_in">ceil</span>(x); <span class="comment">// 向正無窮取整</span></span><br><span class="line">y = <span class="built_in">floor</span>(x); <span class="comment">// 向負無窮取整</span></span><br><span class="line">y = <span class="built_in">abs</span>(x); <span class="comment">// 返回 x 的絕對值</span></span><br><span class="line">y = clamp(x,<span class="number">0.0</span>,<span class="number">1.0</span>); <span class="comment">// 把 x 的值限制在 0.0 到 1.0</span></span><br><span class="line">y = min(<span class="number">0.0</span>,x); <span class="comment">// 返回 x 和 0.0 中的較小值</span></span><br><span class="line">y = max(<span class="number">0.0</span>,x); <span class="comment">// 返回 x 和 0.0 中的較大值</span></span><br></pre></td></tr></table></figure><h2 id="實作著色器"><a href="#實作著色器" class="headerlink" title="實作著色器"></a>實作著色器</h2><p>以下是3D Volume Rendering的著色器編寫</p><h3 id="vertexShader-glsl"><a href="#vertexShader-glsl" class="headerlink" title="vertexShader.glsl"></a>vertexShader.glsl</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">attribute highp vec4 vertex;</span><br><span class="line">attribute highp vec4 texCoord;</span><br><span class="line">uniform mediump mat4 verMatrix;</span><br><span class="line">uniform mediump mat4 toMatrix;</span><br><span class="line">uniform mediump mat4 toTexMatrix;</span><br><span class="line">uniform mediump mat4 backMatrix;</span><br><span class="line">uniform mediump mat4 texMatrix;</span><br><span class="line"><span class="comment">//MVP</span></span><br><span class="line">uniform mediump mat4 model;</span><br><span class="line">uniform mediump mat4 view;</span><br><span class="line">uniform mediump mat4 proj;</span><br><span class="line">varying highp vec4 texc; <span class="comment">//varying傳送給fragment shader</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = proj *(view *(model *(toMatrix * vertex))) ;<span class="comment">//equal to (proj * view * model) * vertex</span></span><br><span class="line">    texc = backMatrix* (texMatrix * (toTexMatrix * texCoord)) ;<span class="comment">//texture rotate</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fragmentShader-glsl"><a href="#fragmentShader-glsl" class="headerlink" title="fragmentShader.glsl"></a>fragmentShader.glsl</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">varying highp vec4 texc;</span><br><span class="line">uniform sampler2D tex2D;</span><br><span class="line">uniform sampler3D tex3D;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//2D</span></span><br><span class="line">    <span class="comment">//highp vec4 color = texture2D( tex2D , texc.st ).rgba;</span></span><br><span class="line">    <span class="comment">//3D</span></span><br><span class="line">    highp vec4 color = texture3D( tex3D , texc.stp ).rgba;<span class="comment">//紋理的格式為(s,t,p,q)</span></span><br><span class="line">    <span class="keyword">if</span> (color.a &gt; <span class="number">0.1</span>) &#123; <span class="comment">//把透明度太低的丟棄(用來過濾的閥值)</span></span><br><span class="line">        gl_FragColor = color;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        discard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scene-h"><a href="#Scene-h" class="headerlink" title="Scene.h"></a>Scene.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">QOpenGLShaderProgram m_program;</span><br><span class="line"><span class="keyword">int</span> m_vertexAttr;</span><br><span class="line"><span class="keyword">int</span> m_texCoordAttr;</span><br><span class="line"><span class="keyword">int</span> m_verMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_toMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_toTexMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_backMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_texMatrixUniform;</span><br><span class="line"><span class="keyword">int</span> m_texUniform;</span><br><span class="line"><span class="keyword">int</span> m_modelUniform;</span><br><span class="line"><span class="keyword">int</span> m_viewUniform;</span><br><span class="line"><span class="keyword">int</span> m_projUniform;</span><br></pre></td></tr></table></figure><h3 id="Scene-cpp"><a href="#Scene-cpp" class="headerlink" title="Scene.cpp"></a>Scene.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QOpenGLShader <span class="title">vShader</span><span class="params">( QOpenGLShader::Vertex )</span></span>;</span><br><span class="line">vShader.compileSourceFile( <span class="string">":/Shaders/vertexShader.glsl"</span> );</span><br><span class="line"><span class="function">QOpenGLShader <span class="title">fShader</span><span class="params">( QOpenGLShader::Fragment )</span></span>;</span><br><span class="line">fShader.compileSourceFile( <span class="string">":/Shaders/fragmentShader.glsl"</span> );</span><br><span class="line"></span><br><span class="line">m_program.addShader( &amp;vShader );</span><br><span class="line">m_program.addShader( &amp;fShader );</span><br><span class="line">m_program.link();</span><br><span class="line"></span><br><span class="line">m_vertexAttr = m_program.attributeLocation( <span class="string">"vertex"</span> );</span><br><span class="line">m_texCoordAttr = m_program.attributeLocation( <span class="string">"texCoord"</span> );</span><br><span class="line">m_verMatrixUniform = m_program.uniformLocation( <span class="string">"verMatrix"</span> );</span><br><span class="line">m_toMatrixUniform = m_program.uniformLocation( <span class="string">"toMatrix"</span> );</span><br><span class="line">m_toTexMatrixUniform = m_program.uniformLocation( <span class="string">"toTexMatrix"</span> );</span><br><span class="line">m_backMatrixUniform = m_program.uniformLocation( <span class="string">"backMatrix"</span> );</span><br><span class="line">m_texMatrixUniform = m_program.uniformLocation( <span class="string">"texMatrix"</span> );</span><br><span class="line">m_modelUniform = m_program.uniformLocation( <span class="string">"model"</span> );</span><br><span class="line">m_viewUniform = m_program.uniformLocation( <span class="string">"view"</span> );</span><br><span class="line">m_projUniform = m_program.uniformLocation( <span class="string">"proj"</span> );</span><br><span class="line">m_texUniform = m_program.uniformLocation( <span class="string">"tex3D"</span> ); <span class="comment">//3D</span></span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelViewVertex; <span class="comment">//vertex</span></span><br><span class="line">QMatrix4x4 modeltoVertex;</span><br><span class="line">QMatrix4x4 modeltoTexVertex;</span><br><span class="line">QMatrix4x4 modelbackVertex;</span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelUniform;</span><br><span class="line">QMatrix4x4 viewUniform;</span><br><span class="line">QMatrix4x4 projUniform;</span><br><span class="line">modeltoVertex.translate( <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-0.5f</span> );</span><br><span class="line">viewUniform.lookAt(QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>),QVector3D(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),QVector3D(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">projUniform.perspective( <span class="number">60.0f</span>, ( GLfloat ) width() / ( GLfloat ) height() , <span class="number">1.0f</span>, <span class="number">200.0f</span> );</span><br><span class="line"></span><br><span class="line">QMatrix4x4 modelViewTexture; <span class="comment">//texture</span></span><br><span class="line">modeltoTexVertex.translate(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="keyword">if</span> (direction == <span class="number">0</span>)   <span class="comment">//horizontal 0 / vertical 1</span></span><br><span class="line">    modelViewTexture.rotate( m_angle, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    modelViewTexture.rotate( m_angle, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span> );</span><br><span class="line">modelbackVertex.translate(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span> );</span><br><span class="line">m_program.setUniformValue( m_verMatrixUniform, modelViewVertex );</span><br><span class="line">m_program.setUniformValue( m_texMatrixUniform, modelViewTexture );</span><br><span class="line">m_program.setUniformValue( m_toMatrixUniform, modeltoVertex );</span><br><span class="line">m_program.setUniformValue( m_toTexMatrixUniform, modeltoTexVertex );</span><br><span class="line">m_program.setUniformValue( m_backMatrixUniform, modelbackVertex );</span><br><span class="line"></span><br><span class="line">m_program.setUniformValue( m_modelUniform, modelUniform );</span><br><span class="line">m_program.setUniformValue( m_viewUniform, viewUniform );</span><br><span class="line">m_program.setUniformValue( m_projUniform, projUniform );</span><br><span class="line"></span><br><span class="line">m_program.release();</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>GLSL就是透過從C++端取得到的頂點座標與紋理座標用頂點著色器得到gl_Position齊次座標與片段著色器得到gl_FragColor最終像素顏色繪製圖形，有了這些認知後下一篇我們將繼續看C++端如何建立頂點、紋理座標資訊建立與著色器連結繪製出3D Volume Rendering達到下圖的3D渲染效果<br><img src="https://i.imgur.com/sxi4ZpN.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/GLSL" target="_blank" rel="noopener">GLSL - 维基百科</a><br><a href="https://thebookofshaders.com/02/?lan=ch" target="_blank" rel="noopener">The Book of Shaders by Patricio Gonzalez Vivo &amp; Jen Lowe</a><br><a href="https://github.com/wshxbqq/GLSL-Card" target="_blank" rel="noopener">GitHub - wshxbqq/GLSL-Card: 着色器语言GLSL</a><br><a href="https://www.smwenku.com/a/5b87a23d2b71775d1cd837c7/" target="_blank" rel="noopener">https://www.smwenku.com/a/5b87a23d2b71775d1cd837c7/</a> 齊次座標相關文獻<br><a href="http://www.opengl-tutorial.org/cn/beginners-tutorials/tutorial-3-matrices/" target="_blank" rel="noopener">第三课：矩阵</a> MVP觀念<br><a href="https://www.smwenku.com/a/5c1c72febd9eee5e4184bcb7" target="_blank" rel="noopener">OpenGL學習——第5天（着色器）</a> 純粹覺得寫得好的文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;3D是結合容器與紋理呈現在畫面上，透過著色器我們就可以把現有的每點位置與該點像素顏色精準的繪製在其中，接下來我們就來了解一下GLSL這語言，
      
    
    </summary>
    
      <category term="OpenGL" scheme="https://teddybearfp.github.io/categories/OpenGL/"/>
    
    
      <category term="OpenGL著色器" scheme="https://teddybearfp.github.io/tags/OpenGL%E8%91%97%E8%89%B2%E5%99%A8/"/>
    
      <category term="shader" scheme="https://teddybearfp.github.io/tags/shader/"/>
    
      <category term="GLSL" scheme="https://teddybearfp.github.io/tags/GLSL/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬蟲幫你掌握氣象!(動態網頁爬取)</title>
    <link href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/"/>
    <id>https://teddybearfp.github.io/2018/11/16/動態網頁爬取/</id>
    <published>2018-11-16T02:05:16.000Z</published>
    <updated>2019-03-24T03:07:37.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇<a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/#more">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a>寫的是如何擷取靜態網頁內容，只能單純爬取HTML內容，但是如果網頁是用JS渲染的我們透過F12 select element是看不到內容的，像是下方這張圖<br><img src="https://i.imgur.com/I3DYim8.png" alt=""><br>選擇了元素，但看不到內容(今天(15日)桃園市天氣晴時多雲，平均溫度…)<br>因為這段代碼是由JS渲染，所以我們需要用PhantomJS來幫助我們爬取中央氣象局今天的天氣訊息</p><h2 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h2><p>PhantomJS是無介面瀏覽器(Headless browser)，背後的渲染引擎為 WebKit，適合進行自動化測試、捕捉截圖或監測網頁效能。因為沒有圖形介面，很容易整合至現有的測試框架，另一個特點是他能直接控制 DOM，方便你提取網頁中的元素內容</p><p>下載PhantomJS(<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">Download PhantomJS</a>)</p><h2 id="實作爬取氣象"><a href="#實作爬取氣象" class="headerlink" title="實作爬取氣象"></a>實作爬取氣象</h2><h3 id="導入函式庫"><a href="#導入函式庫" class="headerlink" title="導入函式庫"></a>導入函式庫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br></pre></td></tr></table></figure><h3 id="編寫爬取桃園天氣函式"><a href="#編寫爬取桃園天氣函式" class="headerlink" title="編寫爬取桃園天氣函式"></a>編寫爬取桃園天氣函式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Taoyuan</span><span class="params">()</span>:</span></span><br><span class="line">    target_url = <span class="string">'https://www.cwb.gov.tw/V7/forecast/taiwan/Taoyuan_City.htm'</span></span><br><span class="line">    driver = webdriver.PhantomJS(executable_path=<span class="string">r'D:\phantomjs\bin\phantomjs.exe'</span>)<span class="comment">#導入PhantomJS路徑</span></span><br><span class="line">    driver.get(target_url)</span><br><span class="line">    soup = BeautifulSoup(driver.page_source, <span class="string">'html.parser'</span>)</span><br><span class="line">    content = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> soup.select(<span class="string">'#ftext'</span>):</span><br><span class="line">        title = str(data)</span><br><span class="line">        content = title.split(<span class="string">"&lt;br/&gt;&lt;br/&gt;"</span>)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><p>檢視beautifulSoup解析HTML代碼後的內容並觀察欲爬取位置<br><img src="https://i.imgur.com/tiCvwGg.png" alt=""><br>將id為ftext的內容找出(#ftext)</p><ul><li>#id</li><li>.class<br><img src="https://i.imgur.com/8ZVExbm.png" alt=""></li></ul><h3 id="呼叫函式"><a href="#呼叫函式" class="headerlink" title="呼叫函式"></a>呼叫函式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(Taoyuan())</span><br></pre></td></tr></table></figure><p>成功爬取今日天氣概述<br><img src="https://i.imgur.com/m3hqHZr.png" alt=""></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>PhantomJS還蠻多問題的例如:使用Multi-thread，讓多個網頁能同時 Loading，可是 PhantomJS 同時開很容易就會陣亡。掛掉後會變成一個 Zombie Process。<br>Headless Google 的出現，能取代 PhantomJS 功能且更快更穩，讓 PhantomJS 作者決定停止辛苦的獨力維護工作，PhantomJS 的Github 專案也已封存，改用 Headless Chrome 已成定局。改天來玩看看Google Chrome Headless，到時候再來寫一篇Headless Chrome的爬取</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hiskio.com/courses/76/lectures/1883" target="_blank" rel="noopener">PhantomJS的用法</a><br><a href="https://jerrynest.io/phantomjs-screenshot/" target="_blank" rel="noopener">使用PhantomJS 抓取網頁截圖- 傑瑞窩在這</a><br><a href="https://blog.darkthread.net/blog/headless-chrome/" target="_blank" rel="noopener">使用 Headless Chrome 擷圖、轉存PDF、爬資料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇&lt;a href=&quot;https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="動態網頁爬取" scheme="https://teddybearfp.github.io/tags/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/"/>
    
      <category term="網頁爬蟲" scheme="https://teddybearfp.github.io/tags/%E7%B6%B2%E9%A0%81%E7%88%AC%E8%9F%B2/"/>
    
      <category term="selenium" scheme="https://teddybearfp.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>如何將Windows安裝到外接硬碟給Mac使用</title>
    <link href="https://teddybearfp.github.io/2018/11/15/%E5%A6%82%E4%BD%95%E5%B0%87Windows%E5%AE%89%E8%A3%9D%E5%88%B0%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%A2%9F%E7%B5%A6Mac%E4%BD%BF%E7%94%A8/"/>
    <id>https://teddybearfp.github.io/2018/11/15/如何將Windows安裝到外接硬碟給Mac使用/</id>
    <published>2018-11-15T05:05:16.000Z</published>
    <updated>2018-11-15T06:34:40.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>雖然Mac十分好用也非常流暢，但是有些程式在Mac上是無法使用或是還沒支援的，於是懷念起我們熟悉的Windows，除了bootcamp方式外，透過rufus這套軟體置作windows外接硬碟，可以很輕鬆的能在Mac裝置上看到Windows的身影</p><h2 id="rufus"><a href="#rufus" class="headerlink" title="rufus"></a>rufus</h2><p>可開機USB製作軟體 - Rufus，將一般的USB格式化，並製作成可以用於電腦重灌的可開機USB，支援各式ISO光碟映像檔及MS-DOS、FreeDOS的匯入，映像檔的匯入支援Windows 8/7/XP/Vista/2003R2等作業系統光碟、Hiren’s Boot CD等多功能開機片、CentOS等Linux作業系統光碟、LiveXP等Live CD。<br>可以至<a href="https://www.azofreeware.com/2013/12/rufus-141-usb.html" target="_blank" rel="noopener">阿榮福利味</a>下載</p><h2 id="製作步驟"><a href="#製作步驟" class="headerlink" title="製作步驟"></a>製作步驟</h2><h3 id="下載Windows-iso檔"><a href="#下載Windows-iso檔" class="headerlink" title="下載Windows iso檔"></a>下載Windows iso檔</h3><p>首先先取得Windows的映像檔(Windows 10 Pro/Windows 10 Home…)</p><h3 id="製做Windows環境外接硬碟"><a href="#製做Windows環境外接硬碟" class="headerlink" title="製做Windows環境外接硬碟"></a>製做Windows環境外接硬碟</h3><p>執行rufus將第一步驟的Windows.iso寫入外接硬碟(建議為SSD效能有時甚至可差距到十倍以上)</p><h3 id="Mac執行外接硬碟"><a href="#Mac執行外接硬碟" class="headerlink" title="Mac執行外接硬碟"></a>Mac執行外接硬碟</h3><p>將Mac開機(option + 開機)，然後選擇EFI boot進入安裝介面安裝，此時需準備滑鼠跟鍵盤，因為還沒安裝驅動mac的軌跡版與鍵盤將會無法使用</p><h3 id="安裝完後回到Mac-OS"><a href="#安裝完後回到Mac-OS" class="headerlink" title="安裝完後回到Mac OS"></a>安裝完後回到Mac OS</h3><p>回到Mac OS開啟boot camp選擇動作並下載Windows支援軟體(mac driver)，放到外接硬碟中</p><h3 id="設定Windows並安裝支援軟體"><a href="#設定Windows並安裝支援軟體" class="headerlink" title="設定Windows並安裝支援軟體"></a>設定Windows並安裝支援軟體</h3><p>將Mac開機(option + 開機)，然後選擇EFI boot進入已經安裝好的Windows，此時會跑一些Windows基本設定，設定完後就進入Windows介面了，但是有些功能尚未齊全，像是充電功能或是聲音、fn鍵等功能…，把剛剛從bootcamp下載到的driver執行，安裝成功後，跟一般的Windows沒什麼兩樣了!</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://applealmond.com/posts/15795" target="_blank" rel="noopener">如何將Windows安裝到外接硬碟上給Mac使用（非Bootcamp/虛擬 …</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;雖然Mac十分好用也非常流暢，但是有些程式在Mac上是無法使用或是還沒支援的，於是懷念起我們熟悉的Windows，除了bootcamp方式外
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Mac" scheme="https://teddybearfp.github.io/tags/Mac/"/>
    
      <category term="rufus" scheme="https://teddybearfp.github.io/tags/rufus/"/>
    
      <category term="WinToGo" scheme="https://teddybearfp.github.io/tags/WinToGo/"/>
    
  </entry>
  
  <entry>
    <title>優質小工具</title>
    <link href="https://teddybearfp.github.io/2018/11/15/%E5%84%AA%E8%B3%AA%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://teddybearfp.github.io/2018/11/15/優質小工具/</id>
    <published>2018-11-15T05:05:16.000Z</published>
    <updated>2018-12-22T03:01:55.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>俗話說的好，工欲善其事必先利其器，在工作上常常需要一些小工具來輔佐達到目的，可能會製作UI或是拍攝教學影片，或是使用些跟程式相關的軟體，這時候若沒有一組好工具就還要花費時間在搜尋你的工具時間上，尤其一堆要付費，都出來上班工作了還要用付費軟體太哀傷了，所以記錄了目前覺得不錯的免費軟體收錄在工具箱中，這樣下次使用就快狠準啦!</p><h2 id="GetColor-取得色碼"><a href="#GetColor-取得色碼" class="headerlink" title="GetColor 取得色碼"></a>GetColor 取得色碼</h2><p>製做UI的時候，顏色要很精準，GetColor可以將任一pixel的顏色代碼清楚寫出，是個製做UI的好幫手!<br><img src="https://i.imgur.com/ZY8i183.png" alt="" title="滴管取得色碼"></p><h2 id="ActivePresenter-製作影片"><a href="#ActivePresenter-製作影片" class="headerlink" title="ActivePresenter 製作影片"></a>ActivePresenter 製作影片</h2><p>製做影片時，不外乎就是調整影片長度與加字幕，這套ActivePresenter可以很輕鬆的達到這些需求，好操作又免費，讚!<br><img src="https://i.imgur.com/7KLoXkz.png" alt=""></p><h2 id="ReIcon-圖示定位"><a href="#ReIcon-圖示定位" class="headerlink" title="ReIcon 圖示定位"></a>ReIcon 圖示定位</h2><p>如果你也跟我一樣有接雙螢幕的習慣，開會時插拔HDMI/DSub線，排列好的桌布圖示順序跑掉，那就很需要這套軟體了，將排序好的桌布環境使用這套軟體記憶，亂掉的時候點兩下通通歸位~<br><img src="https://i.imgur.com/KxPtiqS.png" alt=""></p><h2 id="NSIS-程式打包"><a href="#NSIS-程式打包" class="headerlink" title="NSIS 程式打包"></a>NSIS 程式打包</h2><p><a href="http://nsis.sourceforge.net/Download" target="_blank" rel="noopener">Download NSIS 3.03</a><br>將寫好的程式碼透過編寫NSIS &gt; compile NSI Scripts / load scripts就會產生安裝檔，這樣可以給其他人安裝妳寫好的程式囉<br><img src="https://i.imgur.com/ku1cqn1.png" alt=""></p><h2 id="rufus-製做可開機硬碟"><a href="#rufus-製做可開機硬碟" class="headerlink" title="rufus 製做可開機硬碟"></a>rufus 製做可開機硬碟</h2><p>我在<a href="https://teddybearfp.github.io/2018/11/15/%E5%A6%82%E4%BD%95%E5%B0%87Windows%E5%AE%89%E8%A3%9D%E5%88%B0%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%A2%9F%E7%B5%A6Mac%E4%BD%BF%E7%94%A8/#more">如何將Windows安裝到外接硬碟給Mac使用</a>有編寫rufus相關製作方式</p><h2 id="clonezilla-製做可開機硬碟"><a href="#clonezilla-製做可開機硬碟" class="headerlink" title="clonezilla 製做可開機硬碟"></a>clonezilla 製做可開機硬碟</h2><p>類似rufus的功能，可以製作還原碟，在開機時什麼都不操作的情況下直接進行還原的動作</p><h2 id="paint-NET-圖片處理"><a href="#paint-NET-圖片處理" class="headerlink" title="paint.NET 圖片處理"></a>paint.NET 圖片處理</h2><p>有時候我們需要個去背或是圖形相關處理，用paint.NET是個好選擇，免費的paint.NET可以用筆刷將不要的地方用橡皮擦擦掉並存成png檔，去背的圖片在觀看疊圖趨勢的時候是很重要的</p><h2 id="tourtoiseHg-版本控制"><a href="#tourtoiseHg-版本控制" class="headerlink" title="tourtoiseHg 版本控制"></a>tourtoiseHg 版本控制</h2><p>下載<a href="https://tortoisehg.bitbucket.io/" target="_blank" rel="noopener">TortoiseHg</a></p><h3 id="TortoiseHg-vs-git"><a href="#TortoiseHg-vs-git" class="headerlink" title="TortoiseHg vs git"></a>TortoiseHg vs git</h3><h4 id="優勢"><a href="#優勢" class="headerlink" title="優勢"></a>優勢</h4><ul><li>workbench 功能強大, 可以給revision打tag/bookmark和導出patch和導出archive, 可以對repository做sync/purge操作.</li><li>操作比git簡單多</li><li>和windows版的git相比, 非常小巧</li><li>集成Issue Tracking和Review Board<h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4></li><li>不支持針對單個文件夾的分支.</li><li>thgw.exe佔用內存較多</li></ul><h2 id="bitBucket-版本控制"><a href="#bitBucket-版本控制" class="headerlink" title="bitBucket 版本控制"></a>bitBucket 版本控制</h2><p>好用的版本控制</p><h2 id="Cmake"><a href="#Cmake" class="headerlink" title="Cmake"></a>Cmake</h2><p>cmake 目的: 將source資料編譯成sln檔 讓c++可以編譯產生dll與lib</p><p>1.開啟cmake gui<br>2.選擇source(例如:C:/opencv/sources)<br>3.選擇目的資料夾<br>4.configure<br>5.configure完成後(例如opencv選擇build&gt;&gt;opencv_world打勾)<br>6.search找尋prefix(cmake&gt;&gt;cmake_install_prefix) 更改路徑<br>7.generate完成後 點擊open project<br>8.開啟sln後build需要的檔案(例如module內的opencv_world)<br>9.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>10.至install設定的資料夾即可找到.h  , .dll , .lib<br>11.此時只有debug版所以還要再編一次release版<br>12.切換成release再次build需要的檔案(例如module內的opencv_world)<br>13.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>14.步驟完成後 就有debug版跟release版了!</p><p><img src="https://i.imgur.com/SvyQStu.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hk.saowen.com/a/cd02fa3aa2d452856d27734e5a08e21a0e877c95717d10841a8d6340975abde4" target="_blank" rel="noopener">https://hk.saowen.com/a/cd02fa3aa2d452856d27734e5a08e21a0e877c95717d10841a8d6340975abde4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;俗話說的好，工欲善其事必先利其器，在工作上常常需要一些小工具來輔佐達到目的，可能會製作UI或是拍攝教學影片，或是使用些跟程式相關的軟體，這時
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="優質小工具" scheme="https://teddybearfp.github.io/tags/%E5%84%AA%E8%B3%AA%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
      <category term="CMake" scheme="https://teddybearfp.github.io/tags/CMake/"/>
    
  </entry>
  
</feed>
