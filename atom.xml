<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泰迪熊的程式足跡</title>
  
  <subtitle>遊走程式森林的泰迪熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teddybearfp.github.io/"/>
  <updated>2019-05-29T10:48:51.886Z</updated>
  <id>https://teddybearfp.github.io/</id>
  
  <author>
    <name>G.C.L.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt 取得螢幕寬高</title>
    <link href="https://teddybearfp.github.io/2019/05/29/Qt-%E5%8F%96%E5%BE%97%E8%9E%A2%E5%B9%95%E5%AF%AC%E9%AB%98/"/>
    <id>https://teddybearfp.github.io/2019/05/29/Qt-取得螢幕寬高/</id>
    <published>2019-05-29T02:05:16.000Z</published>
    <updated>2019-05-29T10:48:51.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>設計介面的時候，需要掌握螢幕寬高比較好做調整介面大小，這一篇記錄Qt在c++端與qml端分別怎麼取得螢幕寬高</p><h2 id="偵測螢幕寬高實作"><a href="#偵測螢幕寬高實作" class="headerlink" title="偵測螢幕寬高實作"></a>偵測螢幕寬高實作</h2><p><strong>我們以1920 * 1080 雙螢幕的環境去做以下螢幕偵測</strong></p><h3 id="qml端"><a href="#qml端" class="headerlink" title="qml端"></a>qml端</h3><p>設計UI時都要做個scale來適應各解析度與dpi，這樣在各個環境中都能呈現與開發時一樣的UI介面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">ApplicationWindow  &#123;</span><br><span class="line">    id:application</span><br><span class="line">    property double dpi: Screen.pixelDensity * <span class="number">25.4</span></span><br><span class="line">    property double dpiScale: dpi / <span class="number">72</span><span class="comment">//以dpi 72為base</span></span><br><span class="line">    property double width: Screen.width</span><br><span class="line">    property double height: Screen.height</span><br><span class="line">    property double widthScale: Screen.width / <span class="number">1920</span> <span class="comment">//以寬1920設計介面為base</span></span><br><span class="line">    property double heightScale: Screen.height / <span class="number">1080</span><span class="comment">//以高1080設計介面為base</span></span><br><span class="line">    property double whScale: (Screen.width / <span class="number">1920</span>) / dpiScale</span><br><span class="line">    </span><br><span class="line">    color: <span class="string">"transparent"</span> <span class="comment">//將背景的部分設為透明化</span></span><br><span class="line">    <span class="comment">//無框、置頂、不會取得Focus</span></span><br><span class="line">    flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鍵盤置中</span></span><br><span class="line">    title: qsTr(<span class="string">"Virtual Keyboard"</span>)</span><br><span class="line">    x: <span class="number">0</span></span><br><span class="line">    y: Screen.height - application.height</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: Screen.width</span><br><span class="line">    height: Screen.height / <span class="number">3</span> + ( <span class="number">75</span> * heightScale)</span><br><span class="line">    </span><br><span class="line">    Component.onCompleted: &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen width:"</span>,Screen.width)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen height:"</span>,Screen.height)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen pixelDensity:"</span>,Screen.pixelDensity)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Screen dpi"</span>,Screen.pixelDensity * <span class="number">25.4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的值如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Screen width: <span class="number">1920</span></span><br><span class="line">Screen height: <span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//qml的pixelDensity取得到的值為每mm多少pixel</span></span><br><span class="line">Screen pixelDensity: <span class="number">2.8353435141139114</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//轉換成dpi的話要將mm轉成英吋 1inch = 2.54cm, 2.54cm = 25.4mm</span></span><br><span class="line"><span class="comment">//(所以 Screen pixelDensity * 25.4 = Screen dpi)</span></span><br><span class="line"><span class="comment">//dpi在變換螢幕解析度時不太會有變化，在更改螢幕上的文字極其他項目大小100%、125%、150%會有變化</span></span><br><span class="line"><span class="comment">//例如:125%時dpi可能會是72那麼在150%時可能為36所以要做大小轉換要乘上scale</span></span><br><span class="line">Screen dpi <span class="number">72.01772525849334</span></span><br></pre></td></tr></table></figure></p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDesktopWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QRect&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Tester"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Tester::Tester()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> virtualWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> virtualHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> availableWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> availableHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> screenWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> screenHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    QDesktopWidget *deskWgt = QApplication::desktop();</span><br><span class="line">    <span class="keyword">if</span> (deskWgt) &#123;</span><br><span class="line">        virtualWidth = deskWgt-&gt;width();</span><br><span class="line">        virtualHeight = deskWgt-&gt;height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"virtual width:"</span> &lt;&lt; virtualWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; virtualHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        QRect availableRect = deskWgt-&gt;availableGeometry();</span><br><span class="line">        availableWidth = availableRect.width();</span><br><span class="line">        availableHeight = availableRect.height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"available width:"</span> &lt;&lt;availableWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; availableHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        QRect screenRect = deskWgt-&gt;screenGeometry();</span><br><span class="line">        screenWidth = screenRect.width();</span><br><span class="line">        screenHeight = screenRect.height();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"screen width:"</span> &lt;&lt;screenWidth &lt;&lt; <span class="string">",height:"</span> &lt;&lt; screenHeight &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的值如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//virtual width會將雙螢幕的寬高加進去</span></span><br><span class="line"><span class="keyword">virtual</span> width:<span class="number">3840</span>,height:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//available width主畫面的寬高並且扣掉工具列</span></span><br><span class="line">available width:<span class="number">1920</span>,height:<span class="number">1032</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//screen width完整的主畫面的寬高不扣工具列</span></span><br><span class="line">screen width:<span class="number">1920</span>,height:<span class="number">1080</span></span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/ieearth/article/details/43669821" target="_blank" rel="noopener">【QT】在Qt中获取屏幕大小</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;設計介面的時候，需要掌握螢幕寬高比較好做調整介面大小，這一篇記錄Qt在c++端與qml端分別怎麼取得螢幕寬高&lt;/p&gt;
&lt;h2 id=&quot;偵測螢
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="螢幕寬高" scheme="https://teddybearfp.github.io/tags/%E8%9E%A2%E5%B9%95%E5%AF%AC%E9%AB%98/"/>
    
  </entry>
  
  <entry>
    <title>互斥鎖 (Mutex lock)</title>
    <link href="https://teddybearfp.github.io/2019/05/27/%E4%BA%92%E6%96%A5%E9%8E%96-Mutex-lock/"/>
    <id>https://teddybearfp.github.io/2019/05/27/互斥鎖-Mutex-lock/</id>
    <published>2019-05-27T02:05:16.000Z</published>
    <updated>2019-05-27T10:48:00.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mutex-lock實作"><a href="#Mutex-lock實作" class="headerlink" title="Mutex lock實作"></a>Mutex lock實作</h2><p>MutexTester.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TB_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TB_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MutexTester</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doThreadFuction</span><span class="params">()</span></span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex gMutex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TB</span></span></span><br></pre></td></tr></table></figure></p><p>MutexTester.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MutexTester::MutexTester()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MutexTester::doThreadFuction()</span><br><span class="line">&#123;</span><br><span class="line">    lock_guard&lt;mutex&gt; mLock( gMutex );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//doSomething...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mutex-lock實作&quot;&gt;&lt;a href=&quot;#Mutex-lock實作&quot; class=&quot;headerlink&quot; title=&quot;Mutex lock實作&quot;&gt;&lt;/a&gt;Mutex lock實作&lt;/h2&gt;&lt;p&gt;MutexTester.h&lt;br&gt;&lt;figure class
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="互斥鎖" scheme="https://teddybearfp.github.io/tags/%E4%BA%92%E6%96%A5%E9%8E%96/"/>
    
      <category term="Mutex lock" scheme="https://teddybearfp.github.io/tags/Mutex-lock/"/>
    
  </entry>
  
  <entry>
    <title>Qt SystemTray implement</title>
    <link href="https://teddybearfp.github.io/2019/05/25/Qt-SystemTray-implement/"/>
    <id>https://teddybearfp.github.io/2019/05/25/Qt-SystemTray-implement/</id>
    <published>2019-05-25T09:05:16.000Z</published>
    <updated>2019-05-27T10:26:31.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要實作常駐程式，讓程式不出現在工具列，而是將程式最小化到系統托盤中，並且點擊右鍵可以做喚醒(最大化)與關閉的動作，甚至用另一隻程式透過windows api開啟、最大化或關閉這個系統托盤中的程式，例如:編寫一個程式搭載了我另一篇編寫的虛擬鍵盤<a href="https://teddybearfp.github.io/2018/10/26/Qt-Virtual-Keyboard/">(Qt 如何製作Windows多國輸入法的虛擬鍵盤)</a>，那麼我們的虛擬鍵盤就可以將它編寫成常駐程式由主程式做控制，這篇記錄的是如何在Qt實作這個功能</p><p>先來看成果<br>我們的應用程式會在系統托盤出現<br><img src="https://i.imgur.com/4RsROov.png" alt=""></p><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p>我們可以將SystemTray寫成一個class使用，與使用QSystemTrayIcon這個class在C++與qml達到系統托盤功能</p><h2 id="實作SystemTray"><a href="#實作SystemTray" class="headerlink" title="實作SystemTray"></a>實作SystemTray</h2><h3 id="MySystemTray-pro"><a href="#MySystemTray-pro" class="headerlink" title="MySystemTray.pro"></a>MySystemTray.pro</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATE = app</span><br><span class="line"> </span><br><span class="line">QT += qml quick widgets</span><br><span class="line"> </span><br><span class="line">SOURCES += main.cpp \</span><br><span class="line">    systemtray.cpp</span><br><span class="line"> </span><br><span class="line">RESOURCES += qml.qrc</span><br><span class="line"> </span><br><span class="line"># Additional <span class="keyword">import</span> path used to resolve QML modules in Qt Creator's code model</span><br><span class="line">QML_IMPORT_PATH =</span><br><span class="line"> </span><br><span class="line"># Default rules <span class="keyword">for</span> deployment.</span><br><span class="line">include(deployment.pri)</span><br><span class="line"> </span><br><span class="line">HEADERS += \</span><br><span class="line">    systemtray.h</span><br></pre></td></tr></table></figure><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;systemtray.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"> </span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// We declare and initialize the class object to work with system tray</span></span><br><span class="line">    SystemTray * systemTray = <span class="keyword">new</span> SystemTray();</span><br><span class="line">    QQmlContext * context = engine.rootContext();</span><br><span class="line">    <span class="comment">// Set access to an object of class properties in QML context</span></span><br><span class="line">    context-&gt;setContextProperty(<span class="string">"systemTray"</span>, systemTray);</span><br><span class="line"> </span><br><span class="line">    engine.load(QUrl(QStringLiteral(<span class="string">"qrc:/main.qml"</span>)));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="systemtray-h"><a href="#systemtray-h" class="headerlink" title="systemtray.h"></a>systemtray.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SYSTEMTRAY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEMTRAY_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QAction&gt; //用來控制視窗與關閉程式</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt; //系統托盤功能核心</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//繼承QObject</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemTray</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">SystemTray</span><span class="params">(QObject *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//創建信號</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalIconActivated</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalShow</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signalQuit</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">//slot會接收從系統托盤中點擊應用程式的事件信號</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">iconActivated</span><span class="params">(QSystemTrayIcon::ActivationReason reason)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideIconTray</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* Declare the object of future applications for the tray icon*/</span></span><br><span class="line">    QSystemTrayIcon *trayIcon;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SYSTEMTRAY_H</span></span></span><br></pre></td></tr></table></figure><h3 id="systemtray-cpp"><a href="#systemtray-cpp" class="headerlink" title="systemtray.cpp"></a>systemtray.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"systemtray.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenu&gt;</span></span></span><br><span class="line"> </span><br><span class="line">SystemTray::SystemTray(QObject *parent) : QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用QMenu創建擁有最大化與關閉程式兩個選項的菜單</span></span><br><span class="line">    QMenu *trayIconMenu = <span class="keyword">new</span> QMenu();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      QAction類別代表窗口的一個動作，這個動作可顯示在選單，也可在工具欄，</span></span><br><span class="line"><span class="comment">      當使用者點擊工具欄時做出反應，並且兩者所執行的動作一樣顯示的圖標也會同步，</span></span><br><span class="line"><span class="comment">      因此，Qt並沒有專門的選單類或工具欄類，只使用同樣的QAction類別，當我們把QAction對象添加到選單，就顯示成一個選單項，添加到工具欄，就顯示成一個工具按鈕。</span></span><br><span class="line"><span class="comment">      QAction包含了圖標、選單文字、快捷鍵、浮動幫助等等</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//創建開啟視窗QAction</span></span><br><span class="line">    QAction * viewWindow = <span class="keyword">new</span> QAction(trUtf8(<span class="string">"Open TB VirtualKeyboard"</span>), <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//創建結束程式QAction</span></span><br><span class="line">    QAction * quitAction = <span class="keyword">new</span> QAction(trUtf8(<span class="string">"Quit"</span>), <span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line">    viewWindow-&gt;setIcon(QIcon(<span class="string">":/Image/launch.png"</span>));</span><br><span class="line">    quitAction-&gt;setIcon(QIcon(<span class="string">":/Image/close.png"</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//連結信號 操作Menu上的項目時給予Qml適當的信號</span></span><br><span class="line">    connect(viewWindow, &amp;QAction::triggered, <span class="keyword">this</span>, &amp;SystemTray::signalShow);</span><br><span class="line">    connect(quitAction, &amp;QAction::triggered, <span class="keyword">this</span>, &amp;SystemTray::signalQuit);</span><br><span class="line"> </span><br><span class="line">    trayIconMenu-&gt;addAction(viewWindow);</span><br><span class="line">    trayIconMenu-&gt;addAction(quitAction);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//初始化托盤圖標，圖標集，然後指定工具提示</span></span><br><span class="line">    trayIcon = <span class="keyword">new</span> QSystemTrayIcon();</span><br><span class="line">    trayIcon-&gt;setContextMenu(trayIconMenu);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      QIcon除了寫絕對位置外亦可將圖片放置與qrc.qml的相對位置中</span></span><br><span class="line"><span class="comment">      例如:放在qrc.qml檔案旁的Image資料夾中檔名為keyboard.png</span></span><br><span class="line"><span class="comment">      並且在專案中找到qrc點擊右鍵選擇open with-&gt;open plain text將相對位置加入檔案中</span></span><br><span class="line"><span class="comment">      &lt;file&gt;Image/keyboard.png&lt;/file&gt;</span></span><br><span class="line"><span class="comment">      c++中如果要使用嵌入的qrc資源，則要在路徑的前端放置:/</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    trayIcon-&gt;setIcon(QIcon(<span class="string">":/Image/keyboard.png"</span>));</span><br><span class="line">    trayIcon-&gt;show();</span><br><span class="line">    trayIcon-&gt;setToolTip(<span class="string">"TB VirtualKeyboard"</span> <span class="string">"\n"</span></span><br><span class="line">                         <span class="string">"On-Screen Keyboard"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//連結Icon按下後信號觸發行為</span></span><br><span class="line">    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),</span><br><span class="line">            <span class="keyword">this</span>, SLOT(iconActivated(QSystemTrayIcon::ActivationReason)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//處理當系統托盤中Icon被按下後的行為</span></span><br><span class="line"><span class="keyword">void</span> SystemTray::iconActivated(QSystemTrayIcon::ActivationReason reason)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (reason)&#123;</span><br><span class="line">    <span class="keyword">case</span> QSystemTrayIcon::Trigger:</span><br><span class="line">        <span class="comment">// In the case of pressing the signal on the icon tray in the call signal QML layer</span></span><br><span class="line">        <span class="function">emit <span class="title">signalIconActivated</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> SystemTray::hideIconTray()</span><br><span class="line">&#123;</span><br><span class="line">    trayIcon-&gt;hide();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.5</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">1.4</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.0</span></span><br><span class="line"> </span><br><span class="line">ApplicationWindow &#123;</span><br><span class="line">    id: application</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"TB VirtualKeyboard"</span>)</span><br><span class="line"> </span><br><span class="line">    flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Chance to ignore the checkbox</span></span><br><span class="line">    property bool ignoreCheck: <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//連結SystemTray並當signalShow信號觸發時slot onSignalShow將應用程式畫面顯示(最大化)</span></span><br><span class="line">    Connections &#123;</span><br><span class="line">        target: systemTray</span><br><span class="line">        onSignalShow: &#123;</span><br><span class="line">            application.show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//當signalQuit信號觸發時slot onSignalQuit將ignorecheck設為true並將應用程式關閉</span></span><br><span class="line">        onSignalQuit: &#123;</span><br><span class="line">            ignoreCheck = <span class="literal">true</span></span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//點擊托盤圖示最大化或最小化應用程式</span></span><br><span class="line">        onSignalIconActivated: &#123;</span><br><span class="line">             <span class="keyword">if</span>(application.visibility === Window.Hidden) &#123;</span><br><span class="line">                 application.show()</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 application.hide()</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Test check box to control the closing of the window</span></span><br><span class="line">    CheckBox &#123;</span><br><span class="line">        id: checkTray</span><br><span class="line">        anchors.centerIn: parent</span><br><span class="line">        text: qsTr(<span class="string">"Enable minimizing to system tray during the window closing"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 處理視窗被關閉的行為</span></span><br><span class="line">    onClosing: &#123;</span><br><span class="line">        <span class="comment">//如果checkbox不被忽略那麼關閉視窗時都是對應用程式做最小化，相反的當checkbox被忽略則關閉應用程式</span></span><br><span class="line">        <span class="keyword">if</span>(checkTray.checked === <span class="literal">true</span> &amp;&amp; ignoreCheck === <span class="literal">false</span>)&#123;</span><br><span class="line">            close.accepted = <span class="literal">false</span></span><br><span class="line">            application.hide()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Qt.quit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成圖"><a href="#完成圖" class="headerlink" title="完成圖"></a>完成圖</h2><p><img src="https://i.imgur.com/4RsROov.png" alt="" title="顯示應用程式名稱與提示"></p><p><img src="https://i.imgur.com/VLuNgKA.png" alt="" title="點擊右鍵出現菜單選項"></p><h2 id="Qt-實用的介面設計技巧"><a href="#Qt-實用的介面設計技巧" class="headerlink" title="Qt 實用的介面設計技巧"></a>Qt 實用的介面設計技巧</h2><p>setWindowFlags(Qt::WindowCloseButtonHint);//只要關閉按鈕<br>Qt::FramelessWindowHint: 沒有邊框的應用程式視窗<br>Qt::WindowStaysOnTopHint: 應用程式永遠在最上面的視窗<br>Qt::X11BypassWindowManagerHint: 隱藏工作列顯示應用程式Icon<br>Qt::WA_ShowWithoutActivating: 不取得Focus</p><p>第一種: </p><pre><code>clientMainWindow::clientMainWindow(QWidget *parent):QMainWindow(parent) {    //setWindowFlags(Qt::WindowFlags type) 可以放各種flag    setWindowFlages(Qt::Tool | Qt::X11BypassWindowManagerHint)}</code></pre><p>第二種:</p><p>在qml中設定</p><pre><code>flags: Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WA_ShowWithoutActivating | Qt.X11BypassWindowManagerHint</code></pre><h2 id="Icon下載"><a href="#Icon下載" class="headerlink" title="Icon下載"></a>Icon下載</h2><p>對於寫軟體的來說可能美感部分是非常艱困的一個環節，所以必須找個免費且無版權的Icon素材下載網站，那麼我這邊推薦的是<a href="https://material.io/tools/icons/?icon=launch&amp;style=baseline" target="_blank" rel="noopener">Google Icon</a>畫風簡單明瞭又易於下載 讚讚</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2018/10/26/Qt-Virtual-Keyboard/">Qt 如何製作Windows多國輸入法的虛擬鍵盤</a><br>看看如何編寫一個客製化多國輸入法的虛擬鍵盤</p><p><img src="https://i.imgur.com/ibcuef7.png" alt=""></p><p><img src="https://i.imgur.com/8YBKpvY.png" alt=""></p><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p>本篇記錄的實作是以下網站兩種方法的第一種方式<br><a href="https://evileg.com/en/post/180/" target="_blank" rel="noopener">QML - Lesson 008. How to work with system tray (QSystemTrayIcon)</a></p><p>QAction解析<br><a href="http://monkeycoding.com/?tag=qaction" target="_blank" rel="noopener">QAction | 阿洲的程式教學</a></p><p>更多的程式介面設計介紹<br><a href="https://www.itread01.com/content/1549643957.html" target="_blank" rel="noopener">QT常用實用的介面設計技巧</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要實作常駐程式，讓程式不出現在工具列，而是將程式最小化到系統托盤中，並且點擊右鍵可以做喚醒(最大化)與關閉的動作，甚至用另一隻程式透過w
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="系統托盤" scheme="https://teddybearfp.github.io/tags/%E7%B3%BB%E7%B5%B1%E6%89%98%E7%9B%A4/"/>
    
      <category term="SystemTray" scheme="https://teddybearfp.github.io/tags/SystemTray/"/>
    
  </entry>
  
  <entry>
    <title>PyDash 建置</title>
    <link href="https://teddybearfp.github.io/2019/04/30/PyDash%E5%BB%BA%E7%BD%AE/"/>
    <id>https://teddybearfp.github.io/2019/04/30/PyDash建置/</id>
    <published>2019-04-30T10:05:16.000Z</published>
    <updated>2019-04-30T14:47:05.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pyDash 是一個輕量且 基於 web 的 linux 性能監測工具 ，它是用 python 和 Django 加上 Chart.js 來編寫的。<br>可以使用這個工具來監視你的 Linux 個人電腦/服務器資源，比如 CPU、內存、網絡統計，包括在線用戶的進程以及更多。儀表盤完全由主要的 Python 發行版本所提供的 Python 庫開發所以不需要額外安裝太多的函式庫，這篇文章記錄如何使用Django建置虛擬環境執行程式碼</p><h2 id="建置流程"><a href="#建置流程" class="headerlink" title="建置流程"></a>建置流程</h2><p>1.首先安裝pip<br>    下載<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a><br>    安裝pip</p><pre><code>python get-pip.py</code></pre><p>2.安裝虛擬環境</p><pre><code>pip install virtualenv</code></pre><p>3.下載檔案<br>    <a href="https://gitlab.com/k3oni/pydash" target="_blank" rel="noopener">https://gitlab.com/k3oni/pydash</a><br>    下載檔案或是git下來</p><pre><code>git clone https://github.com/k3oni/pydash.git</code></pre><p>並切換到當層路徑</p><pre><code>cd pydash</code></pre><p>4.創建虛擬環境<br>    取名為pydashtest(可任意命名)</p><pre><code>virtualenv pydashtest</code></pre><p>5.激活虛擬環境<br>    切換到剛剛創建的虛擬環境pydashtest資料夾中的Scripts啟動</p><pre><code>activate</code></pre><p>輸入成功會命令提示字元指令最前方會出現虛擬環境名稱例如:(pydashtest)</p><p><img src="https://i.imgur.com/SM7pbwO.png" alt=""></p><p>6.安裝所需函式庫<br>    切換到與requirements.txt同一層中執行以下指令(以這個pydash來說僅需要另外安裝django==1.6.8)</p><pre><code>pip install -r requirements.txt</code></pre><p>7.進入pydash資料夾中將settings.py檔案中的SECRET_KEY設定密鑰存取並退出</p><p><img src="https://i.imgur.com/GuSOOrT.png" alt=""></p><p>8.創建資料庫與身分驗證(輸入信箱與密碼)</p><pre><code>python manage.py syncdb</code></pre><p><img src="https://i.imgur.com/1jkqCTB.png" alt=""></p><p>9.執行 Django 開發服務器<br>    python manage.py runserver<br>    若出現一些錯誤訊息可能是缺少一些函式庫<br>    那麼我們只要安裝缺少的函式庫即可</p><pre><code>例如:pip install keras</code></pre><p>一直重複執行python manage.py runserver直到沒有缺少函式庫</p><pre><code>from django.conf.urls import patterns, urlImportError: cannot import name &apos;patterns&apos;出現上面這個問題的話解決辦法是呼叫下列指令pip install Django==1.8</code></pre><p>出現以下畫面代表正確</p><p><img src="https://i.imgur.com/XrgSJba.png" alt=""></p><p>10.登入<br>    接著打開瀏覽器輸入網址<br>    <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a><br>    (特別注意:第一格是輸入Username不是信箱帳號)</p><p><img src="https://i.imgur.com/6nIDMqW.png" alt=""></p><p>登入成功後觀看數據囉</p><p><img src="https://i.imgur.com/TQOUheY.png" alt=""></p><p>結束runserver</p><pre><code>Ctrl+C</code></pre><p>離開虛擬環境</p><pre><code>deactivate</code></pre><p>__init__.py 用來告訴Python這個資料夾是一個模組，裡面通常是空的，不過也可以寫一些程式碼在裡面。<br>manage.py 用來操作整個Django專案的小工具，例如啟動伺服器python manage.py runserver，或是同步資料庫python manage.py syncdb<br>settings.py 設定檔<br>urls.py 負責網站的路由。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://kknews.cc/zh-tw/other/92rgx6b.html[]" target="_blank" rel="noopener">pyDash：一個基於 web 的 Linux 性能監測工具</a><br><a href="https://kaochenlong.com/2011/10/18/django-your-first-django-project/" target="_blank" rel="noopener">開始你的第一個專案| 高見龍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;pyDash 是一個輕量且 基於 web 的 linux 性能監測工具 ，它是用 python 和 Django 加上 Chart.js 來
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="PyDash" scheme="https://teddybearfp.github.io/tags/PyDash/"/>
    
  </entry>
  
  <entry>
    <title>Python logger</title>
    <link href="https://teddybearfp.github.io/2019/04/28/Python-logger/"/>
    <id>https://teddybearfp.github.io/2019/04/28/Python-logger/</id>
    <published>2019-04-28T02:05:16.000Z</published>
    <updated>2019-04-30T16:28:33.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近開始要編寫Python程式碼，上一篇<a href="https://teddybearfp.github.io/2019/04/08/C-logger/#more">C Logger</a>幫助我開發與維護程式覺得十分好用，更確定Logger是編寫程式碼的必備品，所以也想要在Python開發時也能有一隻良好的Logger幫忙紀錄日誌，了解使用者的行為，這一篇就來記錄如何做出我們Python版本的Logger吧!</p><p>先來看成果吧</p><p><img src="https://i.imgur.com/PC8phPb.png" alt=""></p><p>Log訊息組成:</p><pre><code>年-月-日 時:分:秒,毫秒 [Log層級] 使用者: 函式名稱 Log訊息 [執行緒名稱]</code></pre><h2 id="TBLogger"><a href="#TBLogger" class="headerlink" title="TBLogger"></a>TBLogger</h2><p>TBLogger記錄了時間、Log層級、使用者、函式名稱、Log訊息與執行緒名稱同時亦會寫檔儲存</p><p>備註:此段程式碼出處為<a href="http://yhhuang1966.blogspot.com/2018/04/python-logging_24.html" target="_blank" rel="noopener">小狐狸事務所Python 學習筆記 : 日誌 (logging) 模組測試</a><br>將其稍作改寫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBLog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        user = getpass.getuser()</span><br><span class="line">        self.logger = logging.getLogger(user)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        format = <span class="string">'%(asctime)s [%(levelname)s] %(name)s : %(funcName)s() %(message)s [%(threadName)s]'</span></span><br><span class="line">        formatter = logging.Formatter(format)</span><br><span class="line">        streamhandler = logging.StreamHandler()</span><br><span class="line">        streamhandler.setFormatter(formatter)</span><br><span class="line">        self.logger.addHandler(streamhandler)</span><br><span class="line">        logfile = <span class="string">'./'</span> + user + <span class="string">'.log'</span></span><br><span class="line">        filehandler = logging.FileHandler(logfile)</span><br><span class="line">        filehandler.setFormatter(formatter)</span><br><span class="line">        self.logger.addHandler(filehandler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.error(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, level, msg)</span>:</span></span><br><span class="line">        self.logger.log(level, msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLevel</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disable</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.disable(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><h2 id="Test-py"><a href="#Test-py" class="headerlink" title="Test.py"></a>Test.py</h2><p>在其他專案中導入TBLogger</p><p>例如:Test.py中可以將TBLogger.py導入</p><pre><code>from TBLogger import TBLog</code></pre><p>Implement TBLog class</p><pre><code>tbLog = TBLog()tbLog.info(&quot;Hi I&apos;m teddyBear&quot;)</code></pre><p>Python Console</p><p><img src="https://i.imgur.com/pDVcEva.png" alt=""></p><p>亦可在程式執行與結束分別編寫Log訊息表示</p><p><img src="https://i.imgur.com/egZt8uN.png" alt=""></p><p>這就是我要的Logger</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://yhhuang1966.blogspot.com/2018/04/python-logging_24.html" target="_blank" rel="noopener">小狐狸事務所Python 學習筆記 : 日誌 (logging) 模組測試</a><br><a href="https://stackoverflow.max-everyday.com/2017/10/python-logging/" target="_blank" rel="noopener">[Python] logging 教學– Max的程式語言筆記</a><br><a href="https://javawithravi.com/how-to-display-thread-id-in-python-logs/" target="_blank" rel="noopener">How to display thread id in python logs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近開始要編寫Python程式碼，上一篇&lt;a href=&quot;https://teddybearfp.github.io/2019/04/08/
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Logger" scheme="https://teddybearfp.github.io/tags/Logger/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm安裝與Anaconda使用</title>
    <link href="https://teddybearfp.github.io/2019/04/26/PyCharm-%E5%AE%89%E8%A3%9D/"/>
    <id>https://teddybearfp.github.io/2019/04/26/PyCharm-安裝/</id>
    <published>2019-04-26T09:05:16.000Z</published>
    <updated>2019-05-01T04:10:15.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安裝編譯環境是個非常重要的環節，好的開始是成功的一半，若是能順利安裝並編譯出自己的第一支程式是個讓人興奮的事情，這邊紀錄一下Python安裝與PyCharm安裝過程與Anaconda使用方式</p><p>本篇安裝環境為<br>Python 3.6.7(64bits)<br>PyCharm 2019.01.01<br>Anaconda 2019.03 Python 3.7 version</p><h2 id="Python-安裝"><a href="#Python-安裝" class="headerlink" title="Python 安裝"></a>Python 安裝</h2><h3 id="Python-2-vs-Python-3"><a href="#Python-2-vs-Python-3" class="headerlink" title="Python 2 vs Python 3"></a>Python 2 vs Python 3</h3><ul><li>print 語法差異</li><li>整數相除python2為整數,python3為浮點數</li><li>型態比較python2型態比較可以不同型態,python3會提醒型態錯誤</li><li>python3幾乎支援並相容所有函式庫</li><li>python3支援Unicode字符串</li><li><p>python3的xrange執行是比python2慢的</p><p>  長期遠觀來說應該選擇python3</p></li></ul><h3 id="Python-3-install"><a href="#Python-3-install" class="headerlink" title="Python 3 install"></a>Python 3 install</h3><p>首先要先安裝Python再去安裝編譯環境<br><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Python安裝(Windows)</a><br><a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener">Python安裝(MacOSX)</a></p><p>電腦如果是64位元的話就要下載64bits的版本</p><p><img src="https://i.imgur.com/Jkjqs5C.png" alt=""></p><p>安裝時將add to path打勾，這樣便會自動新增環境變數</p><h2 id="PyCharm-安裝"><a href="#PyCharm-安裝" class="headerlink" title="PyCharm 安裝"></a>PyCharm 安裝</h2><p>PyCharm是一個用於計算機編程的集成開發環境（IDE），主要用於Python語言開發，由捷克公司JetBrains開發，提供代碼分析、圖形化調試器，集成測試器、集成版本控制系統，並支持使用Django進行網頁開發。</p><h3 id="好用IDE推薦"><a href="#好用IDE推薦" class="headerlink" title="好用IDE推薦"></a>好用IDE推薦</h3><ul><li>PyCharm<pre><code>1.有非常好的除錯器2.可以方便的處理虛擬環境3.良好的介面環境4.免費</code></pre></li><li>JupyterNotebook<br>  簡潔的介面<br>  方便的快捷鍵<br>  之前我都使用jupyter編寫爬蟲與畫圖執行非常方便 大推!</li></ul><h3 id="PyCharm-安裝-1"><a href="#PyCharm-安裝-1" class="headerlink" title="PyCharm 安裝"></a>PyCharm 安裝</h3><p><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">Pycharm下載</a></p><p><img src="https://i.imgur.com/2aFp0G8.png" alt=""><br>沒有特別購買的話就下載右邊的Community版本</p><p>下載完畢後開啟安裝檔</p><ul><li>64-bits若電腦是64位元的安裝時務必勾選</li><li>.py association這一項勾選的意思是以後python檔案皆由PyCharm開啟</li></ul><p>精美的開啟畫面</p><p><img src="https://i.imgur.com/7rQ0eYe.png" alt=""></p><p><img src="https://i.imgur.com/QEeZCBr.png" alt=""></p><p>剛進入PyCharm時，字體非常的小，我平常連手機都用特大字型這樣看很不習慣<br>那麼我們到Setting裡面找尋Font去設定<br><img src="https://i.imgur.com/K2HTUoT.png" alt=""><br>我是將字型大小調到20</p><p>在介面上看起來的大小<br><img src="https://i.imgur.com/XQLxw5B.png" alt=""></p><p>此時雖然安裝好了開啟新專案但是我們的Interpreter設定尚未完全<br>我們來繼續往下看如何使用Anaconda管理我們的Interpreter吧!</p><h2 id="Anaconda-安裝與使用"><a href="#Anaconda-安裝與使用" class="headerlink" title="Anaconda 安裝與使用"></a>Anaconda 安裝與使用</h2><h3 id="Python專案環境選擇"><a href="#Python專案環境選擇" class="headerlink" title="Python專案環境選擇"></a>Python專案環境選擇</h3><ul><li>Anaconda易於管理便於更新</li></ul><p><a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">Anaconda下載</a></p><p><img src="https://i.imgur.com/3dbULCV.png" alt=""></p><h3 id="Anaconda用法"><a href="#Anaconda用法" class="headerlink" title="Anaconda用法"></a>Anaconda用法</h3><p>Anaconda用法其實跟python的virtualenv用法類似</p><h4 id="執行Anaconda-prompt"><a href="#執行Anaconda-prompt" class="headerlink" title="執行Anaconda prompt"></a>執行Anaconda prompt</h4><pre><code>conda create -n myenv python=3.6 packages    #myenv環境名稱可以自己取    #packages可以自行添增例如numpy=1.7 matplotlib    #python=3.6是選擇interpreter版本conda create -n myenv python=3.6 numpy pandas matplotlib pip</code></pre><h4 id="啟動虛擬環境"><a href="#啟動虛擬環境" class="headerlink" title="啟動虛擬環境"></a>啟動虛擬環境</h4><pre><code>activate myenv</code></pre><p>啟動成功在最前方的()內會變成虛擬環境的名稱<br><img src="https://i.imgur.com/Vk2Gw91.png" alt=""></p><h4 id="檢測環境-用來看目前創建了幾個虛擬環境"><a href="#檢測環境-用來看目前創建了幾個虛擬環境" class="headerlink" title="檢測環境(用來看目前創建了幾個虛擬環境)"></a>檢測環境(用來看目前創建了幾個虛擬環境)</h4><pre><code>conda env list</code></pre><p><img src="https://i.imgur.com/AVAfkJR.png" alt=""></p><h4 id="檢測當下虛擬環境的packages"><a href="#檢測當下虛擬環境的packages" class="headerlink" title="檢測當下虛擬環境的packages"></a>檢測當下虛擬環境的packages</h4><pre><code>conda list -n myenv若是activate狀態則conda list即可</code></pre><h4 id="安裝環境的packages"><a href="#安裝環境的packages" class="headerlink" title="安裝環境的packages"></a>安裝環境的packages</h4><pre><code>conda install -n myenv pipactivate myenvpip install SomePackageex:    conda install -n myenv pip  #在虛擬環境安裝pip裝完後才能裝其他缺少的函式庫(若虛擬環境已有安裝則可以省略)    activate myenv  #啟動虛擬環境    pip install numpy pandas tensorflow keras opencv-python </code></pre><h4 id="關閉環境"><a href="#關閉環境" class="headerlink" title="關閉環境"></a>關閉環境</h4><pre><code>deactive</code></pre><p>那麼完成後PyCharm便可以在Interpreter中找到剛剛設置的虛擬環境達到函式庫的更新與管理</p><pre><code>在Setting &gt; Project Interpreter去做設定</code></pre><p><img src="https://i.imgur.com/euWEKvY.png" alt=""></p><pre><code>選擇設定 &gt; 勾選Existing environment</code></pre><p><img src="https://i.imgur.com/zUuq5cW.png" alt=""></p><p>按下Run沒出現異常 exit code 0 大功告成拉~<br>可以開始編寫程式碼</p><p><img src="https://i.imgur.com/Jo8Ertl.png" alt=""></p><p>下次再紀錄陪伴我最久的jupyter notebook~</p><p>參考資料:<br><a href="https://zh.wikipedia.org/zh-tw/PyCharm" target="_blank" rel="noopener">PyCharm - 維基百科，自由的百科全書 - Wikipedia</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;安裝編譯環境是個非常重要的環節，好的開始是成功的一半，若是能順利安裝並編譯出自己的第一支程式是個讓人興奮的事情，這邊紀錄一下Python安裝
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="PyCharm" scheme="https://teddybearfp.github.io/tags/PyCharm/"/>
    
      <category term="Anaconda" scheme="https://teddybearfp.github.io/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>C logger</title>
    <link href="https://teddybearfp.github.io/2019/04/08/C-logger/"/>
    <id>https://teddybearfp.github.io/2019/04/08/C-logger/</id>
    <published>2019-04-08T07:05:16.000Z</published>
    <updated>2019-05-29T10:21:31.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>編寫專案時，除了直接印出訊息來驗證與除錯之外，我們還需要LOG幫助我們維護程式，這一篇完整記錄了我編寫的LOG動態函式庫寫法與使用方式，LOG會顯示時間戳記(毫秒)、LOG層級、ThreadID、LOG訊息，讓我們來看看實作流程吧!</p><h2 id="顯示內容"><a href="#顯示內容" class="headerlink" title="顯示內容"></a>顯示內容</h2><p>先來看看成果</p><pre><code>//組成方式為(年-月-日 時:分:秒.毫秒),Log層級,ThreadID,類別名稱::函式名稱() 輸出訊息2019-04-09 10:08:08.337,[DEBUG],ThreadID:5140,Device::MotorMove() motorYStep:10.52019-04-09 10:08:08.339,[DEBUG],ThreadID:5876,I&apos;m Polling thread!2019-04-09 10:08:08.339,[TRACE],ThreadID:5876,Device::SetOffSetValue() SetOffSetValue:7</code></pre><p>透過上面記錄的方式可以清楚掌握程式狀況讓我們來看看如何實作Logger吧!</p><h2 id="stdarg-h"><a href="#stdarg-h" class="headerlink" title="stdarg.h"></a>stdarg.h</h2><p>stdarg.h 是C語言中C標準函式庫的標頭檔<br>我們透過stdarg.h主要目的是讓函式能夠接收不定量參數</p><p>va_list: 宣告一個指標，讓它指向引數串列。<br>va_start: 初始化這個指標，讓它真正指向正確的引數串列開頭。<br>va_arg: 來取得va_list中的資料。<br>va_end: 清除這個指標，把它設為NULL。範例如下：<br>va_copy: 拷貝va_list的內容</p><p>不定參數函式的參數數量是可變動的，它使用省略號來忽略之後的參數。例如printf函式一般。宣告方式如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">char</span> *b, ...)</span></span>;</span><br></pre></td></tr></table></figure></p><h2 id="vprintf"><a href="#vprintf" class="headerlink" title="vprintf"></a>vprintf</h2><p>其他由不定參數函式呼叫的函式<br>透過下面範例了解一下stdarg搭配vprintf的用法<br>參考vprintf - C++ Reference - Cplusplus.com<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* vprintf example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteFormatted</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * format, ... )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  va_list args;</span><br><span class="line">  va_start (args, format);</span><br><span class="line">  <span class="built_in">vprintf</span> (format, args);</span><br><span class="line">  va_end (args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   WriteFormatted (<span class="string">"Call with %d variable argument.\n"</span>,<span class="number">1</span>);</span><br><span class="line">   WriteFormatted (<span class="string">"Call with %d variable %s.\n"</span>,<span class="number">2</span>,<span class="string">"arguments"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Call with <span class="number">1</span> variable argument.</span><br><span class="line">Call with <span class="number">2</span> variable arguments.</span><br></pre></td></tr></table></figure></p><p>看完上面用法是不是跟printf用法十分相似呢</p><p>沒錯所以我們來編寫一個LOG函式呼叫方式跟printf類似卻能達到我們要的LOG效果</p><h2 id="Log分級"><a href="#Log分級" class="headerlink" title="Log分級"></a>Log分級</h2><p>我的TBLog分為八個層級以下是我目前理解的層級定義:</p><p>ALL     所有的層級。<br>TRACE     比 DEBUG 層級更細膩的事件訊息<br>DEBUG     細膩的事件訊息，開發中對開發與除錯有幫助。在正式運行一般不輸出<br>INFO     描述訊息，描述程式運行過程。<br>WARN     表示有潛在的危險狀況<br>ERROR     表示發生錯誤事件，但程式可能還能運行。<br>FATAL     表示發生非常嚴重錯誤事件，可能會導致程式終止。<br>OFF     最高级别，用來關閉LOGGER訊息日誌。</p><h2 id="創建TBLog-dll"><a href="#創建TBLog-dll" class="headerlink" title="創建TBLog.dll"></a>創建TBLog.dll</h2><p>先在專案new subproject中選擇library新增</p><h2 id="TBLog-pro"><a href="#TBLog-pro" class="headerlink" title="TBLog.pro"></a>TBLog.pro</h2><p>可以加入下面兩句指令，讓dll檔產出在與執行檔同一層<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Debug:DESTDIR = ../(你的專案名稱)/debug</span><br><span class="line">Release:DESTDIR = ../(你的專案名稱)/release</span><br></pre></td></tr></table></figure></p><h2 id="TBLog-h"><a href="#TBLog-h" class="headerlink" title="TBLog.h"></a>TBLog.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma once是一個非標準但是被廣泛支援的前置處理符號，會讓所在的檔案在一個單獨的編譯中只被包含一次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBLOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBLOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TBLOG_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport) <span class="comment">//使用 __declspec(dllexport) 從 DLL 匯出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//設置LOG層級 將層級分為六級</span></span><br><span class="line"><span class="keyword">enum</span> LogLevels</span><br><span class="line">&#123;</span><br><span class="line">    LOGALL,</span><br><span class="line">    LOGTRACE,</span><br><span class="line">    LOGDEBUG,</span><br><span class="line">    LOGINFO,</span><br><span class="line">    LOGWARN,</span><br><span class="line">    LOGERROR,</span><br><span class="line">    LOGFATAL,</span><br><span class="line">    LOGOFF</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同要求取得不同時間的格式</span></span><br><span class="line"><span class="keyword">enum</span> RequestType</span><br><span class="line">&#123;</span><br><span class="line">    LogTimeStamp,</span><br><span class="line">    LogFileName</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogPath</span><span class="params">(<span class="keyword">char</span> *path)</span></span>; <span class="comment">//給上層設置路徑用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level = LOGINFO)</span></span>; <span class="comment">//將LOGLEVEL閥值預設為LOGINFO,表示LOGINFO以上的層級才會顯示與寫檔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">MyLog</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">char</span>* message, ...)</span></span>; <span class="comment">//不定參數函式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TBLOG_H</span></span></span><br></pre></td></tr></table></figure><h2 id="TBLog-cpp"><a href="#TBLog-cpp" class="headerlink" title="TBLog.cpp"></a>TBLog.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tblog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; //printf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt; //va_list, va_arg, va_start, va_end</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;    //取得時間</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; //取得時間</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt; //_access</span></span></span><br><span class="line"></span><br><span class="line">LogLevels logThreshold; <span class="comment">//用來當LOGLEVEL的Filter</span></span><br><span class="line"><span class="keyword">char</span> folderPath[<span class="number">200</span>];   <span class="comment">//資料夾位置</span></span><br><span class="line"><span class="keyword">char</span> filePath[<span class="number">200</span>];     <span class="comment">//LOG檔案路徑</span></span><br><span class="line"><span class="keyword">bool</span> isFirst = <span class="literal">true</span>;    <span class="comment">//第一次進來時初始化值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//LOGLEVEL的Filter</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">GetLogLevel</span><span class="params">(<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//inline行內函式只能建議編譯器，也就是說建議並不一定會被採納，這視您的編譯器而定</span></span><br><span class="line"><span class="comment">//如果建議被採納，則該函式會自動在呼叫點展開程式碼</span></span><br><span class="line">    <span class="keyword">switch</span>(level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//由輕微到嚴重分級</span></span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGTRACE: <span class="keyword">return</span> <span class="string">"[TRACE]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGDEBUG: <span class="keyword">return</span> <span class="string">"[DEBUG]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGINFO:  <span class="keyword">return</span> <span class="string">"[INFO ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGWARN:  <span class="keyword">return</span> <span class="string">"[WARN ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGERROR: <span class="keyword">return</span> <span class="string">"[ERROR]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGFATAL: <span class="keyword">return</span> <span class="string">"[FATAL]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得時間(依照傳進的參數分別回傳檔案年月或是LOG時間戳記)</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">GetTime</span><span class="params">(RequestType request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化char[]</span></span><br><span class="line">    <span class="keyword">char</span> currentTime[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(currentTime, <span class="number">0</span>, <span class="keyword">sizeof</span>(currentTime));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//C取得現在時間,但是C的取得時間方式僅能取到秒,並無法得到毫秒</span></span><br><span class="line">    <span class="keyword">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//毫秒我們用SYSTEMTIME取得</span></span><br><span class="line">    SYSTEMTIME time;</span><br><span class="line">    GetSystemTime(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得毫秒</span></span><br><span class="line">    <span class="keyword">char</span> ms[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> time_ms = time.wMilliseconds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面這段回傳時間格式為2019-04-08 17:15:11.703</span></span><br><span class="line">    <span class="keyword">if</span>(request == LogTimeStamp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//%F 等於 %Y-%m-%d, %T 等於 %H:%M:%S</span></span><br><span class="line">        strftime(currentTime, <span class="number">30</span>, <span class="string">"%F %T"</span>, localtime(&amp;now));</span><br><span class="line">        <span class="comment">//使用 sprintf() 將數字轉成字串 </span></span><br><span class="line">        <span class="built_in">sprintf</span>(ms, <span class="string">"%03d"</span>, time_ms);<span class="comment">//用0將數字填滿三位數例如:7會變成007</span></span><br><span class="line">        <span class="built_in">strcat</span>(currentTime, <span class="string">"."</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(currentTime, ms);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面這段回傳時間格式為201904</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        strftime(currentTime, <span class="number">30</span>, <span class="string">"%Y%m"</span>, localtime(&amp;now));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一種路徑:固定的路徑(不推薦)</span></span><br><span class="line"><span class="comment">// void Initial()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     isFirst = false;</span></span><br><span class="line"><span class="comment">//     //取得年月來當LOG檔名</span></span><br><span class="line"><span class="comment">//     char *date = GetTime(LogFileName);</span></span><br><span class="line"><span class="comment">//     strcat(filePath,"D:\\TBLog\\TBLog_");</span></span><br><span class="line"><span class="comment">//     strcat(filePath, date);</span></span><br><span class="line"><span class="comment">//     strcat(filePath, ".txt");</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二種路徑:開放給上層設置的路徑</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogPath</span><span class="params">(<span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>( folderPath, path, <span class="keyword">sizeof</span>(folderPath) );</span><br><span class="line">    <span class="built_in">memcpy</span>( filePath, folderPath, <span class="keyword">sizeof</span>(filePath) );</span><br><span class="line">    <span class="keyword">char</span> *date = GetTime(LogFileName);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, <span class="string">"\\TBLog_"</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, date);</span><br><span class="line">    <span class="built_in">strcat</span>(filePath, <span class="string">".txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//設定閥值</span></span><br><span class="line">    logThreshold = level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">MyLog</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一次使用時設定固定路徑(不推薦)</span></span><br><span class="line">    <span class="comment">//if(isFirst)</span></span><br><span class="line">        <span class="comment">//Initial();</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//or使用上層設定的路徑若沒設路徑則不寫入   </span></span><br><span class="line">    <span class="keyword">if</span>(filePath[<span class="number">0</span>] == <span class="string">'\0'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> message[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message, <span class="number">0</span>, <span class="keyword">sizeof</span>(message));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> message2[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message2, <span class="number">0</span>, <span class="keyword">sizeof</span>(message2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//檢測LOG層級,如果跟LOGDEBUG同級或是更高級就在console log顯示</span></span><br><span class="line">    <span class="keyword">if</span>(level &gt;= LOGDEBUG)</span><br><span class="line">    &#123;</span><br><span class="line">        FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//C語言用來檢查檔案是否存在的寫法</span></span><br><span class="line">        <span class="keyword">if</span>((_access(folderPath, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( _mkdir( folderPath ) == <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"File"</span>,folderPath,<span class="string">"add!\n"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"Can't add File"</span>,folderPath,<span class="string">"\n"</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        strcat_s(message, GetTime(LogTimeStamp));</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line">        strcat_s(message, GetLogLevel(level));</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得執行緒</span></span><br><span class="line">        <span class="keyword">int</span> threadID = GetCurrentThreadId(); </span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">20</span>];</span><br><span class="line">        <span class="comment">//將int轉char[]</span></span><br><span class="line">        <span class="built_in">sprintf</span>(buffer, <span class="string">"%d"</span>, threadID);</span><br><span class="line"></span><br><span class="line">        strcat_s(message, <span class="string">"ThreadID:"</span>);</span><br><span class="line">        strcat_s(message, buffer);</span><br><span class="line">        strcat_s(message, <span class="string">","</span>);</span><br><span class="line">        strcat_s(message, fmt);</span><br><span class="line"></span><br><span class="line">        va_list args; <span class="comment">//用來儲存宏va_arg與宏va_end所需資訊</span></span><br><span class="line">        va_start (args, fmt); <span class="comment">//使va_list指向起始的參數</span></span><br><span class="line">        <span class="built_in">vprintf</span> (message, args);    <span class="comment">//Console logging(印在IDE console log顯示)</span></span><br><span class="line">        strcat_s(message, <span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int fprintf(FILE *stream, const char *format, ...),stdout也是個文檔，把資料輸出到stdout</span></span><br><span class="line">        <span class="built_in">fprintf</span>( <span class="built_in">stdout</span>, <span class="string">"\n"</span>); <span class="comment">//在message結尾加上\n 這樣使用者就不用再加上\n</span></span><br><span class="line">        <span class="built_in">vsprintf</span>(message2, message, args); <span class="comment">//File logging(save message and write file)</span></span><br><span class="line">        va_end (args); <span class="comment">//釋放va_list</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(level &gt;= logThreshold)<span class="comment">//檢測LOG層級,如果跟LOGDEBUG同級或是更高級就寫檔</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//LOG會編寫在D:\\TBLog資料夾中檔名為TBLog_年月.txt,若有同個月分的則不創建新的txt檔案繼續編寫</span></span><br><span class="line">            fp=fopen(filePath,<span class="string">"a"</span>);<span class="comment">//"a"表示檔案存在的話直接接續寫檔，"w"表示檔案存在的話覆寫</span></span><br><span class="line">            <span class="built_in">fprintf</span>(fp,<span class="string">"%s"</span>,message2);<span class="comment">//寫檔</span></span><br><span class="line">            fclose(fp);<span class="comment">//關閉檔案</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因為printf是緩衝輸出，我們透過fflush達到即時輸出</span></span><br><span class="line">        <span class="comment">//flush(stdin)刷新標準輸入緩衝區，把輸入緩衝區裡的東西丟棄  </span></span><br><span class="line">        fflush(<span class="built_in">stdout</span>) <span class="comment">//刷新標準輸出緩衝區，把輸出緩衝區裡的東西打印到標準輸出設備上。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h2><p>先在使用的pro檔中導入TBLog.dll的library<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/release/ -lTBLog</span><br><span class="line"><span class="keyword">else</span>:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/debug/ -lTBLog</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += $$PWD/../TBLog</span><br><span class="line">DEPENDPATH += $$PWD/../TBLog</span><br></pre></td></tr></table></figure></p><p>接著導入完成後在使用的檔案中include標頭檔<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../TBLog/tblog.h"</span></span></span><br></pre></td></tr></table></figure></p><p>開始使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//設定存放Log的路徑位置</span></span><br><span class="line"><span class="keyword">char</span> folderPath[<span class="number">200</span>] = <span class="string">"D:\\TBLog"</span>;</span><br><span class="line">SetLogPath(folderPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定LOGLEVEL閥值若未設定只顯示LOGINFO以上的層級</span></span><br><span class="line">SetLogLevel(LOGINFO);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用MyLog方法跟printf一樣只是不用加上\n,在結尾會由Logger加上,層級低於LOGINFO不顯示、不寫入</span></span><br><span class="line">MyLog(LOGDEBUG,<span class="string">"%s"</span>, <span class="string">"SONGLAAAA"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用MyLog方法跟printf一樣只是不用加上\n,在結尾會由Logger加上,層級大於等於LOGINFO顯示並寫入</span></span><br><span class="line">MyLog(LOGINFO,<span class="string">"Introduce(), Hello my name is %s."</span>,<span class="string">"TeddyBear"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">輸出結果如下:</span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.337</span>,[DEBUG],ThreadID:<span class="number">5140</span>,Device::MotorLongRun() motorYStep:<span class="number">10.5</span></span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.339</span>,[DEBUG],ThreadID:<span class="number">5876</span>,I'm Polling thread!</span><br><span class="line">    <span class="number">2019</span><span class="number">-04</span><span class="number">-09</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">08.339</span>,[TRACE],ThreadID:<span class="number">5876</span>,Device::SetOffSetValue() SetOffSetValue:<span class="number">7</span></span><br><span class="line"></span><br><span class="line">使用方式如同<span class="built_in">printf</span>差異僅在於第一個參數先填上LOG層級,再輸入訊息內容,訊息內容目前定義為必須先輸入類別名稱::函式名稱() 再輸出訊息統一使用利於除錯</span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"Device::MotorLongRun() motorYStep:%.1f\n"</span>,motorYStep); <span class="comment">//取到浮點數小數位第一位</span></span><br><span class="line">    Logger(LOGDEBUG,<span class="string">"I'm Polling thread!\n"</span>);</span><br><span class="line">    Logger(LOGTRACE,<span class="string">"Device::SetOffSetValue() OffSetValue:%d\n"</span>,SetOffSetValue);   <span class="comment">//%d整數</span></span><br></pre></td></tr></table></figure></p><h2 id="支援Unicode的Logger實作"><a href="#支援Unicode的Logger實作" class="headerlink" title="支援Unicode的Logger實作"></a>支援Unicode的Logger實作</h2><p>可以記錄各國語言Logger<br>我們用wchar_t寬字元來實作<br>先看成果</p><p><img src="https://i.imgur.com/Uqjjr0z.png" alt=""></p><p>來看看如何達成吧!</p><h3 id="TBLog-h-1"><a href="#TBLog-h-1" class="headerlink" title="TBLog.h"></a>TBLog.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBLOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBLOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TBLOG_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TBLOG_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> LogLevels</span><br><span class="line">&#123;</span><br><span class="line">    LOGALL,</span><br><span class="line">    LOGTRACE,</span><br><span class="line">    LOGDEBUG,</span><br><span class="line">    LOGINFO,</span><br><span class="line">    LOGWARN,</span><br><span class="line">    LOGERROR,</span><br><span class="line">    LOGFATAL,</span><br><span class="line">    LOGOFF</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> RequestType</span><br><span class="line">&#123;</span><br><span class="line">    LogTimeStamp,</span><br><span class="line">    LogFileName</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level = LOGINFO)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">Logger</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">wchar_t</span>* message, ...)</span></span>; <span class="comment">//w</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TBLOG_H</span></span></span><br></pre></td></tr></table></figure><h3 id="TBLog-cpp-1"><a href="#TBLog-cpp-1" class="headerlink" title="TBLog.cpp"></a>TBLog.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tblog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; //printf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt; //va_list, va_arg, va_start, va_end</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LogLevels logThreshold;</span><br><span class="line"><span class="keyword">wchar_t</span> filePath[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">bool</span> isFirst = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> wchar_t* <span class="title">GetLogLevel</span><span class="params">(<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGTRACE: <span class="keyword">return</span> <span class="string">L"[TRACE]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGDEBUG: <span class="keyword">return</span> <span class="string">L"[DEBUG]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGINFO:  <span class="keyword">return</span> <span class="string">L"[INFO ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGWARN:  <span class="keyword">return</span> <span class="string">L"[WARN ]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGERROR: <span class="keyword">return</span> <span class="string">L"[ERROR]"</span>;</span><br><span class="line">        <span class="keyword">case</span> LogLevels::LOGFATAL: <span class="keyword">return</span> <span class="string">L"[FATAL]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">L""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wchar_t</span>* GetTime(RequestType request)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">wchar_t</span> currentTime[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(currentTime, <span class="number">0</span>, <span class="keyword">sizeof</span>(currentTime));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    SYSTEMTIME time;</span><br><span class="line">    GetSystemTime(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wchar_t</span> ms[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> time_ms = time.wMilliseconds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(request == LogTimeStamp)</span><br><span class="line">    &#123;</span><br><span class="line">        wcsftime (currentTime, <span class="number">30</span>, <span class="string">L"%F %T"</span>, localtime(&amp;now));</span><br><span class="line">        swprintf(ms, <span class="string">L"%03d"</span>, time_ms);</span><br><span class="line">        wcscat(currentTime, <span class="string">L"."</span>);</span><br><span class="line">        wcscat(currentTime, ms);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        wcsftime (currentTime, <span class="number">30</span>, <span class="string">L"%Y%m"</span>, localtime(&amp;now));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initial</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    isFirst = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">wchar_t</span> *date = GetTime(LogFileName);</span><br><span class="line">    wcscat(filePath,<span class="string">L"D:\\TBLog\\TBLog_"</span>);</span><br><span class="line">    wcscat(filePath, date);</span><br><span class="line">    wcscat(filePath, <span class="string">L".txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">SetLogLevel</span><span class="params">(LogLevels level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    logThreshold = level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TBLOG_API <span class="keyword">void</span> <span class="title">Logger</span><span class="params">(LogLevels level, <span class="keyword">const</span> <span class="keyword">wchar_t</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isFirst)</span><br><span class="line">        Initial();</span><br><span class="line"></span><br><span class="line">    setlocale(LC_ALL, <span class="string">""</span>); <span class="comment">//超級關鍵!!! 只要處理wchar_t加入這個指令加入當前環境語系才不會怎樣印都?</span></span><br><span class="line">    <span class="keyword">wchar_t</span> message[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message, <span class="number">0</span>, <span class="keyword">sizeof</span>(message));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wchar_t</span> message2[<span class="number">300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(message2, <span class="number">0</span>, <span class="keyword">sizeof</span>(message2));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(level &gt;= logThreshold)</span><br><span class="line">    &#123;</span><br><span class="line">        FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>((_access(<span class="string">"D:\\TBLog"</span>, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( _mkdir( <span class="string">"D:\\TBLog"</span> ) == <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"File'D:\\TBLog'add!\n"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">"Can't add File'D:\\TBLog'\n"</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wcscat(message, GetTime(LogTimeStamp));</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line">        wcscat(message, GetLogLevel(level));</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> threadID = GetCurrentThreadId();</span><br><span class="line">        <span class="keyword">wchar_t</span> buffer[<span class="number">20</span>];</span><br><span class="line">        swprintf(buffer, <span class="number">20</span>, <span class="string">L"%d"</span>, threadID);</span><br><span class="line"></span><br><span class="line">        wcscat(message, <span class="string">L"ThreadID:"</span>);</span><br><span class="line">        wcscat(message, buffer);</span><br><span class="line">        wcscat(message, <span class="string">L","</span>);</span><br><span class="line">        wcscat(message, fmt);</span><br><span class="line"></span><br><span class="line">        va_list args;</span><br><span class="line">        va_start (args, fmt);</span><br><span class="line">        vwprintf (message, args);    <span class="comment">//print</span></span><br><span class="line">        vswprintf(message2, <span class="number">300</span>, message, args); <span class="comment">//save message and write file.</span></span><br><span class="line">        va_end (args);</span><br><span class="line"></span><br><span class="line">        fp=_wfopen(filePath,<span class="string">L"a,ccs=UNICODE"</span>);<span class="comment">//檔案以UNICODE編寫</span></span><br><span class="line">        fwprintf(fp,<span class="string">L"%ls"</span>,message2);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用端-1"><a href="#使用端-1" class="headerlink" title="使用端"></a>使用端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VirtualKeyboard::sendKey(QString key) &#123;<span class="comment">//QString以unicode編碼保存</span></span><br><span class="line">    CString str = key.toStdWString().c_str();<span class="comment">//將Unicode放到WString寬字串中</span></span><br><span class="line">    Logger(LOGDEBUG, <span class="string">L"Whole input Key:%ls\n"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.cplusplus.com/reference/cstdio/vprintf/" target="_blank" rel="noopener">vprintf - C++ Reference - Cplusplus.com</a><br><a href="https://zh.wikipedia.org/wiki/Stdarg.h" target="_blank" rel="noopener">stdarg.h - 维基百科，自由的百科全书</a><br><a href="https://dotblogs.com.tw/simplecestlavie/2013/01/02/86637" target="_blank" rel="noopener">軟體中的黑盒子 (介紹 va_lsit, va_start, va_end… 等)</a><br><a href="https://teddybearfp.github.io/2018/11/02/C-dll/#more">C/C++ 動態連結函式庫| 泰迪熊的程式足跡</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;編寫專案時，除了直接印出訊息來驗證與除錯之外，我們還需要LOG幫助我們維護程式，這一篇完整記錄了我編寫的LOG動態函式庫寫法與使用方式，LO
      
    
    </summary>
    
      <category term="C" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="Logger" scheme="https://teddybearfp.github.io/tags/Logger/"/>
    
      <category term="vprintf" scheme="https://teddybearfp.github.io/tags/vprintf/"/>
    
      <category term="stdarg.h" scheme="https://teddybearfp.github.io/tags/stdarg-h/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 人數統計(Busuanzi &amp; LeanCloud)</title>
    <link href="https://teddybearfp.github.io/2019/03/29/Hexo-Next-%E4%BA%BA%E6%95%B8%E7%B5%B1%E8%A8%88-Busuanzi-LeanCloud/"/>
    <id>https://teddybearfp.github.io/2019/03/29/Hexo-Next-人數統計-Busuanzi-LeanCloud/</id>
    <published>2019-03-29T10:05:16.000Z</published>
    <updated>2019-03-29T13:52:56.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在網站架設完成後，我們都會希望知道來到網站的人數與行為，那麼我們要如何在Hexo架設的部落格中完成人數統計這個功能呢?這一篇我們紀錄如何使用Busuanzi跟LeanCloud來統計人數</p><h2 id="Busuanzi-不蒜子"><a href="#Busuanzi-不蒜子" class="headerlink" title="Busuanzi 不蒜子"></a>Busuanzi 不蒜子</h2><p>先來看看成果~</p><p><img src="https://i.imgur.com/Vck0QXf.png" alt="" title="圖1"></p><p>恩~看起來不錯 那麼我們開始來配置吧!</p><h3 id="Busuanzi-不蒜子配置"><a href="#Busuanzi-不蒜子配置" class="headerlink" title="Busuanzi 不蒜子配置"></a>Busuanzi 不蒜子配置</h3><p>不蒜子在Hexo Next主題配置中是相當容易的，只要到在部落格主題的主配置中開啟功能並設置即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\themes\next\_config.YML</span><br></pre></td></tr></table></figure></p><p>把busuanzi_count:設為true<br>uv:同一個用戶即使連續瀏覽N篇文章，依舊只算1次訪客數<br>pv:同一個用戶連續瀏覽N篇文章，算N次訪客數<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: 訪客數</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 總訪問次數</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: false</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 閱讀數</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p><p>上述就完成(圖1)Busuanzi的配置囉<br>有了整個網站的訪客數，但是會發現單篇文章的統計數必須進到每篇文章內才能看到該文章的閱讀次數</p><p><img src="https://i.imgur.com/OplwrxB.png" alt=""></p><p>這樣要看每篇文章的閱讀次數很不方便那麼我們該如何達到在瀏覽文章篇章的地方就看的到人數統計呢?答案是LeanCloud，待會下方繼續記錄LeanCloud的使用方式，讓我們繼續看下去~</p><h3 id="Busuanzi失效"><a href="#Busuanzi失效" class="headerlink" title="Busuanzi失效"></a>Busuanzi失效</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>由於Busuanzi網址更新，導致使用Hexo Next主题時統計瀏覽數失效</p><h4 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h4><p>到hexo的themes資料夾</p><p>\themes\next\layout_third-party\analytics\busuanzi-counter.swig</p><p>打開busuanzi-counter.swig修改內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//將src中的https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js</span></span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//src更改為https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span></span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子官方網站</a></p><h2 id="LeanCloud人數統計"><a href="#LeanCloud人數統計" class="headerlink" title="LeanCloud人數統計"></a>LeanCloud人數統計</h2><p>先至<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>官網註冊，<br>註冊完成後點選創建應用選擇開發版(免費的最讚)</p><p><img src="https://i.imgur.com/mwTX1zb.png" alt=""></p><p>接著創建Class<br>這裡很重要Hexo Next主題的Class名稱必須為Counter<br>並且選擇為無限制否則人數會有統計上錯誤</p><p><img src="https://i.imgur.com/VcSIoYF.png" alt=""></p><p>創建完成Class後<br>到設置 &gt; 應用Key &gt; 取得app_id、app_key</p><p><img src="https://i.imgur.com/d4yFclk.png" alt=""></p><p>在到部落格主題的主配置中開啟功能並設置app_id、app_key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\themes\next\_config.YML</span><br></pre></td></tr></table></figure></p><p>leancloud_visitors:<br>  enable: true<br>  app_id: 填寫app_id<br>  app_key: 填寫app_key</p><p>皆完成後將部落格再次佈署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><p>大功告成!!<br>我們在文章列表就可以看到閱讀次數了，不需要點進文章內(灑花)</p><p><img src="https://i.imgur.com/qLICNsU.png" alt=""></p><p>LeanCloud後台數據可以看閱讀次數與拜訪時間點如下圖</p><p><img src="https://i.imgur.com/7kRrViB.png" alt=""></p><p>以上就是我們在Hexo Next如何增加統計人數的方法記錄</p><h2 id="同事笑話分享"><a href="#同事笑話分享" class="headerlink" title="同事笑話分享"></a>同事笑話分享</h2><p>同事說他在看棒球新聞的時候<br>同事爸說:鈴木一郎哩<br>同事說:退休啦!<br>同事爸說:蛤!?我說恁母伊郎哩(台語:你媽人哩)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在網站架設完成後，我們都會希望知道來到網站的人數與行為，那麼我們要如何在Hexo架設的部落格中完成人數統計這個功能呢?這一篇我們紀錄如何使用
      
    
    </summary>
    
      <category term="Hexo" scheme="https://teddybearfp.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo Next" scheme="https://teddybearfp.github.io/tags/Hexo-Next/"/>
    
      <category term="Busuanzi" scheme="https://teddybearfp.github.io/tags/Busuanzi/"/>
    
      <category term="LeanCloud" scheme="https://teddybearfp.github.io/tags/LeanCloud/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next SEO分析網站(Search Engine Optimization)</title>
    <link href="https://teddybearfp.github.io/2019/03/29/Hexo-SEO%E5%88%86%E6%9E%90%E7%B6%B2%E7%AB%99/"/>
    <id>https://teddybearfp.github.io/2019/03/29/Hexo-SEO分析網站/</id>
    <published>2019-03-29T04:05:16.000Z</published>
    <updated>2019-03-29T14:28:05.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是我第一次編寫個人部落格，我這次架完網站後，由於文章量不多，隔了五個月才設置統計人數功能，開啟統計人數後發現有人閱讀，真的是件讓人很開心的事，這時我就想了解是哪些人觀看我們用心編寫的文章，還有觀看的時候行為如何，例如:曝光度與點擊次數與點閱率、哪個國家的IP，觀看文章的時間與跳出率之類的，有這些資料讓我們了解哪些文章是受歡迎的，我們才可以精進我們的部落格留住更多瀏覽人數，目前只有部屬在Google Search Engine中，所以本篇記錄如何在Hexo Next 使用Google相關的分析</p><h2 id="SEO-Search-Engine-Optimization"><a href="#SEO-Search-Engine-Optimization" class="headerlink" title="SEO(Search Engine Optimization)"></a>SEO(Search Engine Optimization)</h2><p>SEO 是一種透過自然排序（無付費）的方式增加網頁曝光度的行銷規律</p><p>這一篇會記錄兩種Google分析瀏覽紀錄的方式</p><ul><li>Google search console</li><li>Google Analytics</li></ul><p>達到網站分析與關鍵字研究</p><h2 id="Google-search-console"><a href="#Google-search-console" class="headerlink" title="Google search console"></a>Google search console</h2><p>用Google search console可以看整體成長趨勢包含曝光度與點擊次數與點閱率</p><p>首先至<a href="https://search.google.com/search-console/welcome" target="_blank" rel="noopener">Google search console</a>新增資源，將部落格的網址(<a href="https://teddybearfp.github.io/)輸入在網址前置字元">https://teddybearfp.github.io/)輸入在網址前置字元</a></p><p><img src="https://i.imgur.com/HftQ0Dz.png" alt=""></p><p>有了資源後我們來驗證，除了上傳HTML檔案驗證的方法還有另一種使用HTML標記，在所謂中繼標記就是以meta開頭的程式碼head.swig前方加入Google驗證碼並上傳即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">檔案位置:</span><br><span class="line">blog\themes\next\layout\_partials\head.swig</span><br></pre></td></tr></table></figure><p>開啟head.swig並把Google驗證碼貼在最上方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;google-site-verification&quot; content=&quot;XXXXXXXXXXX_XXXXXXXXXXXXXXXXXXXXX_XXXXXXXXX&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>重新佈署部落格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><p>完成啦~ 可以看看我們的網頁數據並開始進行分析囉</p><p><img src="https://i.imgur.com/N0rBU87.png" alt=""></p><p>還可以看讀者是輸入什麼關鍵字搜尋你的文章的</p><p><img src="https://i.imgur.com/pRqW86Y.png" alt=""></p><h2 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h2><p>Google Analytics可以更進一步的分析讀者在文章閱讀的時間，讓我們能了解是否能留住讀者，還可以知道什麼時段讀者較多與來自哪裡</p><p>首先去<a href="https://analytics.google.com/analytics/web/provision/?authuser=0#/provision" target="_blank" rel="noopener">Google Analytics</a>申請帳號，</p><p><img src="https://i.imgur.com/kSQq421.png" alt=""></p><p>然後將追蹤ID輸入到主題的主配置中<br>\themes\next<br>google_analytics: UA-XXXXXXXXX-X<br>將部落格再次部屬<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><p>成功後我們就可以看到用戶的使用情形了<br>這Google分析是不是超猛的~~</p><p><img src="https://i.imgur.com/7m3V42k.png" alt=""></p><p><img src="https://i.imgur.com/VyU1stb.png" alt=""></p><p>上圖是剛分析的第一天資料量較少，但是可以看一下功能</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.newscan.com.tw/all-seo/seo-guide.htm" target="_blank" rel="noopener">SEO的初學者教學，搞懂SEO搜尋引擎優化，讓你網站訂單接不完-新視野</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這是我第一次編寫個人部落格，我這次架完網站後，由於文章量不多，隔了五個月才設置統計人數功能，開啟統計人數後發現有人閱讀，真的是件讓人很開心的
      
    
    </summary>
    
      <category term="Hexo" scheme="https://teddybearfp.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo Next" scheme="https://teddybearfp.github.io/tags/Hexo-Next/"/>
    
      <category term="SEO分析網站" scheme="https://teddybearfp.github.io/tags/SEO%E5%88%86%E6%9E%90%E7%B6%B2%E7%AB%99/"/>
    
      <category term="Google Analytics" scheme="https://teddybearfp.github.io/tags/Google-Analytics/"/>
    
      <category term="Google search console" scheme="https://teddybearfp.github.io/tags/Google-search-console/"/>
    
  </entry>
  
  <entry>
    <title>平行處理用CUDA</title>
    <link href="https://teddybearfp.github.io/2019/03/26/%E5%B9%B3%E8%A1%8C%E8%99%95%E7%90%86%E7%94%A8CUDA/"/>
    <id>https://teddybearfp.github.io/2019/03/26/平行處理用CUDA/</id>
    <published>2019-03-26T10:05:16.000Z</published>
    <updated>2019-03-27T14:19:34.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天公司最強學長介紹CUDA的厲害，讓我們了解到透過GPU的方式平行處理加速完成計算的驚人之處，所以編寫一篇來記錄這強大的CUD，現今的手機應用軟體依賴執行 GPU 的雲端伺服器。店家使用 GPU 分析零售和網路數據。網站利用 GPU 以更準確地放置廣告。</p><h2 id="C-C-平行處理"><a href="#C-C-平行處理" class="headerlink" title="C/C++ 平行處理"></a>C/C++ 平行處理</h2><p>CPU上我們要用平行處理可以透過OpenMP的函式來完成，OpenMP 是一種能透過高階指令，很簡單地將程式平行化、多執行緒化的 API；在最簡單的情形，甚至可以只加一行指令，就可以將迴圈內的程式平行化處理了！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for <span class="comment">//只要將這句加在耗時的迴圈之前即可變成平行處理</span></span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++ i )</span><br><span class="line">    <span class="comment">//dosomething;</span></span><br></pre></td></tr></table></figure></p><h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><p>CUDA是由NVIDIA所推出的一種整合技術CUDA核心運算技術不但對遊戲、文書處理或是影音轉檔都幫助甚大，今日的GPU在浮點運算效能上早已超越CPU，不但現在的電腦應用中CPU與GPU是共同存在的，連原本是需要CPU來運算的資料現在都可以藉由GPU來執行，而且還做得更好！<br>現今電影場景許多都是透過CUDA，例如:家喻戶曉的3D阿凡達的電影背景幾乎都是由CUDA運算，拍攝時演員只需要在棚內特製的佈景前擺出動作，然後再和CUDA運算好的虛擬場景結合後，就成為我們在螢光幕前所看到的一切！</p><p>編寫方面CUDA可以相容OpenCL或者自家的C編譯器。無論是CUDA C語言或是OpenCL，指令最終都會被驅動程式轉換成PTX程式碼，交由顯示核心計算</p><h2 id="CPU-vs-GPU"><a href="#CPU-vs-GPU" class="headerlink" title="CPU vs GPU"></a>CPU vs GPU</h2><p>下面GIF比較CPU與GPU繪圖速度<br>CPU<br><img src="https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif" alt="" title="圖1"></p><p>GPU<br><img src="https://i.imgur.com/Dgj8EJj.gif" alt="" title="圖2"></p><p><img src="https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif" alt="" title="圖3"></p><h2 id="使用CUDA"><a href="#使用CUDA" class="headerlink" title="使用CUDA"></a>使用CUDA</h2><p>使用CUDA簡單的說就是把GPU當CPU來用，要使用之前我們得先看我們的電腦有沒有支援CUDA，在<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">CUDA GPUs </a>可以確認顯示是否有支援，接著至<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">CUDA Toolkit</a>下載相對應版本</p><h2 id="CUDA運算環境"><a href="#CUDA運算環境" class="headerlink" title="CUDA運算環境"></a>CUDA運算環境</h2><p>__host__<br>CPU執行且可使用C/C++一般函數</p><p>__global__<br>CPU/GPU執行但不可使用C/C++一般函數</p><p>__device__<br>GPU執行且不可使用C/C++一般函數<br>在device上執行的副程式，稱為kernel，通常有上百到上千個執行緒(thread)執行同一個kernel。</p><h2 id="CUDA-vs-Stream-Processor"><a href="#CUDA-vs-Stream-Processor" class="headerlink" title="CUDA vs Stream Processor"></a>CUDA vs Stream Processor</h2><ul><li>CUDA 較早開發</li><li>完整性較高</li><li>主流</li><li>TensorFlow 是使用CUDA做Machine learning</li><li>Google 在用</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>公司最強學長的報告<br><a href="https://zh.wikipedia.org/wiki/CUDA" target="_blank" rel="noopener">CUDA - 维基百科，自由的百科全书</a><br><a href="https://www.computerdiy.com.tw/nvidia-cuda/" target="_blank" rel="noopener">硬體加速搞不懂？CUDA讓一切變得更簡單</a><br><a href="https://blogs.nvidia.com.tw/2012/09/what-is-cuda-2/" target="_blank" rel="noopener">什麼是 CUDA?</a><br><a href="https://kheresy.wordpress.com/2006/06/09/%E7%B0%A1%E6%98%93%E7%9A%84%E7%A8%8B%E5%BC%8F%E5%B9%B3%E8%A1%8C%E5%8C%96%E6%96%B9%E6%B3%95%EF%BC%8Dopenmp%EF%BC%88%E4%B8%80%EF%BC%89%E7%B0%A1%E4%BB%8B/" target="_blank" rel="noopener"></a></p><h2 id="圖片來源"><a href="#圖片來源" class="headerlink" title="圖片來源"></a>圖片來源</h2><p>圖1:<a href="https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif" target="_blank" rel="noopener">https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif</a><br>圖2:<a href="https://i.imgur.com/Dgj8EJj.gif" target="_blank" rel="noopener">https://i.imgur.com/Dgj8EJj.gif</a><br>圖3:<a href="https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif" target="_blank" rel="noopener">https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天公司最強學長介紹CUDA的厲害，讓我們了解到透過GPU的方式平行處理加速完成計算的驚人之處，所以編寫一篇來記錄這強大的CUD，現今的手機
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="平行處理" scheme="https://teddybearfp.github.io/tags/%E5%B9%B3%E8%A1%8C%E8%99%95%E7%90%86/"/>
    
      <category term="CUDA" scheme="https://teddybearfp.github.io/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>環狀佇列(Circular Queue)</title>
    <link href="https://teddybearfp.github.io/2019/03/26/%E7%92%B0%E7%8B%80%E4%BD%87%E5%88%97-Circular-Queue/"/>
    <id>https://teddybearfp.github.io/2019/03/26/環狀佇列-Circular-Queue/</id>
    <published>2019-03-26T04:05:16.000Z</published>
    <updated>2019-03-26T03:13:08.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近處理一些數據是滿兩百筆後，進行一個queue佇列的動作(先進先出)，但是我們如果是使用queue的話只能對頭尾操作，要遍歷一遍的話要用pop，也不適合重覆使用，那麼我們來改用陣列達到實現queue的效果</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>Queue是一個先進先出的佇列這種佇列我們可以掌握頭尾的資料</p><p>push: 把一個值加到最後<br>pop: 把最後一個值移除<br>size: 得到目前資料長度<br>front: 取得第一筆<br>back: 取得最後一筆<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">q.push(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">q.front();<span class="comment">//1</span></span><br><span class="line">q.back();<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">q.pop();<span class="comment">//1被拿掉</span></span><br><span class="line">q.size();<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><p>優點:可以快速的把第一個值拿掉<br>缺點:只能操作到頭尾資料</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>push_back: 把一個值加到最後<br>pop_back: 把最後一個值移除<br>size: 得到目前資料長度<br>vec[]: 得到某一個位置的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    vec.push_back(<span class="number">1</span>);<span class="comment">//賦值</span></span><br><span class="line">    vec.push_back(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> dataLength = vec.size();<span class="comment">//取得容器長度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,vec.at(<span class="number">1</span>));<span class="comment">//操作元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,vec[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:vec)<span class="comment">//Vector很方便的逐一遍歷</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    vec.pop_back();<span class="comment">//移除2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>優點:宣告時可以不用給予大小<br>缺點:內部進行刪除時效率低</p><h2 id="環狀佇列-Unordered"><a href="#環狀佇列-Unordered" class="headerlink" title="環狀佇列(Unordered)"></a>環狀佇列(Unordered)</h2><p>有時候我們只是要最新的100筆資料而不管順序，那麼可以用標準模板庫（Standard Template Library）的Vector容器來達成目標，這種方式是只確保是資料是最新的100筆，而資料順序不是保證從0~99，利用idex紀錄資料，當容器資料量到達100滿的時候從第一筆開始覆蓋<br>首先我們宣告Vector跟宣告大小<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> queueSize = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span>.size() &gt;= queueSize)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt;= queueSize)</span><br><span class="line">    &#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>[idx] = value;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queue</span>[idx] = value;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>.push_back(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="環狀佇列-Ordered"><a href="#環狀佇列-Ordered" class="headerlink" title="環狀佇列(Ordered)"></a>環狀佇列(Ordered)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_QUEUE 10</span></span><br><span class="line"><span class="keyword">int</span> circularQueue[MAX_QUEUE];</span><br><span class="line"><span class="keyword">int</span> front = <span class="number">-1</span>, rear = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>; <span class="comment">//透過flag可以將原本只能存放N-1個元素的環形佇列變成存放N個元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear % MAX_QUEUE == front);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (front == rear)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">queue</span>, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull() &amp;&amp; flag == <span class="number">1</span> || rear == MAX_QUEUE - <span class="number">1</span> &amp;&amp; front == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Circular Queue is full!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Circular Queue add: %d\n"</span>, value);</span><br><span class="line">    rear = (rear + <span class="number">1</span>) % MAX_QUEUE;</span><br><span class="line">    <span class="built_in">queue</span>[rear] = value;</span><br><span class="line">    <span class="keyword">if</span> (front == rear) flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty() &amp;&amp; flag == <span class="number">0</span>)&#123; <span class="comment">//檢查佇列是否為空的</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Circular Queue is empty!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    front = (front + <span class="number">1</span>) % MAX_QUEUE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d is deleted.\n"</span>, <span class="built_in">queue</span>[front]);</span><br><span class="line">    <span class="keyword">if</span> (front == rear) flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Enqueue(circularQueue, <span class="number">1</span>);</span><br><span class="line">    Enqueue(circularQueue, <span class="number">2</span>);</span><br><span class="line">    Enqueue(circularQueue, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://larry850806.github.io/2016/06/06/STL1/" target="_blank" rel="noopener">[C++] STL 容器 (一) - 基本介紹</a><br><a href="https://j101044.wordpress.com/2014/08/19/algorithmc-c-%E4%BD%87%E5%88%97queue/" target="_blank" rel="noopener">[Algorithm][C / C++] 佇列(Queue)、環狀佇列(Circular Queue)</a></p><h2 id="好音樂分享"><a href="#好音樂分享" class="headerlink" title="好音樂分享"></a>好音樂分享</h2><p>長大以後聽著很有感觸呢!或許講的是我是你也是妳</p><p><a href="https://www.youtube.com/watch?v=3P8ODasFchE&amp;index=4&amp;list=PL5AkdapUo5y1F6DUOeLEPpk0GpNKcIvY4" target="_blank" rel="noopener">『城市唱遊 EP.20』好樂團 - 我把我的青春給你｜樂人 x Volkswagen</a><br><a href="https://www.youtube.com/watch?v=Elb9-GHqxfY" target="_blank" rel="noopener">Vising《 長大以後 》Lyric Video</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近處理一些數據是滿兩百筆後，進行一個queue佇列的動作(先進先出)，但是我們如果是使用queue的話只能對頭尾操作，要遍歷一遍的話要用p
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="環狀佇列" scheme="https://teddybearfp.github.io/tags/%E7%92%B0%E7%8B%80%E4%BD%87%E5%88%97/"/>
    
      <category term="Circular Queue" scheme="https://teddybearfp.github.io/tags/Circular-Queue/"/>
    
      <category term="Vector" scheme="https://teddybearfp.github.io/tags/Vector/"/>
    
      <category term="Queue" scheme="https://teddybearfp.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>看門狗計時器(Watchdog Timer)</title>
    <link href="https://teddybearfp.github.io/2019/03/25/%E7%9C%8B%E9%96%80%E7%8B%97%E8%A8%88%E6%99%82%E5%99%A8-Watchdog-Timer/"/>
    <id>https://teddybearfp.github.io/2019/03/25/看門狗計時器-Watchdog-Timer/</id>
    <published>2019-03-25T04:05:16.000Z</published>
    <updated>2019-03-25T15:52:57.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在編寫一些較有危險性的函式在裝置上，我們要怎麼來降低風險呢?例如:馬達持續未關閉、高壓電輸出、加熱裝置未關閉之類的潛在危險因子，最近編寫一些函式控制裝置，但是有一定的風險在其中，在思考防範機制的時候，前輩給了我一個不錯的思維，就是這些情況可以透過看門狗計時器來幫我們守護整體安全性，使控制系統轉入安全狀態中。</p><h2 id="看門狗計時器"><a href="#看門狗計時器" class="headerlink" title="看門狗計時器"></a>看門狗計時器</h2><p>看門狗計時器是一種電腦硬體式的計時裝置，當系統的主程式發生某些錯誤事件時，例如:程式異常中止或是崩潰，導致程式沒有正常執行解構函式與離開狀態機，假死機或未定時的清除看門狗計時器的內含計時值（多半是向對計時器發送清除訊號），這時看門狗計時器就會對系統發出重設、重新啟動或關閉的訊號，使系統從懸停狀態回復到正常運作狀態。看門狗一旦使用便不能停止。一般情況下計數器在系統休眠時依然計數，但在某些晶片上，處於低功耗模式下的看門狗僅僅保留暫存器資料但不計數。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>在FPGA或是Firmware的地方編寫看門狗計時器，當程式執行的時候，軟體不斷的給看門狗計時器答覆，當沒答覆的時候代表程式離開、需要重啟或關閉，這樣就不用擔心軟體方面的異常中止，硬體自行有保護<br>讚啦!</p><h2 id="生活小記"><a href="#生活小記" class="headerlink" title="生活小記"></a>生活小記</h2><p>今天同事跟我說個驚人事實就是漫威屬於迪士尼的，後來我看到復仇者聯盟的宣傳照突然有種喜感，接下來換我告訴他驚人的事實，中國有嘻哈也是迪士尼的，因為Diss你~</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%9C%8B%E9%96%80%E7%8B%97%E8%A8%88%E6%99%82%E5%99%A8" target="_blank" rel="noopener">看門狗計時器- 维基百科，自由的百科全书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在編寫一些較有危險性的函式在裝置上，我們要怎麼來降低風險呢?例如:馬達持續未關閉、高壓電輸出、加熱裝置未關閉之類的潛在危險因子，最近編寫一些
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="看門狗計時器" scheme="https://teddybearfp.github.io/tags/%E7%9C%8B%E9%96%80%E7%8B%97%E8%A8%88%E6%99%82%E5%99%A8/"/>
    
      <category term="Watchdog Timer" scheme="https://teddybearfp.github.io/tags/Watchdog-Timer/"/>
    
  </entry>
  
  <entry>
    <title>Python 資料視覺化(Data Visualization)</title>
    <link href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/"/>
    <id>https://teddybearfp.github.io/2019/03/20/Python-資料視覺化/</id>
    <published>2019-03-20T04:05:16.000Z</published>
    <updated>2019-05-30T13:05:00.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>數字比較不能讓一目了然資料的變化，驗證數據時看這些數字比較無感，雖然excel就可以畫圖形了，最近有大量數據圖需要觀察，一個一個excel點進去設定繪製與截圖實在耗時，所以我們編寫一個資料視覺化程式更方便更快速達成多個圖表繪製，可以將同層中的csv數據透過matplotlib分色畫成折線圖並存成圖檔，也可以畫成柱狀圖、圓餅圖、散佈圖與其他更高階的視覺化圖形，這篇我們紀錄折線圖的使用方式<br><img src="https://i.imgur.com/UxYN8pR.png" alt=""></p><h2 id="編寫中文"><a href="#編寫中文" class="headerlink" title="編寫中文"></a>編寫中文</h2><p>Python編碼默認是ASCII格式，沒修改編碼的情況下無法編寫中文，所以輸入中文會報錯，解決辦法有以下兩種</p><p>第一種方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br></pre></td></tr></table></figure></p><p>第二種方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br></pre></td></tr></table></figure></p><h2 id="glob讀取-csv"><a href="#glob讀取-csv" class="headerlink" title="glob讀取.csv"></a>glob讀取.csv</h2><p>glob.iglob(pathname), 一次只獲取一個匹配路徑<br>glob.glob（pathname), 獲取所有的匹配路徑<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob </span><br><span class="line"></span><br><span class="line">f = glob.iglob(<span class="string">r'.\*.csv'</span>)</span><br><span class="line">input_files = glob.glob(<span class="string">r'*.csv'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> input_file <span class="keyword">in</span> input_files: <span class="comment">#檢視取得到的內容</span></span><br><span class="line">    print(input_file)</span><br></pre></td></tr></table></figure></p><h2 id="讀取CSV內容"><a href="#讀取CSV內容" class="headerlink" title="讀取CSV內容"></a>讀取CSV內容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">input_files = <span class="string">"Teddybearfp.csv"</span></span><br><span class="line">file = pd.read_csv(input_file,encoding = <span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開啟 CSV 檔案</span></span><br><span class="line"><span class="keyword">with</span> open(input_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> rFile:</span><br><span class="line"></span><br><span class="line"><span class="comment">#讀取 CSV 檔案內容</span></span><br><span class="line">filereader = csv.reader(rFile)</span><br><span class="line"></span><br><span class="line"><span class="comment">#filereader.next() 返回即为第一行的内容(通常為標題)</span></span><br><span class="line">header = next(filereader)</span><br><span class="line"></span><br><span class="line"><span class="comment">#剖析header得到title標題與count_header總數</span></span><br><span class="line">title = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_header = len(title)</span><br></pre></td></tr></table></figure><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(plt, data)</span>:</span></span><br><span class="line">    x = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    y = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    <span class="comment">#調整圖形大小</span></span><br><span class="line">    <span class="comment">#默認像素：[6.0,4.0]，分辨率100，圖形大小 600X400</span></span><br><span class="line">    <span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#畫出圖形</span></span><br><span class="line">    plt.xlabel(<span class="string">'Seconds'</span>) <span class="comment">#X軸</span></span><br><span class="line">    plt.ylabel(<span class="string">'Temperature'</span>) <span class="comment">#Y軸</span></span><br><span class="line">    <span class="comment">#plt.ylim((1, 8)) 可以設置極限值改變顯示區域</span></span><br><span class="line">    plt.plot(x, y,color = <span class="string">"red"</span>, label = <span class="string">"A"</span>, linewidth = <span class="number">1</span>) <span class="comment">#畫線並設置顏色與標籤和線寬</span></span><br><span class="line">    plt.legend(loc = <span class="string">'best'</span>,prop=&#123;<span class="string">'size'</span>:<span class="number">6</span>&#125;) <span class="comment">#將標籤找到數據較少的地方放置(盡可能不會遮蔽到數據),prop調整圖示大小</span></span><br><span class="line">    plt.savefig(filename + <span class="string">".png"</span>, dpi=<span class="number">300</span>)<span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#plt.plot(x, y) 線(預設)</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, 'o') 點</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, '-o') 線與點</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, '--o') 虛線與點</span></span><br><span class="line"></span><br><span class="line">data = [ (<span class="number">1</span>,<span class="number">2</span>), (<span class="number">2</span>,<span class="number">8</span>), (<span class="number">5</span>,<span class="number">2</span>), (<span class="number">7</span>,<span class="number">6</span>), (<span class="number">9</span>,<span class="number">10</span>) ]</span><br><span class="line"><span class="comment">#呼叫畫圖函式</span></span><br><span class="line">plotData(plt, data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/uOnyP1Z.png" alt=""></p><h2 id="實作csv資料視覺化"><a href="#實作csv資料視覺化" class="headerlink" title="實作csv資料視覺化"></a>實作csv資料視覺化</h2><p>以下實作是將同層的csv資料畫成折線圖(例如:溫度變化圖)讓我們繼續看下去<br><img src="https://i.imgur.com/VYcYMR0.png" alt="" title="眼花撩亂的csv數據"></p><p>不要懷疑上面的圖真的是模糊過的不是眼睛出問題</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(plt, data, color, filename, label)</span>:</span></span><br><span class="line">    x = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    y = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    plt.xlabel(<span class="string">'Seconds'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Temperature'</span>)</span><br><span class="line">    plt.rcParams[<span class="string">'savefig.dpi'</span>] = <span class="number">800</span></span><br><span class="line">    plt.plot(x, y, <span class="string">'-'</span>, color = color, label = label)</span><br><span class="line">    plt.legend(loc = <span class="string">'best'</span>,prop=&#123;<span class="string">'size'</span>:<span class="number">6</span>&#125;)<span class="comment">#prop調整圖示大小</span></span><br><span class="line">    plt.savefig(filename + <span class="string">".png"</span>, dpi=<span class="number">300</span>)<span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#讀檔取得標題</span></span><br><span class="line">input_files = glob.glob(<span class="string">r'*.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#輸入目標溫度畫輔助線</span></span><br><span class="line">targetDegree = int(input(<span class="string">"Target degree:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> input_file <span class="keyword">in</span> input_files:</span><br><span class="line">    result_data = []</span><br><span class="line">    expect = []</span><br><span class="line">    file = pd.read_csv(input_file,encoding = <span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(input_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> rFile:</span><br><span class="line">        filereader = csv.reader(rFile)</span><br><span class="line">        header = next(filereader)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#剖析header得到title標題與count_header總數</span></span><br><span class="line">    title = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">    count_header = len(title)  </span><br><span class="line"></span><br><span class="line">    color = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"green"</span>, <span class="string">"navy"</span>, <span class="string">"skyblue"</span>, </span><br><span class="line">             <span class="string">"burlywood"</span>, <span class="string">"blue"</span>, <span class="string">"cyan"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>,</span><br><span class="line">             <span class="string">"orange"</span>, <span class="string">"purple"</span>, <span class="string">"magenta"</span>, <span class="string">"slateblue"</span>, <span class="string">"gold"</span>,</span><br><span class="line">             <span class="string">"mintcream"</span>, <span class="string">"navy"</span>, <span class="string">"gold"</span>, <span class="string">"bisque"</span>, <span class="string">"aqua"</span>]</span><br><span class="line">             </span><br><span class="line">    <span class="comment">#畫輔助線看有沒有落在正負1範圍內(若不需要這段可以拿掉)</span></span><br><span class="line">    data = []</span><br><span class="line">    dataLength = len(file[title[<span class="number">0</span>]])</span><br><span class="line">    resTitle = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree)<span class="comment">#紅線目標溫度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"target"</span>)</span><br><span class="line">    </span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree - <span class="number">1</span>)<span class="comment">#綠線正負一度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"lower"</span>)</span><br><span class="line">    </span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree + <span class="number">1</span>)<span class="comment">#綠線正負一度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"upper"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#讀取每一行的資料並放到list中</span></span><br><span class="line">    <span class="keyword">for</span> number, title_ <span class="keyword">in</span> enumerate(title):</span><br><span class="line">        data = []</span><br><span class="line">        resTitle.append(title_)</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> enumerate(file[title_]):</span><br><span class="line">            data.append(content)</span><br><span class="line">            </span><br><span class="line">        result_data.append(data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#繪製圖形</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(result_data)):</span><br><span class="line">        plotData(plt, result_data[n], color[n], input_file.strip(<span class="string">".csv"</span>),resTitle[n])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/pfFuORX.png" alt="" title="畫出溫度變化折線圖與正負1度輔助線"></p><p><img src="https://i.imgur.com/ZibqG9k.png" alt="" title="溫度變化折線圖與目標溫度無輔助線"></p><h2 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h2><p>關於溫度如何收斂呢?我們可以透過用PID控制器的方式達到數據收斂，PID控制器（比例-積分-微分控制器），由比例單元（P）、積分單元（I）和微分單元（D）組成。可以透過調整這三個單元的增益Kp，Ki和Kd來調定其特性。PID控制器主要適用於基本上線性，且動態特性不隨時間變化的系統。<br>P控制器: Kp * Error(誤差)<br>PI控制器: Kp * Error(誤差) + Ki * SumOfError(N組)<br>​PID 的​參數​調整​指​的是​通過​設定 P、​I 與 D 的​最佳​增益來達成<br>這穩定的控制方式在​業界​受到​廣泛​使用，這項​演算法​彈性​十足，​能夠​在​各式各樣​的​應用​中​能有良好的​結果<br>還可以運用在股票運算K線呢!不說了趕快繼續練習猜測與檢查找到最佳的PID</p><h2 id="網路笑話一則"><a href="#網路笑話一則" class="headerlink" title="網路笑話一則"></a>網路笑話一則</h2><p>上面既然提到了股票那麼來一則關於股票的笑話吧!</p><p>Q:猜猜誰不需要股票??</p><p>A:東尼史塔克</p><p>因為(don’t need stock)</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.itread01.com/articles/1476166832.html" target="_blank" rel="noopener">簡單掌握Python中glob模塊查找文件路徑的用法</a><br><a href="https://tree.rocks/python/python-matplotlib-simple-linechart/" target="_blank" rel="noopener">Python Matplotlib 簡單繪制圖表教學 ( 折線圖 )</a><br><a href="https://zh.wikipedia.org/zh-tw/PID%E6%8E%A7%E5%88%B6%E5%99%A8" target="_blank" rel="noopener">PID控制器- 维基百科，自由的百科全书</a><br><a href="http://www.ni.com/zh-tw/innovations/white-papers/06/pid-theory-explained.html" target="_blank" rel="noopener">PID 控制原理教學- National Instruments</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;數字比較不能讓一目了然資料的變化，驗證數據時看這些數字比較無感，雖然excel就可以畫圖形了，最近有大量數據圖需要觀察，一個一個excel點
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="csv" scheme="https://teddybearfp.github.io/tags/csv/"/>
    
      <category term="資料視覺化" scheme="https://teddybearfp.github.io/tags/%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/"/>
    
      <category term="Data Visualization" scheme="https://teddybearfp.github.io/tags/Data-Visualization/"/>
    
      <category term="折線圖" scheme="https://teddybearfp.github.io/tags/%E6%8A%98%E7%B7%9A%E5%9C%96/"/>
    
      <category term="matplotlib" scheme="https://teddybearfp.github.io/tags/matplotlib/"/>
    
      <category term="PID控制器" scheme="https://teddybearfp.github.io/tags/PID%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python 資料比對</title>
    <link href="https://teddybearfp.github.io/2019/03/19/Python-%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D/"/>
    <id>https://teddybearfp.github.io/2019/03/19/Python-資料比對/</id>
    <published>2019-03-19T05:05:16.000Z</published>
    <updated>2019-03-29T16:00:13.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如我們有兩個大型Excel(各四萬筆)要比對，要做三種資料(A∩B)、(A-A∩B)、(B-A∩B)那麼如果用excel篩選後複製貼上反覆操作後有錯誤風險且速度較慢，透過篩選複製貼上繁瑣且難發現有重複資料或是資料不全的項目，這一篇記錄了我去年前幫忙公務員解決的問題，想當初有公務員周期性的每個月需要做好幾筆，後來喝杯咖啡執行這程式資料就出來了輕鬆了不少呢</p><p>此篇使用的測試資料內容皆為亂掰的不是真實資料~</p><h2 id="舉例"><a href="#舉例" class="headerlink" title="舉例"></a>舉例</h2><p>一開始我們有兩份excel名單，一份名單內容是三月住宿而另一份是四月住宿的名單，那麼我們要產出新的三份excel且不同欄位需合併</p><ul><li>三月住宿四月皆住宿者</li><li>三月住宿四月沒住宿者</li><li>三月沒住四月新住宿者</li></ul><p>下圖為三月住宿名單(紅色為與四月相同的部分)<br><img src="https://i.imgur.com/6Vagz7A.png" alt="" title="三月住宿者"></p><p>下圖為三月住宿名單(紅色為與三月相同的部分)<br><img src="https://i.imgur.com/VMFyhq0.png" alt="" title="四月住宿者"></p><p>那麼接下來我們的目標是要產出以下三種excel(兩份資料欄位需合併)</p><p>第一種(三月住宿四月皆住宿者)<br><img src="https://i.imgur.com/9O9yAMS.png" alt=""></p><p>第二種(三月住宿四月沒住宿者)<br><img src="https://i.imgur.com/hSrL21x.png" alt=""></p><p>第三種(三月沒住四月新住宿者)<br><img src="https://i.imgur.com/5wLYGTl.png" alt=""></p><h2 id="實作Excel交叉比對"><a href="#實作Excel交叉比對" class="headerlink" title="實作Excel交叉比對"></a>實作Excel交叉比對</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">input_file1 = <span class="string">"a.csv"</span></span><br><span class="line">input_file2 = <span class="string">"b.csv"</span></span><br><span class="line">write_data = <span class="string">''</span></span><br><span class="line">result_title = []</span><br><span class="line">result_titlea = []</span><br><span class="line">result_titleb = []</span><br><span class="line">same = []</span><br><span class="line">diffa= []</span><br><span class="line">diffb = []</span><br><span class="line">IDb = []</span><br><span class="line"><span class="comment">#read two files</span></span><br><span class="line">file1 = pd.read_csv(input_file1,encoding = <span class="string">'utf8'</span>)</span><br><span class="line">file2 = pd.read_csv(input_file2,encoding = <span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">with</span> open(input_file1,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> filex1:</span><br><span class="line">    filereadera = csv.reader(filex1)</span><br><span class="line">    headera = next(filereadera)</span><br><span class="line"><span class="comment">#counting header and write headercontent</span></span><br><span class="line">titlea = [ n <span class="keyword">for</span> n <span class="keyword">in</span> headera <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_headera = len(titlea)      </span><br><span class="line"><span class="keyword">with</span> open(input_file2,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> filex2:</span><br><span class="line">    filereaderb = csv.reader(filex2)</span><br><span class="line">    headerb = next(filereaderb)</span><br><span class="line"><span class="comment">#counting header and write headercontent</span></span><br><span class="line">titleb = [ n <span class="keyword">for</span> n <span class="keyword">in</span> headerb <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_headerb = len(titleb)   </span><br><span class="line">l_a = len(file1[titlea[<span class="number">0</span>]])</span><br><span class="line">l_b = len(file2[titleb[<span class="number">0</span>]])</span><br><span class="line">count_a = <span class="number">0</span></span><br><span class="line">count_b = <span class="number">0</span></span><br><span class="line"><span class="comment">#diffb檔案的title</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">    result_titleb.append(b)</span><br><span class="line">diffb.append(result_titleb)</span><br><span class="line"><span class="comment">#a跟b title若重複,刪除重複者</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">del</span> titleb[n]</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"><span class="comment">#ab相同檔案title,diffa檔案title</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    result_title.append(a)</span><br><span class="line">    result_titlea.append(a)</span><br><span class="line">diffa.append(result_titlea)</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="string">'身分證號'</span><span class="keyword">or</span> b ==<span class="string">'身分證'</span><span class="keyword">or</span> b ==<span class="string">'身份證'</span><span class="keyword">or</span> b ==<span class="string">'身份證號'</span> <span class="keyword">or</span> b ==<span class="string">'id'</span><span class="keyword">or</span> b ==<span class="string">'ID'</span><span class="keyword">or</span> b ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> b ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result_title.append(b)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    <span class="keyword">if</span> a ==<span class="string">'身分證號'</span><span class="keyword">or</span> a ==<span class="string">'身分證'</span><span class="keyword">or</span> a ==<span class="string">'身份證'</span><span class="keyword">or</span> a ==<span class="string">'身份證號'</span> <span class="keyword">or</span> a ==<span class="string">'id'</span><span class="keyword">or</span> a ==<span class="string">'ID'</span><span class="keyword">or</span> a ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> a ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        IDa = [content <span class="keyword">for</span> content <span class="keyword">in</span> file1[a]]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count_a += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> result_titleb:</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="string">'身分證號'</span><span class="keyword">or</span> b ==<span class="string">'身分證'</span><span class="keyword">or</span> b ==<span class="string">'身份證'</span><span class="keyword">or</span> b ==<span class="string">'身份證號'</span> <span class="keyword">or</span> b ==<span class="string">'id'</span><span class="keyword">or</span> b ==<span class="string">'ID'</span><span class="keyword">or</span> b ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> b ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        IDb = [content <span class="keyword">for</span> content <span class="keyword">in</span> file2[b]]     </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count_b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">same.append(result_title)</span><br><span class="line">count_ac = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> IDa:</span><br><span class="line">    count_bc = <span class="number">0</span></span><br><span class="line">    same_temp = []</span><br><span class="line">    diff_temp = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> IDb:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">for</span> ta <span class="keyword">in</span> titlea:</span><br><span class="line">                <span class="keyword">if</span> type(file1[ta][count_ac]) != str <span class="keyword">and</span> np.isnan(float(file1[ta][count_ac])):</span><br><span class="line">                    same_temp.append(<span class="string">'none'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    same_temp.append(str(file1[ta][count_ac]))</span><br><span class="line">            bc = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> titleb:</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> type(file2[tb][count_bc]) != str <span class="keyword">and</span> np.isnan(float(file2[tb][count_bc])):</span><br><span class="line">                    same_temp.append(<span class="string">'none'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    same_temp.append(str(file2[tb][count_bc]))</span><br><span class="line">                bc += <span class="number">1</span></span><br><span class="line">            same.append(same_temp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> a!= b <span class="keyword">and</span> count_bc+<span class="number">1</span> == l_b:</span><br><span class="line">            <span class="keyword">for</span> ta <span class="keyword">in</span> titlea:</span><br><span class="line">                diff_temp.append(str(file1[ta][count_ac]))</span><br><span class="line">            diffa.append(diff_temp)</span><br><span class="line">        count_bc += <span class="number">1</span></span><br><span class="line">    count_ac += <span class="number">1</span></span><br><span class="line">count_bc = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> IDb:</span><br><span class="line">    count_ac = <span class="number">0</span></span><br><span class="line">    same_temp = []</span><br><span class="line">    diff_temp = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> IDa:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> a!= b <span class="keyword">and</span> count_ac+<span class="number">1</span> == l_a:</span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> result_titleb:</span><br><span class="line">                diff_temp.append(str(file2[tb][count_bc]))</span><br><span class="line">            diffb.append(diff_temp)</span><br><span class="line">        count_ac += <span class="number">1</span></span><br><span class="line">    count_bc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ab檔案皆存在者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    filewriter = csv.writer(file)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> same:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'僅存在a檔案者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file2:</span><br><span class="line">    filewriter = csv.writer(file2)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> diffa:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'僅存在b檔案者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file3:</span><br><span class="line">    filewriter = csv.writer(file3)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> diffb:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'感謝seafood 讚嘆seafood'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="可能遇到的問題"><a href="#可能遇到的問題" class="headerlink" title="可能遇到的問題"></a>可能遇到的問題</h2><p>將excel轉成csv的格式可能會遇到編碼問題</p><p>解決方法:<br>1.excel檔案另存新檔為類型csv<br>2.再用Notepad++編輯csv<br>3.上方選項&gt;&gt;編碼&gt;&gt;轉換至UTF-8碼格式(檔首無BOM)<br>4.存檔<br>5.執行程式<br>6.Notepad++編輯csv<br>7.上方選項&gt;&gt;編碼&gt;&gt;轉換至ANSI碼格式<br>8.存檔</p><p>因為要處理中文字時需轉為UTF-8格式，處理完後因為csv的顯示需要用ANSI所以回覆他為ANSI編碼</p><h2 id="笑話一則"><a href="#笑話一則" class="headerlink" title="笑話一則"></a>笑話一則</h2><p>哪個藝人很會阻擋人?</p><p>周杰倫<br>因為周董(台語:阻擋)</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;假如我們有兩個大型Excel(各四萬筆)要比對，要做三種資料(A∩B)、(A-A∩B)、(B-A∩B)那麼如果用excel篩選後複製貼上反覆
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="資料比對" scheme="https://teddybearfp.github.io/tags/%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D/"/>
    
      <category term="csv" scheme="https://teddybearfp.github.io/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>透過Callback Function達到偵測裝置狀態</title>
    <link href="https://teddybearfp.github.io/2019/03/13/Callback-Function/"/>
    <id>https://teddybearfp.github.io/2019/03/13/Callback-Function/</id>
    <published>2019-03-13T04:05:16.000Z</published>
    <updated>2019-03-26T14:39:36.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要記錄的是一直覺得很難的Callback Function這次是第三次跟這難纏傢伙交手，事不過三我這次要好好來了解一下這東東的使用方式了，我們可以透過Callback Function 在底層polling裝置的狀態，例如:裝置斷線、裝置重新連結或是裝置溫度之類的訊息，從底層傳回給上層介面發出信號與接收信號並作適當處理</p><h2 id="實作Callback-Function"><a href="#實作Callback-Function" class="headerlink" title="實作Callback Function"></a>實作Callback Function</h2><p>動態連結檔TDCore.dll示範<br>架構:TDCore(呼叫介面) -&gt; Core(裝置本身) -&gt; TD03(某一塊使用的板子) 繼承於ControlBoard(Base class)</p><p>底層呼叫介面TDCore.h<br>第一步要先宣告回傳的內容與Callback Function的prototype</p><h3 id="TDCore"><a href="#TDCore" class="headerlink" title="TDCore"></a>TDCore</h3><h4 id="TDCore-h"><a href="#TDCore-h" class="headerlink" title="TDCore.h"></a>TDCore.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TDCORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TDCORE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(TDCORE_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TDCORE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> TDCORE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* CoreDev;</span><br><span class="line"><span class="comment">//宣告一些回傳的內容CoreHeaterStatus、CoreHeaterCtx、CoreStatus</span></span><br><span class="line"><span class="keyword">enum</span> CoreHeaterStatus</span><br><span class="line">&#123;</span><br><span class="line">    HeaterIdle,</span><br><span class="line">    HeaterHeating,</span><br><span class="line">    HeaterPreserving</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoreHeaterCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> isOn;</span><br><span class="line">    <span class="keyword">double</span> temperature;</span><br><span class="line">    CoreHeaterStatus status;<span class="comment">//結構裡面的enum</span></span><br><span class="line"></span><br><span class="line">    CoreHeaterCtx()</span><br><span class="line">    &#123;</span><br><span class="line">        isOn = <span class="literal">false</span>;</span><br><span class="line">        temperature = <span class="number">0</span>;</span><br><span class="line">        status = HeaterIdle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoreStatus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> power;</span><br><span class="line">    CoreHeaterCtx heaterCtx[<span class="number">3</span>];<span class="comment">//結構裡面的結構，[3]代表有3組CoreHeaterCtx</span></span><br><span class="line"></span><br><span class="line">    CoreStatus()</span><br><span class="line">    &#123;</span><br><span class="line">        power = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//透過CoreStatusHandler將CoreStatus一大包狀態內容回傳</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*CoreStatusHandler)</span><span class="params">(<span class="keyword">void</span>* param, CoreStatus status)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面是Callback Function回傳 </span></span><br><span class="line"><span class="comment">//接下來我們要將它寫在初始化並透過Start,Stop達到Polling機制</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoreInitCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *dev_name;</span><br><span class="line">    CoreStatusHandler cb;</span><br><span class="line">    <span class="keyword">void</span> *param;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">    GUID guid;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TDCORE_API CoreRetCode <span class="title">CoreInitiate</span><span class="params">(CoreDev *dev, CoreInitCtx ctx)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TDCORE_API <span class="keyword">void</span> <span class="title">CoreStart</span><span class="params">(CoreDev dev)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TDCORE_API <span class="keyword">void</span> <span class="title">CoreStop</span><span class="params">(CoreDev dev)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="TDCore-cpp"><a href="#TDCore-cpp" class="headerlink" title="TDCore.cpp"></a>TDCore.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tdcore.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"td03.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"core.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TDCORE_API CoreRetCode <span class="title">CoreInitiate</span><span class="params">( CoreDev *dev, CoreInitCtx ctx )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( *dev != <span class="literal">NULL</span> ) <span class="keyword">return</span> CoreOk;</span><br><span class="line"></span><br><span class="line">    *dev = <span class="keyword">new</span> Core;<span class="comment">//創建Core主要目的是轉型為Core型態呼叫Core內部函式，這樣外層只要傳個CoreDev *而不需要知道內部呼叫的型態</span></span><br><span class="line"></span><br><span class="line">    Core *core = (Core *)*dev;</span><br><span class="line">    CoreRetCode ret = core-&gt;Initiate( dev,ctx );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ret != CoreOk )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> (Core *)(*dev);</span><br><span class="line">        *dev = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TDCORE_API <span class="keyword">void</span> <span class="title">CoreStart</span><span class="params">(CoreDev dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( dev == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    Core *core = (Core *)dev;</span><br><span class="line">    core-&gt;Start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">TDCORE_API <span class="keyword">void</span> <span class="title">CoreStop</span><span class="params">(CoreDev dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( dev == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    Core *core = (Core *)dev;</span><br><span class="line">    core-&gt;Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h3><h4 id="Core-h"><a href="#Core-h" class="headerlink" title="Core.h"></a>Core.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CORE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tdcore.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"td03.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Core</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Core();</span><br><span class="line"></span><br><span class="line">    <span class="function">CoreRetCode <span class="title">Initiate</span><span class="params">(CoreDev *dev, CoreInitCtx ctx)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    TD03 td03;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CORE_H</span></span></span><br></pre></td></tr></table></figure><h4 id="Core-cpp"><a href="#Core-cpp" class="headerlink" title="Core.cpp"></a>Core.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"core.h"</span></span></span><br><span class="line">Core::Core()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">CoreRetCode Core::Initiate(CoreDev *dev, CoreInitCtx ctx)</span><br><span class="line">&#123;</span><br><span class="line">    ControlBoard::Context context;</span><br><span class="line">    context.dev_name = ctx.dev_name;</span><br><span class="line">    context.param = ctx.param;</span><br><span class="line">    context.cb = ctx.cb;</span><br><span class="line">    ControlBoard::RetCode ret = td03.Initiate(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ret != ControlBoard::RetCode::Ok)</span><br><span class="line">        <span class="keyword">return</span> CoreFailed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CoreOk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Core::Start()</span><br><span class="line">&#123;</span><br><span class="line">    td03.Start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Core::Stop()</span><br><span class="line">&#123;</span><br><span class="line">    td03.Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ControlBoard"><a href="#ControlBoard" class="headerlink" title="ControlBoard"></a>ControlBoard</h3><h4 id="ControlBoard-h"><a href="#ControlBoard-h" class="headerlink" title="ControlBoard.h"></a>ControlBoard.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONTROLBOARD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTROLBOARD_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tdcore.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">( *CtrlStatusHandler)</span><span class="params">(<span class="keyword">void</span> *param, CoreStatus status)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlBoard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ControlBoard()&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">enum</span> RetCode</span><br><span class="line">    &#123;</span><br><span class="line">        Failed,</span><br><span class="line">        Ok,</span><br><span class="line">        NotSupport,</span><br><span class="line">        NotFound,</span><br><span class="line">        YZNotAtHome,</span><br><span class="line">        OutOfRange,</span><br><span class="line">        TimeOut,</span><br><span class="line">        DriverError,</span><br><span class="line">        Disconnected</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *dev_name;</span><br><span class="line">        CtrlStatusHandler cb;</span><br><span class="line">        <span class="keyword">void</span> *param;</span><br><span class="line">        <span class="keyword">void</span> *dev;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">            GUID guid;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        Context()</span><br><span class="line">        &#123;</span><br><span class="line">            dev_name = <span class="literal">NULL</span>;</span><br><span class="line">            vid = <span class="number">0</span>;</span><br><span class="line">            pid = <span class="number">0</span>;</span><br><span class="line">            dev = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">enum</span> HeaterStatus</span><br><span class="line">    &#123;</span><br><span class="line">        HeaterIdle,</span><br><span class="line">        HeaterHeating,</span><br><span class="line">        HeaterPreserving</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HeaterCtx</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">bool</span> isOn;</span><br><span class="line">        <span class="keyword">double</span> temperature;</span><br><span class="line">        HeaterStatus status;</span><br><span class="line"></span><br><span class="line">        HeaterCtx()</span><br><span class="line">        &#123;</span><br><span class="line">            isOn = <span class="literal">false</span>;</span><br><span class="line">            temperature = <span class="number">0</span>;</span><br><span class="line">            status = HeaterIdle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Status</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">bool</span> power;</span><br><span class="line">        HeaterCtx heaterCtx[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        Status()</span><br><span class="line">        &#123;</span><br><span class="line">            power = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RetCode <span class="title">Initiate</span><span class="params">(Context ctx)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    Context context;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="TD03"><a href="#TD03" class="headerlink" title="TD03"></a>TD03</h3><h4 id="TD03-h"><a href="#TD03-h" class="headerlink" title="TD03.h"></a>TD03.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"controlboard.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TD03</span>:</span> <span class="keyword">public</span> ControlBoard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TD03();</span><br><span class="line">    </span><br><span class="line">    ControlBoard::<span class="function">Context* <span class="title">GetContext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">RetCode <span class="title">Initiate</span><span class="params">(Context ctx)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CoreStatus status;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用來Polling的執行緒</span></span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    <span class="keyword">unsigned</span> threadID;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> __<span class="function">stdcall <span class="title">threadProc</span><span class="params">(<span class="keyword">void</span> *param)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PollingStatus</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="TD03-cpp"><a href="#TD03-cpp" class="headerlink" title="TD03.cpp"></a>TD03.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"td03.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">ControlBoard::RetCode TD03::Initiate( Context ctx )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//doInitial...</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;context, &amp;ctx, <span class="keyword">sizeof</span>(Context));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> TD03::Start()</span><br><span class="line">&#123;</span><br><span class="line">    hThread = (HANDLE)_beginthreadex( <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadProc, <span class="keyword">this</span>, <span class="number">0</span>, &amp;threadID );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> __stdcall TD03::threadProc(<span class="keyword">void</span>* pArguments) &#123;</span><br><span class="line">    TD03 *DataProcPtr = (TD03*)pArguments;</span><br><span class="line">    DataProcPtr-&gt;PollingStatus();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TD03::PollingStatus() &#123;</span><br><span class="line">    <span class="keyword">while</span>(isStarted)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//PowerOFF</span></span><br><span class="line">        ReadPowerOFF(&amp;status);</span><br><span class="line">        <span class="keyword">if</span>(!isStarted) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ReadHeaterTemperature</span></span><br><span class="line">        ReadHeater(&amp;status);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(context.cb != <span class="literal">NULL</span>)</span><br><span class="line">            context.cb(context.param, status);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!isStarted) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        Sleep(<span class="number">100</span>);<span class="comment">//每0.1秒Polling</span></span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上層呼叫"><a href="#上層呼叫" class="headerlink" title="上層呼叫"></a>上層呼叫</h3><h4 id="Device-h"><a href="#Device-h" class="headerlink" title="Device.h"></a>Device.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Device_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Device_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../CVCore/tdcore.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Device</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> RetCode</span><br><span class="line">    &#123;</span><br><span class="line">        Failed,</span><br><span class="line">        Ok,</span><br><span class="line">        CtrlboardCommError</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Device</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Device *<span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;inst; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">RetCode <span class="title">Initiate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnStatusChanged</span><span class="params">(<span class="keyword">void</span> *param, CoreStatus cb)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnStatusChanged</span><span class="params">(CoreStatus cb)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> Device inst;</span><br><span class="line">    CoreDev dev;</span><br><span class="line">    CoreInitCtx ctx;</span><br><span class="line">    </span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">powerOFF</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">temperatureReached</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="Device-cpp"><a href="#Device-cpp" class="headerlink" title="Device.cpp"></a>Device.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"device.h"</span></span></span><br><span class="line"></span><br><span class="line">Device Device::inst;</span><br><span class="line"></span><br><span class="line">Device::Device(QObject *parent) : QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line">    dev = <span class="literal">NULL</span>;</span><br><span class="line">    bInitiated = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memset</span>(tempForTest, <span class="number">0</span>, <span class="keyword">sizeof</span>(tempForTest) * <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Device::RetCode Device::Initiate()</span><br><span class="line">&#123;</span><br><span class="line">    ctx.cb = OnStatusChanged;</span><br><span class="line">    ctx.param = <span class="keyword">this</span>;</span><br><span class="line">    CoreRetCode ret = CoreInitiate(&amp;dev,ctx);</span><br><span class="line"></span><br><span class="line">    bInitiated = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(ret != CoreRetCode::CoreOk)</span><br><span class="line">        <span class="keyword">return</span> Failed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Device::OnStatusChanged(<span class="keyword">void</span> *param, CoreStatus cb)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//static的函式要轉成重載的non-static的方式去對值操作</span></span><br><span class="line">    Device *p = (Device *)param;</span><br><span class="line">    p-&gt;OnStatusChanged(cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Device::OnStatusChanged(CoreStatus cb)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (cb.heaterCtx[<span class="number">2</span>].status == HeaterPreserving)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">temperatureReached</span><span class="params">()</span></span>;<span class="comment">//持續監測溫度等到溫度到達送出信號</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Device::Start()<span class="comment">//加在狀態機Initail完成後底層執行polling</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( bInitiated == <span class="literal">false</span> || dev == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    CoreStart(dev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Device::Stop()<span class="comment">//狀態機離開uninit的時候執行這函式將底層polling執行緒釋放否則會出現異常終止</span></span><br><span class="line">&#123;</span><br><span class="line">    CoreStop(dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要記錄的是一直覺得很難的Callback Function這次是第三次跟這難纏傢伙交手，事不過三我這次要好好來了解一下這東東的使用方式了
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://teddybearfp.github.io/tags/C/"/>
    
      <category term="struct" scheme="https://teddybearfp.github.io/tags/struct/"/>
    
      <category term="enum" scheme="https://teddybearfp.github.io/tags/enum/"/>
    
      <category term="Callback Function" scheme="https://teddybearfp.github.io/tags/Callback-Function/"/>
    
  </entry>
  
  <entry>
    <title>專案_介面與動態連結檔架構</title>
    <link href="https://teddybearfp.github.io/2019/03/12/%E5%B0%88%E6%A1%88-%E4%BB%8B%E9%9D%A2%E8%88%87%E5%8B%95%E6%85%8B%E9%80%A3%E7%B5%90%E6%AA%94%E6%9E%B6%E6%A7%8B/"/>
    <id>https://teddybearfp.github.io/2019/03/12/專案-介面與動態連結檔架構/</id>
    <published>2019-03-12T04:05:16.000Z</published>
    <updated>2019-03-19T14:05:58.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一個專案的架構編寫是非常重要的，若是架構不太好，事隔多時回來看程式碼，應該都忘光光了，所以好的架構可以讓維護更方便，並且除錯也比較快速，今天所紀錄的是介面與<a href="https://teddybearfp.github.io/2018/11/02/C-dll/#more">動態連結檔</a>溝通的架構方法之一，而整個專案架構是遵守Model-View-ViewModel(MVVM)</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>透過上層介面MyProj(project)呼叫MyCore(dll)使用底層函式，這樣做的好處有</p><ul><li>可以將前端與底層分開進行開發(開發速度快與分工詳細)</li><li>函式呼叫正確與否就知道dll正確性(除錯與責任歸屬快速)</li></ul><h2 id="動態連結檔概述"><a href="#動態連結檔概述" class="headerlink" title="動態連結檔概述"></a>動態連結檔概述</h2><p><img src="https://i.imgur.com/NrWFEhc.png" alt=""></p><h2 id="動態連結檔各檔描述"><a href="#動態連結檔各檔描述" class="headerlink" title="動態連結檔各檔描述"></a>動態連結檔各檔描述</h2><h3 id="MyCore-h-MyCore-cpp"><a href="#MyCore-h-MyCore-cpp" class="headerlink" title="MyCore.h / MyCore.cpp"></a>MyCore.h / MyCore.cpp</h3><p>提供純C介面給上層呼叫<br>純C的目的是之後這個動態連結檔的相容性很高</p><p>函式內參數為下方例子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> “C” Initiate(<span class="keyword">void</span> *dev);</span><br></pre></td></tr></table></figure></p><p>在此接收到void *dev只有一個目的就是為了轉成Core呼叫Core內部函式*dev = new Core(獲得Core的Class得予再往下呼叫)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Core *core = (Core*)*dev;</span><br><span class="line">CoreRetCide ret = core-&gt;initiate(dev,ctx);</span><br></pre></td></tr></table></figure></p><p>編寫結構與列舉<br>enum, struct<br>在此注意要導入其它的.h(例如core.h, TBFP03.h)</p><h3 id="Core-h-Core-cpp"><a href="#Core-h-Core-cpp" class="headerlink" title="Core.h / Core.cpp"></a>Core.h / Core.cpp</h3><p>這一層就是整台機器</p><p>增加所有板子、Sensor函式<br>    (例如:目前有TBFP03板子往後可能新增TBFP04…)</p><p>函式呼叫板子與Sensor功能</p><h3 id="Controlboard-h-Controlboard-cpp"><a href="#Controlboard-h-Controlboard-cpp" class="headerlink" title="Controlboard.h / Controlboard.cpp"></a>Controlboard.h / Controlboard.cpp</h3><p>基類，用來讓類似的新板子有同個雛形</p><p>Virtual Function = 0 的要實作</p><p>Virtual Function { do Something }可實作可不實作</p><p>Protected的內容，繼承者才可以使用其他人無法使用</p><h3 id="TBFP03-h-TBFP03-cpp"><a href="#TBFP03-h-TBFP03-cpp" class="headerlink" title="TBFP03.h / TBFP03.cpp"></a>TBFP03.h / TBFP03.cpp</h3><p>繼承Controlboard並實作</p><p>用到基類的enum,struct需加class(告訴編譯器屬於哪個class)<br>例如:<br>Controlboard.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> MotorID</span><br><span class="line">&#123;</span><br><span class="line">    MotorA,</span><br><span class="line">    MotorB,</span><br><span class="line">    MotorC,</span><br><span class="line">    MotorALL</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MotorParam</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> id;</span><br><span class="line">    <span class="keyword">float</span> steps;</span><br><span class="line">    <span class="keyword">float</span> hz;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pace;</span><br><span class="line">    MotorParam()</span><br><span class="line">    &#123;</span><br><span class="line">        steps = <span class="number">1</span>;</span><br><span class="line">        hz = <span class="number">20</span>;</span><br><span class="line">        pace = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TBFP03.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Controlboard::MotorID</span><br></pre></td></tr></table></figure></p><h2 id="動態連結檔實作"><a href="#動態連結檔實作" class="headerlink" title="動態連結檔實作"></a>動態連結檔實作</h2><h3 id="MyCore-h-MyCore-cpp-1"><a href="#MyCore-h-MyCore-cpp-1" class="headerlink" title="MyCore.h / MyCore.cpp"></a>MyCore.h / MyCore.cpp</h3><p>MyCore.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYCORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYCORE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(MYCORE_LIBRARY)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> MYCORE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;guiddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> MYCORE_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* CoreDev;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoreMotorCtx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> moveSteps[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">float</span> moveSpeed[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">float</span> stopTime;</span><br><span class="line">    CoreMotorCtx()</span><br><span class="line">    &#123;</span><br><span class="line">        moveSteps[<span class="number">0</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        moveSpeed[<span class="number">0</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        stopTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">MYCORE_API CoreRetCode <span class="title">CoreMotorMove</span><span class="params">(CoreDev dev, CoreMotorCtx motorCtx)</span></span>;</span><br></pre></td></tr></table></figure></p><p>MyCore.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tbfp03.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"core.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">CVCORE_API CoreRetCode <span class="title">CoreMotorMove</span><span class="params">( CoreDev dev, CoreMotorCtx motorCtx )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( dev == <span class="literal">NULL</span> ) <span class="keyword">return</span> CoreFailed;</span><br><span class="line"></span><br><span class="line">    Core *core = (Core *)dev;</span><br><span class="line">    CoreRetCode ret = core-&gt;MotorMove(motorCtx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ret != CoreOk )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Core-h-Core-cpp-1"><a href="#Core-h-Core-cpp-1" class="headerlink" title="Core.h / Core.cpp"></a>Core.h / Core.cpp</h3><p>Core.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CORE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tbfp03.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Core</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Core();</span><br><span class="line">    </span><br><span class="line">    <span class="function">CoreRetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span></span>;</span><br><span class="line">    </span><br><span class="line">    TBFP03 tbfp03;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Core.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CoreRetCode Core::MotorMove(CoreMotorCtx motorCtx)</span><br><span class="line">&#123;</span><br><span class="line">    ControlBoard::RetCode status = tbfp03.MotorMove(motorCtx);</span><br><span class="line">    <span class="keyword">if</span>( status == ControlBoard::Failed)</span><br><span class="line">        <span class="keyword">return</span> CoreFailed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CoreOk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Controlboard-h-Controlboard-cpp-1"><a href="#Controlboard-h-Controlboard-cpp-1" class="headerlink" title="Controlboard.h / Controlboard.cpp"></a>Controlboard.h / Controlboard.cpp</h3><p>Controlboard.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONTROLBOARD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONTROLBOARD_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mycore.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlBoard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ControlBoard();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONTROLBOARD_H</span></span></span><br></pre></td></tr></table></figure></p><h3 id="TBFP03-h-TBFP03-cpp-1"><a href="#TBFP03-h-TBFP03-cpp-1" class="headerlink" title="TBFP03.h / TBFP03.cpp"></a>TBFP03.h / TBFP03.cpp</h3><p>TBFP03.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TBFP03_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TBFP03_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"controlboard.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBFP03</span>:</span> <span class="keyword">public</span> ControlBoard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TBFP03();</span><br><span class="line">    <span class="function">CoreRetCode <span class="title">MotorMove</span><span class="params">(CoreMotorCtx motorCtx)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>TBFP03.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CoreRetCode status;</span><br><span class="line">status = doSomeThing;</span><br><span class="line"><span class="keyword">if</span>(status != CoreRetCode::Ok)&#123;</span><br><span class="line">    <span class="keyword">return</span> Failed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Ok</span><br></pre></td></tr></table></figure></p><h2 id="可能遇到的問題"><a href="#可能遇到的問題" class="headerlink" title="可能遇到的問題"></a>可能遇到的問題</h2><h3 id="問題一"><a href="#問題一" class="headerlink" title="問題一"></a>問題一</h3><p>Q  Complier Error C3646的定義為unknown override specifier</p><p>A   此次的解決方法是因為a.h include “c.h”了，這時候再用b.h include “a.h”又同時include “c.h”<br>        所以發生重複導入問題，應該只要include “a.h”</p><pre><code>專業解答:循環引用在分離式編譯中，我們往往習慣將不同的類或者函數分別寫在不同的函數中，提高工作效率。但如果在使用時出現兩個類分別在兩個不同的文件中編寫，並且相互引用，則會出現循環引用，引發此錯誤。原文網址：https://read01.com/J6k0yz.html</code></pre><h3 id="問題二"><a href="#問題二" class="headerlink" title="問題二"></a>問題二</h3><p>Q     使用別的class中的enum程式不認得，例如Class A中的enum MotorID<br>        在使用時MotorID不被認得</p><p>A       因為使用其他的class中的member需要在前面表示是屬於哪個class<br>        A::MotorID這樣就OK囉!</p><h3 id="問題三"><a href="#問題三" class="headerlink" title="問題三"></a>問題三</h3><p>Q      Qml中不能使用dll中的 enum  例如:enum MotorID</p><p>A      在main.cpp中註冊 qRegisterMetaType<motorid>(“MotorID”);</motorid></p><h3 id="問題四"><a href="#問題四" class="headerlink" title="問題四"></a>問題四</h3><p>Q       找不到內部library的 .lib</p><p>A       將pro的lib路徑檢查導入正確位置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一個專案的架構編寫是非常重要的，若是架構不太好，事隔多時回來看程式碼，應該都忘光光了，所以好的架構可以讓維護更方便，並且除錯也比較快速，今天
      
    
    </summary>
    
      <category term="架構" scheme="https://teddybearfp.github.io/categories/%E6%9E%B6%E6%A7%8B/"/>
    
    
      <category term="架構" scheme="https://teddybearfp.github.io/tags/%E6%9E%B6%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cyconsole</title>
    <link href="https://teddybearfp.github.io/2019/03/11/Cyconsole/"/>
    <id>https://teddybearfp.github.io/2019/03/11/Cyconsole/</id>
    <published>2019-03-11T04:05:16.000Z</published>
    <updated>2019-03-12T11:03:31.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在研發過程中，軟硬體與韌體都非常重要，某一個的錯誤都會導致異常現象，有時候檢驗不出軟體問題的時候我們就需要檢查韌體與硬體的問題，最近認識這個工具Cyconsole，可以透過Cyconsole下指令給firmware或是硬體，可以驗證Cypress或是FPGA Code正確性，這一篇記錄一下這個我很少用到的工具</p><h2 id="Cyconsole"><a href="#Cyconsole" class="headerlink" title="Cyconsole"></a>Cyconsole</h2><h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><p>是Cypress公司釋出的軟體，可以用來下指令到底層，來驅動韌體或是硬體，<br>用來檢測，Cyconsole它的Icon如下圖<br><img src="https://i.imgur.com/D7IIMh2.png" alt=""></p><h3 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h3><p>在連結裝置後，我們開Cyconsole並點選到Misc.可以找到我們的USB連結裝置，接著點選上方Options內的Ez-USB會跳出下方第二張圖<br><img src="https://i.imgur.com/IxVzPKs.png" alt=""></p><h3 id="EZ-USB"><a href="#EZ-USB" class="headerlink" title="EZ-USB"></a>EZ-USB</h3><p><img src="https://i.imgur.com/EyO6IMn.png" alt=""></p><h4 id="逐一輸入的方式-通常是直接下給FPGA"><a href="#逐一輸入的方式-通常是直接下給FPGA" class="headerlink" title="逐一輸入的方式(通常是直接下給FPGA)"></a>逐一輸入的方式(通常是直接下給FPGA)</h4><ul><li>Req輸入request方式</li><li>Value輸入計算出來的16進制值</li><li>Index輸入位置</li></ul><p>一組一組的輸入例如:<br>第一二組輸入的value為十進制4000<br>用兩個Byte表示十六進制為FA0</p><p>第三四組輸入的value為十進制1500<br>用兩個Byte表示十六進制為5DC<br>皆輸入完成後動作</p><p>第一組(HiByte)<br>req: 0x6e<br>value: 0x000f<br>index: 0x0a<br>Vend Req</p><p>第二組(LoByte)<br>req: 0x6e<br>value: 0x00a0<br>index: 0x0b<br>Vend Req</p><p>第三組(HiByte)<br>req: 0x6e<br>value: 0x0005<br>index: 0x0c<br>Vend Req</p><p>第四組(LoByte)<br>req: 0x6e<br>value: 0x00dc<br>index: 0x0d<br>Vend Req</p><h4 id="一整組buffer傳入-通常可能是先傳給Firmware處理"><a href="#一整組buffer傳入-通常可能是先傳給Firmware處理" class="headerlink" title="一整組buffer傳入(通常可能是先傳給Firmware處理)"></a>一整組buffer傳入(通常可能是先傳給Firmware處理)</h4><ul><li>request: Firmware定義的request</li><li>Length: buffer長度</li><li>Dir: 資料的方向性</li><li>Hex Byte: 照順序輸入值</li></ul><p>跟上方的輸入的值一樣但式輸入的request不一樣<br>req: 0x50<br>length: 5<br>dir: 0<br>Hex Byte: 00 0f a0 05 dc<br>Vend Req</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在研發過程中，軟硬體與韌體都非常重要，某一個的錯誤都會導致異常現象，有時候檢驗不出軟體問題的時候我們就需要檢查韌體與硬體的問題，最近認識這個
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Cyconsole" scheme="https://teddybearfp.github.io/tags/Cyconsole/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 筆記</title>
    <link href="https://teddybearfp.github.io/2019/03/04/LeetCode/"/>
    <id>https://teddybearfp.github.io/2019/03/04/LeetCode/</id>
    <published>2019-03-04T04:05:16.000Z</published>
    <updated>2019-03-05T12:44:47.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Leetcode裡面有許多有趣的題目，在作答過程中可以腦力激盪，答題完後還可以參考大家是怎麼來解決問題的，因為會發現程式不僅功能要正確，還要考慮到Runtime與Memory的消耗，所以此篇記錄了一些不錯的解題方法</p><h2 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136_Single Number"></a>136_Single Number</h2><p>這個題目是要從一個元素皆出現兩次的整數陣列中，找尋唯一出現過一次的整數<br>下面我們利用XOR互斥的概念解析這個題目<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e: nums) a ^= e;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Runtime: 16 ms<br>Memory: 9.7MB</p><h2 id="461-Hamming-Distance"><a href="#461-Hamming-Distance" class="headerlink" title="461_Hamming Distance"></a>461_Hamming Distance</h2><p>Hamming Distance指的是將2個數字轉二進位數字後計算漢明距離<br>ex:<br>Input: 1, 4<br>0 0 0 1<br>0 1 0 0</p><p>Output: 2<br>解題辦法:我們用XOR得到兩個數的互斥值取得漢明距離<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = x ^ y;</span><br><span class="line">    <span class="keyword">int</span> hd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">1</span>) hd++;</span><br><span class="line">        i &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二元樹題型"><a href="#二元樹題型" class="headerlink" title="二元樹題型"></a>二元樹題型</h2><h3 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104_Maximum Depth of Binary Tree"></a>104_Maximum Depth of Binary Tree</h3><p>這題要求二元樹的深度<br>所謂二元樹的深度就是從 根節點(root) 到 葉節點(leaf) 的距離。 (沒有子節點的節點稱做葉節點)<br>解題關鍵遞迴呼叫maxDepth()函式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    TreeNode* tmp = root-&gt;left;</span><br><span class="line">    root-&gt;left = invertTree(root-&gt;right);</span><br><span class="line">    root-&gt;right = invertTree(tmp);</span><br><span class="line">    <span class="keyword">return</span> max(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="226-Invert-Binary-Tree"><a href="#226-Invert-Binary-Tree" class="headerlink" title="226_Invert Binary Tree"></a>226_Invert Binary Tree</h3><p>用遞迴的方式二元樹以root為中心左右反轉<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    TreeNode* right = invertTree(root-&gt;right);</span><br><span class="line">    TreeNode* left = invertTree(root-&gt;left);</span><br><span class="line">    root-&gt;left = right;</span><br><span class="line">    root-&gt;right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Leetcode裡面有許多有趣的題目，在作答過程中可以腦力激盪，答題完後還可以參考大家是怎麼來解決問題的，因為會發現程式不僅功能要正確，還要
      
    
    </summary>
    
      <category term="Note" scheme="https://teddybearfp.github.io/categories/Note/"/>
    
    
      <category term="LeetCode" scheme="https://teddybearfp.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>StateMachine 狀態機</title>
    <link href="https://teddybearfp.github.io/2019/02/26/StateMachine/"/>
    <id>https://teddybearfp.github.io/2019/02/26/StateMachine/</id>
    <published>2019-02-26T04:05:16.000Z</published>
    <updated>2019-03-24T04:00:54.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們程式越寫越大型，可呼叫的函式越來越多的時候，就應該來做函式的控管，某些時候不能呼叫某些函式，否則可能導致不可預期的結果，例如:還沒Initial控制面板，卻呼叫函式要求馬達移動，這樣會有錯誤發生。所以我們可以編寫狀態機來解決這問題。</p><h2 id="狀態機舉例"><a href="#狀態機舉例" class="headerlink" title="狀態機舉例"></a>狀態機舉例</h2><p>可以透過這一篇<a href="http://nthucad.cs.nthu.edu.tw/~yyliu/personal/nou/04ds/fsm.html" target="_blank" rel="noopener">有限狀態機 (finite state machine)</a>舉例的販賣機行為了解狀態機的控管</p><h2 id="狀態機名詞簡介"><a href="#狀態機名詞簡介" class="headerlink" title="狀態機名詞簡介"></a>狀態機名詞簡介</h2><p>狀態<br>組成狀態機器的基本單位。 狀態機器可在任何特定時間進入一種狀態。</p><p>進入動作<br>進入狀態時所執行的動作</p><p>結束動作<br>結束狀態時所執行的動作</p><p>轉換<br>兩個狀態之間的定向關係，代表狀態機器對於發生特定事件類型的完整回應。</p><p>共用轉換<br>與一個或多個轉換共用來源狀態及觸發程序的轉換，但每個轉換各有其唯一的條件和動作。</p><p>觸發程序<br>會導致轉換發生的觸發活動。</p><p>條件<br>在發生觸發之後，條件約束必須評估為 true，才能使轉換完成。</p><p>轉換動作<br>在執行特定轉換時所執行的活動。</p><p>條件轉換<br>有明確條件的轉換。</p><p>自行轉換<br>從某狀態轉換成該狀態本身的轉換。</p><p>起始狀態<br>代表狀態機器起點的狀態。</p><p>最終狀態<br>代表狀態機器完成的狀態。</p><h2 id="狀態機設定"><a href="#狀態機設定" class="headerlink" title="狀態機設定"></a>狀態機設定</h2><ul><li><p>狀態可以有 Entry 和 Exit 動作。 (設定為最終狀態的狀態只能有一個進入動作)。</p></li><li><p>所有狀態都至少要有一個轉換，但最終狀態不能有任何轉換。</p></li></ul><h2 id="QState函式"><a href="#QState函式" class="headerlink" title="QState函式"></a>QState函式</h2><p>以下舉例為在statemachine.cpp中編寫的情況<br>statemachine為單例Inst()</p><h3 id="添加狀態"><a href="#添加狀態" class="headerlink" title="添加狀態"></a>添加狀態</h3><p>addState 添加狀態</p><p>ex:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InitState stateInit;</span><br><span class="line">addState(&amp;stateInit);</span><br></pre></td></tr></table></figure></p><h3 id="添加移轉狀態"><a href="#添加移轉狀態" class="headerlink" title="添加移轉狀態"></a>添加移轉狀態</h3><p>利用 QState::addTransition做state machine間的切換</p><p>ex:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line"><span class="comment">//上面這一句表示在stateNone狀態時接收到statemachine傳出的init()信號後會將state切換到stateInit狀態</span></span><br><span class="line"></span><br><span class="line">stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( move(<span class="keyword">float</span>, <span class="keyword">float</span>)), &amp;stateMotorMove );</span><br><span class="line"><span class="comment">//上面這一句表示在stateIdle狀態時接收到statemachine傳出的move(float, float)信號後會將state切換到stateMotorMove狀態</span></span><br></pre></td></tr></table></figure></p><h3 id="連結進入狀態與錯誤狀態"><a href="#連結進入狀態與錯誤狀態" class="headerlink" title="連結進入狀態與錯誤狀態"></a>連結進入狀態與錯誤狀態</h3><p>第一句將QAbstractState的entered信號跟自己創的on_state_entered信號槽連結<br>第二句是將每個狀態添加移轉狀態到errorstate<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> StateMachine::SetupState(BaseState *state)</span><br><span class="line">&#123;</span><br><span class="line">    connect( state, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()) );</span><br><span class="line">    state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</p><h3 id="設定初始狀態"><a href="#設定初始狀態" class="headerlink" title="設定初始狀態"></a>設定初始狀態</h3><p>透過setInitialState設定初始狀態</p><p>ex:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NoneState stateNone;</span><br><span class="line">setInitialState( &amp;stateNone );</span><br></pre></td></tr></table></figure></p><h3 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h3><p>在主執行緒(gui)中執行<br>start();</p><p>可以使用QObject的moveToThread將QObject的class創另一條新開的執行緒執行</p><p>statemachine.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QThread thd;</span><br></pre></td></tr></table></figure></p><p>statemachine.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">moveToThread(&amp;thd);</span><br><span class="line">connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line">thd.start();</span><br></pre></td></tr></table></figure></p><h2 id="狀態機流程"><a href="#狀態機流程" class="headerlink" title="狀態機流程"></a>狀態機流程</h2><h3 id="創建StateMachine-Class"><a href="#創建StateMachine-Class" class="headerlink" title="創建StateMachine Class"></a>創建StateMachine Class</h3><p>StateMachine class繼承QStateMachine並使用Q_OBJECT巨集，將class設為單例模式Static</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> :</span> <span class="keyword">public</span> QStateMachine</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    StateMachine();</span><br><span class="line">    ~StateMachine();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> StateMachine *<span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;sm; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> StateMachine sm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="創建BuildGraph-函式"><a href="#創建BuildGraph-函式" class="headerlink" title="創建BuildGraph()函式"></a>創建BuildGraph()函式</h3><p>接著在cpp內創建BuildGraph()函式新增狀態addState()、新增轉移addTrasition()、connect進入後的signal與slot<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> StateMachine::BuildGraph()</span><br><span class="line">&#123;</span><br><span class="line">    addState( &amp;stateNone );</span><br><span class="line">    addState( &amp;stateInit );</span><br><span class="line">    addState( &amp;stateHome );</span><br><span class="line">    addState( &amp;stateIdle );</span><br><span class="line"></span><br><span class="line">    stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line">    statePause.addTransition( <span class="keyword">this</span>, SIGNAL(cancel()), &amp;stateIdle );</span><br><span class="line"></span><br><span class="line">    SetupState(&amp;stateNone);</span><br><span class="line">    SetupState(&amp;stateInit);</span><br><span class="line"></span><br><span class="line">    setInitialState( &amp;stateNone );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the state machine with thread</span></span><br><span class="line">    moveToThread(&amp;thd);</span><br><span class="line">    connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line"></span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), QCoreApplication::instance(), SLOT(quit()));</span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), &amp;thd, SLOT(quit()));</span><br><span class="line"></span><br><span class="line">    connect(&amp;stateMotorMove, SIGNAL(moveOk()), <span class="keyword">this</span>, SLOT(onMoveOk()));</span><br><span class="line"></span><br><span class="line">    thd.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面步驟都完成後使用moveToThread將屬於QObject的class在新開的執行緒中執行<br>最後再透過ViewChanger呼叫BuildGraph()函式讓狀態機創建、連結與執行<br>例如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StateMachine::Inst()-&gt;BuildGraph();</span><br></pre></td></tr></table></figure></p><h2 id="程式關閉處理"><a href="#程式關閉處理" class="headerlink" title="程式關閉處理"></a>程式關閉處理</h2><p>為了避免程式運作時，按右上角的X終止程式<br>我們可以在qml中更改關閉行為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onClosing&#123;</span><br><span class="line">    close.accept =<span class="literal">false</span></span><br><span class="line">    mainWindow.closing()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改由C++內的狀態機去處理<br>運用connect的方式指定某些狀態可以關閉<br>某些狀態不可關閉(ex:RunningState、MotorMove…)</p><h2 id="實作狀態機"><a href="#實作狀態機" class="headerlink" title="實作狀態機"></a>實作狀態機</h2><p><img src="https://i.imgur.com/RJgHIb4.png" alt="" title="馬達控制狀態機圖"></p><h3 id="檔案名稱簡介"><a href="#檔案名稱簡介" class="headerlink" title="檔案名稱簡介"></a>檔案名稱簡介</h3><p>StateMachine: 定義狀態機、build graph<br>BaseState: 所有狀態的基類<br>InitialState: 初始化狀態<br>HomeState: 馬達歸位狀態<br>MotorMoveState: 馬達移動狀態<br>ErrorState: 錯誤狀態<br>Uninitial: 最終狀態</p><h3 id="StateMachine"><a href="#StateMachine" class="headerlink" title="StateMachine"></a>StateMachine</h3><p>statemachine.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STATEMACHINE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATEMACHINE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/nonestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/initstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/homestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/idlestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/motormovestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/errorstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine/states/uninitstate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> :</span> <span class="keyword">public</span> QStateMachine</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    StateMachine();</span><br><span class="line">    ~StateMachine();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> StateMachine *<span class="title">Inst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &amp;sm; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildGraph</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">StopSMThread</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> StateMachine sm;</span><br><span class="line"></span><br><span class="line">    NoneState stateNone;</span><br><span class="line">    InitState stateInit;</span><br><span class="line">    HomeState stateHome;</span><br><span class="line">    IdleState stateIdle;</span><br><span class="line">    MotorMoveState stateMotorMove;</span><br><span class="line">    ErrorState stateError;</span><br><span class="line">    UninitState stateUninit;</span><br><span class="line"></span><br><span class="line">    QThread thd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch to next state by idle state</span></span><br><span class="line">    QString nextState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetupState</span><span class="params">(BaseState *state)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">//CommonState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uninit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">state_changed</span><span class="params">( QString )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MoveState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//HomeState</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">home</span><span class="params">(CoreMotorID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STATEMACHINE_H</span></span></span><br></pre></td></tr></table></figure><p>statemachine.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"statemachine.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line">StateMachine StateMachine::sm;</span><br><span class="line"></span><br><span class="line">StateMachine::StateMachine()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">StateMachine::~StateMachine()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::BuildGraph()</span><br><span class="line">&#123;</span><br><span class="line">    addState( &amp;stateNone );</span><br><span class="line">    addState( &amp;stateInit );</span><br><span class="line">    addState( &amp;stateHome );</span><br><span class="line">    addState( &amp;stateIdle );</span><br><span class="line">    addState( &amp;stateMotorMove);</span><br><span class="line">    addState( &amp;stateError );</span><br><span class="line">    addState( &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateNone.addTransition( <span class="keyword">this</span>, SIGNAL(init()), &amp;stateInit );</span><br><span class="line"></span><br><span class="line">    stateInit.addTransition( &amp;stateInit, SIGNAL(ok()), &amp;stateHome );</span><br><span class="line">    stateInit.addTransition( &amp;stateInit, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line"></span><br><span class="line">    stateHome.addTransition( &amp;stateHome, SIGNAL(ok()), &amp;stateIdle );</span><br><span class="line">    stateHome.addTransition( &amp;stateHome, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">    stateHome.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( move(<span class="keyword">float</span> , <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)), &amp;stateMotorMove );</span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( home(CoreMotorID)), &amp;stateHome );</span><br><span class="line">    stateIdle.addTransition( &amp;stateIdle, SIGNAL( error(QState *)), &amp;stateError );</span><br><span class="line">    stateIdle.addTransition( <span class="keyword">this</span>, SIGNAL( uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateMotorMove.addTransition( &amp;stateMotorMove, SIGNAL(ok()), &amp;stateIdle );</span><br><span class="line">    stateMotorMove.addTransition( &amp;stateMotorMove, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">    stateMotorMove.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    stateInit.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line">    stateError.addTransition( <span class="keyword">this</span>, SIGNAL(uninit()), &amp;stateUninit );</span><br><span class="line"></span><br><span class="line">    SetupState(&amp;stateNone);</span><br><span class="line">    SetupState(&amp;stateInit);</span><br><span class="line">    SetupState(&amp;stateHome);</span><br><span class="line">    SetupState(&amp;stateIdle);</span><br><span class="line">    SetupState(&amp;stateMotorMove);</span><br><span class="line">    SetupState(&amp;stateError);</span><br><span class="line"></span><br><span class="line">    setInitialState( &amp;stateNone );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the state machine with thread</span></span><br><span class="line">    moveToThread(&amp;thd);</span><br><span class="line">    connect( &amp;thd, SIGNAL(started()), <span class="keyword">this</span>, SLOT(start()) );</span><br><span class="line"></span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), QCoreApplication::instance(), SLOT(quit()));</span><br><span class="line">    connect(<span class="keyword">this</span>, SIGNAL(finished()), &amp;thd, SLOT(quit()));</span><br><span class="line">    </span><br><span class="line">    thd.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::SetupState(BaseState *state)</span><br><span class="line">&#123;</span><br><span class="line">    connect( state, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()) );</span><br><span class="line">    state-&gt;addTransition( state, SIGNAL(error(QState *)), &amp;stateError );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StateMachine::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    QString state = (*configuration().begin())-&gt;objectName();</span><br><span class="line">        </span><br><span class="line">    <span class="function">emit <span class="title">state_changed</span><span class="params">( state )</span></span>;</span><br><span class="line">    qDebug() &lt;&lt; state;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="BaseState"><a href="#BaseState" class="headerlink" title="BaseState"></a>BaseState</h3><p>basestate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BASESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BASESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QState&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QThread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTimer&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseState</span> :</span> <span class="keyword">public</span> QState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BaseState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">GetErrMsg</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> errMessage; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    QList&lt;QVariant&gt; arguments;</span><br><span class="line"></span><br><span class="line">    QString errMessage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">entering</span><span class="params">(QState *)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(QState *)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BASESTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>basestate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line">BaseState::BaseState(QObject *parent)</span><br><span class="line">&#123;</span><br><span class="line">    setParent(parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BaseState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    arguments.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( objectName() != <span class="string">"NoneState"</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( (*(QStateMachine::SignalEvent *)event).sender() != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">                (*(QStateMachine::SignalEvent *)event).arguments().size() &gt; <span class="number">0</span> )</span><br><span class="line">            arguments = (*(QStateMachine::SignalEvent *)event).arguments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    connect( <span class="keyword">this</span>, SIGNAL(entered()), <span class="keyword">this</span>, SLOT(on_state_entered()), Qt::UniqueConnection );</span><br><span class="line"></span><br><span class="line">    entering( <span class="keyword">this</span> );</span><br><span class="line"></span><br><span class="line">    QState::onEntry( event );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="InitialState"><a href="#InitialState" class="headerlink" title="InitialState"></a>InitialState</h3><p>initialstate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INITSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QState&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">InitState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// INITSTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>initialstate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStateMachine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"initstate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"models/db.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">InitState::InitState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"InitState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InitState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InitState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. check DB  &amp; open DB        =&gt; emit error(this ) if fail</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Open db</span></span><br><span class="line">    DB::Inst()-&gt;connectToDataBase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. check HW base board       =&gt; emit error( this ) if fail</span></span><br><span class="line"></span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;Initiate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ret != Device::Ok )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( ret == Device::CtrlboardCommError )</span><br><span class="line">        &#123;</span><br><span class="line">            errMessage = <span class="string">"Cannot initiate the Device device ("</span> + QString::number(ret).rightJustified(<span class="number">3</span>, <span class="string">'0'</span>) + <span class="string">") "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//emit error(this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="HomeState"><a href="#HomeState" class="headerlink" title="HomeState"></a>HomeState</h3><p>homestate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HOMESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HOMESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">HomeState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorsHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorXHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorYHome</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorZHome</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// HOMESTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>homestate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"homestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line">HomeState::HomeState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"HomeState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( !arguments.isEmpty() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorALL )</span><br><span class="line">            MotorsHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorX )</span><br><span class="line">            MotorXHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorY )</span><br><span class="line">            MotorYHome();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( (CoreMotorID)arguments[<span class="number">0</span>].toInt() == MotorZ )</span><br><span class="line">            MotorZHome();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MotorsHome();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorsHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorALL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorXHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorX);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorYHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HomeState::MotorZHome()</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorHome(MotorZ);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="MotorMoveState"><a href="#MotorMoveState" class="headerlink" title="MotorMoveState"></a>MotorMoveState</h3><p>motormovestate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MOTORMOVESTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOTORMOVESTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotorMoveState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MotorMoveState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MotorMove</span><span class="params">(<span class="keyword">float</span> motorXDis, <span class="keyword">float</span> motorYDis, <span class="keyword">float</span> motorZDis,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">float</span> motorXSpeed, <span class="keyword">float</span> motorYSpeed, <span class="keyword">float</span> motorZSpeed)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MOTORMOVESTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>motormovestate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"motormovestate.h"</span></span></span><br><span class="line"></span><br><span class="line">MotorMoveState::MotorMoveState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"MotorMoveState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    MotorMove(arguments[<span class="number">0</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">1</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">2</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">3</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">4</span>].toFloat(),</span><br><span class="line">              arguments[<span class="number">5</span>].toFloat());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MotorMoveState::MotorMove(<span class="keyword">float</span> motorXDis, <span class="keyword">float</span> motorYDis, <span class="keyword">float</span> motorZDis,<span class="keyword">float</span> motorXSpeed, <span class="keyword">float</span> motorYSpeed, <span class="keyword">float</span> motorZSpeed)</span><br><span class="line">&#123;</span><br><span class="line">    Device::RetCode ret = Device::Inst()-&gt;MotorMove(motorXDis,motorYDis,motorZDis,motorXSpeed,motorYSpeed,motorZSpeed);</span><br><span class="line">    <span class="keyword">if</span>(ret != Device::RetCode::Ok)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">emit <span class="title">error</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">emit <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ErrorState"><a href="#ErrorState" class="headerlink" title="ErrorState"></a>ErrorState</h3><p>errorstate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ERRORSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERRORSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"basestate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorState</span> :</span> <span class="keyword">public</span> BaseState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ErrorState</span><span class="params">(QObject *parent = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">BaseState *<span class="title">GetErrorState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    BaseState *errState;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ok</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_state_entered</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ERRORSTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>errorstate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"errorstate.h"</span></span></span><br><span class="line"></span><br><span class="line">ErrorState::ErrorState(QObject *parent) : BaseState(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"ErrorState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ErrorState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    BaseState::onEntry(event);</span><br><span class="line"></span><br><span class="line">    errState = qvariant_cast&lt;BaseState *&gt;(arguments[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ErrorState::on_state_entered()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"InitialState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"HomeState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(errState-&gt;objectName() == <span class="string">"MotorMoveState"</span>)</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">        </span><br><span class="line">    emit ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BaseState *ErrorState::GetErrorState()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> errState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="UninitialState"><a href="#UninitialState" class="headerlink" title="UninitialState"></a>UninitialState</h3><p>uninitialstate.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNINITSTATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNINITSTATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFinalState&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UninitState</span> :</span> <span class="keyword">public</span> QFinalState</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">UninitState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// UNINITSTATE_H</span></span></span><br></pre></td></tr></table></figure></p><p>uninitialstate.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uninitstate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"models/db.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../models/device.h"</span></span></span><br><span class="line">UninitState::UninitState()</span><br><span class="line">&#123;</span><br><span class="line">    setObjectName(<span class="string">"UninitState"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> UninitState::onEntry(QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. close DB</span></span><br><span class="line">    DB::Inst()-&gt;closeDataBase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. uniniate HW base board</span></span><br><span class="line">    Device::Inst()-&gt;Uninitate();</span><br><span class="line"></span><br><span class="line">    QFinalState::onEntry(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://docs.microsoft.com/zh-tw/dotnet/framework/windows-workflow-foundation/state-machine-workflows" target="_blank" rel="noopener">狀態機器工作流程</a><br><a href="https://www.itread01.com/content/1548857553.html" target="_blank" rel="noopener">Qt圖元，場景，檢視，狀態機，狀態轉移，動畫設定等的示列（備忘）</a><br><a href="http://sevensavants.blogspot.com/2015/02/2015-02-11-qt-animation.html" target="_blank" rel="noopener">竹林七賢-2015-02-11-Qt-Animation</a><br><a href="https://pyqt4doc.appspot.com/qstate.html" target="_blank" rel="noopener">QState Class Reference</a><br><a href="https://pyqt4doc.appspot.com/qstatemachine.html#configuration" target="_blank" rel="noopener">QStateMachine Class Reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;當我們程式越寫越大型，可呼叫的函式越來越多的時候，就應該來做函式的控管，某些時候不能呼叫某些函式，否則可能導致不可預期的結果，例如:還沒In
      
    
    </summary>
    
      <category term="架構" scheme="https://teddybearfp.github.io/categories/%E6%9E%B6%E6%A7%8B/"/>
    
    
      <category term="StateMachine" scheme="https://teddybearfp.github.io/tags/StateMachine/"/>
    
  </entry>
  
  <entry>
    <title>Signal &amp; Slot</title>
    <link href="https://teddybearfp.github.io/2019/02/23/Signal-Slot/"/>
    <id>https://teddybearfp.github.io/2019/02/23/Signal-Slot/</id>
    <published>2019-02-23T04:05:16.000Z</published>
    <updated>2019-03-24T04:33:58.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這次編寫State Machine的時候遇到一個問題，如果先呼叫QState的函式再呼叫主執行緒的函式，得到的結果會是主執行緒得先完成跟預期順序不一致，因為QState本身也是一條執行緒所以導致這結果，所以我們運用Signal跟Slot機制傳遞事件完成信號，讓主執行緒知道QState內的函式完成函式內容了</p><h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><h3 id="檔案簡介"><a href="#檔案簡介" class="headerlink" title="檔案簡介"></a>檔案簡介</h3><p>A檔案: 狀態機某狀態(ex: Class MotorMoveState)<br>B檔案: 狀態機(Static) (Class StateMachine)<br>C檔案: UI介面cpp (Class FunctionTester)</p><h3 id="錯誤實例"><a href="#錯誤實例" class="headerlink" title="錯誤實例"></a>錯誤實例</h3><p>在C檔案中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> FunctionTester::MotorMove(<span class="keyword">float</span> steps, <span class="keyword">float</span> speed)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> xPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> yPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> zPosition = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    StateMachine::Inst()-&gt;move(steps, speed); <span class="comment">//move為StateMachine內的Signal, prototype為move(float, float);</span></span><br><span class="line">    GetMotorsPosition(&amp;xPosition, &amp;yPosition, &amp;zPosition);</span><br><span class="line">    </span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"xPosition:"</span>&lt;&lt;xPosition;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"yPosition:"</span>&lt;&lt;yPosition;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"zPosition:"</span>&lt;&lt;zPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上程式碼原本期許是馬達移動完後，將三組int記憶體位置傳下去，收到時會得到x,y,z的位置。<br>但是因為StateMachine的編寫是QState透過另一條執行緒達成的，所以會在馬達移動的同時繼續往下執行，先執行了取得馬達位置GetMotorsPosition(int*, int*, int*)，這樣取得的位置都會是上一次馬達移動完成後的位置，如上x,y,z第一次執行時會得到0,0,0</p><h2 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h2><p>我們要馬達移動完成後，數據自動更新的辦法就是要用，Signal跟Slot，這樣即使StateMachine自身為一條執行緒依舊會在完成時告訴我們上層UI.cpp完成事件</p><h3 id="Signal-amp-Slot"><a href="#Signal-amp-Slot" class="headerlink" title="Signal &amp; Slot"></a>Signal &amp; Slot</h3><p>Qt管理的物件必須繼承QObject類別，以提供Qt物件的Meta訊息，若要實作Signal與Slot機制，則必須包括Q_OBJECT巨集，moc會處理Qt的C++擴充（Meta-Object System），使用moc讀取C++標頭檔案，若發現類別定義中包括Q_OBJECT巨集，就會產生Qt meta-object相關的C++程式碼。</p><ul><li><p>一個Signal可以多次使用connect函式與多個Slot連結,但是Signal送出後這些Slot不能保證接收到的順序,但都會執行一次</p></li><li><p>多個Signal可以連結同一個Slot</p></li><li><p>Signal皆為void型態所以不能回傳值，只能放在參數中傳遞</p></li></ul><p>Signal與Slot的簽名是對應的，若Signal帶有參數，則對應的Slot也要帶有參數。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">valueChanged</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>Signal命名: 過去式動詞(ex: captured)<br>Slot命名: on大寫開頭的signal(ex:onCaptured)</p><h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>傳接球的概念</p><p>connect(恰恰, SIGNAL(丟球), 大師兄, SLOT(接球));</p><p>恰恰丟球給大師兄接到後再作後續處理</p><p>接球 {<br>    對接到的球做處理;<br>    }</p><h4 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h4><p>有connect就要disconnect才不會讓記憶體釋放的時候有異常</p><p>disconnect(恰恰, SIGNAL(丟球), 大師兄, SLOT(接球));</p><h4 id="簡易傳遞"><a href="#簡易傳遞" class="headerlink" title="簡易傳遞"></a>簡易傳遞</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span><span class="keyword">public</span> QObject <span class="comment">//Qt管理的物件必須繼承QObject類別</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//必須包括Q_OBJECT巨集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A();</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">received</span><span class="params">()</span></span>; <span class="comment">//負責送出</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">emit <span class="title">received</span><span class="params">()</span></span>; <span class="comment">//建構子完成時送出信號</span></span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="comment">//B.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"A.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> QObject <span class="comment">//Qt管理的物件必須繼承QObject類別</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT <span class="comment">//必須包括Q_OBJECT巨集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onReceived</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.cpp</span></span><br><span class="line">B::B()</span><br><span class="line">&#123;</span><br><span class="line">    connect(&amp;a,SIGNAL(received()),<span class="keyword">this</span>,SLOT(onReceived()), Qt::DirectConnection);  <span class="comment">//DirectConnection指的是用同一條執行緒執行完才繼續</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> B::onReceived() &#123;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Received!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解決辦法實作"><a href="#解決辦法實作" class="headerlink" title="解決辦法實作"></a>解決辦法實作</h3><p>使用signal跟slot讓QState完成時得到通知<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.h</span></span><br><span class="line">signal:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">movedOk</span><span class="params">()</span></span>;</span><br><span class="line">A.cpp    </span><br><span class="line">    function &#123;</span><br><span class="line">        <span class="comment">//完成時</span></span><br><span class="line">        <span class="function">emit <span class="title">movedOk</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.h</span></span><br><span class="line">signal:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">positionChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onMovedOk</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B.cpp    </span></span><br><span class="line">    <span class="comment">//build graph內部寫 (創狀態機時)</span></span><br><span class="line">    connect(&amp;A, movedOk(), <span class="keyword">this</span>, OnMovedOk());</span><br><span class="line">    <span class="keyword">void</span> B::onMovedOk &#123;</span><br><span class="line">        <span class="function">emit <span class="title">positionChanged</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.h</span></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPositionChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.cpp    </span></span><br><span class="line">    C::C &#123;</span><br><span class="line">        connect(B::Inst(), positionChanged(), <span class="keyword">this</span>, onPositionChanged()); </span><br><span class="line">        <span class="comment">//特別注意B::Inst()本身就為記憶體位置所以不用加上&amp;</span></span><br><span class="line">    &#125;</span><br><span class="line">    C::~C &#123;</span><br><span class="line">        disconnect(B::Inst(), positionChanged(), <span class="keyword">this</span>, onPositionChanged()); </span><br><span class="line">        <span class="comment">//要刪除否則會記憶體有問題</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> C::onPositionChanged &#123;</span><br><span class="line">        <span class="comment">//收到完成狀態 </span></span><br><span class="line">        dosomething;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p><a href="https://openhome.cc/Gossip/Qt4Gossip/CustomSignalSlot.html" target="_blank" rel="noopener">自訂Signal 與Slot - OpenHome.cc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這次編寫State Machine的時候遇到一個問題，如果先呼叫QState的函式再呼叫主執行緒的函式，得到的結果會是主執行緒得先完成跟預期
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Signal" scheme="https://teddybearfp.github.io/tags/Signal/"/>
    
      <category term="Slot" scheme="https://teddybearfp.github.io/tags/Slot/"/>
    
  </entry>
  
</feed>
