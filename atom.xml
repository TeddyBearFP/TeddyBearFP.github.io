<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泰迪熊的程式足跡</title>
  
  <subtitle>遊走程式森林的泰迪熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teddybearfp.github.io/"/>
  <updated>2019-11-04T13:56:44.707Z</updated>
  <id>https://teddybearfp.github.io/</id>
  
  <author>
    <name>G.C.L.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QImage memory buffer 操作</title>
    <link href="https://teddybearfp.github.io/2019/11/04/QImage-memory-buffer-%E6%93%8D%E4%BD%9C/"/>
    <id>https://teddybearfp.github.io/2019/11/04/QImage-memory-buffer-操作/</id>
    <published>2019-11-04T03:05:16.000Z</published>
    <updated>2019-11-04T13:56:44.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QImage-memory-buffer-操作"><a href="#QImage-memory-buffer-操作" class="headerlink" title="QImage memory buffer 操作"></a>QImage memory buffer 操作</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>QImage 讀取圖片後，將其轉換成 memory buffer 進行顏色操作與計算每個 bit 的數值，這一篇我會記錄一些比較常用到的 memory buffer 處理，例如: QImage 讀取圖片後轉成 memory buffer，單通道轉三通道，與 resize 成不同大小的圖</p><h2 id="讀取單張圖片至-memory-buffer"><a href="#讀取單張圖片至-memory-buffer" class="headerlink" title="讀取單張圖片至 memory buffer"></a>讀取單張圖片至 memory buffer</h2><p>運用 QImage 的函式讀取 128 張 寬512 <em> 高128 的灰階(單通道)圖片，並存到 memory buffer ( unsigned char </em> ) 中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">QImage img = QImage( <span class="number">512</span>, <span class="number">128</span>, QImage::Format_Grayscale8 );</span><br><span class="line"><span class="comment">//將 imgBuf 指向 img 的記憶體起始位置, 這樣對 imgBuf 操作即是對 img 操作</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* imgBuf = img.bits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//高</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;   <span class="comment">//寬</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">512</span>; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//將整張圖變成白色</span></span><br><span class="line">        imgBuf[ i * <span class="number">512</span> + j ] = <span class="number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存取圖片驗證是不是變成純白色的圖</span></span><br><span class="line">img.save(<span class="string">"image.jpg"</span>,<span class="string">"JPG"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="讀取多張圖片至-memory-buffer"><a href="#讀取多張圖片至-memory-buffer" class="headerlink" title="讀取多張圖片至 memory buffer"></a>讀取多張圖片至 memory buffer</h2><p>運用 QImage 的函式讀取 128 張 寬512 <em> 高512 的灰階(單通道)圖片，並存到 memory buffer ( unsigned char </em> ) </p><p>QFileDialog 用法可以參考我的另一篇文章 <a href="https://teddybearfp.github.io/2019/08/21/Qt-FileDialog/#more">QFileDialog</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//宣告一個 512 * 512 單通道的 QImage img </span></span><br><span class="line">QImage img = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_Grayscale8 );</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* src = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">512</span> * <span class="number">512</span> * <span class="number">128</span> ];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* ptr = src;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//path 為絕對路徑或是 QFileDialog 讀取到的值</span></span><br><span class="line">    img.load( path + QString::number( i ) + <span class="string">".jpg"</span>, <span class="string">"JPG"</span> );</span><br><span class="line">    <span class="comment">//一張一張圖片拷貝到記憶體位置中</span></span><br><span class="line">    <span class="built_in">memcpy</span>( ptr, img.bits(), img.sizeInBytes() );</span><br><span class="line">    <span class="comment">//位移一張灰階圖的大小,若三通道圖則需要位移 512 * 512 * 3</span></span><br><span class="line">    ptr += <span class="number">512</span> * <span class="number">512</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用完後記得 delete</span></span><br><span class="line"><span class="keyword">if</span> ( ptr != <span class="literal">nullptr</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//ptr指向空指標即可</span></span><br><span class="line">    ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( src != <span class="literal">nullptr</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] src;</span><br><span class="line">    src = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="操作灰階-單通道-圖片-memory-buffer"><a href="#操作灰階-單通道-圖片-memory-buffer" class="headerlink" title="操作灰階(單通道)圖片 memory buffer"></a>操作灰階(單通道)圖片 memory buffer</h2><p>灰階(單通道) 寬512 高128 的圖片操作, 這邊操作除了整張圖變白外, 順便記錄正規化( Normalization ) value 是將原本 memory buffer 中數值區間對應到另一個數值區間中, 例如: 原本 memory buffer 中值是 10 ~ 200 透過正規化讓它變成 0 ~ 255 區間, 這可以看我的另一篇文章 <a href="https://teddybearfp.github.io/2019/01/08/normalize/">標準化(Normalization)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">512</span>; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//整張圖變白</span></span><br><span class="line">        <span class="comment">//src[ i * 512 + j ] = value;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Normalization value</span></span><br><span class="line">        <span class="keyword">double</span> value = targetMin + ( (<span class="keyword">float</span>) ( ( src[ i * <span class="number">512</span> + j ] - originMin ) / (<span class="keyword">float</span>) diff ) * ( targetMax - targetMin ) );</span><br><span class="line">        src[ i * <span class="number">512</span> + j ] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="單通道轉三通道"><a href="#單通道轉三通道" class="headerlink" title="單通道轉三通道"></a>單通道轉三通道</h2><p>讀取位元深度為 8 的灰階圖( 單通道 ), 將其轉換成位元深度 24 的彩色圖( 三通道 ), 這邊要注意的是單通道轉三通道, stride 會變 3 倍</p><p>單通道: stride = width<br>三通道: stride = width * 3</p><p>單通道: dataLength = width <em> height<br>三通道: dataLength = width </em> 3 * height</p><p>這邊舉例:<br>單通道 memory buffer<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *src = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ width * height ]</span><br></pre></td></tr></table></figure></p><p>三通道 memory buffer<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一種</span></span><br><span class="line">QImage colorImg = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888 );</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *dst = colorImg.bits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二種</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *dst = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ width * <span class="number">3</span> * height ]</span><br></pre></td></tr></table></figure></p><p>進行轉換</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = src[ i * width + j];</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] =src[ i * width + j];</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] =src[ i * width + j]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雖然完成圖片長一樣但是已經變成三通道以 RGB 存放的圖片了,可以進行後續操作</p><h2 id="單通道轉三通道-Mapping-to-Jet"><a href="#單通道轉三通道-Mapping-to-Jet" class="headerlink" title="單通道轉三通道 ( Mapping to Jet )"></a>單通道轉三通道 ( Mapping to Jet )</h2><p>這邊所謂的 Jet 是 MatlabJet 一種由 藍 -&gt; 綠 -&gt; 紅的色彩映射, 詳細做法可以看我的另一篇文章<a href="https://teddybearfp.github.io/2019/10/14/Color-mapping-Matlab-Jet/">Color mapping (Matlab Jet)</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        v = src[ i * width + j ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> dv;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//vmin, vmax 表示 Jet 上下限,可以用參數傳入例如: vmin:0 ,vmax;255</span></span><br><span class="line">        <span class="keyword">if</span> ( v &lt; vmin )</span><br><span class="line">            v = vmin;</span><br><span class="line">        <span class="keyword">if</span> ( v &gt; vmax )</span><br><span class="line">            v = vmax;</span><br><span class="line">        dv = vmax - vmin;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.125</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = ( <span class="number">0.5</span> + ( v - vmin ) * ( ( <span class="number">1</span> - <span class="number">0.5</span> ) / ( <span class="number">0.125</span> * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.375</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = ( ( v - ( dv * <span class="number">0.125</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.375</span> - <span class="number">0.125</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.625</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = ( ( v - ( dv * <span class="number">0.375</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.625</span> - <span class="number">0.375</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = ( <span class="number">1</span> - ( v - ( dv * <span class="number">0.375</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.625</span> - <span class="number">0.375</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.875</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = ( <span class="number">1</span> - ( v - ( dv * <span class="number">0.625</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.875</span> - <span class="number">0.625</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = ( <span class="number">1</span> - ( v - dv * <span class="number">0.875</span> - vmin ) * ( <span class="number">0.5</span> / ( ( <span class="number">1</span> - <span class="number">0.875</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;QImage-memory-buffer-操作&quot;&gt;&lt;a href=&quot;#QImage-memory-buffer-操作&quot; class=&quot;headerlink&quot; title=&quot;QImage memory buffer 操作&quot;&gt;&lt;/a&gt;QImage memory buf
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QImage" scheme="https://teddybearfp.github.io/tags/QImage/"/>
    
  </entry>
  
  <entry>
    <title>Python 打造我的第二隻專屬 LineBot</title>
    <link href="https://teddybearfp.github.io/2019/10/22/Python-%E6%89%93%E9%80%A0%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E9%9A%BB-LineBot/"/>
    <id>https://teddybearfp.github.io/2019/10/22/Python-打造我的第二隻-LineBot/</id>
    <published>2019-10-22T07:05:16.000Z</published>
    <updated>2019-10-23T13:49:25.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-打造我的第二隻專屬-LineBot"><a href="#Python-打造我的第二隻專屬-LineBot" class="headerlink" title="Python 打造我的第二隻專屬 LineBot"></a>Python 打造我的第二隻專屬 LineBot</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的第一個 <a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">LineBot 泰迪熊</a> 已經運作一年多了，最近 M 學長想要有一隻可以在公司揪團購的時候能用的機器人，這題材我覺得蠻有趣的，想說順便整理先前的做法並作一些改善，同時記錄製做過程，所以決定再創造一隻機器人</p><h2 id="LineBot"><a href="#LineBot" class="headerlink" title="LineBot"></a>LineBot</h2><p>LineBot 因不需安裝程式，可直接在 Line 上進行操作，若是僅提供些訊息的話是比 app 來的更方便快速的，給親朋好友使用也只需分享好友資料並可開始使用，所以也是個不錯的開發方式</p><h2 id="我的第一隻-LineBot-泰迪熊"><a href="#我的第一隻-LineBot-泰迪熊" class="headerlink" title="我的第一隻 LineBot 泰迪熊"></a>我的第一隻 LineBot 泰迪熊</h2><p>在我先前的文章有記錄我的第一個 <a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">LineBot 泰迪熊</a> </p><p>主要功能有以下幾個</p><ol><li>快速輸入面板</li><li>取得天氣資訊</li><li>取得將各大版 PTT 的 Top 15 文章，直接幫你篩選熱門文章節省時間</li><li>取得即時新聞內容</li><li>取得現正熱映電影與電影評分</li><li>推薦附近好吃的餐廳與小吃並得到評分與距離</li><li>聊天功能</li><li>圖戰功能</li><li>關鍵字搜尋功能</li></ol><h2 id="第二隻-LineBot-泰迪熊-Super"><a href="#第二隻-LineBot-泰迪熊-Super" class="headerlink" title="第二隻 LineBot 泰迪熊 Super"></a>第二隻 LineBot 泰迪熊 Super</h2><p>目前第二隻 LineBot 的定位，會是功能較簡單，利於之後重新定位或是擴充的角色，命名方式是以七龍珠的內的命名法則為參考</p><p>主要功能暫定有以下幾個</p><ol><li>呈現菜單</li><li>紀錄大家要點什麼餐點</li><li>呈現大家要點的餐點內容</li></ol><h2 id="創建-LineBot"><a href="#創建-LineBot" class="headerlink" title="創建 LineBot"></a>創建 LineBot</h2><h3 id="申請-Line-帳號"><a href="#申請-Line-帳號" class="headerlink" title="申請 Line 帳號"></a>申請 Line 帳號</h3><p>第一步是先申請 Line 帳號，或用自己的 Line 帳號，才可以創建 LineBot </p><h3 id="LINE-Develop"><a href="#LINE-Develop" class="headerlink" title="LINE Develop"></a>LINE Develop</h3><h4 id="創建頻道"><a href="#創建頻道" class="headerlink" title="創建頻道"></a>創建頻道</h4><p><a href="https://developers.line.biz/en/" target="_blank" rel="noopener">LINE Develop</a> 中登入 Line 帳號後會看到此頁面<br>選擇 Provider List 看到現有頻道</p><p><img src="https://i.imgur.com/lD7kLQD.png" alt=""></p><p>選擇 Create new Channel ，如果要製做 LineBot 請選 Message API</p><p><img src="https://i.imgur.com/C5k8vaO.png" alt=""></p><p>接著填寫 LineBot 基本資料，信箱、概述等等，填寫完畢後送出並同意 Line 相關規章</p><p>完成後會看到 Provider List 新增了剛剛創建的 LineBot</p><p><img src="https://i.imgur.com/9o73ACv.png" alt=""></p><h4 id="允許-webhook-傳訊"><a href="#允許-webhook-傳訊" class="headerlink" title="允許 webhook 傳訊"></a>允許 webhook 傳訊</h4><p>點選剛剛創建的 LineBot 會看到該機器人的設置內容，將 webhook enabled 並儲存</p><p><img src="https://i.imgur.com/NHhhuMr.png" alt=""></p><h4 id="取得-Channel-secret、Channel-access-token"><a href="#取得-Channel-secret、Channel-access-token" class="headerlink" title="取得 Channel secret、Channel access token"></a>取得 Channel secret、Channel access token</h4><p>這邊最重要的事情就是取得 Channel secret 跟 Channel access token</p><p>Channel secret</p><p><img src="https://i.imgur.com/nNUUEl0.png" alt=""></p><p>若 Channel access token 是空的，則按右邊 Issue 產生</p><p><img src="https://i.imgur.com/Ot4Qd67.png" alt=""></p><p>到時候將這兩個值貼在程式碼中</p><pre><code>Channel_Access_Token = YOUR_CHANNEL_SECRETChannel_Secret = YOUR_CHANNEL_SECRET</code></pre><h3 id="LINE-Official-Account-Manager"><a href="#LINE-Official-Account-Manager" class="headerlink" title="LINE Official Account Manager"></a>LINE Official Account Manager</h3><p>接著我們到 <a href="https://manager.line.biz" target="_blank" rel="noopener">LINE Official Account Manager</a> 對泰迪熊 Super 進行更詳細的設定</p><h4 id="帳號設定頁面"><a href="#帳號設定頁面" class="headerlink" title="帳號設定頁面"></a>帳號設定頁面</h4><p><img src="https://i.imgur.com/Flx16BJ.png" alt=""></p><p>勾選 接受邀請加入群組或多人聊天室 讓泰迪熊 Super 能變群組機器人<br><img src="https://i.imgur.com/hY8gZn4.png" alt=""></p><h4 id="回應設定頁面"><a href="#回應設定頁面" class="headerlink" title="回應設定頁面"></a>回應設定頁面</h4><p>可以設置一些基本問後語句，可以在這邊將罐頭訊息關閉</p><p><img src="https://i.imgur.com/J0hw0Ez.png" alt=""></p><h2 id="部屬-LineBot"><a href="#部屬-LineBot" class="headerlink" title="部屬 LineBot"></a>部屬 LineBot</h2><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><p>設定完一些基本資料與行為後，要將 LineBot 部屬到 Heroku 上運行， 首先要先申辦 Heroku 帳號</p><h4 id="heroku-cli"><a href="#heroku-cli" class="headerlink" title="heroku-cli"></a>heroku-cli</h4><p>有了帳號後下載 <a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noopener">heroku-cli</a></p><p>注意: Heroku CLI 需要 Git 環境需先安裝完成後再安裝 CLI<br>The Heroku CLI requires Git, the popular version control system. If you don’t already have Git installed, complete the following before installing the CLI:</p><p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener">Git installation</a><br><a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup" target="_blank" rel="noopener">First-time Git setup</a></p><h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><p>Git 與 Heroku CLI 安裝完成後，開啟命令提示字元 command line 切換到 linebot 的資料夾並輸入以下指令</p><p>1.登入 Heroku</p><pre><code>heroku login</code></pre><p>輸入 heroku 帳號密碼登入成功會寫 Logged in as “你的信箱” 如下圖</p><p><img src="https://i.imgur.com/PlTUdWl.png" alt=""></p><p>2.創建.git資料夾(初始化 git)<br>僅在第一次使用時要輸入</p><pre><code>git config --global user.name &quot;你的名字&quot;git config --global user.email 你的信箱git init</code></pre><p><img src="https://i.imgur.com/uylQ6lp.png" alt=""></p><p>可以到該層看是否創建 .git 資料夾</p><p>3.與 Heroku 連線</p><pre><code>heroku git:remote -a HEROKU_APP名稱</code></pre><p><img src="https://i.imgur.com/C66dMoq.png" alt=""></p><p>4.偵測變更 與 commit 與 push<br>注意1: git add .中的這個.需要與 add 空一格<br>注意2: 建置時 buildpackages 可以選擇語言 例如: 選擇Python<br><img src="https://i.imgur.com/FL4Wjxc.png" alt=""></p><pre><code>git add .git commit -m &quot;此次變更說明&quot;git push heroku master</code></pre><p>成功部屬後，會在 Heroku app 的 overview 中看到 build successed</p><p><img src="https://i.imgur.com/KyzN5FP.png" alt=""></p><p>以上四步驟指令可以在 web app 裡的 deploy 看到</p><p><img src="https://i.imgur.com/bBQIxsE.png" alt=""></p><p>之後有任何變更要套用僅需第一步驟登入 heroku 與第三步驟連線 heroku 並且反覆執行第四步驟即可更新</p><h4 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h4><p>除了 cmd 指令方式還可以用 git gui 方式上傳程式碼，部屬到 Heroku 上面，我用的是 <a href="https://www.sourcetreeapp.com" target="_blank" rel="noopener">Sourcetree</a> 整體使用上算是容易上手且頁面簡潔，如果覺得用 cmd 部屬太困難那麼就用有使用者介面的 git gui 方式吧</p><h2 id="Webhook-URL"><a href="#Webhook-URL" class="headerlink" title="Webhook URL"></a>Webhook URL</h2><p>最後要把之前尚未填寫的 Webhook URL 給補上，這個值會是你的 Heroku 部屬完成後的網址加上/callback</p><p>例如: 我部屬完成 Heroku ，在 Heroku 主頁右上角 Open app 得到剛剛部屬完成的位置 <a href="https://superteddybearbot.herokuapp.com" target="_blank" rel="noopener">https://superteddybearbot.herokuapp.com</a><br>那麼我們的 Webhook URL 即是 <a href="https://superteddybearbot.herokuapp.com/callback" target="_blank" rel="noopener">https://superteddybearbot.herokuapp.com/callback</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.oxxostudio.tw/articles/201701/line-bot.html" target="_blank" rel="noopener">LINE BOT 實戰 (原理篇)</a><br><a href="https://github.com/twtrubiks/line-bot-tutorial" target="_blank" rel="noopener">twtrubiks/line-bot-tutorial - GitHub</a><br><a href="https://yaoandy107.github.io/line-bot-tutorial/" target="_blank" rel="noopener">LineBot+Python，輕鬆建立聊天機器人</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-打造我的第二隻專屬-LineBot&quot;&gt;&lt;a href=&quot;#Python-打造我的第二隻專屬-LineBot&quot; class=&quot;headerlink&quot; title=&quot;Python 打造我的第二隻專屬 LineBot&quot;&gt;&lt;/a&gt;Python 打造我的第二隻
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="LineBot" scheme="https://teddybearfp.github.io/tags/LineBot/"/>
    
  </entry>
  
  <entry>
    <title>Qt 求圓邊上的極座標位置</title>
    <link href="https://teddybearfp.github.io/2019/10/19/%E6%B1%82%E5%9C%93%E7%9A%84%E6%A5%B5%E5%BA%A7%E6%A8%99%E4%BD%8D%E7%BD%AE/"/>
    <id>https://teddybearfp.github.io/2019/10/19/求圓的極座標位置/</id>
    <published>2019-10-19T07:05:16.000Z</published>
    <updated>2019-10-21T12:07:47.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-求圓邊上的極座標位置"><a href="#Qt-求圓邊上的極座標位置" class="headerlink" title="Qt 求圓邊上的極座標位置"></a>Qt 求圓邊上的極座標位置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要將一個圓的邊分為幾個點，可以用極座標的方式去取得每個點的 (X , Y) 值</p><h2 id="直角坐標轉極座標"><a href="#直角坐標轉極座標" class="headerlink" title="直角坐標轉極座標"></a>直角坐標轉極座標</h2><p>直角坐標點 ( x , y ) 轉為極座標點為 ( r cos(θ), r sin(θ) )</p><p>x = r cos(θ), y = r sin(θ) 其中 r 為圓的半徑, θ 是角度</p><p>例如: 在原點為 ( 0 , 0 ), 半徑為 100 的圓型中取得角度為 45°<br>那麼我們會得到該點座標為 ( 100 <em> cos( 45° ), 100 </em> sin( 45° ) ) = ( 100 <em> 0.7071 , 100  </em> 0.7071 ) = ( 71 , 71 )</p><p><img src="https://i.imgur.com/X8hllOn.png" alt=""></p><h2 id="將圓上的邊分為幾個點實作"><a href="#將圓上的邊分為幾個點實作" class="headerlink" title="將圓上的邊分為幾個點實作"></a>將圓上的邊分為幾個點實作</h2><p>來實作直角坐標轉極座標算法，將圓上的邊分為特定點數 (例如:一百個點)<br>首先我們先用 Qt 畫一個 512 * 512 的圓，並在圓上找到 100 個座標點繞一圈，那麼要找一百個點的話，表示 θ 每次增加量為 360 / 100 = 3.6°</p><p>完成圖如下:</p><p><img src="https://i.imgur.com/BArDoUu.png" alt=""></p><p>我們這邊用 QPainter 來實現並將其製作成 qml item 以利後續延伸</p><h3 id="PolarCoordinates-h"><a href="#PolarCoordinates-h" class="headerlink" title="PolarCoordinates.h"></a>PolarCoordinates.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> POLARCOORDINATES_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POLARCOORDINATES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickPaintedItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolarCoordinates</span> :</span> <span class="keyword">public</span> QQuickPaintedItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( <span class="keyword">int</span> number READ number WRITE setNumber NOTIFY numberChanged )</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    PolarCoordinates();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">( QPainter *painter )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNumber</span><span class="params">( <span class="keyword">int</span> number )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_number;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawPolarCoordinates</span><span class="params">( QPainter *painter )</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">numberChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// POLARCOORDINATES_H</span></span></span><br></pre></td></tr></table></figure><h3 id="PolarCoordinates-cpp"><a href="#PolarCoordinates-cpp" class="headerlink" title="PolarCoordinates.cpp"></a>PolarCoordinates.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"polarcoordinates.h"</span></span></span><br><span class="line"></span><br><span class="line">PolarCoordinates::PolarCoordinates()</span><br><span class="line">&#123;</span><br><span class="line">    m_number = <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::paint( QPainter *painter )</span><br><span class="line">&#123;</span><br><span class="line">    painter-&gt;setPen( QPen( Qt::black, <span class="number">1</span> ) );</span><br><span class="line">    <span class="function">QRectF <span class="title">rectangle1</span><span class="params">( <span class="number">0.0</span>, <span class="number">0.0</span>, width() - <span class="number">1</span>, height() - <span class="number">1</span> )</span></span>;</span><br><span class="line">    painter-&gt;drawEllipse( rectangle1 ); <span class="comment">//畫直徑為512的圓</span></span><br><span class="line"></span><br><span class="line">    drawPolarCoordinates( painter );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::drawPolarCoordinates( QPainter *painter )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> degree = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> radius = width() / <span class="number">2</span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">center</span><span class="params">( width() / <span class="number">2</span>, height() / <span class="number">2</span> )</span></span>; <span class="comment">//Center of mind</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_number; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        degree += <span class="number">360.0</span> / m_number;</span><br><span class="line">        painter-&gt;setPen( QPen( Qt::red, <span class="number">5</span> ) );</span><br><span class="line">        <span class="comment">// find the m_number Polar coordinates in the width, height circle.</span></span><br><span class="line">        painter-&gt;drawPoint( QPointF( radius * <span class="built_in">cos</span>( degree ) + center.x(), radius * <span class="built_in">sin</span>( degree ) + center.y() ) );</span><br><span class="line"></span><br><span class="line">        painter-&gt;setPen( QPen( Qt::green, <span class="number">5</span> ) );</span><br><span class="line">        <span class="comment">// find the m_number Polar coordinates in the width, height/ 4 circle.</span></span><br><span class="line">        painter-&gt;drawPoint( QPointF( ( radius / <span class="number">2</span> ) * <span class="built_in">cos</span>( degree ) + center.x(), ( ( radius / <span class="number">2</span> ) * <span class="built_in">sin</span>( degree ) + center.y() ) / <span class="number">4</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PolarCoordinates::number()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::setNumber( <span class="keyword">int</span> number )</span><br><span class="line">&#123;</span><br><span class="line">    m_number = number;</span><br><span class="line">    update();</span><br><span class="line">    <span class="function">emit <span class="title">numberChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.12</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">600</span></span><br><span class="line">    height: <span class="number">600</span></span><br><span class="line">    title: qsTr(<span class="string">"Polar Coordinates"</span>)</span><br><span class="line">    PolarCoordinates</span><br><span class="line">    &#123;</span><br><span class="line">        anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        anchors.verticalCenter: parent.verticalCenter</span><br><span class="line">        width: <span class="number">512</span></span><br><span class="line">        height: <span class="number">512</span></span><br><span class="line">        number: <span class="number">100</span> <span class="comment">//可以指定要分為幾個點</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成!<br><img src="https://i.imgur.com/O2Un1jf.png" alt=""></p><h2 id="補充-角度與弧度"><a href="#補充-角度與弧度" class="headerlink" title="補充 ( 角度與弧度 )"></a>補充 ( 角度與弧度 )</h2><p>在 C 標準函式庫中 sin 與 cos 三角函數相關的函式是使用弧度 ( radian ) 而非角度</p><pre><code>double sin(double x);回傳值: 為 x 弧度(弳度)的 sine 值參數: 需傳弧度，以弧度表示角度的值，一弧度等於 180 / PI 度。sin ( radian ), cos ( radian )</code></pre><p>一個完整的圓的弧度是 2 π ，所以 2 π * radian = 360°</p><p>π <em> radian = 180°, 1° = (π / 180) </em> radian , 1 radian = 180° / π</p><p>由此可知: </p><pre><code>radian = (π / 180) * degreedegree = (180 / π) * radian</code></pre><p>例如: 求 30 度的 sin 值，則必須將 30 度轉為弧度 radian = 30 * ( 3.1415 / 180 )</p><pre><code>sin ( 30 * ( 3.1415 / 180 ) ) = 0.5</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-求圓邊上的極座標位置&quot;&gt;&lt;a href=&quot;#Qt-求圓邊上的極座標位置&quot; class=&quot;headerlink&quot; title=&quot;Qt 求圓邊上的極座標位置&quot;&gt;&lt;/a&gt;Qt 求圓邊上的極座標位置&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="QPainter" scheme="https://teddybearfp.github.io/tags/QPainter/"/>
    
      <category term="極座標" scheme="https://teddybearfp.github.io/tags/%E6%A5%B5%E5%BA%A7%E6%A8%99/"/>
    
      <category term="QQuickPaintedItem" scheme="https://teddybearfp.github.io/tags/QQuickPaintedItem/"/>
    
  </entry>
  
  <entry>
    <title>Color mapping ( Matlab Jet )</title>
    <link href="https://teddybearfp.github.io/2019/10/14/Color-mapping-Matlab-Jet/"/>
    <id>https://teddybearfp.github.io/2019/10/14/Color-mapping-Matlab-Jet/</id>
    <published>2019-10-14T07:05:16.000Z</published>
    <updated>2019-10-15T14:14:40.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Color-mapping-Matlab-Jet-in-Qt"><a href="#Color-mapping-Matlab-Jet-in-Qt" class="headerlink" title="Color mapping ( Matlab Jet ) in Qt"></a>Color mapping ( Matlab Jet ) in Qt</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天記錄最近編寫的小工具( ColorMappingJet )，將灰階重新分布為色彩空間( Matlab Jet )，顏色映射( Color mapping )是將一個圖像的顏色映射到另一個圖像的顏色的功能。顏色映射可以被稱為導致映射函數的算法或者變換圖像顏色的算法。</p><h2 id="Matlab-Jet"><a href="#Matlab-Jet" class="headerlink" title="Matlab Jet"></a>Matlab Jet</h2><p>這是種顏色映射的算法，是將灰階值放到 Jet 上進行顏色映射( Color mapping )，值由小到大從深藍到綠到深紅</p><p>如下圖:</p><p><img src="https://i.imgur.com/gUzSwAv.png" alt=""></p><p>下圖是截取自 <a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">Origins of Colormaps</a> 網站講解的 Jet 映射原理</p><p><img src="https://i.imgur.com/7Dzl98j.png" alt="圖1"></p><p>主要是在 1/8 , 3/8 , 5/8 , 7/8 這幾個位置進行顏色轉折</p><h2 id="Color-mapping-in-Qt"><a href="#Color-mapping-in-Qt" class="headerlink" title="Color mapping in Qt"></a>Color mapping in Qt</h2><p>我編寫的小工具 ( ColorMappingJet ) 是可以輸入任意上下限的灰階值再透過 Slider 調整當下數值，讓下方的方型進行顏色映射</p><p>上下限不一定要是0 ~ 255 或是 -1 ~ 1<br>可以是 0 ~ 300 或是 123 ~ 777</p><p>例如:<br>下限為 0</p><p><img src="https://i.imgur.com/rB75nGX.png" alt=""></p><p>上限為 300<br><img src="https://i.imgur.com/v87ITRr.png" alt=""></p><p>那麼我們要怎麼將灰階值轉換成三通道( RGB )值?</p><p>我的做法是將輸入的灰階值做顏色映射，將單通道的灰階值轉成三通道<br>由深藍色 -&gt; 藍色 -&gt;綠色 -&gt; 紅色 -&gt; 深紅色</p><pre><code>Slider 控制單通道灰階值 valueif value 在小於 0.125 時: 紅色通道值為 0 ， 綠色通道值為 0 ， 藍色通道值的增加，從 0.5 加到 1else if value 在小於 0.375 時: 紅色通道值為 0 ， 綠色通道值的增加，從 0 加到 1 ， 藍色通道值維持 1else ifvalue 在小於 0.625 時: 紅色通道值的增加，從 0 加到 1 ， 綠色通道值維持 1 ， 藍色通道值則從 1 減至 0else ifvalue 在小於 0.875 時: 紅色通道維持 1 ， 綠色通道值則從 1 減至 0 ， 藍色通道值為 0else其他 value: 紅色通道值則從 1 減至 0.5 ， 綠色通道值為 0 ， 藍色通道值為 0</code></pre><p>運算出來的數值存取至 Q_PROPERTY 的 QColor 中傳遞給 qml<br>透過以上方法就完成啦!</p><p><img src="https://i.imgur.com/FTi7JMC.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">Origins of Colormaps</a></p><p><a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">圖1 來源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Color-mapping-Matlab-Jet-in-Qt&quot;&gt;&lt;a href=&quot;#Color-mapping-Matlab-Jet-in-Qt&quot; class=&quot;headerlink&quot; title=&quot;Color mapping ( Matlab Jet ) in 
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Color mapping" scheme="https://teddybearfp.github.io/tags/Color-mapping/"/>
    
  </entry>
  
  <entry>
    <title>Qml Loader 載入器應用</title>
    <link href="https://teddybearfp.github.io/2019/10/02/Qml-Loader-%E8%BC%89%E5%85%A5%E5%99%A8%E6%87%89%E7%94%A8/"/>
    <id>https://teddybearfp.github.io/2019/10/02/Qml-Loader-載入器應用/</id>
    <published>2019-10-02T07:05:16.000Z</published>
    <updated>2019-10-02T14:43:53.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qml-Loader-載入器應用"><a href="#Qml-Loader-載入器應用" class="headerlink" title="Qml Loader 載入器應用"></a>Qml Loader 載入器應用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天來記錄一下 qml 中經常使用到的 Loader 元件</p><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>載入器是用來動態載入 qml 中的元件</p><p>載入頁面 - 可以用 source property 載入 qml 頁面 ( Qml file )<br>載入元件 - 或是用 sourceComponent property 元件 ( Component ) </p><p>透過 Loader 元件還可以解決頁面載入時某些元件尚未使用就搭載會錯誤的問題<br>例如:某個顯示元件需要在使用者選定圖片後，將圖片去做處理並顯示，那麼如果包在Component中的話，<br>一進入該頁面就會找不到顯示內容，透過 Loader 可以在選擇後，載入該顯示內容</p><h2 id="載入頁面"><a href="#載入頁面" class="headerlink" title="載入頁面"></a>載入頁面</h2><p>可以用 source property 載入 qml 頁面</p><h3 id="不帶參數載入頁面"><a href="#不帶參數載入頁面" class="headerlink" title="不帶參數載入頁面"></a>不帶參數載入頁面</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    Loader &#123; id: pageLoader &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: pageLoader.source = <span class="string">"Page1.qml"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="帶參數載入頁面"><a href="#帶參數載入頁面" class="headerlink" title="帶參數載入頁面"></a>帶參數載入頁面</h3><p>這邊要注意的部分是透過 setSource 所傳遞的參數會在載入新頁面完成後，才將值傳遞過去，所以頁面與元件載入優先於收到值，要非常注意這個先後順序</p><p>Sender.qml<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    Loader &#123; id: pageLoader &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: pageLoader.setSource(<span class="string">"qrc:/Receiver.qml"</span>,  &#123;<span class="string">"src"</span>: volumeRendering.object, <span class="string">"loaderActive"</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="comment">//Receiver.qml 頁面中需要對應的 Property 例如: Property var src 與 Property alias loaderActive: loader.active 存放</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面強調的 setSource 優先順序問題來看看大概是怎個情形吧<br>如果有元件是需要傳遞過來的值才能順利載入頁面，但是值還未被傳遞完成，元件卻先被載入，出現異常</p><p>例如:以下程式碼 Sender.qml 透過 setSource 方式載入 Receiver.qml 頁面並傳遞 src 值，<br>此時因 ImageImport 需有 source 做相對應計算後顯示，但是尚未有數值，頁面卻先搭載，導致錯誤</p><p>Receiver.qml 錯誤範例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    id: root</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    property var src</span><br><span class="line">    property alias loaderActive: loader.active</span><br><span class="line">    </span><br><span class="line">    Viewer &#123;</span><br><span class="line">        anchors.fill: parent;</span><br><span class="line">        ImageImport &#123;</span><br><span class="line">            source: root.src</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="載入元件"><a href="#載入元件" class="headerlink" title="載入元件"></a>載入元件</h2><p>那麼我們該如何解決以上問題呢</p><p>可以透過 Loader 讓元件延遲載入，將需要延遲的元件包在 Component 之中<br>此處必須注意的是 Component 最外層僅能一個主要元件( 可以一層一層被包在內 )，不能最外層兩個以上元件</p><p>Receiver.qml 正確範例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    id: root</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    property var src <span class="comment">//先將值存取至 src 需要時提取</span></span><br><span class="line">    property alias loaderActive: loader.active <span class="comment">//先將值存取至 loaderActive 需要時提取</span></span><br><span class="line">    property <span class="keyword">int</span> xValue: sliderX.value <span class="comment">//榜定 sliderX.value 值</span></span><br><span class="line">    </span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">        asynchronous: <span class="literal">true</span></span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        width: <span class="number">512</span></span><br><span class="line">        height: <span class="number">500</span></span><br><span class="line">        active: <span class="literal">false</span> <span class="comment">//頁面載入時，不會搭載此元件，直到頁面載入完成後，接收到 setSource 來的值 src 內容與 loaderActive : true 才搭載</span></span><br><span class="line">        sourceComponent: component <span class="comment">//設置 Component 元件</span></span><br><span class="line">    &#125;</span><br><span class="line">    Component &#123;</span><br><span class="line">        id: component    </span><br><span class="line">        Viewer &#123;</span><br><span class="line">            anchors.fill: parent;</span><br><span class="line">            <span class="function">function <span class="title">crop</span><span class="params">()</span> </span>&#123; <span class="comment">//搭載後才能認到 mapper 所以不能直接被使用，需透過函式</span></span><br><span class="line">                mapper.setCroppingRegionPlanes(<span class="number">0</span>,xValue,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            Mapper &#123;</span><br><span class="line">                id: mapper</span><br><span class="line">                ImageImport &#123;</span><br><span class="line">                    source: root.src <span class="comment">//接收來自於 Sender.qml 的 volumeRendering.object</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Slider &#123;</span><br><span class="line">        id: sliderX</span><br><span class="line">        from:<span class="number">0</span></span><br><span class="line">        value: <span class="number">511</span></span><br><span class="line">        to:<span class="number">511</span></span><br><span class="line">        stepSize: <span class="number">1</span></span><br><span class="line">        onValueChanged: loader.item.crop() </span><br><span class="line">        <span class="comment">//因載入完成第一時間並不曉得 mapper 所以必須使用 loader 的 item ( 指的是 sourceComponent 對象 ) 的函式 Crop()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qml-Loader-載入器應用&quot;&gt;&lt;a href=&quot;#Qml-Loader-載入器應用&quot; class=&quot;headerlink&quot; title=&quot;Qml Loader 載入器應用&quot;&gt;&lt;/a&gt;Qml Loader 載入器應用&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Loader" scheme="https://teddybearfp.github.io/tags/Loader/"/>
    
  </entry>
  
  <entry>
    <title>Qt 如何在 qml 中使用 C++ Enum</title>
    <link href="https://teddybearfp.github.io/2019/10/02/Qt-%E5%A6%82%E4%BD%95%E5%9C%A8-qml-%E4%B8%AD%E4%BD%BF%E7%94%A8-C-Enum/"/>
    <id>https://teddybearfp.github.io/2019/10/02/Qt-如何在-qml-中使用-C-Enum/</id>
    <published>2019-10-02T03:05:16.000Z</published>
    <updated>2019-10-02T14:43:38.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-如何在-qml-中使用-C-Enum"><a href="#Qt-如何在-qml-中使用-C-Enum" class="headerlink" title="Qt 如何在 qml 中使用 C++ Enum"></a>Qt 如何在 qml 中使用 C++ Enum</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果要在 qml 中使用列舉，qml 中是不認得列舉型別的並需先註冊才可以讓 qml 端操作 C++ 的列舉，這邊來記錄一下該如何在 qml 中使用 C++ 的列舉</p><h2 id="列舉"><a href="#列舉" class="headerlink" title="列舉"></a>列舉</h2><p>列舉是一種複合型別，是一個被命名的整型常數的集合，適合用來歸納能分類成一組列舉的值與利於型別檢查，那麼什麼是適合分類成一組列舉的值，例如在日常生活中很常見的表示星期的 SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY 就是一個列舉或是 東、西、南、北。</p><h2 id="TB-C-enum-in-qml-實作"><a href="#TB-C-enum-in-qml-實作" class="headerlink" title="TB C++ enum in qml 實作"></a>TB C++ enum in qml 實作</h2><p>要在 qml 中使用 C++ 的 enum 要先註冊讓 qml 認得該資料型態，這邊我們記錄一下以星期為列舉範例</p><h3 id="步驟一-創建類別"><a href="#步驟一-創建類別" class="headerlink" title="步驟一 創建類別"></a>步驟一 創建類別</h3><p>創建一個類別繼承 QObject 或是 QObject 子類別( 例如: QQuickItem 必須添加 Q_OBJECT 巨集 )</p><h3 id="步驟二-創建列舉"><a href="#步驟二-創建列舉" class="headerlink" title="步驟二 創建列舉"></a>步驟二 創建列舉</h3><p>創建一個 enum 並加上 Q_ENUM( YourEnumNameHere ) 標籤並在私有封裝中加上</p><pre><code>QMetaEnum metaEnumWeek = QMetaEnum::fromType&lt;TeddyBearFP::Week&gt;();</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEDDYBEARFP_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEDDYBEARFP_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//步驟一</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeddyBearFP</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟二</span></span><br><span class="line">    <span class="keyword">enum</span> Week</span><br><span class="line">    &#123;</span><br><span class="line">        SUNDAY = <span class="number">7</span>,</span><br><span class="line">        MONDAY = <span class="number">1</span>,</span><br><span class="line">        TUESDAY = <span class="number">2</span>,</span><br><span class="line">        WEDNESDAY = <span class="number">3</span>,</span><br><span class="line">        THURSDAY = <span class="number">4</span>,</span><br><span class="line">        FRIDAY = <span class="number">5</span>,</span><br><span class="line">        SATURDAY = <span class="number">6</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM( Week )</span><br><span class="line"></span><br><span class="line">    TeddyBearFP();</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE QString <span class="title">enumValueKey_Week</span><span class="params">( Week week )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QMetaEnum metaEnumWeek = QMetaEnum::fromType&lt;TeddyBearFP::Week&gt;();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TEDDYBEARFP_H</span></span></span><br></pre></td></tr></table></figure><h3 id="步驟三-註冊類別"><a href="#步驟三-註冊類別" class="headerlink" title="步驟三 註冊類別"></a>步驟三 註冊類別</h3><p>在 main.cpp 中註冊類別讓 qml 可以使用</p><pre><code>qmlRegisterType&lt;TeddyBearFP&gt;( &quot;teddyBearFP&quot;, 1, 0, &quot;TeddyBearFP&quot; );</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tb2.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟三 註冊類別</span></span><br><span class="line">    qmlRegisterType&lt;TeddyBearFP&gt;( <span class="string">"teddyBearFP"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"TeddyBearFP"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟五 註冊另一個類別與列舉</span></span><br><span class="line">    qmlRegisterType&lt;TB2&gt;( <span class="string">"tb2"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"TB2"</span> );</span><br><span class="line">    qRegisterMetaType&lt;TeddyBearFP::Week&gt;();</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    engine.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line">    <span class="keyword">if</span> ( engine.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步驟四-導入類別使用列舉"><a href="#步驟四-導入類別使用列舉" class="headerlink" title="步驟四 導入類別使用列舉"></a>步驟四 導入類別使用列舉</h3><p>在我們導入註冊成功的的類別後，在這一個步驟中，已經可以使用該類別的列舉內容了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> teddyBearFP <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">TeddyBearFP &#123;</span><br><span class="line">    Column</span><br><span class="line">    &#123;</span><br><span class="line">        width: parent.width</span><br><span class="line">        spacing: <span class="number">2</span></span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"Week Name: "</span> + enumValueKey_Week(TeddyBearFP.SUNDAY);</span><br><span class="line">        &#125;</span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"Week Value: "</span> + TeddyBearFP.SUNDAY.toString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步驟五-註冊列舉"><a href="#步驟五-註冊列舉" class="headerlink" title="步驟五 註冊列舉"></a>步驟五 註冊列舉</h3><p>如果你想要在其他類別中使用該列舉那麼必須在 main.cpp 中註冊它</p><pre><code>qRegisterMetaType&lt;TeddyBearFP::Week&gt;();</code></pre><p>註冊完成後便可以在另一個類別中使用</p><h4 id="h-cpp"><a href="#h-cpp" class="headerlink" title=".h / .cpp"></a>.h / .cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TB2</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TB2();</span><br><span class="line">    <span class="function">Q_INVOKABLE QString <span class="title">test</span><span class="params">( TeddyBearFP::Week week )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tb2.h"</span></span></span><br><span class="line"></span><br><span class="line">TB2::TB2()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QString TB2::test( TeddyBearFP::Week week )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( week == TeddyBearFP::MONDAY )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MONDAY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( week == TeddyBearFP::FRIDAY )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FRIDAY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Others"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="qml"><a href="#qml" class="headerlink" title="qml"></a>qml</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> tb2 <span class="number">1.0</span></span><br><span class="line">TB2 &#123;</span><br><span class="line">    Column &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        anchors.topMargin: <span class="number">5</span></span><br><span class="line">        anchors.leftMargin: <span class="number">5</span></span><br><span class="line">        spacing: <span class="number">20</span></span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"TB2"</span></span><br><span class="line">        &#125;</span><br><span class="line">        Column</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            spacing: <span class="number">2</span></span><br><span class="line">            Text</span><br><span class="line">            &#123;</span><br><span class="line">                width: parent.width</span><br><span class="line">                font.pixelSize : <span class="number">16</span></span><br><span class="line">                text:<span class="string">"Week Name: "</span> + test(TeddyBearFP.FRIDAY);</span><br><span class="line">            &#125;</span><br><span class="line">            Text</span><br><span class="line">            &#123;</span><br><span class="line">                width: parent.width</span><br><span class="line">                font.pixelSize : <span class="number">16</span></span><br><span class="line">                text:<span class="string">"Week Value: "</span> + TeddyBearFP.FRIDAY.toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成-查看數值"><a href="#完成-查看數值" class="headerlink" title="完成 查看數值"></a>完成 查看數值</h3><p><img src="https://i.imgur.com/RMTfnvy.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>公司 M 學長的資料分享</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-如何在-qml-中使用-C-Enum&quot;&gt;&lt;a href=&quot;#Qt-如何在-qml-中使用-C-Enum&quot; class=&quot;headerlink&quot; title=&quot;Qt 如何在 qml 中使用 C++ Enum&quot;&gt;&lt;/a&gt;Qt 如何在 qml 中使用 C++ En
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Enum" scheme="https://teddybearfp.github.io/tags/Enum/"/>
    
  </entry>
  
  <entry>
    <title>Qt CreateMutex 確保應用程式不會被重複執行</title>
    <link href="https://teddybearfp.github.io/2019/10/01/Qt-CreateMutex-%E7%A2%BA%E4%BF%9D%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E4%B8%8D%E6%9C%83%E8%A2%AB%E9%87%8D%E8%A4%87%E5%9F%B7%E8%A1%8C/"/>
    <id>https://teddybearfp.github.io/2019/10/01/Qt-CreateMutex-確保應用程式不會被重複執行/</id>
    <published>2019-10-01T03:05:16.000Z</published>
    <updated>2019-10-02T14:43:24.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-CreateMutex-確保應用程式不會被重複執行"><a href="#Qt-CreateMutex-確保應用程式不會被重複執行" class="headerlink" title="Qt CreateMutex 確保應用程式不會被重複執行"></a>Qt CreateMutex 確保應用程式不會被重複執行</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>編寫好一個應用程式要避免該程式被重複開啟，那麼我這邊紀錄的方式是用 CreateMutex 解決不會有多個行程去使用到同一個資源的問題，其運作方式會等一個行程用完資源後換下一個行程使用，而不會有相互衝突的問題</p><h2 id="CreateMutex-用法"><a href="#CreateMutex-用法" class="headerlink" title="CreateMutex 用法"></a>CreateMutex 用法</h2><p>CreateMutex()函式可以用來創建一個有指定名稱或無指定名稱的互斥對象</p><p>如果執行成功，就會返回互斥對象的 handle ，回傳零則表示有誤<br>若是返回有效的 handle 但是已經有指定名稱的，那麼 GetLastError 會得到 ERROR_ALREADY_EXISTS 已經存在的錯誤</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE <span class="title">CreateMutexA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpMutexAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bInitialOwner, <span class="comment">//初始化互斥對象的擁有者</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName <span class="comment">//指向互斥對象的指標</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Handle hMutex = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二個參數，TRUE表示建立佔有Mutex使用權，FALSE表示建立者不佔有Mutex使用權</span></span><br><span class="line">hMutex = CreateMutex(<span class="literal">NULL</span>,FALSE,<span class="string">"MyMutex"</span>); <span class="comment">//建立Mutex</span></span><br><span class="line">WaitForSingleObject(hMutex, <span class="number">500</span>); <span class="comment">//取得Mutex使用權限並等待使用被釋放</span></span><br><span class="line"><span class="comment">//等待函式完成通常要給個 Timeout ms時間，特殊情況下才給 INFINITE 直到被手動釋放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//......Critical section protected code here(臨界區間) 這區塊的資源不會有同時被使用問題</span></span><br><span class="line"></span><br><span class="line">ReleaseMutex(hMutex); <span class="comment">//釋放使用使用權，讓其他執行續或行程進入critical section</span></span><br></pre></td></tr></table></figure><h2 id="實作-CreateMutex-確保應用程式不會被重複執行實作"><a href="#實作-CreateMutex-確保應用程式不會被重複執行實作" class="headerlink" title="實作 CreateMutex 確保應用程式不會被重複執行實作"></a>實作 CreateMutex 確保應用程式不會被重複執行實作</h2><p>了解 CreateMutex 用法的話，我們可以運用創建互斥鎖時指定名稱不重複的特性，達到確保應用程式唯一。</p><p>我們可以在應用程式一開啟的時候，創建一個 Mutex 指定應用程式名稱，並用 GetLastError 判斷是否 ERROR_ALREADY_EXISTS 若新創建成功則正常開啟應用程式，否則關閉該 handle 並把指標指向 NULL 最後回傳 FALSE 讓程式關閉不會繼續執行</p><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkUnique</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 創建 handleMutex 並設指定名稱</span></span><br><span class="line">    HANDLE m_hMutex = CreateMutex( <span class="literal">NULL</span>, FALSE, <span class="string">L"TeddyBearFP"</span> );</span><br><span class="line">    <span class="comment">// 檢查錯誤代碼</span></span><br><span class="line">    <span class="keyword">if</span> ( GetLastError() == ERROR_ALREADY_EXISTS )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果已有mutex存在則釋放 handle Mutex 並初始handle Mutex 指標位址</span></span><br><span class="line">        CloseHandle( m_hMutex );</span><br><span class="line">        m_hMutex = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 程式退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    <span class="keyword">if</span> ( !checkUnique() ) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 離開程式</span></span><br><span class="line">    engine.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( engine.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程式碼完成後，可以用以下方式驗證</p><p>開啟應用程式，接著開啟工作管理員看是否能找到該應用程式，順利找到該應用程式後，再重複開啟應用程式，會看到該應用程式在工作管理員中出現並快速關閉，實現檔案唯一的管控，這樣就成功拉!</p><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>CreateMutex 方式創建 critical section 臨界區間亦可以讓多行程的多執行檔對單一動態連結檔(DLL) 進行操作存取而不會互相衝突</p><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p><a href="http://white5168.blogspot.com/2013/03/createmutex.html#.XZNjC0YzY2w" target="_blank" rel="noopener">CreateMutex建立多線程互斥機制—解決行程 … - iInfo 資訊交流</a><br><a href="https://baike.baidu.com/item/CreateMutex" target="_blank" rel="noopener">CreateMutex_百度百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-CreateMutex-確保應用程式不會被重複執行&quot;&gt;&lt;a href=&quot;#Qt-CreateMutex-確保應用程式不會被重複執行&quot; class=&quot;headerlink&quot; title=&quot;Qt CreateMutex 確保應用程式不會被重複執行&quot;&gt;&lt;/a&gt;Qt
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="CreateMutex" scheme="https://teddybearfp.github.io/tags/CreateMutex/"/>
    
  </entry>
  
  <entry>
    <title>C++ 與 qml 透過 Q_PROPERTY 資料傳遞</title>
    <link href="https://teddybearfp.github.io/2019/09/27/C-%E8%88%87-qml-%E9%80%8F%E9%81%8E-Q-PROPERTY-%E8%B3%87%E6%96%99%E5%82%B3%E9%81%9E/"/>
    <id>https://teddybearfp.github.io/2019/09/27/C-與-qml-透過-Q-PROPERTY-資料傳遞/</id>
    <published>2019-09-27T03:05:16.000Z</published>
    <updated>2019-10-01T14:10:40.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-與-qml-透過-Q-PROPERTY-資料傳遞"><a href="#C-與-qml-透過-Q-PROPERTY-資料傳遞" class="headerlink" title="C++ 與 qml 透過 Q_PROPERTY 資料傳遞"></a>C++ 與 qml 透過 Q_PROPERTY 資料傳遞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有個資料流需求，需將資料由 sender.qml 呼叫 C++ 端的函式處理成 unsigned char* 型態送至另一個 receiver.qml 再由 receiver.qml 傳送至它的 C++ 端做資料處理，那麼如何讓指標在 C++ 與 qml 中傳送，此篇主要記錄 Q_PROPERTY 如何傳遞 QObject </p><h2 id="註冊型態"><a href="#註冊型態" class="headerlink" title="註冊型態"></a>註冊型態</h2><p>使用 QObject 的 SetProperty 時若傳送的變數型態是qml中不認得的需先註冊，這樣才能讓它們的值保存在QVariant中<br>例如: unsigned char<em><br>QVariant 是不能存放 unsigned char</em> 的 </p><p>需要註冊的有兩個地方<br>第一個地方是使用到的 class 標頭檔<br>第二個地方是 main.cpp</p><p>以下範例為註冊 unsigned char*</p><h3 id="標頭檔註冊"><a href="#標頭檔註冊" class="headerlink" title="標頭檔註冊"></a>標頭檔註冊</h3><p>需在該 class .h 檔中註冊型態<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span> * )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolumeRendering</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    VolumeRendering();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qRegisterMetaType&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span> *&gt;( <span class="string">"unsigned char *"</span> );</span><br></pre></td></tr></table></figure><h2 id="範例程式"><a href="#範例程式" class="headerlink" title="範例程式"></a>範例程式</h2><p>這邊我編寫sender與receiver記錄一下這資料流</p><p>sender會將資料 unsigned char* 與 int 透過 Q_PROPERTY 的方式以變數型態 QObject 傳遞給 receiver</p><p>receiver則會以 Q_PROPERTY 方式接收並印出 unsigned char* 記憶體位置證實是同一個記憶體位置表示成功接收</p><h3 id="資料流圖解"><a href="#資料流圖解" class="headerlink" title="資料流圖解"></a>資料流圖解</h3><p><img src="https://i.imgur.com/EwMEbjC.jpg" alt=""></p><h3 id="sender-h"><a href="#sender-h" class="headerlink" title="sender.h"></a>sender.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SENDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SENDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span> * )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( QObject *object READ object WRITE setObject NOTIFY objectChanged )</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sender();</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">sendObject</span><span class="params">( <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> number )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObject</span><span class="params">( QObject *object )</span></span>;</span><br><span class="line">    <span class="function">QObject *<span class="title">object</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QObject *m_Object;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">objectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SENDER_H</span></span></span><br></pre></td></tr></table></figure><h3 id="sender-cpp"><a href="#sender-cpp" class="headerlink" title="sender.cpp"></a>sender.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"></span><br><span class="line">Sender::Sender()</span><br><span class="line">&#123;</span><br><span class="line">    m_Object = <span class="keyword">new</span> QObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Sender::sendObject( <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> number )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* buf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">3</span> ];</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender buf:"</span> &lt;&lt; buf;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender width:"</span> &lt;&lt; width;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender height:"</span> &lt;&lt; height;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender number:"</span> &lt;&lt; number &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"src"</span>, QVariant::fromValue( buf ) );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"width"</span>, width );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"height"</span>, height );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"number"</span>, number );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Sender::setObject( QObject* object )</span><br><span class="line">&#123;</span><br><span class="line">    m_Object = object;</span><br><span class="line">    <span class="function">emit <span class="title">objectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QObject* Sender::object()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sender-qml"><a href="#sender-qml" class="headerlink" title="sender.qml"></a>sender.qml</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> teddybear.Sender <span class="number">1.0</span></span><br><span class="line">Sender &#123;</span><br><span class="line">    id: sender</span><br><span class="line">    Button &#123;</span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.topMargin: <span class="number">50</span></span><br><span class="line">        anchors.left: parent.left</span><br><span class="line">        anchors.leftMargin: <span class="number">50</span></span><br><span class="line">        width: <span class="number">200</span></span><br><span class="line">        height: <span class="number">180</span></span><br><span class="line">        text: <span class="string">"Send QObject"</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            sender.sendObject(<span class="number">512</span>,<span class="number">512</span>,<span class="number">8</span>)</span><br><span class="line">            loader.setSource(<span class="string">"qrc:/receiver.qml"</span>, &#123;<span class="string">"object"</span>: sender.object&#125; )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="receiver-h"><a href="#receiver-h" class="headerlink" title="receiver.h"></a>receiver.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RECEIVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECEIVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( QObject *receivedObject READ receivedObject WRITE setReceivedObject NOTIFY receivedObjectChanged )</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Receiver();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setReceivedObject</span><span class="params">( QObject *receivedObject )</span></span>;</span><br><span class="line">    <span class="function">QObject *<span class="title">receivedObject</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QObject *m_ReceivedObject;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receivedObjectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// RECEIVER_H</span></span></span><br></pre></td></tr></table></figure><h3 id="receiver-cpp"><a href="#receiver-cpp" class="headerlink" title="receiver.cpp"></a>receiver.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span>* )</span><br><span class="line">Receiver::Receiver()</span><br><span class="line">&#123;</span><br><span class="line">    m_ReceivedObject = <span class="keyword">new</span> QObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Receiver::setReceivedObject( QObject* receivedObject )</span><br><span class="line">&#123;</span><br><span class="line">    m_ReceivedObject = receivedObject;</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received buf: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"src"</span> ).value&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received width: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"width"</span> ).toInt();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received height: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"height"</span> ).toInt();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received number: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"number"</span> ).toInt() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">receivedObjectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QObject* Receiver::receivedObject()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_ReceivedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="receiver-qml"><a href="#receiver-qml" class="headerlink" title="receiver.qml"></a>receiver.qml</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> teddybear.Receiver <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">Receiver &#123;</span><br><span class="line">    id: receiver</span><br><span class="line">    property var object</span><br><span class="line"></span><br><span class="line">    receivedObject: object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line"></span><br><span class="line">    qmlRegisterType&lt;Sender&gt;( <span class="string">"teddybear.Sender"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"Sender"</span> );</span><br><span class="line">    qmlRegisterType&lt;Receiver&gt;( <span class="string">"teddybear.Receiver"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"Receiver"</span> );</span><br><span class="line">    qRegisterMetaType&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span> *&gt;( <span class="string">"unsigned char *"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> QUrl <span class="title">url</span><span class="params">( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) )</span></span>;</span><br><span class="line">    QObject::connect(</span><br><span class="line">        &amp;engine, &amp;QQmlApplicationEngine::objectCreated,</span><br><span class="line">        &amp;app, [url]( QObject *obj, <span class="keyword">const</span> QUrl &amp;objUrl ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !obj &amp;&amp; url == objUrl )</span><br><span class="line">                QCoreApplication::<span class="built_in">exit</span>( <span class="number">-1</span> );</span><br><span class="line">        &#125;,</span><br><span class="line">        Qt::QueuedConnection );</span><br><span class="line">    engine.load( url );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.12</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">800</span></span><br><span class="line">    height: <span class="number">800</span></span><br><span class="line">    title: qsTr(<span class="string">"Q_PROPERTY dataflow"</span>)</span><br><span class="line">    Component.onCompleted: loader.setSource(<span class="string">"qrc:/sender.qml"</span>)</span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="驗證成果"><a href="#驗證成果" class="headerlink" title="驗證成果"></a>驗證成果</h3><p><img src="https://i.imgur.com/hyB7o4n.png" alt=""></p><p>成功傳遞與接收拉!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-與-qml-透過-Q-PROPERTY-資料傳遞&quot;&gt;&lt;a href=&quot;#C-與-qml-透過-Q-PROPERTY-資料傳遞&quot; class=&quot;headerlink&quot; title=&quot;C++ 與 qml 透過 Q_PROPERTY 資料傳遞&quot;&gt;&lt;/a&gt;C++ 與 
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="QObject" scheme="https://teddybearfp.github.io/tags/QObject/"/>
    
      <category term="Q_PROPERTY" scheme="https://teddybearfp.github.io/tags/Q-PROPERTY/"/>
    
      <category term="setProperty" scheme="https://teddybearfp.github.io/tags/setProperty/"/>
    
  </entry>
  
  <entry>
    <title>Python 查詢 IP 位址是多少</title>
    <link href="https://teddybearfp.github.io/2019/09/23/Python-%E6%9F%A5%E8%A9%A2-IP-%E4%BD%8D%E5%9D%80%E6%98%AF%E5%A4%9A%E5%B0%91/"/>
    <id>https://teddybearfp.github.io/2019/09/23/Python-查詢-IP-位址是多少/</id>
    <published>2019-09-23T13:05:16.000Z</published>
    <updated>2019-09-23T15:26:02.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們想知道自己當下電腦使用的網路 IP 位址是多少 ( 連結到的WIFI網路或是有線網路 ) ，常見的IP位址分為IPv4與IPv6兩大類</p><h2 id="取得-IP-位址"><a href="#取得-IP-位址" class="headerlink" title="取得 IP 位址"></a>取得 IP 位址</h2><h3 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h3><p>在 cmd 我們可以透過 ipconfig 得到 IP 位址<br>例如: </p><p>使用 ipconfig /all 得到</p><pre><code>IP Address. . . . . . . . . . . . : 192.168.0.100</code></pre><p>或是用 ipconfig 得到</p><pre><code>IPv4 位址 . . . . . . . . . . . . : 192.168.0.100</code></pre><h2 id="取得對外-IP-位址"><a href="#取得對外-IP-位址" class="headerlink" title="取得對外 IP 位址"></a>取得對外 IP 位址</h2><p>取得對外 IP 位址可以透過很多取得 IP 位址網站得到<br>例如:<br>    <a href="https://www.whatismyip.com.tw/" target="_blank" rel="noopener">我的IP位址查詢</a><br><a href="https://www.ifreesite.com/ipaddress/" target="_blank" rel="noopener">IP地理位置查詢/域名IP地址查詢 地圖版</a></p><p>那麼如果要用程式取得 IP 位址的話，可以運用一下爬蟲技術達到這個功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"></span><br><span class="line">ip = get(<span class="string">'https://api.ipify.org'</span>).text</span><br></pre></td></tr></table></figure></p><h2 id="取得國家與地理位置"><a href="#取得國家與地理位置" class="headerlink" title="取得國家與地理位置"></a>取得國家與地理位置</h2><p>有了對外 IP 位址我們可以透過以下網址搜尋該對外 IP 位址的國家與地理位置<br><a href="https://www.ez2o.com/App/Net/IP" target="_blank" rel="noopener">IP 查詢- 快速搜尋IP 地理位置- ez2o Studio</a></p><p>假如是遠端遙控不知道在何處的電腦，撇開 IP 位址的方式當然可以用 google map 定位得知裝置究竟是在哪裡囉<br>雖然以上這假設蠻奇怪的，但我還真的遇過這種特殊要求XD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有時候我們想知道自己當下電腦使用的網路 IP 位址是多少 ( 連結到的WIFI網路或是有線網路 ) ，常見的IP位址分為IPv4與IPv6兩
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="IP" scheme="https://teddybearfp.github.io/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>pyinstaller 將 Python script 打包成執行檔</title>
    <link href="https://teddybearfp.github.io/2019/09/23/pyinstaller-%E5%B0%87-Python-script-%E6%89%93%E5%8C%85%E6%88%90%E5%9F%B7%E8%A1%8C%E6%AA%94/"/>
    <id>https://teddybearfp.github.io/2019/09/23/pyinstaller-將-Python-script-打包成執行檔/</id>
    <published>2019-09-23T12:05:16.000Z</published>
    <updated>2019-09-23T14:31:28.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我常常用 python 完成一份小程式解決一些生活上的雜事，那麼完成一份程式碼後，想要跟他人分享那麼就需要將 python 腳本打包成執行檔，讓他人使用，要將 python script 打包成執行檔需要使用 pyinstaller ，這一篇紀錄如何使用 pyinstaller</p><h2 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h2><h3 id="安裝-pyinstaller"><a href="#安裝-pyinstaller" class="headerlink" title="安裝 pyinstaller"></a>安裝 pyinstaller</h3><p>開啟 cmd 並輸入以下指令安裝 pyinstaller<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyinstaller</span><br></pre></td></tr></table></figure></p><h3 id="使用-pyinstaller"><a href="#使用-pyinstaller" class="headerlink" title="使用 pyinstaller"></a>使用 pyinstaller</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-F: 將多個檔案打包成單一個執行檔放在 dist 資料夾中</span><br><span class="line">-w: 關閉 cmd 視窗 不顯示</span><br><span class="line">-i: 將執行檔附上圖片</span><br><span class="line"></span><br><span class="line">pyinstaller -F DataAnalysis.py -i teddybear.ico</span><br><span class="line">pyinstaller -F -w DataAnalysis.py</span><br></pre></td></tr></table></figure><h2 id="python-failed-to-execute-script-問題"><a href="#python-failed-to-execute-script-問題" class="headerlink" title="python failed to execute script 問題"></a>python failed to execute script 問題</h2><p>如果執行打包完成的執行檔時無法執行並跳出”python failed to execute script”這個問題，我自己的解法有以下兩種</p><h3 id="檢查是否有不認得的-module"><a href="#檢查是否有不認得的-module" class="headerlink" title="檢查是否有不認得的 module"></a>檢查是否有不認得的 module</h3><p>例如:使用到 requests 的 module 卻沒有該函式庫<br>解法:先開啟 cmd 輸入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure></p><p>完成後再重新打包一次執行檔</p><h3 id="檢查是否-pyinstaller-太舊"><a href="#檢查是否-pyinstaller-太舊" class="headerlink" title="檢查是否 pyinstaller 太舊"></a>檢查是否 pyinstaller 太舊</h3><p>我本身遇到這問題的時候是用這個解法成功解決的</p><p>先升級 pip<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></p><p>升級完 pip 再安裝一次 pyinstaller</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w DataAnalysis.py</span><br></pre></td></tr></table></figure><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>如果是用 64 bits 的 Python 去打包執行檔則只能在 64 bits 上使用<br>而在 32 bits 打包的可以在 64 bits 跟 32 bits 使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我常常用 python 完成一份小程式解決一些生活上的雜事，那麼完成一份程式碼後，想要跟他人分享那麼就需要將 python 腳本打包成執行檔
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="pyinstaller" scheme="https://teddybearfp.github.io/tags/pyinstaller/"/>
    
  </entry>
  
  <entry>
    <title>VTK 部分功能整理</title>
    <link href="https://teddybearfp.github.io/2019/09/11/VTK-%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E6%95%B4%E7%90%86/"/>
    <id>https://teddybearfp.github.io/2019/09/11/VTK-部分功能整理/</id>
    <published>2019-09-11T07:05:16.000Z</published>
    <updated>2019-09-11T13:51:58.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在編寫VTK的時候，有些許小功能在這一篇稍微記錄一下是如何實現的，此篇是個人在讀VTK時的理解不一定正確，純粹記錄</p><h2 id="函式庫簡介"><a href="#函式庫簡介" class="headerlink" title="函式庫簡介"></a>函式庫簡介</h2><p>以下特別注意某些函式庫專門提供給2D某些則是提供給3D使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkCommand.h&gt; // recieve some call back action.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkGPUVolumeRayCastMapper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageActor.h&gt; // present slice of XY, YZ, XZ plane. ( 2D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageCast.h&gt;  // transfer Images information. like output scalars...</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageMapToColors.h&gt; // remap images opacity and colors. ( 2D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageReslice.h&gt;     // reslice 3D volume to get XY, YZ, XZ plane. ( 2D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkImageShiftScale.h&gt;  // set some parameters after load a stack of jpeg pics.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkInteractorStyleTrackballCamera.h&gt; // this class can let interactor operate normally.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkJPEGReader.h&gt;                     // read a stack of jpeg pics.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkLookupTable.h&gt;                    // ImageMapToColors reference this table to remap voxels.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkNew.h&gt;                     // vtkNew is a drop in replacement for vtkSmartPointer</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkOrientationMarkerWidget.h&gt; // for Axes item</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPNGReader.h&gt;               // read a stack of png pics.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkPiecewiseFunction.h&gt;       // set volume opacity. ( 3D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindow.h&gt;            // to show users.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkRenderWindowInteractor.h&gt;  // to let users operate 3D volume.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVolume.h&gt;         // set Mappers and VolumeProperty. ( 3D )</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkVolumeProperty.h&gt; // set opacity and colors in 3D volume. ( 3D )</span></span></span><br></pre></td></tr></table></figure><h2 id="顯示畫面"><a href="#顯示畫面" class="headerlink" title="顯示畫面"></a>顯示畫面</h2><p>一開始我們寫好VTK程式碼要在Qt 的Qt console中執行的時候並需加上下列幾句程式碼否則無畫面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vtkAutoInit.h"</span></span></span><br><span class="line">VTK_MODULE_INIT( vtkRenderingOpenGL2 ); <span class="comment">// VTK was built with vtkRenderingOpenGL2</span></span><br><span class="line">VTK_MODULE_INIT( vtkInteractionStyle );</span><br><span class="line">VTK_MODULE_INIT( vtkRenderingVolumeOpenGL2 );</span><br><span class="line">VTK_MODULE_INIT( vtkRenderingFreeType ); <span class="comment">// to slove "Failed getting the TextRenderer instance" problem.</span></span><br></pre></td></tr></table></figure><h2 id="讀取檔案"><a href="#讀取檔案" class="headerlink" title="讀取檔案"></a>讀取檔案</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Load a stack of jpeg pics to JPEGReader.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkJPEGReader.h&gt;</span></span></span><br><span class="line"><span class="comment">//設定Reader格式:JPEGReader, PNGReader, BMPReader...</span></span><br><span class="line">vtkNew&lt;vtkJPEGReader&gt; reader;</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定來源資料路徑</span></span><br><span class="line">reader-&gt;SetFilePattern( <span class="string">"%s%d.jpg"</span> );</span><br><span class="line">reader-&gt;SetFilePrefix( <span class="string">"D:\\Project\\VTK\\pics\\"</span> );</span><br><span class="line"><span class="comment">//進行一個讀取寬高與張數的動作, 寬:512 高:512 張數:128使用時要各-1</span></span><br><span class="line">reader-&gt;SetDataExtent( <span class="number">0</span>, <span class="number">511</span>, <span class="number">0</span>, <span class="number">511</span>, <span class="number">0</span>, <span class="number">127</span> );</span><br><span class="line"><span class="comment">//重新配置空間分布, Z軸放至4倍大與512一樣讓這個Volume變為正方體</span></span><br><span class="line">reader-&gt;SetDataSpacing( <span class="number">1</span>, <span class="number">1</span>, <span class="number">512</span> / <span class="number">128</span> );</span><br><span class="line"><span class="comment">//將資料Remap成0~255</span></span><br><span class="line">reader-&gt;SetDataScalarTypeToUnsignedChar();</span><br><span class="line"><span class="comment">//將通道改為1通道</span></span><br><span class="line">reader-&gt;SetNumberOfScalarComponents( <span class="number">1</span> );</span><br><span class="line">reader-&gt;SetDataByteOrderToBigEndian();</span><br><span class="line">reader-&gt;Update();</span><br></pre></td></tr></table></figure><h2 id="Interactor-按壓滑動旋轉"><a href="#Interactor-按壓滑動旋轉" class="headerlink" title="Interactor 按壓滑動旋轉"></a>Interactor 按壓滑動旋轉</h2><p>Interactor交互器預設是按壓時會進行旋轉物件而不是我們習慣的按壓滑動才進行旋轉物件，主要是透過vtkInteractorStyleTrackballCamera<br>設定成按下左鍵滑動旋轉要使用以下幾句程式碼</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vtkNew&lt;vtkInteractorStyleTrackballCamera&gt; style;</span><br><span class="line">vtkNew&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor;</span><br><span class="line">renderWindowInteractor-&gt;SetInteractorStyle( style );</span><br><span class="line">renderWindowInteractor-&gt;SetRenderWindow( renderWindow );</span><br><span class="line">renderWindowInteractor-&gt;Initialize();</span><br><span class="line">renderWindow-&gt;Render();</span><br><span class="line">renderWindowInteractor-&gt;Start();</span><br></pre></td></tr></table></figure><h2 id="旋轉座標小標-Icon"><a href="#旋轉座標小標-Icon" class="headerlink" title="旋轉座標小標 Icon"></a>旋轉座標小標 Icon</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Axes item to show current direction.</span></span><br><span class="line">vtkNew&lt;vtkAxesActor&gt; axes;</span><br><span class="line">vtkNew&lt;vtkTransform&gt; transform;</span><br><span class="line">vtkNew&lt;vtkOrientationMarkerWidget&gt; widget;</span><br><span class="line">widget-&gt;SetOutlineColor( <span class="number">0.9300</span>, <span class="number">0.5700</span>, <span class="number">0.1300</span> );</span><br><span class="line">widget-&gt;SetOrientationMarker( axes );</span><br><span class="line">widget-&gt;SetInteractor( renderWindowInteractor );</span><br><span class="line">widget-&gt;SetViewport( <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.3</span>, <span class="number">0.3</span> );</span><br><span class="line">widget-&gt;SetEnabled( <span class="number">1</span> );</span><br><span class="line">widget-&gt;InteractiveOff();</span><br><span class="line">transform-&gt;Translate( <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span> );</span><br><span class="line">axes-&gt;SetTotalLength( <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span> );</span><br></pre></td></tr></table></figure><h2 id="vtkSmartPoint-vs-vtkNew"><a href="#vtkSmartPoint-vs-vtkNew" class="headerlink" title="vtkSmartPoint vs vtkNew"></a>vtkSmartPoint vs vtkNew</h2><p>我們使用vtk宣告新的函式庫時有兩種方式</p><p>第一種: </p><pre><code>vtkSmartPointer&lt;vtkImageImport&gt; reader = vtkSmartPointer&lt;vtkImageImport&gt;::New();</code></pre><p>第二種: </p><pre><code>vtkNew&lt;vtkImageImport&gt; reader;</code></pre><p>以官方的解釋來說</p><pre><code>vtkNew is a drop in replacement for vtkSmartPointer</code></pre><p>Drop-in replacement: 直接替換是計算機科學和其他領域中使用的術語。它指的是在不需要任何其他代碼或配置更改的情況下將一個硬件組件替換為另一個硬件組件的能力，並且不會產生負面影響。通常，替換有一些好處，包括以下一項或多項： 增加安全性 提高速度 功能集增加 增強兼容性 增加支持</p><h2 id="2D-切片"><a href="#2D-切片" class="headerlink" title="2D 切片"></a>2D 切片</h2><p>將3D Volume進行切片呈現2D圖形要使用vtkImageReslice並搭配vtkImageActor最後使用vtkRenderer顯示在畫面中，特別注意這邊顯示僅能為2D平面圖不會是3D Volume喔</p><p>這邊我就不提供原碼了<br>如有需要更進一步了解請連絡作者G.C.L.如果會的話為你解惑</p><h2 id="3D-剪裁"><a href="#3D-剪裁" class="headerlink" title="3D 剪裁"></a>3D 剪裁</h2><p>如果是需要將3D Volume剪裁，剪裁完還是以3D Volume呈現的話有以下兩種方法</p><p>第一種: vtkPlane切單一平面加上volumeMapper-&gt;AddClippingPlane(plane);達到切平面效果，但是這樣僅能以一個平面的方式去做剪裁好像不太能同時多個平面剪裁</p><p>第二種: 使用vtkGPUVolumeRayCastMapper類別內的SetCroppingRegionPlanes函式達到3D剪裁功能(完美解決第一種遇到的問題)</p><p>另外可以搭配vtkImageInteractionCallback綁定一些滑鼠事件，讓滑鼠做指定操作時達到相對應剪裁動作，或是vtkSliderCallback讓Slider變化時達到相對應剪裁動作</p><p>這邊我就不提供原碼了<br>如有需要更進一步了解請連絡作者G.C.L.如果會的話為你解惑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在編寫VTK的時候，有些許小功能在這一篇稍微記錄一下是如何實現的，此篇是個人在讀VTK時的理解不一定正確，純粹記錄&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="VTK" scheme="https://teddybearfp.github.io/categories/VTK/"/>
    
    
      <category term="VTK" scheme="https://teddybearfp.github.io/tags/VTK/"/>
    
  </entry>
  
  <entry>
    <title>QImage 讀取並轉成Memory buffer</title>
    <link href="https://teddybearfp.github.io/2019/09/11/QImage-%E8%AE%80%E5%8F%96%E4%B8%A6%E8%BD%89%E6%88%90Memory-buffer/"/>
    <id>https://teddybearfp.github.io/2019/09/11/QImage-讀取並轉成Memory-buffer/</id>
    <published>2019-09-11T06:05:16.000Z</published>
    <updated>2019-09-11T13:50:02.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時我們可以把圖片讀取後轉成記憶體的方式去做處理，或是傳送給其他函式操作，那麼TB在此記錄一下如何讀取數張圖片並存至Buffer中</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>首先要使Qt環境中支援QImage<br>如果你創建專案時是選Qt Console的話要去pro檔案中刪除</p><pre><code>Qt -= gui</code></pre><p>上述這一行</p><p>並在欲使用的地方導入QImage</p><pre><code>#include &lt;QImage&gt;</code></pre><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先創建Buffer並宣告其大小,長:512 寬:512 張數:100</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *buf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">512</span> * <span class="number">512</span> * <span class="number">100</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">//迴圈將100張圖批次放至buffer記憶體中</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//宣告欲讀取圖片的QImage,並宣告圖片寬:512 高:512與 通道數:3通道(RGB)</span></span><br><span class="line">    QImage img = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888 );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//讀取路徑宣告</span></span><br><span class="line">    QString path = <span class="string">"D:\\Project\\pics\\"</span> + QString::number( i ) + <span class="string">".jpg"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//讀取圖片</span></span><br><span class="line">    img.load( path, <span class="string">"JPEG"</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//進行一個將圖片旋轉180度的動作</span></span><br><span class="line">    QMatrix matrix;</span><br><span class="line">    matrix.rotate( <span class="number">180</span> );</span><br><span class="line">    img = img.transformed( matrix );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//將三通道的圖轉為灰階單通道</span></span><br><span class="line">    img = img.convertToFormat( QImage::Format_Grayscale8 );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//存至buffer中, memcpy(目的地記憶體起始位置, 來源記憶體起始位置, 資料長度)</span></span><br><span class="line">    <span class="built_in">memcpy</span>( buf + i * img.sizeInBytes(), img.bits(), img.sizeInBytes() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過上述程式碼便可以成功將100張jpg圖檔的資料存進buffer中唷</p><p>其他QImage相關操作我們可以看看我的另一篇文章<a href="https://teddybearfp.github.io/2018/11/08/QImage-%E6%93%8D%E4%BD%9C/">Qt QImage &amp;&amp; QQuickPaintedItem 操作</a>有更多詳細解說</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有時我們可以把圖片讀取後轉成記憶體的方式去做處理，或是傳送給其他函式操作，那麼TB在此記錄一下如何讀取數張圖片並存至Buffer中&lt;/p&gt;

      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="QImage" scheme="https://teddybearfp.github.io/tags/QImage/"/>
    
  </entry>
  
  <entry>
    <title>VTK 讀檔</title>
    <link href="https://teddybearfp.github.io/2019/08/22/VTK-%E8%AE%80%E6%AA%94/"/>
    <id>https://teddybearfp.github.io/2019/08/22/VTK-讀檔/</id>
    <published>2019-08-22T06:05:16.000Z</published>
    <updated>2019-08-22T13:30:29.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>VTK讀檔案，若是在Python即使不使用VTK的函式也可以很方便的Load指定資料夾中某一類型的所有檔案，但是直接用C++寫就沒那麼方便了，所以我們看一下這篇紀錄的VTK函式如何Load檔案進來</p><h2 id="VTK-Load-file-C"><a href="#VTK-Load-file-C" class="headerlink" title="VTK Load file ( C++ )"></a>VTK Load file ( C++ )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">( <span class="keyword">const</span> QString &amp;pattern, <span class="keyword">const</span> QString &amp;dirname, <span class="keyword">int</span> level, QVariantList *path )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QDir <span class="title">dir</span><span class="params">( dirname )</span></span>;</span><br><span class="line">    dir.setFilter( QDir::Dirs | QDir::Files | QDir::NoSymLinks | QDir::NoDot | QDir::NoDotDot );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> QStringList stringList = pattern.split( <span class="string">'/'</span> );</span><br><span class="line">    foreach ( QFileInfo fileInfo, dir.entryInfoList( stringList.mid( level, <span class="number">1</span> ) ) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( fileInfo.isDir() &amp;&amp; fileInfo.isReadable() )</span><br><span class="line">            traverse( pattern, fileInfo.filePath(), level + <span class="number">1</span>, path );</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( stringList.size() == ( level + <span class="number">1</span> ) )</span><br><span class="line">            path-&gt;append( fileInfo.filePath() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">variantLessThan</span><span class="params">( <span class="keyword">const</span> QVariant &amp;v1, <span class="keyword">const</span> QVariant &amp;v2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString s1 = v1.toString();</span><br><span class="line">    s1 = s1.replace( <span class="string">"./pics/"</span>, <span class="string">""</span> ).replace( <span class="string">".jpg"</span>, <span class="string">""</span> );</span><br><span class="line">    QString s2 = v2.toString();</span><br><span class="line">    s2 = s2.replace( <span class="string">"./pics/"</span>, <span class="string">""</span> ).replace( <span class="string">".jpg"</span>, <span class="string">""</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( s1.toInt() &lt; s2.toInt() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">QVariantList path;</span><br><span class="line">traverse( <span class="string">"pics/*.jpg"</span>, <span class="string">"."</span>, <span class="number">0</span>, &amp;path );</span><br><span class="line">qSort( path.begin(), path.end(), variantLessThan ); <span class="comment">//檔名數字由小到大排列</span></span><br><span class="line"></span><br><span class="line">vtkSmartPointer&lt;vtkStringArray&gt; filePath = vtkSmartPointer&lt;vtkStringArray&gt;::New();</span><br><span class="line">filePath-&gt;SetNumberOfValues( path.length() );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path.length(); i++ )</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; path[ i ].toString();</span><br><span class="line">    vtkStdString s = path[ i ].toString().toStdString();</span><br><span class="line">    filePath-&gt;SetValue( i, s );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vtkSmartPointer&lt;vtkJPEGReader&gt; jpegReader = vtkSmartPointer&lt;vtkJPEGReader&gt;::New();</span><br><span class="line">jpegReader-&gt;SetFileNames( filePath );</span><br><span class="line">jpegReader-&gt;SetDataSpacing( <span class="number">1</span>, <span class="number">1</span>, <span class="number">512</span> / <span class="number">128</span> );</span><br><span class="line">jpegReader-&gt;Update();</span><br></pre></td></tr></table></figure><h2 id="VTK-Load-file-C-用VTK函式"><a href="#VTK-Load-file-C-用VTK函式" class="headerlink" title="VTK Load file ( C++ 用VTK函式 )"></a>VTK Load file ( C++ 用VTK函式 )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* path = <span class="string">"D:\\VTK\\pics\\"</span>;</span><br><span class="line">vtkSmartPointer&lt;vtkJPEGReader&gt; jpegReader = vtkSmartPointer&lt;vtkJPEGReader&gt;::New();</span><br><span class="line">jpegReader-&gt;SetFilePrefix( path );</span><br><span class="line"><span class="comment">//jpegReader-&gt;SetFilePattern( "%sfile_%02d.jpg" ); //file_01.jpg, file_10.jpg ...</span></span><br><span class="line">jpegReader-&gt;SetFilePattern( <span class="string">"%s%d.jpg"</span> ); <span class="comment">//0.jpg, 1.jpg ...</span></span><br><span class="line">jpegReader-&gt;SetDataExtent( <span class="number">0</span>, <span class="number">511</span>, <span class="number">0</span>, <span class="number">511</span>, <span class="number">0</span>, <span class="number">127</span> ); <span class="comment">//讀取寬:512 高:512 張數:128</span></span><br><span class="line">jpegReader-&gt;SetDataSpacing( <span class="number">1</span>, <span class="number">1</span>, <span class="number">512</span> / <span class="number">128</span> ); <span class="comment">//空間分布比值 1:1:512/128</span></span><br><span class="line">jpegReader-&gt;Update();</span><br></pre></td></tr></table></figure><p>這種方法比第一種程式碼簡潔多拉</p><h2 id="VTK-Load-file-Python"><a href="#VTK-Load-file-Python" class="headerlink" title="VTK Load file ( Python )"></a>VTK Load file ( Python )</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 將128張圖讀入</span></span><br><span class="line"><span class="comment"># PNG files path source (stack of images)</span></span><br><span class="line">files=glob.glob(<span class="string">r"D:\VTKTester\pics"</span>+<span class="string">r"\*.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting the file path</span></span><br><span class="line">filePath = vtk.vtkStringArray()</span><br><span class="line"><span class="comment"># Sorting file to arrange in ascending order to get slices correctly</span></span><br><span class="line">files.sort(key=<span class="keyword">lambda</span> x: int(<span class="string">''</span>.join(filter(str.isdigit, x))))</span><br><span class="line">filePath.SetNumberOfValues(len(files))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(files),<span class="number">1</span>):</span><br><span class="line">    filePath.SetValue(i,files[i])</span><br><span class="line">    print(files[i])</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 用JPEGReader去設置這128張圖</span></span><br><span class="line">reader=vtk.vtkJPEGReader()</span><br><span class="line"><span class="comment">#reader=vtk.vtkPNGReader()</span></span><br><span class="line">reader.SetFileNames(filePath)</span><br><span class="line">reader.SetDataSpacing(<span class="number">1</span>,<span class="number">1</span>,<span class="number">512</span>/<span class="number">128</span>)</span><br><span class="line">reader.Update()</span><br><span class="line">print(reader)</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://quppler.com/3d-volume-rendering/" target="_blank" rel="noopener">3D Volume Rendering using Python</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;VTK讀檔案，若是在Python即使不使用VTK的函式也可以很方便的Load指定資料夾中某一類型的所有檔案，但是直接用C++寫就沒那麼方便了
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="VTK 讀檔" scheme="https://teddybearfp.github.io/tags/VTK-%E8%AE%80%E6%AA%94/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Walker</title>
    <link href="https://teddybearfp.github.io/2019/08/22/Dependency-Walker/"/>
    <id>https://teddybearfp.github.io/2019/08/22/Dependency-Walker/</id>
    <published>2019-08-22T04:05:16.000Z</published>
    <updated>2019-08-22T13:30:12.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>記得剛進公司的時候，對dll動態連結檔還非常不了解，寫專案的時候缺少哪個dll都不太清楚，導致靜態連結檔正確產出obj檔案但是在執行檔的時候會crash掉，每次解決都需要花不少時間找少哪個動態連結檔dll，今天來記錄一下一個神好用的軟體，Dependency Walker，有了這個神軟體考試都一百分</p><h2 id="Dependency-Walker-概述"><a href="#Dependency-Walker-概述" class="headerlink" title="Dependency Walker 概述"></a>Dependency Walker 概述</h2><p>當程式執行時，有DLL問題時，可以使用Dependency Walker工具做檢查<br>Dependency Walker可以遞迴地檢測程式所使用的所有相依動態連結檔DLL。</p><h2 id="使用-Dependency-Walker"><a href="#使用-Dependency-Walker" class="headerlink" title="使用 Dependency Walker"></a>使用 Dependency Walker</h2><p>要使用Dependency Walker前提須要先產出執行檔，那麼就需要先把Link error之類的連結問題與obj先產出才會有執行檔，有了執行檔後開啟Dependency Walker選擇欲檢查的執行檔，就會出現以下畫面</p><h3 id="顯示缺少的dll"><a href="#顯示缺少的dll" class="headerlink" title="顯示缺少的dll"></a>顯示缺少的dll</h3><p><img src="https://i.imgur.com/y2kWeMt.png" alt=""></p><p>從上面的圖可得知缺少3個dll分別為VTKCOMMONCOLOR,VTKCOMMONCOMPUTATIONALGEOMETRY,VTKCOMMONCORE<br>三個動態連結檔dll那麼將它們放至執行檔旁一切就解決拉</p><h3 id="補上後的畫面"><a href="#補上後的畫面" class="headerlink" title="補上後的畫面"></a>補上後的畫面</h3><p><img src="https://i.imgur.com/IuMT3uH.png" alt=""></p><p>圖中可以看到剛剛缺少的dll已經補上了<br>那麼這時候如果原本的問題僅是缺少dll問題的化基本上就能執行囉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;記得剛進公司的時候，對dll動態連結檔還非常不了解，寫專案的時候缺少哪個dll都不太清楚，導致靜態連結檔正確產出obj檔案但是在執行檔的時候
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Dependency Walker" scheme="https://teddybearfp.github.io/tags/Dependency-Walker/"/>
    
  </entry>
  
  <entry>
    <title>Qt FileDialog</title>
    <link href="https://teddybearfp.github.io/2019/08/21/Qt-FileDialog/"/>
    <id>https://teddybearfp.github.io/2019/08/21/Qt-FileDialog/</id>
    <published>2019-08-21T04:05:16.000Z</published>
    <updated>2019-08-22T13:29:58.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做介面端難免有需要給使用者選擇檔案的時候，那麼這時候使用FileDialog可以開啟檔案選擇介面讓使用者選擇特定類型檔案或是資料夾，這一篇來記錄一下Qt FileDialog的使用吧</p><h2 id="Qt-FileDialog"><a href="#Qt-FileDialog" class="headerlink" title="Qt FileDialog"></a>Qt FileDialog</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Dialogs <span class="number">1.3</span></span><br><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="title">Button</span>&#123; <span class="comment">//透過這個按鍵可以觸發FileDialog</span></span><br><span class="line">        <span class="attribute">id:</span><span class="string">openBtn</span></span><br><span class="line">        <span class="attribute">anchors.left</span>: <span class="built_in">parent</span>.left</span><br><span class="line">        <span class="attribute">anchors.top</span>: <span class="built_in">parent</span>.top</span><br><span class="line">        <span class="attribute">anchors.margins</span>: <span class="number">50</span></span><br><span class="line">        <span class="attribute">text</span>:<span class="string">"Select folder\nto do something"</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">250</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">150</span></span><br><span class="line">        <span class="attribute">onClicked</span>: fileDialog.open()</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title">Label</span> &#123;</span><br><span class="line">       <span class="attribute">id:</span><span class="string"> labels</span></span><br><span class="line">       <span class="attribute">text</span>: qsTr(<span class="string">""</span>)</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">25</span></span><br><span class="line">       <span class="attribute">anchors.top</span>: openBtn.verticalCenter</span><br><span class="line">       <span class="attribute">anchors.left</span>:<span class="attribute">openBtn.right</span></span><br><span class="line"><span class="attribute">       anchors.leftMargin</span>: <span class="number">15</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title">FileDialog</span> &#123;</span><br><span class="line">       <span class="attribute">id:</span><span class="string">fileDialog</span></span><br><span class="line">       <span class="attribute">title</span>: <span class="string">"Select folder"</span> <span class="comment">//上方顯示的標題</span></span><br><span class="line">       <span class="attribute">folder</span>: shortcuts.desktop <span class="comment">//讓起始位置指向desktop</span></span><br><span class="line">       <span class="attribute">selectExisting</span>: <span class="literal">true</span></span><br><span class="line">       <span class="attribute">selectFolder</span>: <span class="literal">true</span> <span class="comment">//這個屬性為true時,選擇整個資料夾而非檔案</span></span><br><span class="line">       <span class="attribute">selectMultiple</span>: <span class="literal">false</span> <span class="comment">//這個屬性處理是否可以選擇多個檔案</span></span><br><span class="line">       <span class="attribute">onAccepted</span>: &#123; <span class="comment">//選擇檔案的時候做的事情Call function do something...</span></span><br><span class="line">           <span class="comment">//fileDialog.setNameFilter(tr("Images (*.png *.jpg)"));//若selectFolder為false選擇檔案時可以過濾檔案類型,僅顯示給使用者看某類型檔案</span></span><br><span class="line">           labels.text = fileDialog.fileUrl;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"You chose: "</span> + fileDialog.fileUrl);</span><br><span class="line">           doSomething(fileDialog.fileUrl) <span class="comment">//得到的字串可能為"file:///D:/Sample"</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="attribute">onRejected</span>: &#123; <span class="comment">//取消的時候做的行為,例如不做事或是程式關閉Qt.quit()</span></span><br><span class="line">           labels.text = <span class="string">""</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileDialog-Demo"><a href="#FileDialog-Demo" class="headerlink" title="FileDialog Demo"></a>FileDialog Demo</h2><p><img src="https://i.imgur.com/wJsbXQe.png" alt=""></p><h2 id="DoSomething-字串處理"><a href="#DoSomething-字串處理" class="headerlink" title="DoSomething 字串處理"></a>DoSomething 字串處理</h2><h3 id="viewmodel"><a href="#viewmodel" class="headerlink" title="viewmodel"></a>viewmodel</h3><p>收到剛剛從qml端傳來的QString字串後做一些處理再傳至純C lib做事情,所以需要QString轉成Char*</p><p>將QString: </p><pre><code>&quot;file:///D:/Sample&quot;</code></pre><p>轉換成Char*:</p><pre><code>&quot;D:\\Sample\\&quot;</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Sample::doSomething( QString path )</span><br><span class="line">&#123;</span><br><span class="line">    path.replace( <span class="string">"file:///"</span>, <span class="string">""</span> );</span><br><span class="line">    path.replace( <span class="string">"/"</span>, <span class="string">"\\"</span> );</span><br><span class="line">    path.append( <span class="string">"\\"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//QString to char*</span></span><br><span class="line">    QByteArray ba = path.toLocal8Bit();</span><br><span class="line">    <span class="keyword">char</span>* s = ba.data();</span><br><span class="line">    DoSomething( s );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function">Sample__API <span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">( <span class="keyword">char</span>* path )</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;做介面端難免有需要給使用者選擇檔案的時候，那麼這時候使用FileDialog可以開啟檔案選擇介面讓使用者選擇特定類型檔案或是資料夾，這一篇來
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="FileDialog" scheme="https://teddybearfp.github.io/tags/FileDialog/"/>
    
  </entry>
  
  <entry>
    <title>TB腦力激盪_遺失的連續數(無排序)</title>
    <link href="https://teddybearfp.github.io/2019/08/13/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA-%E9%81%BA%E5%A4%B1%E7%9A%84%E9%80%A3%E7%BA%8C%E6%95%B8-%E7%84%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://teddybearfp.github.io/2019/08/13/腦力激盪-遺失的連續數-無排序/</id>
    <published>2019-08-13T04:05:16.000Z</published>
    <updated>2019-08-13T15:03:54.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了精進寫程式能力，紀錄一下遇到的題目與我覺得還算不錯的解</p><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>N個連續數字(無排序)，找出缺少的那個數字(前提起始數字不缺漏)<br>例如:題目(7個連續數字，起始為76)<br>那麼內容可能為[83,79,76,81,78,82]找出缺少哪一個數字<br>這答案為77<br>試著編寫程式找到缺少的數字</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>我的方法完成兩個目標即可達成<br>第一個目標找到數字的頭(最小的數字) min<br>第二個目標找出給的內容總和 sum</p><p>我們僅需運用時間複雜度O(n)一個迴圈的時間<br>同時找出最小的數字min,並將所有數字加起來得到總和sum<br>接著把剛剛找到的最小的數字加上題目給的N個連續數字的N做一個梯形運算取得該有的總和減掉剛剛算出的sum</p><p>以例題舉例來說<br>最小數字min:76<br>N:7<br>梯形面積:(76 + (76 + 7)) * 7 / 2 (上底加下底乘高除二)<br>= 556.5<br>= 556 (無條件捨去)<br>迴圈算出來的總和Sum:83 + 79 + 76 + 81 + 78 + 82 = 479<br>梯形面積減掉Sum:77</p><p>ANS:77</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;為了精進寫程式能力，紀錄一下遇到的題目與我覺得還算不錯的解&lt;/p&gt;
&lt;h2 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="腦力激盪" scheme="https://teddybearfp.github.io/categories/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA/"/>
    
    
      <category term="腦力激盪" scheme="https://teddybearfp.github.io/tags/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA/"/>
    
      <category term="無序連續數" scheme="https://teddybearfp.github.io/tags/%E7%84%A1%E5%BA%8F%E9%80%A3%E7%BA%8C%E6%95%B8/"/>
    
  </entry>
  
  <entry>
    <title>Qt QPainter</title>
    <link href="https://teddybearfp.github.io/2019/07/12/Qt-QPainter/"/>
    <id>https://teddybearfp.github.io/2019/07/12/Qt-QPainter/</id>
    <published>2019-07-12T01:05:16.000Z</published>
    <updated>2019-07-13T05:37:03.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>快速的匯整圖形資料並繪製，可以達到即時影像的效果，那麼將圖形繪製除了我之前編寫的<a href="https://teddybearfp.github.io/2018/11/08/QImage-%E6%93%8D%E4%BD%9C/#more">Qt QImage &amp; QQuickPaintedItem 操作</a>裡面提的針對bits的操作每個位元的顏色方式之外，今天這一篇所記錄的是以QImage整份用QPainter操作再用QQuickPaintItem畫在Canvas上</p><pre><code>文章為[泰迪熊的程式足跡G.C.L.](https://teddybearfp.github.io/)所編寫，禁止轉載與抄襲，引用部分文章請附上出處</code></pre><h2 id="QPainter實作"><a href="#QPainter實作" class="headerlink" title="QPainter實作"></a>QPainter實作</h2><h3 id="TeddyBearFPCanvas-h"><a href="#TeddyBearFPCanvas-h" class="headerlink" title="TeddyBearFPCanvas.h"></a>TeddyBearFPCanvas.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEDDYBEARFPCANVAS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEDDYBEARFPCANVAS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickPaintedItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeddyBearFPCanvas</span> :</span> <span class="keyword">public</span> QQuickPaintedItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TeddyBearFPCanvas( QQuickItem* parent = <span class="literal">nullptr</span> );</span><br><span class="line">    ~TeddyBearFPCanvas();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">( QPainter* painter )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QImage imgs;</span><br><span class="line">    QImage aImg;</span><br><span class="line">    QImage bImg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isStarted;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Polling</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TEDDYBEARFPCANVAS_H</span></span></span><br></pre></td></tr></table></figure><h3 id="TeddyBearFPCanvas-cpp"><a href="#TeddyBearFPCanvas-cpp" class="headerlink" title="TeddyBearFPCanvas.cpp"></a>TeddyBearFPCanvas.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfpcanvas.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CANVAS_INTERVAL 5</span></span><br><span class="line"></span><br><span class="line">TeddyBearFPCanvas::TeddyBearFPCanvas( QQuickItem* parent )</span><br><span class="line">    : QQuickPaintedItem( parent )</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::paint( QPainter* painter )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QRectF <span class="title">target</span><span class="params">( <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height() )</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">source</span><span class="params">( <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height() )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//將imgs畫上</span></span><br><span class="line">    painter-&gt;drawImage( target, imgs, source );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( isStarted ) update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TeddyBearFPCanvas::~TeddyBearFPCanvas()</span><br><span class="line">&#123;</span><br><span class="line">    stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::start()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( isStarted )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    isStarted = <span class="literal">true</span>;</span><br><span class="line">    future = QtConcurrent::run( <span class="keyword">this</span>, &amp;TeddyBearFPCanvas::Polling );</span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::Polling()</span><br><span class="line">&#123;</span><br><span class="line">    imgs = QImage( <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height(), QImage::Format_Grayscale8 );</span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">( Qt::gray )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( isStarted )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//從某處得到了aImg, bImg資料</span></span><br><span class="line">        <span class="comment">//ret = some Function</span></span><br><span class="line">        <span class="keyword">if</span> ( ret != ComboOk )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        aImg = aImg.scaled( <span class="number">320</span>, <span class="number">240</span> );</span><br><span class="line">        </span><br><span class="line">        QImage dstImg;</span><br><span class="line">        <span class="comment">//將整份bImg複製(不能直接用等於dstImg = bImg ,這樣寫的話更改dstImg也會更動到bImg)</span></span><br><span class="line">        dstImg = bImg.copy();</span><br><span class="line">        dstImg = dstImg.scaled( <span class="number">320</span>, <span class="number">240</span> );</span><br><span class="line"></span><br><span class="line">        <span class="function">QPainter <span class="title">painter</span><span class="params">( &amp;imgs )</span></span>;</span><br><span class="line">        painter.setPen( pen );</span><br><span class="line"></span><br><span class="line">        painter.drawImage( <span class="number">0</span>, <span class="number">0</span>, dstImg );</span><br><span class="line">        <span class="comment">//灰色間隔</span></span><br><span class="line">        painter.drawRect( <span class="number">0</span>, dstImg.height(), <span class="keyword">this</span>-&gt;width(), CANVAS_INTERVAL );</span><br><span class="line">        painter.drawImage( <span class="number">0</span>, dstImg.height() + CANVAS_INTERVAL, aImg );</span><br><span class="line">        painter.end();</span><br><span class="line"></span><br><span class="line">        Sleep( <span class="number">30</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddyBearFPCanvas::stop()</span><br><span class="line">&#123;</span><br><span class="line">    isStarted = <span class="literal">false</span>;</span><br><span class="line">    future.waitForFinished();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;快速的匯整圖形資料並繪製，可以達到即時影像的效果，那麼將圖形繪製除了我之前編寫的&lt;a href=&quot;https://teddybearfp.g
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QPainter" scheme="https://teddybearfp.github.io/tags/QPainter/"/>
    
  </entry>
  
  <entry>
    <title>Python VTK</title>
    <link href="https://teddybearfp.github.io/2019/07/09/Python-VTK/"/>
    <id>https://teddybearfp.github.io/2019/07/09/Python-VTK/</id>
    <published>2019-07-09T01:05:16.000Z</published>
    <updated>2019-07-13T05:35:04.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我上一篇CMake GUI記錄在C++套用Third-Party VTK的流程有點複雜，這一篇記錄Python套用VTK會簡單許多</p><h2 id="Python-VTK"><a href="#Python-VTK" class="headerlink" title="Python VTK"></a>Python VTK</h2><p>Python使用VTK套件就沒拿麼複雜僅需簡單的至下方網站下載擴充包<br>至<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">非官方擴充包(Unofficial Windows Binaries for Python Extension Packages)</a>下載VTK-8.2.0-cp36-cp36m-win32.whl，這檔名36的部分指的是Python版本，載完解壓縮完後，至cmd中執行python install VTK-8.2.0-cp36-cp36m-win32.whl開始安裝<br>完成後在欲使用VTK的專案中上方添加import vtk</p><h2 id="Python-VTK-測試"><a href="#Python-VTK-測試" class="headerlink" title="Python VTK 測試"></a>Python VTK 測試</h2><p>上述步驟完成後，可以用以下程式碼測試</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#柱體展示</span></span><br><span class="line"><span class="keyword">import</span> vtk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    colors = vtk.vtkNamedColors()</span><br><span class="line">    <span class="comment"># Set the background color.</span></span><br><span class="line">    bkg = map(<span class="keyword">lambda</span> x: x / <span class="number">255.0</span>, [<span class="number">26</span>, <span class="number">51</span>, <span class="number">102</span>, <span class="number">255</span>])</span><br><span class="line">    colors.SetColor(<span class="string">"BkgColor"</span>, *bkg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This creates a polygonal cylinder model with eight circumferential</span></span><br><span class="line">    <span class="comment"># facets.</span></span><br><span class="line">    cylinder = vtk.vtkCylinderSource()</span><br><span class="line">    cylinder.SetResolution(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The mapper is responsible for pushing the geometry into the graphics</span></span><br><span class="line">    <span class="comment"># library. It may also do color mapping, if scalars or other</span></span><br><span class="line">    <span class="comment"># attributes are defined.</span></span><br><span class="line">    cylinderMapper = vtk.vtkPolyDataMapper()</span><br><span class="line">    cylinderMapper.SetInputConnection(cylinder.GetOutputPort())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The actor is a grouping mechanism: besides the geometry (mapper), it</span></span><br><span class="line">    <span class="comment"># also has a property, transformation matrix, and/or texture map.</span></span><br><span class="line">    <span class="comment"># Here we set its color and rotate it -22.5 degrees.</span></span><br><span class="line">    cylinderActor = vtk.vtkActor()</span><br><span class="line">    cylinderActor.SetMapper(cylinderMapper)</span><br><span class="line">    cylinderActor.GetProperty().SetColor(colors.GetColor3d(<span class="string">"Tomato"</span>))</span><br><span class="line">    cylinderActor.RotateX(<span class="number">30.0</span>)</span><br><span class="line">    cylinderActor.RotateY(<span class="number">-45.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the graphics structure. The renderer renders into the render</span></span><br><span class="line">    <span class="comment"># window. The render window interactor captures mouse events and will</span></span><br><span class="line">    <span class="comment"># perform appropriate camera or actor manipulation depending on the</span></span><br><span class="line">    <span class="comment"># nature of the events.</span></span><br><span class="line">    ren = vtk.vtkRenderer()</span><br><span class="line">    renWin = vtk.vtkRenderWindow()</span><br><span class="line">    renWin.AddRenderer(ren)</span><br><span class="line">    iren = vtk.vtkRenderWindowInteractor()</span><br><span class="line">    iren.SetRenderWindow(renWin)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add the actors to the renderer, set the background and size</span></span><br><span class="line">    ren.AddActor(cylinderActor)</span><br><span class="line">    ren.SetBackground(colors.GetColor3d(<span class="string">"BkgColor"</span>))</span><br><span class="line">    renWin.SetSize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    renWin.SetWindowName(<span class="string">'Cylinder'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This allows the interactor to initalize itself. It has to be</span></span><br><span class="line">    <span class="comment"># called before an event loop.</span></span><br><span class="line">    iren.Initialize()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We'll zoom in a little by accessing the camera and invoking a "Zoom"</span></span><br><span class="line">    <span class="comment"># method on it.</span></span><br><span class="line">    ren.ResetCamera()</span><br><span class="line">    ren.GetActiveCamera().Zoom(<span class="number">1.5</span>)</span><br><span class="line">    renWin.Render()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Start the event loop.</span></span><br><span class="line">    iren.Start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>出現柱體就代表成功拉</p><p>那麼可以進行一些MRI或是CT的3D Volume Rendering</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我上一篇CMake GUI記錄在C++套用Third-Party VTK的流程有點複雜，這一篇記錄Python套用VTK會簡單許多&lt;/p&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="VTK" scheme="https://teddybearfp.github.io/tags/VTK/"/>
    
  </entry>
  
  <entry>
    <title>CMake GUI使用</title>
    <link href="https://teddybearfp.github.io/2019/07/05/CMake-GUI/"/>
    <id>https://teddybearfp.github.io/2019/07/05/CMake-GUI/</id>
    <published>2019-07-05T01:05:16.000Z</published>
    <updated>2019-07-13T05:32:39.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要繼續來研究3D相關的課題了，繼上次困難的OpenGL我的另一篇文章所記錄的<a href="https://teddybearfp.github.io/2018/12/23/3D-Volume-Rendering/">OpenGL 3D立體渲染</a>折騰了一番後，要來用VTK這個視覺化工具函式庫(VTK， Visualization Toolkit)，VTK社群快速地成長，其在學術研究及商業應用的領域受到重用，例如Slicer 生物醫學計算軟體使用VTK作為其核心，許多討論研究VTK的IEEE論文出現。而這個Third-party的套件要如何使用，cxx的話就得透過CMake將source資料編譯成sln檔 讓c++可以編譯產生dll、lib與h檔，Python的話則是下載擴充包</p><p>今天記錄的內容是如何用產出QT可以使用的VTK動態連結檔<br>下方步驟將會循序的CMake VTK項目產出VTK動態連結檔</p><pre><code>文章為[泰迪熊的程式足跡G.C.L.](https://teddybearfp.github.io/)所編寫，禁止轉載與抄襲，引用部分文章請附上出處</code></pre><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>在CMake步驟中最主要的目的就是要取得bin(動態連結檔), include(標頭檔),lib(靜態連結檔)這三種類型檔案，有了這三個類型的檔案，我們就可以使用這third-party的相關套件</p><h2 id="Download-VTK"><a href="#Download-VTK" class="headerlink" title="Download VTK"></a>Download VTK</h2><p>首先先下載<a href="https://vtk.org/download/" target="_blank" rel="noopener">VTK</a><br>我抓的是目前最新的<a href="https://www.vtk.org/files/release/8.2/VTK-8.2.0.zip" target="_blank" rel="noopener">VTK-8.2.0.zip</a><br>接著解壓縮在D槽資料夾中例如: “D:/VTK -8.2.0”(建議D槽)</p><h2 id="CMake-流程概述"><a href="#CMake-流程概述" class="headerlink" title="CMake 流程概述"></a>CMake 流程概述</h2><p>如果要編譯debug與release版的Third-Party套件大致分為以下14個步驟</p><h3 id="步驟1-5"><a href="#步驟1-5" class="headerlink" title="步驟1~5"></a>步驟1~5</h3><p>1.開啟cmake gui<br>2.選擇source(例如:C:/opencv/sources)<br>3.選擇目的資料夾<br>4.configure<br>5.configure完成後</p><ul><li>(例如opencv選擇build&gt;&gt;opencv_world打勾)</li></ul><h3 id="步驟6-10"><a href="#步驟6-10" class="headerlink" title="步驟6~10"></a>步驟6~10</h3><p>6.search找尋prefix(cmake&gt;&gt;cmake_install_prefix) 更改路徑<br>7.generate完成後 點擊open project<br>8.開啟sln後build需要的檔案</p><ul><li>(例如module內的opencv_world)</li></ul><p>9.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>10.至install設定的資料夾即可找到.h  , .dll , .lib</p><h3 id="步驟11-14"><a href="#步驟11-14" class="headerlink" title="步驟11~14"></a>步驟11~14</h3><p>11.此時只有debug版所以還要再編一次release版<br>12.切換成release再次build需要的檔案</p><ul><li>(例如module內的opencv_world)</li></ul><p>13.bulid完後再去上方cmaketarget &gt;&gt; Install編譯 將剛剛編譯好的檔案打包到install設定的資料夾中<br>14.步驟完成後 就有debug版跟release版了!</p><h2 id="CMake-VTK"><a href="#CMake-VTK" class="headerlink" title="CMake VTK"></a>CMake VTK</h2><p>開啟CMake gui</p><h3 id="選擇來源與build路徑"><a href="#選擇來源與build路徑" class="headerlink" title="選擇來源與build路徑"></a>選擇來源與build路徑</h3><p>Where is the source code: 選擇剛剛解壓縮的資料夾”D:/VTK -8.2.0”<br>Where to build the binaries: “D:/VTK”</p><h3 id="Search-CMAKE-INSTALL-PREFIX"><a href="#Search-CMAKE-INSTALL-PREFIX" class="headerlink" title="Search CMAKE_INSTALL_PREFIX"></a>Search CMAKE_INSTALL_PREFIX</h3><p>填寫完畢後<br>Search: install<br>搜尋: install<br>找到CMAKE_INSTALL_PREFIX這一個項目並將內容寫為”D:/VTK/install” (盡量跟上方build的路徑一致)<br>這樣編出來的檔案會生成在上方這個路徑中</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><pre><code>建議將build出來的路徑寫在D槽不要在C槽中，因為在C槽需要以管理員許可權啟動Visual Studio並開啟VTK的sln檔，否則如果你沒有以管理員許可權啟動Visual Studio，INSTALL將會失敗</code></pre><h3 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h3><p>設定完後點擊左下方的Configure等待一下<br>接著會出現一些紅底的VTK項目(此處看當下CMake要產出什麼相關要做不一樣的勾選)<br>把VTK_Group_QT打勾<br>再次Configure會再出現紅底VTK項目但是數量會變少<br>那麼我再Configure一次<br>發現這一次完成後沒有紅底項目了</p><h3 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h3><p>Configure完成後點擊Generate<br>等待頁面出現Generate Done</p><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p>生成完的檔案在”D:/VTK”中<br>開啟VTK.sln(透過Visual Studio開啟)<br>首先在右方ALL_BUILD點選右鍵build，要等很久請耐心等候(此操作等於sudo make)<br>接著ALL_BUILD建置完成後，找尋一樣在右方欄位ALL_BUILD下面的INSTALL點選右鍵build(此操作等於sudo make install)<br>兩者都build完後就大功告成拉</p><h3 id="使用VTK"><a href="#使用VTK" class="headerlink" title="使用VTK"></a>使用VTK</h3><p>欲使用VTK可以到剛剛CMAKE_INSTALL_PREFIX填寫的位置找尋，像我們這一篇紀錄的是放在”D:/VTK/install”中，那麼我們可以到該資料夾中找到bin(動態連結檔), include(標頭檔),lib(靜態連結檔)與plugins…<br>若他人需要這個third-party套件僅需提供”D:/VTK/install”資料夾即可</p><p>OK產出後我們就可以去導入並開始使用VTK囉 3D世界我來啦!</p><h2 id="補充-Python-VTK"><a href="#補充-Python-VTK" class="headerlink" title="補充(Python VTK)"></a>補充(Python VTK)</h2><p>Python使用VTK套件就沒拿麼複雜僅需簡單的至下方網站下載擴充包<br>至<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">非官方擴充包(Unofficial Windows Binaries for Python Extension Packages)</a>下載VTK-8.2.0-cp36-cp36m-win32.whl，這檔名36的部分指的是Python版本，載完解壓縮完後，至cmd中執行python install VTK-8.2.0-cp36-cp36m-win32.whl開始安裝<br>完成後在欲使用VTK的專案中上方添加import vtk</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/VTK" target="_blank" rel="noopener">VTK - 维基百科，自由的百科全书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近要繼續來研究3D相關的課題了，繼上次困難的OpenGL我的另一篇文章所記錄的&lt;a href=&quot;https://teddybearfp.g
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="CMake GUI" scheme="https://teddybearfp.github.io/tags/CMake-GUI/"/>
    
  </entry>
  
  <entry>
    <title>Python sqlite3 SqlDBHandler</title>
    <link href="https://teddybearfp.github.io/2019/06/23/Python-sqlite3-SqlDBHandler/"/>
    <id>https://teddybearfp.github.io/2019/06/23/Python-sqlite3-SqlDBHandler/</id>
    <published>2019-06-23T04:05:16.000Z</published>
    <updated>2019-07-05T14:08:39.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在程式的執行時，我們可以產出一些參數在資料庫中讓程式一開始有預設行為，也便於後續更改行為時不用改程式碼僅需更改資料庫參數，這一篇紀錄使用python中的sqlite3簡易的database CRUD操作模組製作的SqlDBHandler，完成了SqlDBHandler可以在往後有資料庫需求時快速的建立資料庫，那麼看一下該怎麼使用這個SqlDBHandler吧</p><h2 id="SqlDBHandler"><a href="#SqlDBHandler" class="headerlink" title="SqlDBHandler"></a>SqlDBHandler</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment">#創建資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(levelname)s : %(message)s'</span>, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDB</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">            logging.info(path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">                os.mkdir(path)</span><br><span class="line">                logging.info(<span class="string">"mkdir "</span> + path +<span class="string">" successfully"</span>)</span><br><span class="line">            <span class="comment">#資料夾創建成功後連結資料庫</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.conn = sqlite3.connect(<span class="string">'C:\\ProgramData\\'</span> + folderName + <span class="string">'\\'</span> + databaseName + <span class="string">".sqlite"</span>)</span><br><span class="line">                self.c = self.conn.cursor()</span><br><span class="line">                logging.info(<span class="string">"Opened database successfully"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.warning(<span class="string">"Opened database Failed"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"mkdir Failed. Do you remember import os?"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createTable</span><span class="params">(self, tableName, tableStructure)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#Sql語法 建立表格,表格名 欄位名 欄位型別</span></span><br><span class="line">            <span class="comment">#執行Sql語法</span></span><br><span class="line">            self.c.execute(<span class="string">"CREATE TABLE "</span> + tableName + <span class="string">"("</span> + tableStructure + <span class="string">");"</span>)</span><br><span class="line">            logging.info(<span class="string">"Table created successfully"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.info(<span class="string">"CreateTable Error maybe database is exits!"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, tableName, tableFields, tableValue)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"INSERT INTO "</span> + tableName + <span class="string">" ("</span> + tableFields + <span class="string">") VALUES ("</span> + tableValue + <span class="string">")"</span></span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAll</span><span class="params">(self, tableName)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectByCondition</span><span class="params">(self, tableName, searchCondition)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" WHERE "</span> + searchCondition</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, updateCondition)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"UPDATE "</span> + tableName + <span class="string">" SET "</span> + recordToChange + <span class="string">" where "</span> + updateCondition</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, tableName, deleteCondition)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tableName <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> tableName != <span class="string">''</span>:</span><br><span class="line">            self.dbsql = <span class="string">"DELETE from "</span> + tableName + <span class="string">" where "</span> + deleteCondition</span><br><span class="line">            logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">            result = self.execSql(self.dbsql)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSql</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 執行sql語句 </span></span><br><span class="line">            self.c.execute(dbsql)</span><br><span class="line">        <span class="comment"># 進行資料庫語句的提交操作，不提交則無法生效，每次執行後都要提交</span></span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.info(<span class="string">"Operate Dababase Error !"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSqlWithReturn</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor = self.conn.execute(dbsql)</span><br><span class="line">            <span class="comment"># 用一個變數來接受fetchall（）查詢所有這個函式返回的值。,fetchone ()是查詢一個，只有一個結果和fetchall有區別</span></span><br><span class="line">            <span class="keyword">return</span> self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"select Record Error !"</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 關閉遊標</span></span><br><span class="line">            self.c.close()</span><br><span class="line">            <span class="comment"># 關閉資料庫連結,在資料庫操作完成後需要把游標與連結都關掉</span></span><br><span class="line">            self.conn.close()</span><br><span class="line">            logging.info(<span class="string">"Closed database successfully"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"Closed database Failed"</span>)</span><br></pre></td></tr></table></figure><h2 id="檔案放置架構"><a href="#檔案放置架構" class="headerlink" title="檔案放置架構"></a>檔案放置架構</h2><pre><code>D:\Application├── modules│   └── SqlDBHandler.py|        └── SqlDBHandler.py└── modulesTester    └── SqlDBHandlerTester.py        └── SqlDBHandlerTester.py</code></pre><h2 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"D:\Application"</span>)</span><br><span class="line"><span class="keyword">from</span> modules.SqlDBHandler.SqlDBHandler <span class="keyword">import</span> SqlDB</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#填寫欲創建的資料庫相關資料</span></span><br><span class="line">    folderName = <span class="string">"DBHandler"</span></span><br><span class="line">    databaseName = <span class="string">"ExchangeHelper"</span></span><br><span class="line">    tableName = <span class="string">"TARGET"</span></span><br><span class="line">    fieldsName = <span class="string">"幣別, 目標匯率, 爬取日期, 今日是否觸價, 是否爬取"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#implement SqlDB 傳入(資料夾名稱, 資料庫名稱)</span></span><br><span class="line">    db = SqlDB( folderName, databaseName )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#=====SqlDB CRUD=====</span></span><br><span class="line">    <span class="comment">#1.建立資料表 傳入(資料表格名稱, 表格結構)</span></span><br><span class="line">    db.createTable( tableName, </span><br><span class="line">                    <span class="string">'''</span></span><br><span class="line"><span class="string">                    '幣別'          TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                    '目標匯率'       INT     NOT NULL,</span></span><br><span class="line"><span class="string">                    '爬取日期'       DATE    NOT NULL,</span></span><br><span class="line"><span class="string">                    '今日是否觸價'   TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                    '是否爬取'       TEXT    NOT NULL</span></span><br><span class="line"><span class="string">                    '''</span></span><br><span class="line">                  )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#2.insert用法: 插入資料 傳入(資料表格名稱, 欄位名稱, 資料)</span></span><br><span class="line">    <span class="comment">#導入datetime取得時間</span></span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">    date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    tableValue = <span class="string">"'美金 (USD)', 30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y'"</span></span><br><span class="line">    db.insert( tableName, fieldsName, tableValue)</span><br><span class="line">    tableValue = <span class="string">"'日圓 (JPY)', 0.30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y'"</span></span><br><span class="line">    db.insert( tableName, fieldsName, tableValue)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#3.selectAll用法: 取得整個資料表格資料</span></span><br><span class="line">    dataAll = db.selectAll( tableName )</span><br><span class="line">    <span class="comment">#逐一列出資料</span></span><br><span class="line">    print( <span class="string">"Original data: SELECT * FROM TARGET"</span> )</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dataAll:</span><br><span class="line">        print( c )</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#4.selectByCondition用法: 取得資料表格特定條件資料</span></span><br><span class="line">    searchCondition = <span class="string">'"幣別" = "日圓 (JPY)"'</span></span><br><span class="line">    data = db.selectByCondition( tableName, searchCondition )</span><br><span class="line">    print( <span class="string">"selectByCondition: SELECT * FROM TARGET WHERE \"幣別\" = \"日圓 (JPY)\""</span> )</span><br><span class="line">    print( data )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#5.update用法: </span></span><br><span class="line">    recordToChange = <span class="string">'"目標匯率" = 29'</span></span><br><span class="line">    updateCondition= <span class="string">'"幣別" = "美金 (USD)"'</span></span><br><span class="line">    db.update( tableName, recordToChange, updateCondition )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#6.delete用法:</span></span><br><span class="line">    deleteCondition = <span class="string">'"幣別" = "日圓 (JPY)"'</span></span><br><span class="line">    db.delete( tableName, deleteCondition )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#再次讀取整個表格資料查看修改後的結果</span></span><br><span class="line">    dataAll = db.selectAll( tableName )</span><br><span class="line">    <span class="comment">#逐一列出資料</span></span><br><span class="line">    print( <span class="string">"After update/delete data"</span> )</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dataAll:</span><br><span class="line">        print( c )</span><br><span class="line">        <span class="comment">#陣列方式可以分別取得每筆資料的各個欄位值</span></span><br><span class="line">        <span class="comment">#c[0]: 美金 (USD)</span></span><br><span class="line">        <span class="comment">#c[1]: 29</span></span><br><span class="line">        <span class="comment">#c[2]: 2019-06-23</span></span><br><span class="line">        <span class="comment">#c[3]: N</span></span><br><span class="line">        <span class="comment">#c[4]: Y</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#7.關閉cursor, 關閉資料庫連結</span></span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><h2 id="輸出結果"><a href="#輸出結果" class="headerlink" title="輸出結果"></a>輸出結果</h2><p><img src="https://i.imgur.com/8wqhnDQ.png" alt=""></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://kaiching.org/pydoing/py/python-library-sqlite3.html" target="_blank" rel="noopener">Python 速查手冊- 12.6 資料庫sqlite3 - 程式語言教學誌</a><br><a href="https://www.google.com/search?ei=UeUOXdKzEY7_0gSsx7qgDg&amp;q=python+sqlite3+&amp;oq=python+sqlite3+&amp;gs_l=psy-ab.3..0l10.5367.9993..10405...7.0..0.74.869.15......0....1..gws-wiz.......0i13j0i10.ZZKlmg1fkvQ" target="_blank" rel="noopener">透過Python 將資料存入SQLite 教學– 小魚的資訊技術學習路– Medium</a></p><p>本篇以下列網站為範本做修改<br><a href="http://qinfei.glrsmart.com/2017/03/08/python-sqlite3-shu-ju-ku-cao-zuo-li-cheng/" target="_blank" rel="noopener">Python Sqlite3 数据库操作例程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在程式的執行時，我們可以產出一些參數在資料庫中讓程式一開始有預設行為，也便於後續更改行為時不用改程式碼僅需更改資料庫參數，這一篇紀錄使用py
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="sqlite3" scheme="https://teddybearfp.github.io/tags/sqlite3/"/>
    
  </entry>
  
</feed>
