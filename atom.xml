<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泰迪熊的程式足跡</title>
  
  <subtitle>遊走程式森林的泰迪熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teddybearfp.github.io/"/>
  <updated>2020-02-14T15:57:16.755Z</updated>
  <id>https://teddybearfp.github.io/</id>
  
  <author>
    <name>G.C.L.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python generate fake data for testing database syntax efficiency</title>
    <link href="https://teddybearfp.github.io/2020/02/14/Python-generate-fake-data-for-testing-database-syntax-efficiency/"/>
    <id>https://teddybearfp.github.io/2020/02/14/Python-generate-fake-data-for-testing-database-syntax-efficiency/</id>
    <published>2020-02-14T04:05:16.000Z</published>
    <updated>2020-02-14T15:57:16.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-產出假資料來測試資料庫語法的效率"><a href="#Python-產出假資料來測試資料庫語法的效率" class="headerlink" title="Python 產出假資料來測試資料庫語法的效率"></a>Python 產出假資料來測試資料庫語法的效率</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們需要一些測試資料，例如:要測試資料庫語法是否夠快速，那麼我們可以先寫一個 FakeDataGenerator 來產生包含 ( 名字、性別、生日、到訪日、地址、EMail、備註文字 ) 的測試資料</p><h2 id="fake2db"><a href="#fake2db" class="headerlink" title="fake2db"></a>fake2db</h2><p>這邊我們使用的是 Python 有人提供的 fake2db 函式庫可以得到許多隨機特定格式資料。</p><h3 id="安裝-fake2db"><a href="#安裝-fake2db" class="headerlink" title="安裝 fake2db"></a>安裝 fake2db</h3><p>老樣子用 pip 安裝一下 fake2db<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install fake2db</span><br></pre></td></tr></table></figure></p><h3 id="使用-fake2db"><a href="#使用-fake2db" class="headerlink" title="使用 fake2db"></a>使用 fake2db</h3><p>每次取得 faker 的函式回傳值皆會是函式隨機產生後回傳的每次不一樣</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line">fake = Faker()</span><br><span class="line">print(<span class="string">"Name:"</span>, fake.name())</span><br><span class="line">print(<span class="string">"date:"</span>,fake.date())</span><br><span class="line">print(<span class="string">"thisYearDate:"</span>,fake.date_time_this_year())</span><br><span class="line">print(<span class="string">"Comment:"</span>,fake.text())</span><br><span class="line">print(<span class="string">"word:"</span>,fake.word())</span><br><span class="line">print(<span class="string">"Address:"</span>,fake.address())</span><br><span class="line">print(<span class="string">"PhoneNumber:"</span>, fake.phone_number())</span><br><span class="line">print(<span class="string">"EMail:"</span>, fake.email())</span><br><span class="line"></span><br><span class="line"><span class="comment">#輸出結果如下</span></span><br><span class="line">Name: Christine Kelley</span><br><span class="line">date: <span class="number">2006</span><span class="number">-12</span><span class="number">-24</span></span><br><span class="line">thisYearDate: <span class="number">2020</span><span class="number">-02</span><span class="number">-02</span> <span class="number">03</span>:<span class="number">12</span>:<span class="number">26</span></span><br><span class="line">Comment: Illo fugiat non laudantium libero deleniti consequatur facere. Et esse voluptas dicta. Recusandae ducimus quos earum nesciunt. Similique autem inventore quisquam minus excepturi sint.</span><br><span class="line">word: repellendus</span><br><span class="line">Address: <span class="number">61905</span> Linda Lodge</span><br><span class="line">Lake Reginamouth, GA <span class="number">71925</span></span><br><span class="line">PhoneNumber: <span class="number">00118138799</span></span><br><span class="line">EMail: mbaxter@yahoo.com</span><br></pre></td></tr></table></figure><p>利用以上特性讓我們來做測試資料吧</p><h2 id="FakeDataGenerator-實作"><a href="#FakeDataGenerator-實作" class="headerlink" title="FakeDataGenerator 實作"></a>FakeDataGenerator 實作</h2><p>用 faker 函式創建假的會員資料</p><p>fakeDataNumber 填入欲產出的假資料數量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">'member.db'</span>)</span><br><span class="line">cursorObj = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDatabase</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursorObj.execute(<span class="string">'''CREATE TABLE member</span></span><br><span class="line"><span class="string">                         ('SN'         TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Name'        TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Gender'      TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Birthday'    TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Address'     TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'PhoneNumber' TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'EMail'       TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Comment'     TEXT    NOT NULL);'''</span>)</span><br><span class="line">        print(<span class="string">"member table created!"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"member table already exists."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateFakeData</span><span class="params">( fakeDataNumber )</span>:</span></span><br><span class="line">    fake = Faker()</span><br><span class="line">    data = []</span><br><span class="line">    sn = <span class="number">1</span></span><br><span class="line">    gender = [<span class="string">"M"</span>, <span class="string">"F"</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range( <span class="number">1</span>, fakeDataNumber ) :</span><br><span class="line">        <span class="keyword">if</span>(sn%<span class="number">10000</span> == <span class="number">0</span>):</span><br><span class="line">            print(sn)</span><br><span class="line">        genderSeed = random.randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        data.append([sn,fake.name(),gender[genderSeed],fake.date(),fake.address(),fake.phone_number(),fake.email(),fake.text()])</span><br><span class="line">        sn+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    q = <span class="string">"""INSERT INTO member(SN,Name,Gender,Birthday,Address,PhoneNumber,EMail,Comment) VALUES(?,?,?,?,?,?,?,?)"""</span></span><br><span class="line">    cursorObj.executemany(q,data)</span><br><span class="line">    con.commit()  </span><br><span class="line">    con.close()</span><br><span class="line">    print(<span class="string">"Fake Data generated!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tStart = time.time()</span><br><span class="line">    createDatabase()</span><br><span class="line">    fakeDataNumber = <span class="number">1000</span></span><br><span class="line">    generateFakeData( fakeDataNumber )</span><br><span class="line">    tEnd = time.time()</span><br><span class="line">    print(<span class="string">"It takes "</span>, round (tEnd - tStart, <span class="number">2</span>) , <span class="string">" seconds to generate "</span>, fakeDataNumber, <span class="string">" fake data."</span>)</span><br></pre></td></tr></table></figure></p><p>執行結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">member table already exists.</span><br><span class="line">Fake Data generated!</span><br><span class="line">It takes  4.9  seconds to generate  1000  fake data.</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/kbYTaC6.png" alt></p><h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><ol><li>目前使用上來說 fake.date() 有機會在 faker 函式庫本身內部出錯 ( return 發生錯誤 )導致程式終止 OSError</li><li>fake.text() 因回傳的字串字數多，速度比較慢，會導致在大量產出時速度很慢，若只要一些 Text 的話，可以用 fake.word() 加減用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-產出假資料來測試資料庫語法的效率&quot;&gt;&lt;a href=&quot;#Python-產出假資料來測試資料庫語法的效率&quot; class=&quot;headerlink&quot; title=&quot;Python 產出假資料來測試資料庫語法的效率&quot;&gt;&lt;/a&gt;Python 產出假資料來測試資料
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="fake2db" scheme="https://teddybearfp.github.io/tags/fake2db/"/>
    
  </entry>
  
  <entry>
    <title>Python 打造我的第二隻專屬 LineBot</title>
    <link href="https://teddybearfp.github.io/2019/10/22/Python-%E6%89%93%E9%80%A0%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E9%9A%BB-LineBot/"/>
    <id>https://teddybearfp.github.io/2019/10/22/Python-打造我的第二隻-LineBot/</id>
    <published>2019-10-22T07:05:16.000Z</published>
    <updated>2019-10-23T13:49:25.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-打造我的第二隻專屬-LineBot"><a href="#Python-打造我的第二隻專屬-LineBot" class="headerlink" title="Python 打造我的第二隻專屬 LineBot"></a>Python 打造我的第二隻專屬 LineBot</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的第一個 <a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">LineBot 泰迪熊</a> 已經運作一年多了，最近 M 學長想要有一隻可以在公司揪團購的時候能用的機器人，這題材我覺得蠻有趣的，想說順便整理先前的做法並作一些改善，同時記錄製做過程，所以決定再創造一隻機器人</p><h2 id="LineBot"><a href="#LineBot" class="headerlink" title="LineBot"></a>LineBot</h2><p>LineBot 因不需安裝程式，可直接在 Line 上進行操作，若是僅提供些訊息的話是比 app 來的更方便快速的，給親朋好友使用也只需分享好友資料並可開始使用，所以也是個不錯的開發方式</p><h2 id="我的第一隻-LineBot-泰迪熊"><a href="#我的第一隻-LineBot-泰迪熊" class="headerlink" title="我的第一隻 LineBot 泰迪熊"></a>我的第一隻 LineBot 泰迪熊</h2><p>在我先前的文章有記錄我的第一個 <a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">LineBot 泰迪熊</a> </p><p>主要功能有以下幾個</p><ol><li>快速輸入面板</li><li>取得天氣資訊</li><li>取得將各大版 PTT 的 Top 15 文章，直接幫你篩選熱門文章節省時間</li><li>取得即時新聞內容</li><li>取得現正熱映電影與電影評分</li><li>推薦附近好吃的餐廳與小吃並得到評分與距離</li><li>聊天功能</li><li>圖戰功能</li><li>關鍵字搜尋功能</li></ol><h2 id="第二隻-LineBot-泰迪熊-Super"><a href="#第二隻-LineBot-泰迪熊-Super" class="headerlink" title="第二隻 LineBot 泰迪熊 Super"></a>第二隻 LineBot 泰迪熊 Super</h2><p>目前第二隻 LineBot 的定位，會是功能較簡單，利於之後重新定位或是擴充的角色，命名方式是以七龍珠的內的命名法則為參考</p><p>主要功能暫定有以下幾個</p><ol><li>呈現菜單</li><li>紀錄大家要點什麼餐點</li><li>呈現大家要點的餐點內容</li></ol><h2 id="創建-LineBot"><a href="#創建-LineBot" class="headerlink" title="創建 LineBot"></a>創建 LineBot</h2><h3 id="申請-Line-帳號"><a href="#申請-Line-帳號" class="headerlink" title="申請 Line 帳號"></a>申請 Line 帳號</h3><p>第一步是先申請 Line 帳號，或用自己的 Line 帳號，才可以創建 LineBot </p><h3 id="LINE-Develop"><a href="#LINE-Develop" class="headerlink" title="LINE Develop"></a>LINE Develop</h3><h4 id="創建頻道"><a href="#創建頻道" class="headerlink" title="創建頻道"></a>創建頻道</h4><p><a href="https://developers.line.biz/en/" target="_blank" rel="noopener">LINE Develop</a> 中登入 Line 帳號後會看到此頁面<br>選擇 Provider List 看到現有頻道</p><p><img src="https://i.imgur.com/lD7kLQD.png" alt></p><p>選擇 Create new Channel ，如果要製做 LineBot 請選 Message API</p><p><img src="https://i.imgur.com/C5k8vaO.png" alt></p><p>接著填寫 LineBot 基本資料，信箱、概述等等，填寫完畢後送出並同意 Line 相關規章</p><p>完成後會看到 Provider List 新增了剛剛創建的 LineBot</p><p><img src="https://i.imgur.com/9o73ACv.png" alt></p><h4 id="允許-webhook-傳訊"><a href="#允許-webhook-傳訊" class="headerlink" title="允許 webhook 傳訊"></a>允許 webhook 傳訊</h4><p>點選剛剛創建的 LineBot 會看到該機器人的設置內容，將 webhook enabled 並儲存</p><p><img src="https://i.imgur.com/NHhhuMr.png" alt></p><h4 id="取得-Channel-secret、Channel-access-token"><a href="#取得-Channel-secret、Channel-access-token" class="headerlink" title="取得 Channel secret、Channel access token"></a>取得 Channel secret、Channel access token</h4><p>這邊最重要的事情就是取得 Channel secret 跟 Channel access token</p><p>Channel secret</p><p><img src="https://i.imgur.com/nNUUEl0.png" alt></p><p>若 Channel access token 是空的，則按右邊 Issue 產生</p><p><img src="https://i.imgur.com/Ot4Qd67.png" alt></p><p>到時候將這兩個值貼在程式碼中</p><pre><code>Channel_Access_Token = YOUR_CHANNEL_SECRETChannel_Secret = YOUR_CHANNEL_SECRET</code></pre><h3 id="LINE-Official-Account-Manager"><a href="#LINE-Official-Account-Manager" class="headerlink" title="LINE Official Account Manager"></a>LINE Official Account Manager</h3><p>接著我們到 <a href="https://manager.line.biz" target="_blank" rel="noopener">LINE Official Account Manager</a> 對泰迪熊 Super 進行更詳細的設定</p><h4 id="帳號設定頁面"><a href="#帳號設定頁面" class="headerlink" title="帳號設定頁面"></a>帳號設定頁面</h4><p><img src="https://i.imgur.com/Flx16BJ.png" alt></p><p>勾選 接受邀請加入群組或多人聊天室 讓泰迪熊 Super 能變群組機器人<br><img src="https://i.imgur.com/hY8gZn4.png" alt></p><h4 id="回應設定頁面"><a href="#回應設定頁面" class="headerlink" title="回應設定頁面"></a>回應設定頁面</h4><p>可以設置一些基本問後語句，可以在這邊將罐頭訊息關閉</p><p><img src="https://i.imgur.com/J0hw0Ez.png" alt></p><h2 id="部屬-LineBot"><a href="#部屬-LineBot" class="headerlink" title="部屬 LineBot"></a>部屬 LineBot</h2><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><p>設定完一些基本資料與行為後，要將 LineBot 部屬到 Heroku 上運行， 首先要先申辦 Heroku 帳號</p><h4 id="heroku-cli"><a href="#heroku-cli" class="headerlink" title="heroku-cli"></a>heroku-cli</h4><p>有了帳號後下載 <a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noopener">heroku-cli</a></p><p>注意: Heroku CLI 需要 Git 環境需先安裝完成後再安裝 CLI<br>The Heroku CLI requires Git, the popular version control system. If you don’t already have Git installed, complete the following before installing the CLI:</p><p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener">Git installation</a><br><a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup" target="_blank" rel="noopener">First-time Git setup</a></p><h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><p>Git 與 Heroku CLI 安裝完成後，開啟命令提示字元 command line 切換到 linebot 的資料夾並輸入以下指令</p><p>1.登入 Heroku</p><pre><code>heroku login</code></pre><p>輸入 heroku 帳號密碼登入成功會寫 Logged in as “你的信箱” 如下圖</p><p><img src="https://i.imgur.com/PlTUdWl.png" alt></p><p>2.創建.git資料夾(初始化 git)<br>僅在第一次使用時要輸入</p><pre><code>git config --global user.name &quot;你的名字&quot;git config --global user.email 你的信箱git init</code></pre><p><img src="https://i.imgur.com/uylQ6lp.png" alt></p><p>可以到該層看是否創建 .git 資料夾</p><p>3.與 Heroku 連線</p><pre><code>heroku git:remote -a HEROKU_APP名稱</code></pre><p><img src="https://i.imgur.com/C66dMoq.png" alt></p><p>4.偵測變更 與 commit 與 push<br>注意1: git add .中的這個.需要與 add 空一格<br>注意2: 建置時 buildpackages 可以選擇語言 例如: 選擇Python<br><img src="https://i.imgur.com/FL4Wjxc.png" alt></p><pre><code>git add .git commit -m &quot;此次變更說明&quot;git push heroku master</code></pre><p>成功部屬後，會在 Heroku app 的 overview 中看到 build successed</p><p><img src="https://i.imgur.com/KyzN5FP.png" alt></p><p>以上四步驟指令可以在 web app 裡的 deploy 看到</p><p><img src="https://i.imgur.com/bBQIxsE.png" alt></p><p>之後有任何變更要套用僅需第一步驟登入 heroku 與第三步驟連線 heroku 並且反覆執行第四步驟即可更新</p><h4 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h4><p>除了 cmd 指令方式還可以用 git gui 方式上傳程式碼，部屬到 Heroku 上面，我用的是 <a href="https://www.sourcetreeapp.com" target="_blank" rel="noopener">Sourcetree</a> 整體使用上算是容易上手且頁面簡潔，如果覺得用 cmd 部屬太困難那麼就用有使用者介面的 git gui 方式吧</p><h2 id="Webhook-URL"><a href="#Webhook-URL" class="headerlink" title="Webhook URL"></a>Webhook URL</h2><p>最後要把之前尚未填寫的 Webhook URL 給補上，這個值會是你的 Heroku 部屬完成後的網址加上/callback</p><p>例如: 我部屬完成 Heroku ，在 Heroku 主頁右上角 Open app 得到剛剛部屬完成的位置 <a href="https://superteddybearbot.herokuapp.com" target="_blank" rel="noopener">https://superteddybearbot.herokuapp.com</a><br>那麼我們的 Webhook URL 即是 <a href="https://superteddybearbot.herokuapp.com/callback" target="_blank" rel="noopener">https://superteddybearbot.herokuapp.com/callback</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.oxxostudio.tw/articles/201701/line-bot.html" target="_blank" rel="noopener">LINE BOT 實戰 (原理篇)</a><br><a href="https://github.com/twtrubiks/line-bot-tutorial" target="_blank" rel="noopener">twtrubiks/line-bot-tutorial - GitHub</a><br><a href="https://yaoandy107.github.io/line-bot-tutorial/" target="_blank" rel="noopener">LineBot+Python，輕鬆建立聊天機器人</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-打造我的第二隻專屬-LineBot&quot;&gt;&lt;a href=&quot;#Python-打造我的第二隻專屬-LineBot&quot; class=&quot;headerlink&quot; title=&quot;Python 打造我的第二隻專屬 LineBot&quot;&gt;&lt;/a&gt;Python 打造我的第二隻
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="LineBot" scheme="https://teddybearfp.github.io/tags/LineBot/"/>
    
  </entry>
  
  <entry>
    <title>Python 查詢 IP 位址是多少</title>
    <link href="https://teddybearfp.github.io/2019/09/23/Python-%E6%9F%A5%E8%A9%A2-IP-%E4%BD%8D%E5%9D%80%E6%98%AF%E5%A4%9A%E5%B0%91/"/>
    <id>https://teddybearfp.github.io/2019/09/23/Python-查詢-IP-位址是多少/</id>
    <published>2019-09-23T13:05:16.000Z</published>
    <updated>2019-09-23T15:26:02.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們想知道自己當下電腦使用的網路 IP 位址是多少 ( 連結到的WIFI網路或是有線網路 ) ，常見的IP位址分為IPv4與IPv6兩大類</p><h2 id="取得-IP-位址"><a href="#取得-IP-位址" class="headerlink" title="取得 IP 位址"></a>取得 IP 位址</h2><h3 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h3><p>在 cmd 我們可以透過 ipconfig 得到 IP 位址<br>例如: </p><p>使用 ipconfig /all 得到</p><pre><code>IP Address. . . . . . . . . . . . : 192.168.0.100</code></pre><p>或是用 ipconfig 得到</p><pre><code>IPv4 位址 . . . . . . . . . . . . : 192.168.0.100</code></pre><h2 id="取得對外-IP-位址"><a href="#取得對外-IP-位址" class="headerlink" title="取得對外 IP 位址"></a>取得對外 IP 位址</h2><p>取得對外 IP 位址可以透過很多取得 IP 位址網站得到<br>例如:<br>    <a href="https://www.whatismyip.com.tw/" target="_blank" rel="noopener">我的IP位址查詢</a><br><a href="https://www.ifreesite.com/ipaddress/" target="_blank" rel="noopener">IP地理位置查詢/域名IP地址查詢 地圖版</a></p><p>那麼如果要用程式取得 IP 位址的話，可以運用一下爬蟲技術達到這個功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"></span><br><span class="line">ip = get(<span class="string">'https://api.ipify.org'</span>).text</span><br></pre></td></tr></table></figure></p><h2 id="取得國家與地理位置"><a href="#取得國家與地理位置" class="headerlink" title="取得國家與地理位置"></a>取得國家與地理位置</h2><p>有了對外 IP 位址我們可以透過以下網址搜尋該對外 IP 位址的國家與地理位置<br><a href="https://www.ez2o.com/App/Net/IP" target="_blank" rel="noopener">IP 查詢- 快速搜尋IP 地理位置- ez2o Studio</a></p><p>假如是遠端遙控不知道在何處的電腦，撇開 IP 位址的方式當然可以用 google map 定位得知裝置究竟是在哪裡囉<br>雖然以上這假設蠻奇怪的，但我還真的遇過這種特殊要求XD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有時候我們想知道自己當下電腦使用的網路 IP 位址是多少 ( 連結到的WIFI網路或是有線網路 ) ，常見的IP位址分為IPv4與IPv6兩
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="IP" scheme="https://teddybearfp.github.io/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>pyinstaller 將 Python script 打包成執行檔</title>
    <link href="https://teddybearfp.github.io/2019/09/23/pyinstaller-%E5%B0%87-Python-script-%E6%89%93%E5%8C%85%E6%88%90%E5%9F%B7%E8%A1%8C%E6%AA%94/"/>
    <id>https://teddybearfp.github.io/2019/09/23/pyinstaller-將-Python-script-打包成執行檔/</id>
    <published>2019-09-23T12:05:16.000Z</published>
    <updated>2020-02-20T13:07:44.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我常常用 python 完成一份小程式解決一些生活上的雜事，那麼完成一份程式碼後，想要跟他人分享那麼就需要將 python 腳本打包成執行檔，讓他人使用，要將 python script 打包成執行檔需要使用 pyinstaller ，這一篇紀錄如何使用 pyinstaller</p><h2 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h2><h3 id="安裝-pyinstaller"><a href="#安裝-pyinstaller" class="headerlink" title="安裝 pyinstaller"></a>安裝 pyinstaller</h3><p>開啟 cmd 並輸入以下指令安裝 pyinstaller<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyinstaller</span><br></pre></td></tr></table></figure></p><h3 id="使用-pyinstaller"><a href="#使用-pyinstaller" class="headerlink" title="使用 pyinstaller"></a>使用 pyinstaller</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-F: 將多個檔案打包成單一個執行檔放在 dist 資料夾中</span><br><span class="line">-w: 關閉 cmd 視窗 不顯示</span><br><span class="line">-i: 將執行檔附上圖片</span><br><span class="line"></span><br><span class="line">pyinstaller -F DataAnalysis.py -i teddybear.ico</span><br><span class="line">pyinstaller -F -w DataAnalysis.py</span><br></pre></td></tr></table></figure><h2 id="python-failed-to-execute-script-問題"><a href="#python-failed-to-execute-script-問題" class="headerlink" title="python failed to execute script 問題"></a>python failed to execute script 問題</h2><p>如果執行打包完成的執行檔時無法執行並跳出”python failed to execute script”這個問題，我自己的解法有以下兩種</p><h3 id="檢查是否有不認得的-module"><a href="#檢查是否有不認得的-module" class="headerlink" title="檢查是否有不認得的 module"></a>檢查是否有不認得的 module</h3><p>例如:使用到 requests 的 module 卻沒有該函式庫<br>解法:先開啟 cmd 輸入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure></p><p>完成後再重新打包一次執行檔</p><h3 id="檢查是否-pyinstaller-太舊"><a href="#檢查是否-pyinstaller-太舊" class="headerlink" title="檢查是否 pyinstaller 太舊"></a>檢查是否 pyinstaller 太舊</h3><p>我本身遇到這問題的時候是用這個解法成功解決的</p><p>先升級 pip<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></p><p>升級完 pip 再安裝一次 pyinstaller</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w DataAnalysis.py</span><br></pre></td></tr></table></figure><h3 id="加入版本資訊"><a href="#加入版本資訊" class="headerlink" title="加入版本資訊"></a>加入版本資訊</h3><p>首先我們先填寫版本資訊的文字檔</p><h4 id="file-version-info-txt"><a href="#file-version-info-txt" class="headerlink" title="file_version_info.txt"></a>file_version_info.txt</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">VSVersionInfo(</span><br><span class="line">  ffi=FixedFileInfo(</span><br><span class="line">    filevers=(1, 0, 0, 1),</span><br><span class="line">    prodvers=(1, 0, 0, 1),</span><br><span class="line">    mask=0x3f,</span><br><span class="line">    flags=0x0,</span><br><span class="line">    OS=0x40004,</span><br><span class="line">    fileType=0x1,</span><br><span class="line">    subtype=0x0,</span><br><span class="line">    date=(0, 0)</span><br><span class="line">    ),</span><br><span class="line">  kids=[</span><br><span class="line">    StringFileInfo(</span><br><span class="line">      [</span><br><span class="line">      StringTable(</span><br><span class="line">        u&apos;040904B0&apos;,</span><br><span class="line">        [StringStruct(u&apos;CompanyName&apos;, u&apos;TeddyBearFp&apos;),</span><br><span class="line">        StringStruct(u&apos;FileDescription&apos;, u&apos;Powerful crawler created by G.C.L.&apos;),</span><br><span class="line">        StringStruct(u&apos;FileVersion&apos;, u&apos;v1.0.0.1&apos;),</span><br><span class="line">        StringStruct(u&apos;InternalName&apos;, u&apos;PowerfulHelper&apos;),</span><br><span class="line">        StringStruct(u&apos;LegalCopyright&apos;, u&apos;G.C.L. All rights reserved.&apos;),</span><br><span class="line">        StringStruct(u&apos;OriginalFilename&apos;, u&apos;PowerfulHelper.exe&apos;),</span><br><span class="line">        StringStruct(u&apos;ProductName&apos;, u&apos;PowerfulHelper.exe&apos;),</span><br><span class="line">        StringStruct(u&apos;ProductVersion&apos;, u&apos;v1.0.0.1&apos;)])</span><br><span class="line">      ]), </span><br><span class="line">    VarFileInfo([VarStruct(u&apos;Translation&apos;, [1033, 1200])])</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="pyinstaller-1"><a href="#pyinstaller-1" class="headerlink" title="pyinstaller"></a>pyinstaller</h4><p>將剛剛填寫好的版本資訊放在 py 檔同一層<br>接著用 pyinstaller 將版本資訊加到執行檔中<br>指令:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F --version-file=file_version_info.txt PowerfulHelper.py</span><br></pre></td></tr></table></figure></p><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>如果是用 64 bits 的 Python 去打包執行檔則只能在 64 bits 上使用<br>而在 32 bits 打包的可以在 64 bits 跟 32 bits 使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我常常用 python 完成一份小程式解決一些生活上的雜事，那麼完成一份程式碼後，想要跟他人分享那麼就需要將 python 腳本打包成執行檔
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="pyinstaller" scheme="https://teddybearfp.github.io/tags/pyinstaller/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Walker</title>
    <link href="https://teddybearfp.github.io/2019/08/22/Dependency-Walker/"/>
    <id>https://teddybearfp.github.io/2019/08/22/Dependency-Walker/</id>
    <published>2019-08-22T04:05:16.000Z</published>
    <updated>2019-08-22T13:30:12.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>記得剛進公司的時候，對dll動態連結檔還非常不了解，寫專案的時候缺少哪個dll都不太清楚，導致靜態連結檔正確產出obj檔案但是在執行檔的時候會crash掉，每次解決都需要花不少時間找少哪個動態連結檔dll，今天來記錄一下一個神好用的軟體，Dependency Walker，有了這個神軟體考試都一百分</p><h2 id="Dependency-Walker-概述"><a href="#Dependency-Walker-概述" class="headerlink" title="Dependency Walker 概述"></a>Dependency Walker 概述</h2><p>當程式執行時，有DLL問題時，可以使用Dependency Walker工具做檢查<br>Dependency Walker可以遞迴地檢測程式所使用的所有相依動態連結檔DLL。</p><h2 id="使用-Dependency-Walker"><a href="#使用-Dependency-Walker" class="headerlink" title="使用 Dependency Walker"></a>使用 Dependency Walker</h2><p>要使用Dependency Walker前提須要先產出執行檔，那麼就需要先把Link error之類的連結問題與obj先產出才會有執行檔，有了執行檔後開啟Dependency Walker選擇欲檢查的執行檔，就會出現以下畫面</p><h3 id="顯示缺少的dll"><a href="#顯示缺少的dll" class="headerlink" title="顯示缺少的dll"></a>顯示缺少的dll</h3><p><img src="https://i.imgur.com/y2kWeMt.png" alt></p><p>從上面的圖可得知缺少3個dll分別為VTKCOMMONCOLOR,VTKCOMMONCOMPUTATIONALGEOMETRY,VTKCOMMONCORE<br>三個動態連結檔dll那麼將它們放至執行檔旁一切就解決拉</p><h3 id="補上後的畫面"><a href="#補上後的畫面" class="headerlink" title="補上後的畫面"></a>補上後的畫面</h3><p><img src="https://i.imgur.com/IuMT3uH.png" alt></p><p>圖中可以看到剛剛缺少的dll已經補上了<br>那麼這時候如果原本的問題僅是缺少dll問題的化基本上就能執行囉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;記得剛進公司的時候，對dll動態連結檔還非常不了解，寫專案的時候缺少哪個dll都不太清楚，導致靜態連結檔正確產出obj檔案但是在執行檔的時候
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Dependency Walker" scheme="https://teddybearfp.github.io/tags/Dependency-Walker/"/>
    
  </entry>
  
  <entry>
    <title>Python VTK</title>
    <link href="https://teddybearfp.github.io/2019/07/09/Python-VTK/"/>
    <id>https://teddybearfp.github.io/2019/07/09/Python-VTK/</id>
    <published>2019-07-09T01:05:16.000Z</published>
    <updated>2019-07-13T05:35:04.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我上一篇CMake GUI記錄在C++套用Third-Party VTK的流程有點複雜，這一篇記錄Python套用VTK會簡單許多</p><h2 id="Python-VTK"><a href="#Python-VTK" class="headerlink" title="Python VTK"></a>Python VTK</h2><p>Python使用VTK套件就沒拿麼複雜僅需簡單的至下方網站下載擴充包<br>至<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">非官方擴充包(Unofficial Windows Binaries for Python Extension Packages)</a>下載VTK-8.2.0-cp36-cp36m-win32.whl，這檔名36的部分指的是Python版本，載完解壓縮完後，至cmd中執行python install VTK-8.2.0-cp36-cp36m-win32.whl開始安裝<br>完成後在欲使用VTK的專案中上方添加import vtk</p><h2 id="Python-VTK-測試"><a href="#Python-VTK-測試" class="headerlink" title="Python VTK 測試"></a>Python VTK 測試</h2><p>上述步驟完成後，可以用以下程式碼測試</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#柱體展示</span></span><br><span class="line"><span class="keyword">import</span> vtk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    colors = vtk.vtkNamedColors()</span><br><span class="line">    <span class="comment"># Set the background color.</span></span><br><span class="line">    bkg = map(<span class="keyword">lambda</span> x: x / <span class="number">255.0</span>, [<span class="number">26</span>, <span class="number">51</span>, <span class="number">102</span>, <span class="number">255</span>])</span><br><span class="line">    colors.SetColor(<span class="string">"BkgColor"</span>, *bkg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This creates a polygonal cylinder model with eight circumferential</span></span><br><span class="line">    <span class="comment"># facets.</span></span><br><span class="line">    cylinder = vtk.vtkCylinderSource()</span><br><span class="line">    cylinder.SetResolution(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The mapper is responsible for pushing the geometry into the graphics</span></span><br><span class="line">    <span class="comment"># library. It may also do color mapping, if scalars or other</span></span><br><span class="line">    <span class="comment"># attributes are defined.</span></span><br><span class="line">    cylinderMapper = vtk.vtkPolyDataMapper()</span><br><span class="line">    cylinderMapper.SetInputConnection(cylinder.GetOutputPort())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The actor is a grouping mechanism: besides the geometry (mapper), it</span></span><br><span class="line">    <span class="comment"># also has a property, transformation matrix, and/or texture map.</span></span><br><span class="line">    <span class="comment"># Here we set its color and rotate it -22.5 degrees.</span></span><br><span class="line">    cylinderActor = vtk.vtkActor()</span><br><span class="line">    cylinderActor.SetMapper(cylinderMapper)</span><br><span class="line">    cylinderActor.GetProperty().SetColor(colors.GetColor3d(<span class="string">"Tomato"</span>))</span><br><span class="line">    cylinderActor.RotateX(<span class="number">30.0</span>)</span><br><span class="line">    cylinderActor.RotateY(<span class="number">-45.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the graphics structure. The renderer renders into the render</span></span><br><span class="line">    <span class="comment"># window. The render window interactor captures mouse events and will</span></span><br><span class="line">    <span class="comment"># perform appropriate camera or actor manipulation depending on the</span></span><br><span class="line">    <span class="comment"># nature of the events.</span></span><br><span class="line">    ren = vtk.vtkRenderer()</span><br><span class="line">    renWin = vtk.vtkRenderWindow()</span><br><span class="line">    renWin.AddRenderer(ren)</span><br><span class="line">    iren = vtk.vtkRenderWindowInteractor()</span><br><span class="line">    iren.SetRenderWindow(renWin)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add the actors to the renderer, set the background and size</span></span><br><span class="line">    ren.AddActor(cylinderActor)</span><br><span class="line">    ren.SetBackground(colors.GetColor3d(<span class="string">"BkgColor"</span>))</span><br><span class="line">    renWin.SetSize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    renWin.SetWindowName(<span class="string">'Cylinder'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This allows the interactor to initalize itself. It has to be</span></span><br><span class="line">    <span class="comment"># called before an event loop.</span></span><br><span class="line">    iren.Initialize()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We'll zoom in a little by accessing the camera and invoking a "Zoom"</span></span><br><span class="line">    <span class="comment"># method on it.</span></span><br><span class="line">    ren.ResetCamera()</span><br><span class="line">    ren.GetActiveCamera().Zoom(<span class="number">1.5</span>)</span><br><span class="line">    renWin.Render()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Start the event loop.</span></span><br><span class="line">    iren.Start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>出現柱體就代表成功拉</p><p>那麼可以進行一些MRI或是CT的3D Volume Rendering</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我上一篇CMake GUI記錄在C++套用Third-Party VTK的流程有點複雜，這一篇記錄Python套用VTK會簡單許多&lt;/p&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="VTK" scheme="https://teddybearfp.github.io/tags/VTK/"/>
    
  </entry>
  
  <entry>
    <title>Python sqlite3 SqlDBHandler</title>
    <link href="https://teddybearfp.github.io/2019/06/23/Python-sqlite3-SqlDBHandler/"/>
    <id>https://teddybearfp.github.io/2019/06/23/Python-sqlite3-SqlDBHandler/</id>
    <published>2019-06-23T04:05:16.000Z</published>
    <updated>2019-07-05T14:08:39.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在程式的執行時，我們可以產出一些參數在資料庫中讓程式一開始有預設行為，也便於後續更改行為時不用改程式碼僅需更改資料庫參數，這一篇紀錄使用python中的sqlite3簡易的database CRUD操作模組製作的SqlDBHandler，完成了SqlDBHandler可以在往後有資料庫需求時快速的建立資料庫，那麼看一下該怎麼使用這個SqlDBHandler吧</p><h2 id="SqlDBHandler"><a href="#SqlDBHandler" class="headerlink" title="SqlDBHandler"></a>SqlDBHandler</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment">#創建資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(levelname)s : %(message)s'</span>, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDB</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">            logging.info(path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">                os.mkdir(path)</span><br><span class="line">                logging.info(<span class="string">"mkdir "</span> + path +<span class="string">" successfully"</span>)</span><br><span class="line">            <span class="comment">#資料夾創建成功後連結資料庫</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.conn = sqlite3.connect(<span class="string">'C:\\ProgramData\\'</span> + folderName + <span class="string">'\\'</span> + databaseName + <span class="string">".sqlite"</span>)</span><br><span class="line">                self.c = self.conn.cursor()</span><br><span class="line">                logging.info(<span class="string">"Opened database successfully"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.warning(<span class="string">"Opened database Failed"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"mkdir Failed. Do you remember import os?"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createTable</span><span class="params">(self, tableName, tableStructure)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#Sql語法 建立表格,表格名 欄位名 欄位型別</span></span><br><span class="line">            <span class="comment">#執行Sql語法</span></span><br><span class="line">            self.c.execute(<span class="string">"CREATE TABLE "</span> + tableName + <span class="string">"("</span> + tableStructure + <span class="string">");"</span>)</span><br><span class="line">            logging.info(<span class="string">"Table created successfully"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.info(<span class="string">"CreateTable Error maybe database is exits!"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, tableName, tableFields, tableValue)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"INSERT INTO "</span> + tableName + <span class="string">" ("</span> + tableFields + <span class="string">") VALUES ("</span> + tableValue + <span class="string">")"</span></span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAll</span><span class="params">(self, tableName)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectByCondition</span><span class="params">(self, tableName, searchCondition)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" WHERE "</span> + searchCondition</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, updateCondition)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"UPDATE "</span> + tableName + <span class="string">" SET "</span> + recordToChange + <span class="string">" where "</span> + updateCondition</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, tableName, deleteCondition)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tableName <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> tableName != <span class="string">''</span>:</span><br><span class="line">            self.dbsql = <span class="string">"DELETE from "</span> + tableName + <span class="string">" where "</span> + deleteCondition</span><br><span class="line">            logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">            result = self.execSql(self.dbsql)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSql</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 執行sql語句 </span></span><br><span class="line">            self.c.execute(dbsql)</span><br><span class="line">        <span class="comment"># 進行資料庫語句的提交操作，不提交則無法生效，每次執行後都要提交</span></span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.info(<span class="string">"Operate Dababase Error !"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSqlWithReturn</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor = self.conn.execute(dbsql)</span><br><span class="line">            <span class="comment"># 用一個變數來接受fetchall（）查詢所有這個函式返回的值。,fetchone ()是查詢一個，只有一個結果和fetchall有區別</span></span><br><span class="line">            <span class="keyword">return</span> self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"select Record Error !"</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 關閉遊標</span></span><br><span class="line">            self.c.close()</span><br><span class="line">            <span class="comment"># 關閉資料庫連結,在資料庫操作完成後需要把游標與連結都關掉</span></span><br><span class="line">            self.conn.close()</span><br><span class="line">            logging.info(<span class="string">"Closed database successfully"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"Closed database Failed"</span>)</span><br></pre></td></tr></table></figure><h2 id="檔案放置架構"><a href="#檔案放置架構" class="headerlink" title="檔案放置架構"></a>檔案放置架構</h2><pre><code>D:\Application├── modules│   └── SqlDBHandler.py|        └── SqlDBHandler.py└── modulesTester    └── SqlDBHandlerTester.py        └── SqlDBHandlerTester.py</code></pre><h2 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"D:\Application"</span>)</span><br><span class="line"><span class="keyword">from</span> modules.SqlDBHandler.SqlDBHandler <span class="keyword">import</span> SqlDB</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#填寫欲創建的資料庫相關資料</span></span><br><span class="line">    folderName = <span class="string">"DBHandler"</span></span><br><span class="line">    databaseName = <span class="string">"ExchangeHelper"</span></span><br><span class="line">    tableName = <span class="string">"TARGET"</span></span><br><span class="line">    fieldsName = <span class="string">"幣別, 目標匯率, 爬取日期, 今日是否觸價, 是否爬取"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#implement SqlDB 傳入(資料夾名稱, 資料庫名稱)</span></span><br><span class="line">    db = SqlDB( folderName, databaseName )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#=====SqlDB CRUD=====</span></span><br><span class="line">    <span class="comment">#1.建立資料表 傳入(資料表格名稱, 表格結構)</span></span><br><span class="line">    db.createTable( tableName, </span><br><span class="line">                    <span class="string">'''</span></span><br><span class="line"><span class="string">                    '幣別'          TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                    '目標匯率'       INT     NOT NULL,</span></span><br><span class="line"><span class="string">                    '爬取日期'       DATE    NOT NULL,</span></span><br><span class="line"><span class="string">                    '今日是否觸價'   TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                    '是否爬取'       TEXT    NOT NULL</span></span><br><span class="line"><span class="string">                    '''</span></span><br><span class="line">                  )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#2.insert用法: 插入資料 傳入(資料表格名稱, 欄位名稱, 資料)</span></span><br><span class="line">    <span class="comment">#導入datetime取得時間</span></span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">    date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    tableValue = <span class="string">"'美金 (USD)', 30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y'"</span></span><br><span class="line">    db.insert( tableName, fieldsName, tableValue)</span><br><span class="line">    tableValue = <span class="string">"'日圓 (JPY)', 0.30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y'"</span></span><br><span class="line">    db.insert( tableName, fieldsName, tableValue)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#3.selectAll用法: 取得整個資料表格資料</span></span><br><span class="line">    dataAll = db.selectAll( tableName )</span><br><span class="line">    <span class="comment">#逐一列出資料</span></span><br><span class="line">    print( <span class="string">"Original data: SELECT * FROM TARGET"</span> )</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dataAll:</span><br><span class="line">        print( c )</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#4.selectByCondition用法: 取得資料表格特定條件資料</span></span><br><span class="line">    searchCondition = <span class="string">'"幣別" = "日圓 (JPY)"'</span></span><br><span class="line">    data = db.selectByCondition( tableName, searchCondition )</span><br><span class="line">    print( <span class="string">"selectByCondition: SELECT * FROM TARGET WHERE \"幣別\" = \"日圓 (JPY)\""</span> )</span><br><span class="line">    print( data )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#5.update用法: </span></span><br><span class="line">    recordToChange = <span class="string">'"目標匯率" = 29'</span></span><br><span class="line">    updateCondition= <span class="string">'"幣別" = "美金 (USD)"'</span></span><br><span class="line">    db.update( tableName, recordToChange, updateCondition )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#6.delete用法:</span></span><br><span class="line">    deleteCondition = <span class="string">'"幣別" = "日圓 (JPY)"'</span></span><br><span class="line">    db.delete( tableName, deleteCondition )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#再次讀取整個表格資料查看修改後的結果</span></span><br><span class="line">    dataAll = db.selectAll( tableName )</span><br><span class="line">    <span class="comment">#逐一列出資料</span></span><br><span class="line">    print( <span class="string">"After update/delete data"</span> )</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> dataAll:</span><br><span class="line">        print( c )</span><br><span class="line">        <span class="comment">#陣列方式可以分別取得每筆資料的各個欄位值</span></span><br><span class="line">        <span class="comment">#c[0]: 美金 (USD)</span></span><br><span class="line">        <span class="comment">#c[1]: 29</span></span><br><span class="line">        <span class="comment">#c[2]: 2019-06-23</span></span><br><span class="line">        <span class="comment">#c[3]: N</span></span><br><span class="line">        <span class="comment">#c[4]: Y</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#7.關閉cursor, 關閉資料庫連結</span></span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><h2 id="輸出結果"><a href="#輸出結果" class="headerlink" title="輸出結果"></a>輸出結果</h2><p><img src="https://i.imgur.com/8wqhnDQ.png" alt></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://kaiching.org/pydoing/py/python-library-sqlite3.html" target="_blank" rel="noopener">Python 速查手冊- 12.6 資料庫sqlite3 - 程式語言教學誌</a><br><a href="https://www.google.com/search?ei=UeUOXdKzEY7_0gSsx7qgDg&amp;q=python+sqlite3+&amp;oq=python+sqlite3+&amp;gs_l=psy-ab.3..0l10.5367.9993..10405...7.0..0.74.869.15......0....1..gws-wiz.......0i13j0i10.ZZKlmg1fkvQ" target="_blank" rel="noopener">透過Python 將資料存入SQLite 教學– 小魚的資訊技術學習路– Medium</a></p><p>本篇以下列網站為範本做修改<br><a href="http://qinfei.glrsmart.com/2017/03/08/python-sqlite3-shu-ju-ku-cao-zuo-li-cheng/" target="_blank" rel="noopener">Python Sqlite3 数据库操作例程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在程式的執行時，我們可以產出一些參數在資料庫中讓程式一開始有預設行為，也便於後續更改行為時不用改程式碼僅需更改資料庫參數，這一篇紀錄使用py
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="sqlite3" scheme="https://teddybearfp.github.io/tags/sqlite3/"/>
    
  </entry>
  
  <entry>
    <title>Python 匯率觸價通知小幫手</title>
    <link href="https://teddybearfp.github.io/2019/06/21/Python-%E5%8C%AF%E7%8E%87%E8%A7%B8%E5%83%B9%E9%80%9A%E7%9F%A5%E5%B0%8F%E5%B9%AB%E6%89%8B/"/>
    <id>https://teddybearfp.github.io/2019/06/21/Python-匯率觸價通知小幫手/</id>
    <published>2019-06-21T04:05:16.000Z</published>
    <updated>2019-07-10T13:16:18.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子難得出國郊遊，遇到了美中貿易大戰，日幣瘋狂漲漲漲一路飆到0.29多，我一整個傻眼貓咪，少吃好幾碗拉麵的我就決定了以後有匯率觸價就在低點購入一些，這篇記錄我編寫的匯率觸價通知小幫手，當匯率達到你心中可接受的範圍後便會寄信到你的email信箱中，告訴你484該入手各種幣別了</p><h2 id="匯率小幫手介紹"><a href="#匯率小幫手介紹" class="headerlink" title="匯率小幫手介紹"></a>匯率小幫手介紹</h2><p>這個小幫手在執行時會顯示台灣銀行的匯率，接著你可以輸入心中能接受的日幣價位，例如0.29那麼當日幣低於0.29時便會寄信給你，有了這小工具對於要出國的人或是投資的人都是個不錯的小幫手!<br>後續可能新增走勢圖之類</p><p>收到信件時的訊息截圖</p><p><img src="https://i.imgur.com/a3hJSkq.png" alt></p><h2 id="程式流程"><a href="#程式流程" class="headerlink" title="程式流程"></a>程式流程</h2><p>匯率小幫手程式流程大概是以下四個步驟</p><h3 id="導入TBLogger"><a href="#導入TBLogger" class="headerlink" title="導入TBLogger"></a>導入TBLogger</h3><p>首先導入這個<a href="https://teddybearfp.github.io/2019/04/28/Python-logger/#more">TBLogger</a>是我另一篇文章介紹的Logger，是負責用來幫忙在程式開發時幫忙除錯與程式完成時輔助維護的好工具，在導入的同時會在”C:\ProgramData\ExchangeHelper”中建立資料夾並生成Log檔</p><h3 id="導入DBHandler"><a href="#導入DBHandler" class="headerlink" title="導入DBHandler"></a>導入DBHandler</h3><p>接著我們導入資料庫小幫手，一樣會生成在”C:\ProgramData\ExchangeHelper”中，內部會有些預設的參數，即使使用者要修改爬取的內容也不需要重新編寫程式碼，只要將資料庫中的值修改即可</p><h3 id="爬取台灣銀行資訊"><a href="#爬取台灣銀行資訊" class="headerlink" title="爬取台灣銀行資訊"></a>爬取台灣銀行資訊</h3><p>再來我們該進入這個匯率小幫手的核心囉，爬取台灣銀行的匯率資訊，爬到的表格進行資料清理變成我們要的資料</p><h3 id="資料比對並寄出Email"><a href="#資料比對並寄出Email" class="headerlink" title="資料比對並寄出Email"></a>資料比對並寄出Email</h3><p>最後我們讀取資料庫預設的值or使用者需要爬取的匯率去跟我們的爬到的資料比對，符合的就寄信通知給使用者，收到信後就大功告成啦!!!</p><h2 id="匯率小幫手實作"><a href="#匯率小幫手實作" class="headerlink" title="匯率小幫手實作"></a>匯率小幫手實作</h2><h3 id="TBLogger"><a href="#TBLogger" class="headerlink" title="TBLogger"></a>TBLogger</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBLog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">        <span class="comment">#如果資料夾不存在則創建資料夾</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">            os.mkdir(path)</span><br><span class="line">        self.user = getpass.getuser()</span><br><span class="line">        self.logger = logging.getLogger(self.user)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        format = <span class="string">'%(asctime)s [%(threadName)s][%(levelname)s] %(name)s : %(funcName)s() %(message)s'</span></span><br><span class="line">        self.formatter = logging.Formatter(format)</span><br><span class="line">        self.streamhandler = logging.StreamHandler()</span><br><span class="line">        self.streamhandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.streamhandler)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetPath</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        logfile = path + self.user + <span class="string">'.log'</span></span><br><span class="line">        self.filehandler = logging.FileHandler(logfile)</span><br><span class="line">        self.filehandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.filehandler)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.error(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, level, msg)</span>:</span></span><br><span class="line">        self.logger.log(level, msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLevel</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disable</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.disable(<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">RemoveHandle</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.logger.removeHandler(self.streamhandler)</span><br><span class="line">        self.logger.removeHandler(self.filehandler)</span><br><span class="line">        self.streamhandler.flush()</span><br><span class="line">        self.filehandler.flush()</span><br><span class="line">        self.streamhandler.close()</span><br><span class="line">        self.filehandler.close()</span><br></pre></td></tr></table></figure><h4 id="TBLog-截圖"><a href="#TBLog-截圖" class="headerlink" title="TBLog 截圖"></a>TBLog 截圖</h4><p><img src="https://i.imgur.com/ooEPQuH.png" alt></p><h3 id="DBHandler"><a href="#DBHandler" class="headerlink" title="DBHandler"></a>DBHandler</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment">#創建資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s - %(levelname)s : %(message)s'</span>, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDB</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fileName, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            path = <span class="string">"C:\\ProgramData\\"</span> + fileName</span><br><span class="line">            logging.info(path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">                os.mkdir(path)</span><br><span class="line">                logging.info(<span class="string">"mkdir "</span> + path +<span class="string">" successfully"</span>)</span><br><span class="line">            <span class="comment">#資料夾創建成功後連結資料庫</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.conn = sqlite3.connect(<span class="string">'C:\\ProgramData\\'</span> + fileName + <span class="string">'\\'</span> + databaseName + <span class="string">".sqlite"</span>)</span><br><span class="line">                self.c = self.conn.cursor()</span><br><span class="line">                logging.info(<span class="string">"Opened database successfully"</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.warning(<span class="string">"Opened database Failed"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"mkdir Failed. Do you remember import os?"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 關閉遊標</span></span><br><span class="line">            self.c.close()</span><br><span class="line">            <span class="comment"># 關閉資料庫連結,在資料庫操作完成後需要把游標與連結都關掉</span></span><br><span class="line">            self.conn.close()</span><br><span class="line">            logging.info(<span class="string">"Closed database successfully"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"Closed database Failed"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createTable</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#獲得游標cursor</span></span><br><span class="line">            self.c = self.conn.cursor()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#Sql語法 建立表格,表格名 欄位名 欄位型別</span></span><br><span class="line">                <span class="comment">#執行Sql語法</span></span><br><span class="line">                self.c.execute(<span class="string">'''CREATE TABLE TARGET</span></span><br><span class="line"><span class="string">                       ('幣別'           TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                        '目標匯率'       INT     NOT NULL,</span></span><br><span class="line"><span class="string">                        '爬取日期'       DATE    NOT NULL,</span></span><br><span class="line"><span class="string">                        '今日是否觸價'   TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                        '是否爬取'       TEXT    NOT NULL);'''</span>)</span><br><span class="line">                logging.info(<span class="string">"Table created successfully"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logging.info(<span class="string">"CreateTable Error maybe database is exits!"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.warning(<span class="string">"You need to createDatabase and then createTable."</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, tableName, tableStrcture, tableValue)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"INSERT INTO "</span> + tableName + <span class="string">" "</span> + tableStrcture + <span class="string">" VALUES "</span> + tableValue</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSql</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">        <span class="comment"># 執行sql語句 </span></span><br><span class="line">        self.c.execute(dbsql)</span><br><span class="line">        <span class="comment"># 進行資料庫語句的提交操作，不提交則無法生效，每次執行後都要提交</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line">        <span class="comment"># return 1</span></span><br><span class="line">        <span class="comment"># except:</span></span><br><span class="line">            <span class="comment"># logging.info("Operate Dababase Error !")</span></span><br><span class="line">            <span class="comment"># return 0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAll</span><span class="params">(self, tableName)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        record = self.execSqlWithReturn(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> record</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOne</span><span class="params">(self, tableName, racordToSearch)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" WHERE "</span> + racordToSearch</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        record = self.execSqlWithReturn(self.dbsql)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, racordToSearch)</span>:</span></span><br><span class="line">        self.dbsql = <span class="string">"UPDATE "</span> + tableName + <span class="string">" SET "</span> + recordToChange + <span class="string">" where "</span> + racordToSearch</span><br><span class="line">        logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">        result = self.execSql(self.dbsql)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, tableName, recordToDelete)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tableName <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> tableName != <span class="string">''</span>:</span><br><span class="line">            self.dbsql = <span class="string">"DELETE from "</span> + tableName + <span class="string">" where "</span> + recordToDelete</span><br><span class="line">            logging.info(<span class="string">"DB sql :"</span> + self.dbsql)</span><br><span class="line">            result = self.execSql(self.dbsql)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execSqlWithReturn</span><span class="params">(self, dbsql)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor = self.conn.execute(dbsql)</span><br><span class="line">            <span class="comment"># 用一個變數來接受fetchall（）查詢所有這個函式返回的值。,fetchone ()是查詢一個，只有一個結果和fetchall有區別</span></span><br><span class="line">            <span class="keyword">return</span> self.cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logging.error(<span class="string">"select Record Error !"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="創建的Database截圖"><a href="#創建的Database截圖" class="headerlink" title="創建的Database截圖"></a>創建的Database截圖</h4><p>程式執行時在”C:\ProgramData\ExchangeHelper”中創建這些資料庫<br><img src="https://i.imgur.com/aaxAZbN.png" alt></p><h3 id="ExchangeHelper"><a href="#ExchangeHelper" class="headerlink" title="ExchangeHelper"></a>ExchangeHelper</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用pandas取得dataframe</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#取得當下時間</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="comment">#用python的sqlite3做資料庫存取</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="comment">#發送信件</span></span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="comment">#創資料夾</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#忽略警告</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"><span class="comment">#導入TBLogger</span></span><br><span class="line"><span class="keyword">from</span> TBLogger <span class="keyword">import</span> TBLog</span><br><span class="line"><span class="keyword">from</span> DBHandler <span class="keyword">import</span> SqlDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBHandler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, databaseFilePath, databaseName)</span>:</span></span><br><span class="line">        <span class="comment">#implement SqlDB</span></span><br><span class="line">        <span class="comment">#創建資料庫檔案</span></span><br><span class="line">        self.db = SqlDB(databaseFilePath, databaseName)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeTarget</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#如果資料庫表格未被創建則創建資料庫檔案內的表格</span></span><br><span class="line">        <span class="keyword">if</span>( self.db.createTable() ):</span><br><span class="line">            <span class="comment">#表格名稱</span></span><br><span class="line">            tableName = <span class="string">"TARGET"</span></span><br><span class="line">            <span class="comment">#表格欄位名稱</span></span><br><span class="line">            tableStrcture = <span class="string">"(幣別, 目標匯率, 爬取日期, 今日是否觸價, 是否爬取)"</span></span><br><span class="line">            <span class="comment">#取得日期</span></span><br><span class="line">            date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">            <span class="comment">#表格內容,日期要以"字串"形式送入Date中</span></span><br><span class="line">            tableValue = <span class="string">"('美金 (USD)', 30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y')"</span></span><br><span class="line">            <span class="comment">#插入表格中(表格名稱, 表格欄位名稱, 表格內容)</span></span><br><span class="line">            self.db.insert( tableName, tableStrcture, tableValue )</span><br><span class="line">            tableValue = <span class="string">"('日圓 (JPY)', 0.30 ,\'"</span> + date + <span class="string">"\' , "</span> + <span class="string">"'N', 'Y')"</span></span><br><span class="line">            self.db.insert( tableName, tableStrcture, tableValue )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readTarget</span><span class="params">(self)</span>:</span></span><br><span class="line">        tableName = <span class="string">"TARGET"</span></span><br><span class="line">        row = self.db.selectAll(tableName)</span><br><span class="line">        targetCurrency = []</span><br><span class="line">        targetPrice = []</span><br><span class="line">        crawlDate = []</span><br><span class="line">        isTodayTouched = []</span><br><span class="line">        isNeeded = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> row:</span><br><span class="line">            <span class="keyword">if</span> ( c[<span class="number">4</span>].upper() == <span class="string">'Y'</span> ):</span><br><span class="line">                targetCurrency.append(c[<span class="number">0</span>])</span><br><span class="line">                targetPrice.append(c[<span class="number">1</span>])</span><br><span class="line">                crawlDate.append(c[<span class="number">2</span>])</span><br><span class="line">                isTodayTouched.append(c[<span class="number">3</span>])</span><br><span class="line">                isNeeded.append(c[<span class="number">4</span>])</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> targetCurrency,targetPrice,crawlDate,isTodayTouched</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, tableName, recordToChange, racordToSearch)</span>:</span></span><br><span class="line">        self.db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span>      </span><br><span class="line">        self.db.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#匯率小幫手</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExchangeRateHelper</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.exchangeRate = <span class="string">""</span></span><br><span class="line">        self.sender = <span class="string">""</span></span><br><span class="line">        self.receiver=<span class="string">""</span></span><br><span class="line">        self.msg = MIMEMultipart()</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#爬取匯率表格</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CrawlExchangeRate</span><span class="params">(self, targetWeb)</span>:</span></span><br><span class="line">        <span class="comment">#臺灣銀行牌告匯率表格</span></span><br><span class="line">        dfs = pd.read_html(targetWeb)</span><br><span class="line">        self.exchangeRate = dfs[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#取得row全部19種幣別、5個col</span></span><br><span class="line">        self.exchangeRate = self.exchangeRate.ix[:,<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#設定col標頭</span></span><br><span class="line">        self.exchangeRate.columns = [<span class="string">u'幣別'</span>, <span class="string">u'現金匯率-本行買入'</span>, <span class="string">u'現金匯率-本行賣出'</span>, <span class="string">u'即期匯率-本行買入'</span>, <span class="string">u'即期匯率-本行賣出'</span>]</span><br><span class="line">        <span class="comment">#將  "美金 (USD)  美金 (USD)"  切成  "美金 (USD)", 使用str函式相關時要先.str</span></span><br><span class="line">        self.exchangeRate[<span class="string">u'幣別'</span>] = self.exchangeRate[<span class="string">u'幣別'</span>].str.split(<span class="string">' '</span>,<span class="number">2</span>).str[<span class="number">2</span>].str.strip(<span class="string">" "</span>)</span><br><span class="line">        <span class="comment">#exchangeRate加入時間欄位格式化時間為年-月-日 時:分:秒</span></span><br><span class="line">        self.exchangeRate[<span class="string">'資料截取時間'</span>] = datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#將時間欄位轉換成時間格式存放</span></span><br><span class="line">        self.exchangeRate[<span class="string">'資料截取時間'</span>] = pd.to_datetime(self.exchangeRate[<span class="string">'資料截取時間'</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#寫入資料庫</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            self.exchangeRate.to_sql(<span class="string">'exchangeRate'</span>, con = db, if_exists=<span class="string">'replace'</span>, index = <span class="keyword">False</span>) <span class="comment">#增加到資料後方if_exists='append', 整份覆寫if_exists='replace'</span></span><br><span class="line">        <span class="comment">#讀取資料庫</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            df = pd.read_sql_query(<span class="string">'select * from exchangeRate'</span>, con = db)</span><br><span class="line">            </span><br><span class="line">        db.close()</span><br><span class="line">        print(df)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ExchangeRateNotice</span><span class="params">(self, targetCurrency, targetPrice)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\exchangeRate.sqlite'</span>) <span class="keyword">as</span> db:</span><br><span class="line">            <span class="comment">#取得幣別為"日幣"</span></span><br><span class="line">            df = pd.read_sql_query(<span class="string">r'select * from exchangeRate where "幣別" = "'</span> + targetCurrency + <span class="string">'" order by "資料截取時間" limit 1'</span></span><br><span class="line">                                   , con = db)</span><br><span class="line">        <span class="keyword">if</span>( float(df[<span class="string">u'現金匯率-本行賣出'</span>]) &lt;= targetPrice ):</span><br><span class="line">            <span class="comment">#初始化</span></span><br><span class="line">            self.msg = MIMEMultipart()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#設定寄收信箱帳號</span></span><br><span class="line">            self.senderName = <span class="string">"匯率小幫手"</span></span><br><span class="line">            self.sender = <span class="string">'寄件者信箱@gmail.com'</span></span><br><span class="line">            self.senderPassword = <span class="string">'寄件者密碼'</span></span><br><span class="line">            self.receiver   = <span class="string">'收件者信箱@gmail.com'</span></span><br><span class="line">            self.msg[<span class="string">'From'</span>] = self.senderName</span><br><span class="line">            self.msg[<span class="string">'To'</span>]   = self.receiver</span><br><span class="line">            self.msg[<span class="string">'Subject'</span>] = <span class="string">'[匯率觸價通知]'</span></span><br><span class="line">            </span><br><span class="line">            self.msg.attach(MIMEText(df.to_html(index=<span class="keyword">False</span>), <span class="string">'html'</span>))</span><br><span class="line">            self.msg.attach(MIMEText(<span class="string">"匯率觸價 484該買"</span> + targetCurrency + <span class="string">"啦!!!"</span>, <span class="string">'plain'</span>))</span><br><span class="line">            server = smtplib.SMTP(<span class="string">'smtp.gmail.com'</span>, <span class="number">587</span>)</span><br><span class="line">            server.starttls()</span><br><span class="line">            server.login(self.sender, self.senderPassword)</span><br><span class="line">            text = self.msg.as_string()</span><br><span class="line">            server.sendmail(self.sender, self.receiver, text)</span><br><span class="line">            server.quit()</span><br><span class="line">            tbLog.info(targetCurrency + <span class="string">"匯率觸價 Email 已寄出!"</span>)</span><br><span class="line">            databaseFilePath = <span class="string">"ExchangeRateHelper"</span></span><br><span class="line">            databaseName = <span class="string">"target"</span></span><br><span class="line">            db = DBHandler(databaseFilePath, databaseName)</span><br><span class="line">            tableName = <span class="string">"TARGET"</span></span><br><span class="line">            recordToChange = <span class="string">'"今日是否觸價" = "Y"'</span></span><br><span class="line">            racordToSearch = <span class="string">'"幣別" = '</span> + <span class="string">'"'</span> + targetCurrency + <span class="string">'"'</span></span><br><span class="line">            db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tbLog.info(targetCurrency + <span class="string">"換匯再等等吧!"</span>)</span><br><span class="line">        </span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tbLog = TBLog(<span class="string">"ExchangeRateHelper"</span>)</span><br><span class="line">    tbLog.SetPath(<span class="string">'C:\\ProgramData\\ExchangeRateHelper\\'</span>)</span><br><span class="line">    tbLog.info(<span class="string">"***** ExchangeRateHelper Started *****"</span>)</span><br><span class="line">    exchangeRateHelper = ExchangeRateHelper()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果不存在檔案則創建爬取幣別與匯率目標的資料庫</span></span><br><span class="line">    databaseFilePath = <span class="string">"ExchangeRateHelper"</span></span><br><span class="line">    databaseName = <span class="string">"target"</span></span><br><span class="line">    db = DBHandler(databaseFilePath, databaseName)</span><br><span class="line">    db.makeTarget()</span><br><span class="line">    targetCurrency = []</span><br><span class="line">    targetPrice = []</span><br><span class="line">    crawlDate = []</span><br><span class="line">    isTodayTouched = []</span><br><span class="line">    isNeeded = []</span><br><span class="line">    targetCurrency, targetPrice, crawlDate, isTodayTouched= db.readTarget()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#測試換日用</span></span><br><span class="line">    <span class="comment">#date = (datetime.now()+ timedelta(days=2)).strftime('%Y-%m-%d') </span></span><br><span class="line">    date = datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#爬取台灣銀行匯率</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> targetCurrency:</span><br><span class="line">        tbLog.info(<span class="string">"target is null, please check your database and what you want to observe set Y."</span>)</span><br><span class="line">    <span class="keyword">else</span>:     </span><br><span class="line">        exchangeRateHelper.CrawlExchangeRate(<span class="string">'http://rate.bot.com.tw/xrt?Lang=zh-TW'</span>)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(targetCurrency):</span><br><span class="line">            <span class="keyword">if</span>( crawlDate[i] != date ):</span><br><span class="line">                tableName = <span class="string">"TARGET"</span></span><br><span class="line">                recordToChange = <span class="string">'"今日是否觸價" = "N"'</span></span><br><span class="line">                racordToSearch = <span class="string">'"幣別" = '</span> + <span class="string">'"'</span> + targetCurrency[i] + <span class="string">'"'</span></span><br><span class="line">                db.update(tableName, recordToChange, racordToSearch)</span><br><span class="line">            <span class="keyword">if</span>( crawlDate[i] == date <span class="keyword">and</span> isTodayTouched[i] == <span class="string">'Y'</span>):</span><br><span class="line">                tbLog.info(targetCurrency[i] + <span class="string">"匯率觸價, 今日已通知."</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exchangeRateHelper.ExchangeRateNotice( targetCurrency[i], targetPrice[i] )</span><br><span class="line">            </span><br><span class="line">    tbLog.info(<span class="string">"***** ExchangeRateHelper  Closed *****"</span>)</span><br><span class="line">    tbLog.RemoveHandle()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><h2 id="資料庫的設定"><a href="#資料庫的設定" class="headerlink" title="資料庫的設定"></a>資料庫的設定</h2><p>在程式第一次執行時，會自動產出預設的資料庫檔案在”C:\ProgramData\ExchangeHelper”資料夾中，可以下載sqliteStudio或是DBsqlite查看其內容，若是某個幣別不想爬取則把Y改成N反之從N改Y</p><h3 id="目標資料庫內容截圖"><a href="#目標資料庫內容截圖" class="headerlink" title="目標資料庫內容截圖"></a>目標資料庫內容截圖</h3><p><img src="https://i.imgur.com/p08582O.png" alt></p><h3 id="僅有唯讀權限"><a href="#僅有唯讀權限" class="headerlink" title="僅有唯讀權限"></a>僅有唯讀權限</h3><p>在更改資料庫的時候若出現權限不足，僅有唯讀權限時</p><pre><code>針對該資料庫右鍵-&gt;內容-&gt;安全性-&gt;編輯-&gt;Users-&gt;將寫入打勾並確定</code></pre><p>更改安全性設定後的資料庫便可以改寫囉!</p><h2 id="工作排程器"><a href="#工作排程器" class="headerlink" title="工作排程器"></a>工作排程器</h2><p>將匯率小幫手加到電腦的工作排程器中，可以在電腦啟動的時候在排定的時間執行程式幫忙監看匯率，例如:每隔半小時執行一次或是想要執行的頻率或特定時間點執行</p><p>可以看我另一篇編寫的<a href="https://teddybearfp.github.io/2019/06/20/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/">工作排程器</a> 了解如何讓我們的匯率小幫手默默為你查看匯率</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.youtube.com/watch?v=Wbk9hxntMjY" target="_blank" rel="noopener">[爬蟲實戰] 如何設定工作排程自動將牌告匯率存進資料庫之中?</a><br><a href="http://qinfei.glrsmart.com/2017/03/08/python-sqlite3-shu-ju-ku-cao-zuo-li-cheng/" target="_blank" rel="noopener">Python Sqlite3 数据库操作例程</a><br><a href="https://kaiching.org/pydoing/py/python-library-sqlite3.html" target="_blank" rel="noopener">Python 速查手冊- 12.6 資料庫sqlite3 - 程式語言教學誌</a><br><a href="https://www.largitdata.com/course/81/" target="_blank" rel="noopener">[爬蟲實戰] 如何撰寫Python爬蟲抓取台灣銀行的牌告匯率? - 大數學堂</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前陣子難得出國郊遊，遇到了美中貿易大戰，日幣瘋狂漲漲漲一路飆到0.29多，我一整個傻眼貓咪，少吃好幾碗拉麵的我就決定了以後有匯率觸價就在低點
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="sqlite3" scheme="https://teddybearfp.github.io/tags/sqlite3/"/>
    
      <category term="工作排程器" scheme="https://teddybearfp.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/"/>
    
      <category term="email" scheme="https://teddybearfp.github.io/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>工作排程器</title>
    <link href="https://teddybearfp.github.io/2019/06/20/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/"/>
    <id>https://teddybearfp.github.io/2019/06/20/工作排程器/</id>
    <published>2019-06-20T04:05:16.000Z</published>
    <updated>2019-07-05T14:26:19.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作排程器可以將我們寫好的程式，在特定時間或是規律的日復一日執行著，例如:網路爬蟲、或是一些重複性的工作內容我們就藉由工作排程器執行我們的程式進而達到目的</p><p>但是工作排程器需要開啟電腦才會在背景默默運行，而不像我之前編寫的Linebot<a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">[Python 如何打造專屬的LineBot呢]</a>或是網頁直接架在server上無時無刻的可被喚醒或是持續運作著</p><p>那麼這次主要會紀錄這一篇工作排程器是因為另一篇<a href="https://teddybearfp.github.io/2019/06/21/python-%E5%8C%AF%E7%8E%87%E8%A7%B8%E5%83%B9%E9%80%9A%E7%9F%A5%E5%B0%8F%E5%B9%AB%E6%89%8B/#more">Python 匯率觸價通知小幫手</a>純粹想做幾個想法的結合的順便當作練習</p><h2 id="工作排程器"><a href="#工作排程器" class="headerlink" title="工作排程器"></a>工作排程器</h2><p>將寫好的程式加到電腦的工作排程器中，可以在電腦啟動的時候在排定的時間執行程式幫忙監看匯率，例如:每隔半小時執行一次或是想要執行的頻率或特定時間點</p><h3 id="開啟工作排程器"><a href="#開啟工作排程器" class="headerlink" title="開啟工作排程器"></a>開啟工作排程器</h3><p>首先在windows搜尋內輸入排程便會找到工作排程器</p><h3 id="建立工作"><a href="#建立工作" class="headerlink" title="建立工作"></a>建立工作</h3><p>開啟工作排程器接著在右邊動作欄位中選建立工作</p><p><img src="https://i.imgur.com/38Nt4lU.png" alt></p><h4 id="欄位-一般"><a href="#欄位-一般" class="headerlink" title="欄位:一般"></a>欄位:一般</h4><p>一般欄位輸入工作名稱例如:匯率小幫手，接著勾選”不論使用者登入與否均執行”、”以最高權限執行並”設定選擇Windows 10 or 你的作業系統</p><p><img src="https://i.imgur.com/Vf9R2qE.png" alt></p><h4 id="欄位-觸發程序"><a href="#欄位-觸發程序" class="headerlink" title="欄位:觸發程序"></a>欄位:觸發程序</h4><p>這邊新增你想要匯率小幫手的執行時間與頻率</p><p><img src="https://i.imgur.com/AJO1oiH.png" alt></p><h4 id="欄位-動作"><a href="#欄位-動作" class="headerlink" title="欄位:動作"></a>欄位:動作</h4><p>新增動作時選擇啟動程式<br>程式或指令碼輸入: python<br>新增引數: 完整檔案位置<br>並按下確認</p><p>例如:<br>程式或指令碼: </p><pre><code>python</code></pre><p>新增引數:</p><pre><code>D:\Application\_ExchangeRateHelper\ExchangeRateHelper.py</code></pre><p>那麼他就會用cmd 下python ExchangeRateHelper.py的動作</p><p><img src="https://i.imgur.com/k5xGX9Q.png" alt></p><h4 id="欄位-條件"><a href="#欄位-條件" class="headerlink" title="欄位:條件"></a>欄位:條件</h4><p>這部分建議把”只有在電腦是使用AC電源時才啟動這個工作”取消</p><p><img src="https://i.imgur.com/LW815Cv.png" alt></p><h4 id="欄位-歷程紀錄"><a href="#欄位-歷程紀錄" class="headerlink" title="欄位:歷程紀錄"></a>欄位:歷程紀錄</h4><p>這邊可以查看工作執行的歷史紀錄<br>若是無法查看寫已停用的話在工作排程器左邊欄位”工作排程器程式庫”點擊右鍵”啟用所有工作歷程紀錄”</p><h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p><img src="https://i.imgur.com/00uhqH6.png" alt></p><h3 id="可能會遇到的問題"><a href="#可能會遇到的問題" class="headerlink" title="可能會遇到的問題"></a>可能會遇到的問題</h3><p>一切都設定好了為什麼時間到沒有動作呢?</p><p>可以至你的工作排程中點選右鍵-&gt;內容-&gt;條件<br>看看電源選項是否勾選了”只有在電腦是使用AC電源時才啟動這個工作”<br>若是勾選在沒接Adapter的時候到指定時間就不會執行囉<br>所以解決辦法就是取消勾選這個項目</p><p><img src="https://i.imgur.com/LW815Cv.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工作排程器可以將我們寫好的程式，在特定時間或是規律的日復一日執行著，例如:網路爬蟲、或是一些重複性的工作內容我們就藉由工作排程器執行我們的程
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="工作排程器" scheme="https://teddybearfp.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>LLVM Coding rule小幫手</title>
    <link href="https://teddybearfp.github.io/2019/06/17/LLVM-Coding-rule%E5%B0%8F%E5%B9%AB%E6%89%8B/"/>
    <id>https://teddybearfp.github.io/2019/06/17/LLVM-Coding-rule小幫手/</id>
    <published>2019-06-17T04:05:16.000Z</published>
    <updated>2019-07-05T14:21:01.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家一起共同開發專案時必須遵守團隊的coding rule，但是coding rule那麼多有些又跟平常的編寫習慣不同常常忘記，來看看怎麼用LLVM解決這個問題吧，這一篇記錄LLVM底層虛擬機器（Low Level Virtual Machine），LLVM是一個自由軟體專案，它是一種編譯器基礎設施，以C++寫成，包含一系列模組化的編譯器元件和工具鏈，用來開發編譯器前端和後端。</p><h2 id="下載LLVM"><a href="#下載LLVM" class="headerlink" title="下載LLVM"></a>下載LLVM</h2><p><a href="http://releases.llvm.org/download.html#8.0.0" target="_blank" rel="noopener">LLVM載點</a><br>載對應的環境位元數</p><p><a href="http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-apple-darwin.tar.xz" target="_blank" rel="noopener">macOS (.sig)</a><br><a href="http://releases.llvm.org/8.0.0/LLVM-8.0.0-win32.exe" target="_blank" rel="noopener">Windows (32-bit) (.sig)</a><br><a href="http://releases.llvm.org/8.0.0/LLVM-8.0.0-win64.exe" target="_blank" rel="noopener">Windows (64-bit) (.sig)</a> </p><h2 id="安裝LLVM"><a href="#安裝LLVM" class="headerlink" title="安裝LLVM"></a>安裝LLVM</h2><p>開啟LLVM-8.0.0-win64.exe安裝<br>一直按下一步</p><h2 id="設定LLVM"><a href="#設定LLVM" class="headerlink" title="設定LLVM"></a>設定LLVM</h2><p>安裝完成後，開啟Qt Creator<br>接著在上方Navigation bar中找尋</p><pre><code>Help -&gt; About Plugins -&gt; C++中的Beautiful(experimental)打勾Load</code></pre><p><img src="https://i.imgur.com/Yd0CkLy.png" alt></p><p>勾選完成後重開Qt Creator</p><p>在上方Navigation bar</p><pre><code>Tool -&gt; Options -&gt; Beautifier中 Clang Format設定ClangFormat command選擇&quot;C:\Program Files (x86)\LLVM\bin\clang-format.exe&quot;</code></pre><p><img src="https://i.imgur.com/T5FckqH.png" alt></p><p>接著並在Options中選擇Use customized style, 新增style<br>內容可以為如下</p><pre><code>BasedOnStyle: WebKitAlignTrailingComments: trueBinPackParameters: trueAlignEscapedNewlines: LeftBreakBeforeBraces: AllmanAllowShortIfStatementsOnASingleLine: trueIndentCaseLabels: trueSpaceAfterCStyleCast: trueSpacesInParentheses: trueSpacesInSquareBrackets: trueSpacesInContainerLiterals: trueSpaceBeforeAssignmentOperators: trueDerivePointerAlignment: truePointerAlignment: RightMaxEmptyLinesToKeep: 1</code></pre><h2 id="觸發LLVM"><a href="#觸發LLVM" class="headerlink" title="觸發LLVM"></a>觸發LLVM</h2><p>觸發LLVM分兩種一種是設為快捷鍵<br>一種是每當儲存時自動執行LLVM</p><h3 id="快捷鍵方式設定"><a href="#快捷鍵方式設定" class="headerlink" title="快捷鍵方式設定"></a>快捷鍵方式設定</h3><p>可以至Keyboard的地方找ClangFormat 設定FormatFile的快捷鍵</p><p><img src="https://i.imgur.com/MdWX3qI.png" alt></p><h3 id="儲存時自動執行設定"><a href="#儲存時自動執行設定" class="headerlink" title="儲存時自動執行設定"></a>儲存時自動執行設定</h3><p><img src="https://i.imgur.com/6G9YEsc.png" alt></p><p>以上步驟完成後即使coding rule忘記了，還是可以幫你自動遵守哦!</p><p>牛刀小試一下,不好的coding style經過LLVM後自動展開<br><img src="https://i.imgur.com/wjapLkh.png" alt></p><p><img src="https://i.imgur.com/CJzhKfI.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家一起共同開發專案時必須遵守團隊的coding rule，但是coding rule那麼多有些又跟平常的編寫習慣不同常常忘記，來看看怎麼用
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="LLVM" scheme="https://teddybearfp.github.io/tags/LLVM/"/>
    
  </entry>
  
  <entry>
    <title>PyDash 建置</title>
    <link href="https://teddybearfp.github.io/2019/04/30/PyDash%E5%BB%BA%E7%BD%AE/"/>
    <id>https://teddybearfp.github.io/2019/04/30/PyDash建置/</id>
    <published>2019-04-30T10:05:16.000Z</published>
    <updated>2019-07-05T14:29:31.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pyDash 是一個輕量且 基於 web 的 linux 性能監測工具 ，它是用 python 和 Django 加上 Chart.js 來編寫的。<br>可以使用這個工具來監視你的 Linux 個人電腦/服務器資源，比如 CPU、內存、網絡統計，包括在線用戶的進程以及更多。儀表盤完全由主要的 Python 發行版本所提供的 Python 庫開發所以不需要額外安裝太多的函式庫，這篇文章記錄如何使用Django建置虛擬環境執行程式碼</p><h2 id="建置流程"><a href="#建置流程" class="headerlink" title="建置流程"></a>建置流程</h2><p>1.首先安裝pip<br>    下載<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a><br>    安裝pip</p><pre><code>python get-pip.py</code></pre><p>2.安裝虛擬環境</p><pre><code>pip install virtualenv</code></pre><p>3.下載檔案<br>    <a href="https://gitlab.com/k3oni/pydash" target="_blank" rel="noopener">https://gitlab.com/k3oni/pydash</a><br>    下載檔案或是git下來</p><pre><code>git clone https://github.com/k3oni/pydash.git</code></pre><p>並切換到當層路徑</p><pre><code>cd pydash</code></pre><p>4.創建虛擬環境<br>    取名為pydashtest(可任意命名)</p><pre><code>virtualenv pydashtest</code></pre><p>5.激活虛擬環境<br>    切換到剛剛創建的虛擬環境pydashtest資料夾中的Scripts啟動</p><pre><code>activate</code></pre><p>輸入成功會命令提示字元指令最前方會出現虛擬環境名稱例如:(pydashtest)</p><p><img src="https://i.imgur.com/jaKo0vb.png" alt></p><p>6.安裝所需函式庫<br>    切換到與requirements.txt同一層中執行以下指令(以這個pydash來說僅需要另外安裝django==1.6.8)</p><pre><code>pip install -r requirements.txt</code></pre><p>7.進入pydash資料夾中將settings.py檔案中的SECRET_KEY設定密鑰存取並退出</p><p><img src="https://i.imgur.com/olpy66E.png" alt></p><p>8.創建資料庫與身分驗證(輸入信箱與密碼)</p><pre><code>python manage.py syncdb</code></pre><p><img src="https://i.imgur.com/xAWxyv1.png" alt></p><p>9.執行 Django 開發服務器<br>    python manage.py runserver<br>    若出現一些錯誤訊息可能是缺少一些函式庫<br>    那麼我們只要安裝缺少的函式庫即可</p><pre><code>例如:pip install keras</code></pre><p>一直重複執行python manage.py runserver直到沒有缺少函式庫</p><pre><code>from django.conf.urls import patterns, urlImportError: cannot import name &apos;patterns&apos;出現上面這個問題的話解決辦法是呼叫下列指令pip install Django==1.8</code></pre><p>出現以下畫面代表正確</p><p><img src="https://i.imgur.com/z7uWs6S.png" alt></p><p>10.登入<br>    接著打開瀏覽器輸入網址<br>    <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a><br>    (特別注意:第一格是輸入Username不是信箱帳號)</p><p><img src="https://i.imgur.com/JHlINId.png" alt></p><p>登入成功後觀看數據囉</p><p><img src="https://i.imgur.com/5mzyqbE.png" alt></p><p>結束runserver</p><pre><code>Ctrl+C</code></pre><p>離開虛擬環境</p><pre><code>deactivate</code></pre><p>__init__.py 用來告訴Python這個資料夾是一個模組，裡面通常是空的，不過也可以寫一些程式碼在裡面。<br>manage.py 用來操作整個Django專案的小工具，例如啟動伺服器python manage.py runserver，或是同步資料庫python manage.py syncdb<br>settings.py 設定檔<br>urls.py 負責網站的路由。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://kknews.cc/zh-tw/other/92rgx6b.html[]" target="_blank" rel="noopener">pyDash：一個基於 web 的 Linux 性能監測工具</a><br><a href="https://kaochenlong.com/2011/10/18/django-your-first-django-project/" target="_blank" rel="noopener">開始你的第一個專案| 高見龍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;pyDash 是一個輕量且 基於 web 的 linux 性能監測工具 ，它是用 python 和 Django 加上 Chart.js 來
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="PyDash" scheme="https://teddybearfp.github.io/tags/PyDash/"/>
    
  </entry>
  
  <entry>
    <title>Python logger</title>
    <link href="https://teddybearfp.github.io/2019/04/28/Python-logger/"/>
    <id>https://teddybearfp.github.io/2019/04/28/Python-logger/</id>
    <published>2019-04-28T02:05:16.000Z</published>
    <updated>2019-07-05T14:34:39.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近開始要編寫Python程式碼，上一篇<a href="https://teddybearfp.github.io/2019/04/08/C-logger/#more">C Logger</a>幫助我開發與維護程式覺得十分好用，更確定Logger是編寫程式碼的必備品，所以也想要在Python開發時也能有一隻良好的Logger幫忙紀錄日誌，了解使用者的行為，這一篇就來記錄如何做出我們Python版本的Logger吧!</p><p>先來看成果吧</p><p><img src="https://i.imgur.com/WXfItPR.png" alt></p><p>Log訊息組成:</p><pre><code>年-月-日 時:分:秒,毫秒 [Log層級] 使用者: 函式名稱 Log訊息 [執行緒名稱]</code></pre><h2 id="TBLogger"><a href="#TBLogger" class="headerlink" title="TBLogger"></a>TBLogger</h2><p>TBLogger記錄了時間、Log層級、使用者、函式名稱、Log訊息與執行緒名稱同時亦會寫檔儲存</p><p>備註:此段程式碼出處為<a href="http://yhhuang1966.blogspot.com/2018/04/python-logging_24.html" target="_blank" rel="noopener">小狐狸事務所Python 學習筆記 : 日誌 (logging) 模組測試</a><br>將其稍作改寫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TBLog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folderName)</span>:</span></span><br><span class="line">        <span class="comment">#創建資料夾</span></span><br><span class="line">        path = <span class="string">"C:\\ProgramData\\"</span> + folderName</span><br><span class="line">        <span class="comment">#如果資料夾不存在則創建資料夾</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">            os.mkdir(path)</span><br><span class="line">        self.user = getpass.getuser()</span><br><span class="line">        self.logger = logging.getLogger(self.user)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        format = <span class="string">'%(asctime)s [%(threadName)s][%(levelname)s] %(name)s : %(funcName)s() %(message)s'</span></span><br><span class="line">        self.formatter = logging.Formatter(format)</span><br><span class="line">        self.streamhandler = logging.StreamHandler()</span><br><span class="line">        self.streamhandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.streamhandler)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetPath</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        logfile = path + self.user + <span class="string">'.log'</span></span><br><span class="line">        self.filehandler = logging.FileHandler(logfile)</span><br><span class="line">        self.filehandler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(self.filehandler)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.error(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.logger.critical(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, level, msg)</span>:</span></span><br><span class="line">        self.logger.log(level, msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLevel</span><span class="params">(self, level)</span>:</span></span><br><span class="line">        self.logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disable</span><span class="params">(self)</span>:</span></span><br><span class="line">        logging.disable(<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.logger.removeHandler(self.streamhandler)</span><br><span class="line">        self.logger.removeHandler(self.filehandler)</span><br><span class="line">        self.streamhandler.flush()</span><br><span class="line">        self.filehandler.flush()</span><br><span class="line">        self.streamhandler.close()</span><br><span class="line">        self.filehandler.close()</span><br></pre></td></tr></table></figure><h2 id="Test-py"><a href="#Test-py" class="headerlink" title="Test.py"></a>Test.py</h2><p>在其他專案中導入TBLogger</p><p>例如:Test.py中可以將TBLogger.py導入</p><pre><code>from TBLogger import TBLog</code></pre><p>Implement TBLog class<br>先設定Log檔案儲存路徑並且在最後用完時要把handle移除,否則持續使用會出現重複的Log</p><pre><code>tbLog = TBLog(&quot;FolderName&quot;)tbLog.SetPath(&apos;C:\\ProgramData\\FolderName\\&apos;)tbLog.info(&quot;***** Project Started *****&quot;)tbLog.info(&quot;***** Project  Closed *****&quot;)tbLog.Close()</code></pre><p>Python Console</p><p><img src="https://i.imgur.com/QbUelH4.png" alt></p><p>亦可在程式執行與結束分別編寫Log訊息表示</p><p><img src="https://i.imgur.com/Oou9VAR.png" alt></p><p>這就是我要的Logger</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://yhhuang1966.blogspot.com/2018/04/python-logging_24.html" target="_blank" rel="noopener">小狐狸事務所Python 學習筆記 : 日誌 (logging) 模組測試</a><br><a href="https://stackoverflow.max-everyday.com/2017/10/python-logging/" target="_blank" rel="noopener">[Python] logging 教學– Max的程式語言筆記</a><br><a href="https://javawithravi.com/how-to-display-thread-id-in-python-logs/" target="_blank" rel="noopener">How to display thread id in python logs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近開始要編寫Python程式碼，上一篇&lt;a href=&quot;https://teddybearfp.github.io/2019/04/08/
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Logger" scheme="https://teddybearfp.github.io/tags/Logger/"/>
    
  </entry>
  
  <entry>
    <title>PyCharm安裝與Anaconda使用</title>
    <link href="https://teddybearfp.github.io/2019/04/26/PyCharm-%E5%AE%89%E8%A3%9D/"/>
    <id>https://teddybearfp.github.io/2019/04/26/PyCharm-安裝/</id>
    <published>2019-04-26T09:05:16.000Z</published>
    <updated>2019-07-05T14:38:05.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安裝編譯環境是個非常重要的環節，好的開始是成功的一半，若是能順利安裝並編譯出自己的第一支程式是個讓人興奮的事情，這邊紀錄一下Python安裝與PyCharm安裝過程與Anaconda使用方式</p><p>本篇安裝環境為<br>Python 3.6.7(64bits)<br>PyCharm 2019.01.01<br>Anaconda 2019.03 Python 3.7 version</p><h2 id="Python-安裝"><a href="#Python-安裝" class="headerlink" title="Python 安裝"></a>Python 安裝</h2><h3 id="Python-2-vs-Python-3"><a href="#Python-2-vs-Python-3" class="headerlink" title="Python 2 vs Python 3"></a>Python 2 vs Python 3</h3><ul><li>print 語法差異</li><li>整數相除python2為整數,python3為浮點數</li><li>型態比較python2型態比較可以不同型態,python3會提醒型態錯誤</li><li>python3幾乎支援並相容所有函式庫</li><li>python3支援Unicode字符串</li><li><p>python3的xrange執行是比python2慢的</p><p>  長期遠觀來說應該選擇python3</p></li></ul><h3 id="Python-3-install"><a href="#Python-3-install" class="headerlink" title="Python 3 install"></a>Python 3 install</h3><p>首先要先安裝Python再去安裝編譯環境<br><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Python安裝(Windows)</a><br><a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener">Python安裝(MacOSX)</a></p><p>電腦如果是64位元的話就要下載64bits的版本</p><p><img src="https://i.imgur.com/GeZeEJt.png" alt></p><p>安裝時將add to path打勾，這樣便會自動新增環境變數</p><h2 id="PyCharm-安裝"><a href="#PyCharm-安裝" class="headerlink" title="PyCharm 安裝"></a>PyCharm 安裝</h2><p>PyCharm是一個用於計算機編程的集成開發環境（IDE），主要用於Python語言開發，由捷克公司JetBrains開發，提供代碼分析、圖形化調試器，集成測試器、集成版本控制系統，並支持使用Django進行網頁開發。</p><h3 id="好用IDE推薦"><a href="#好用IDE推薦" class="headerlink" title="好用IDE推薦"></a>好用IDE推薦</h3><ul><li>PyCharm<pre><code>1.有非常好的除錯器2.可以方便的處理虛擬環境3.良好的介面環境4.免費</code></pre></li><li>JupyterNotebook<br>  簡潔的介面<br>  方便的快捷鍵<br>  之前我都使用jupyter編寫爬蟲與畫圖執行非常方便 大推!</li></ul><h3 id="PyCharm-安裝-1"><a href="#PyCharm-安裝-1" class="headerlink" title="PyCharm 安裝"></a>PyCharm 安裝</h3><p><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">Pycharm下載</a></p><p><img src="https://i.imgur.com/Q5dJhNp.png" alt><br>沒有特別購買的話就下載右邊的Community版本</p><p>下載完畢後開啟安裝檔</p><ul><li>64-bits若電腦是64位元的安裝時務必勾選</li><li>.py association這一項勾選的意思是以後python檔案皆由PyCharm開啟</li></ul><p>精美的開啟畫面</p><p><img src="https://i.imgur.com/i0jhGu9.png" alt></p><p><img src="https://i.imgur.com/0SdWmAE.png" alt></p><p>剛進入PyCharm時，字體非常的小，我平常連手機都用特大字型這樣看很不習慣<br>那麼我們到Setting裡面找尋Font去設定<br><img src="https://i.imgur.com/EWTITRt.png" alt><br>我是將字型大小調到20</p><p>在介面上看起來的大小<br><img src="https://i.imgur.com/IpqviDP.png" alt></p><p>此時雖然安裝好了開啟新專案但是我們的Interpreter設定尚未完全<br>我們來繼續往下看如何使用Anaconda管理我們的Interpreter吧!</p><h2 id="Anaconda-安裝與使用"><a href="#Anaconda-安裝與使用" class="headerlink" title="Anaconda 安裝與使用"></a>Anaconda 安裝與使用</h2><h3 id="Python專案環境選擇"><a href="#Python專案環境選擇" class="headerlink" title="Python專案環境選擇"></a>Python專案環境選擇</h3><ul><li>Anaconda易於管理便於更新</li></ul><p><a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">Anaconda下載</a></p><p><img src="https://i.imgur.com/JfOWMKX.png" alt></p><h3 id="Anaconda用法"><a href="#Anaconda用法" class="headerlink" title="Anaconda用法"></a>Anaconda用法</h3><p>Anaconda用法其實跟python的virtualenv用法類似</p><h4 id="執行Anaconda-prompt"><a href="#執行Anaconda-prompt" class="headerlink" title="執行Anaconda prompt"></a>執行Anaconda prompt</h4><pre><code>conda create -n myenv python=3.6 packages    #myenv環境名稱可以自己取    #packages可以自行添增例如numpy=1.7 matplotlib    #python=3.6是選擇interpreter版本conda create -n myenv python=3.6 numpy pandas matplotlib pip</code></pre><h4 id="啟動虛擬環境"><a href="#啟動虛擬環境" class="headerlink" title="啟動虛擬環境"></a>啟動虛擬環境</h4><pre><code>activate myenv</code></pre><p>啟動成功在最前方的()內會變成虛擬環境的名稱<br><img src="https://i.imgur.com/yjTfgR8.png" alt></p><h4 id="檢測環境-用來看目前創建了幾個虛擬環境"><a href="#檢測環境-用來看目前創建了幾個虛擬環境" class="headerlink" title="檢測環境(用來看目前創建了幾個虛擬環境)"></a>檢測環境(用來看目前創建了幾個虛擬環境)</h4><pre><code>conda env list</code></pre><p><img src="https://i.imgur.com/tkCe7xx.png" alt></p><h4 id="檢測當下虛擬環境的packages"><a href="#檢測當下虛擬環境的packages" class="headerlink" title="檢測當下虛擬環境的packages"></a>檢測當下虛擬環境的packages</h4><pre><code>conda list -n myenv若是activate狀態則conda list即可</code></pre><h4 id="安裝環境的packages"><a href="#安裝環境的packages" class="headerlink" title="安裝環境的packages"></a>安裝環境的packages</h4><pre><code>conda install -n myenv pipactivate myenvpip install SomePackageex:    conda install -n myenv pip  #在虛擬環境安裝pip裝完後才能裝其他缺少的函式庫(若虛擬環境已有安裝則可以省略)    activate myenv  #啟動虛擬環境    pip install numpy pandas tensorflow keras opencv-python </code></pre><h4 id="關閉環境"><a href="#關閉環境" class="headerlink" title="關閉環境"></a>關閉環境</h4><pre><code>deactive</code></pre><p>那麼完成後PyCharm便可以在Interpreter中找到剛剛設置的虛擬環境達到函式庫的更新與管理</p><pre><code>在Setting &gt; Project Interpreter去做設定</code></pre><p><img src="https://i.imgur.com/pMSqzVK.png" alt></p><pre><code>選擇設定 &gt; 勾選Existing environment</code></pre><p><img src="https://i.imgur.com/22MFEhi.png" alt></p><p>按下Run沒出現異常 exit code 0 大功告成拉~<br>可以開始編寫程式碼</p><p><img src="https://i.imgur.com/eSNdhIc.png" alt></p><p>下次再紀錄陪伴我最久的jupyter notebook~</p><p>參考資料:<br><a href="https://zh.wikipedia.org/zh-tw/PyCharm" target="_blank" rel="noopener">PyCharm - 維基百科，自由的百科全書 - Wikipedia</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;安裝編譯環境是個非常重要的環節，好的開始是成功的一半，若是能順利安裝並編譯出自己的第一支程式是個讓人興奮的事情，這邊紀錄一下Python安裝
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="PyCharm" scheme="https://teddybearfp.github.io/tags/PyCharm/"/>
    
      <category term="Anaconda" scheme="https://teddybearfp.github.io/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 人數統計(Busuanzi &amp; LeanCloud)</title>
    <link href="https://teddybearfp.github.io/2019/03/29/Hexo-Next-%E4%BA%BA%E6%95%B8%E7%B5%B1%E8%A8%88-Busuanzi-LeanCloud/"/>
    <id>https://teddybearfp.github.io/2019/03/29/Hexo-Next-人數統計-Busuanzi-LeanCloud/</id>
    <published>2019-03-29T10:05:16.000Z</published>
    <updated>2019-07-05T14:46:19.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在網站架設完成後，我們都會希望知道來到網站的人數與行為，那麼我們要如何在Hexo架設的部落格中完成人數統計這個功能呢?這一篇我們紀錄如何使用Busuanzi跟LeanCloud來統計人數</p><h2 id="Busuanzi-不蒜子"><a href="#Busuanzi-不蒜子" class="headerlink" title="Busuanzi 不蒜子"></a>Busuanzi 不蒜子</h2><p>先來看看成果~</p><p><img src="https://i.imgur.com/3TXciGP.png" alt title="圖1"></p><p>恩~看起來不錯 那麼我們開始來配置吧!</p><h3 id="Busuanzi-不蒜子配置"><a href="#Busuanzi-不蒜子配置" class="headerlink" title="Busuanzi 不蒜子配置"></a>Busuanzi 不蒜子配置</h3><p>不蒜子在Hexo Next主題配置中是相當容易的，只要到在部落格主題的主配置中開啟功能並設置即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\themes\next\_config.YML</span><br></pre></td></tr></table></figure></p><p>把busuanzi_count:設為true<br>uv:同一個用戶即使連續瀏覽N篇文章，依舊只算1次訪客數<br>pv:同一個用戶連續瀏覽N篇文章，算N次訪客數<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: 訪客數</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 總訪問次數</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: false</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 閱讀數</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p><p>上述就完成(圖1)Busuanzi的配置囉<br>有了整個網站的訪客數，但是會發現單篇文章的統計數必須進到每篇文章內才能看到該文章的閱讀次數</p><p><img src="https://i.imgur.com/vLu639S.png" alt></p><p>這樣要看每篇文章的閱讀次數很不方便那麼我們該如何達到在瀏覽文章篇章的地方就看的到人數統計呢?答案是LeanCloud，待會下方繼續記錄LeanCloud的使用方式，讓我們繼續看下去~</p><h3 id="Busuanzi失效"><a href="#Busuanzi失效" class="headerlink" title="Busuanzi失效"></a>Busuanzi失效</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>由於Busuanzi網址更新，導致使用Hexo Next主题時統計瀏覽數失效</p><h4 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h4><p>到hexo的themes資料夾</p><p>\themes\next\layout_third-party\analytics\busuanzi-counter.swig</p><p>打開busuanzi-counter.swig修改內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//將src中的https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js</span></span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//src更改為https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</span></span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子官方網站</a></p><h2 id="LeanCloud人數統計"><a href="#LeanCloud人數統計" class="headerlink" title="LeanCloud人數統計"></a>LeanCloud人數統計</h2><p>先至<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>官網註冊，<br>註冊完成後點選創建應用選擇開發版(免費的最讚)</p><p><img src="https://i.imgur.com/PP7VzQf.png" alt></p><p>接著創建Class<br>這裡很重要Hexo Next主題的Class名稱必須為Counter<br>並且選擇為無限制否則人數會有統計上錯誤</p><p><img src="https://i.imgur.com/DvJ4vHr.png" alt></p><p>創建完成Class後<br>到設置 &gt; 應用Key &gt; 取得app_id、app_key</p><p><img src="https://i.imgur.com/T4pA84N.png" alt></p><p>在到部落格主題的主配置中開啟功能並設置app_id、app_key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\themes\next\_config.YML</span><br></pre></td></tr></table></figure></p><p>leancloud_visitors:<br>  enable: true<br>  app_id: 填寫app_id<br>  app_key: 填寫app_key</p><p>皆完成後將部落格再次佈署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><p>大功告成!!<br>我們在文章列表就可以看到閱讀次數了，不需要點進文章內(灑花)</p><p><img src="https://i.imgur.com/NwdmIC7.png" alt></p><p>LeanCloud後台數據可以看閱讀次數與拜訪時間點如下圖</p><p><img src="https://i.imgur.com/tiKFAnf.png" alt></p><p>以上就是我們在Hexo Next如何增加統計人數的方法記錄</p><h2 id="同事笑話分享"><a href="#同事笑話分享" class="headerlink" title="同事笑話分享"></a>同事笑話分享</h2><p>同事說他在看棒球新聞的時候<br>同事爸說:鈴木一郎哩<br>同事說:退休啦!<br>同事爸說:蛤!?我說恁母伊郎哩(台語:你媽人哩)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在網站架設完成後，我們都會希望知道來到網站的人數與行為，那麼我們要如何在Hexo架設的部落格中完成人數統計這個功能呢?這一篇我們紀錄如何使用
      
    
    </summary>
    
      <category term="Hexo" scheme="https://teddybearfp.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo Next" scheme="https://teddybearfp.github.io/tags/Hexo-Next/"/>
    
      <category term="Busuanzi" scheme="https://teddybearfp.github.io/tags/Busuanzi/"/>
    
      <category term="LeanCloud" scheme="https://teddybearfp.github.io/tags/LeanCloud/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next SEO分析網站(Search Engine Optimization)</title>
    <link href="https://teddybearfp.github.io/2019/03/29/Hexo-SEO%E5%88%86%E6%9E%90%E7%B6%B2%E7%AB%99/"/>
    <id>https://teddybearfp.github.io/2019/03/29/Hexo-SEO分析網站/</id>
    <published>2019-03-29T04:05:16.000Z</published>
    <updated>2019-07-05T14:42:54.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是我第一次編寫個人部落格，我這次架完網站後，由於文章量不多，隔了五個月才設置統計人數功能，開啟統計人數後發現有人閱讀，真的是件讓人很開心的事，這時我就想了解是哪些人觀看我們用心編寫的文章，還有觀看的時候行為如何，例如:曝光度與點擊次數與點閱率、哪個國家的IP，觀看文章的時間與跳出率之類的，有這些資料讓我們了解哪些文章是受歡迎的，我們才可以精進我們的部落格留住更多瀏覽人數，目前只有部屬在Google Search Engine中，所以本篇記錄如何在Hexo Next 使用Google相關的分析</p><h2 id="SEO-Search-Engine-Optimization"><a href="#SEO-Search-Engine-Optimization" class="headerlink" title="SEO(Search Engine Optimization)"></a>SEO(Search Engine Optimization)</h2><p>SEO 是一種透過自然排序（無付費）的方式增加網頁曝光度的行銷規律</p><p>這一篇會記錄兩種Google分析瀏覽紀錄的方式</p><ul><li>Google search console</li><li>Google Analytics</li></ul><p>達到網站分析與關鍵字研究</p><h2 id="Google-search-console"><a href="#Google-search-console" class="headerlink" title="Google search console"></a>Google search console</h2><p>用Google search console可以看整體成長趨勢包含曝光度與點擊次數與點閱率</p><p>首先至<a href="https://search.google.com/search-console/welcome" target="_blank" rel="noopener">Google search console</a>新增資源，將部落格的網址(<a href="https://teddybearfp.github.io/)輸入在網址前置字元">https://teddybearfp.github.io/)輸入在網址前置字元</a></p><p><img src="https://i.imgur.com/P291fYl.png" alt></p><p>有了資源後我們來驗證，除了上傳HTML檔案驗證的方法還有另一種使用HTML標記，在所謂中繼標記就是以meta開頭的程式碼head.swig前方加入Google驗證碼並上傳即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">檔案位置:</span><br><span class="line">blog\themes\next\layout\_partials\head.swig</span><br></pre></td></tr></table></figure><p>開啟head.swig並把Google驗證碼貼在最上方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;google-site-verification&quot; content=&quot;XXXXXXXXXXX_XXXXXXXXXXXXXXXXXXXXX_XXXXXXXXX&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>重新佈署部落格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><p>完成啦~ 可以看看我們的網頁數據並開始進行分析囉</p><p><img src="https://i.imgur.com/0R9E2qT.png" alt></p><p>還可以看讀者是輸入什麼關鍵字搜尋你的文章的</p><p><img src="https://i.imgur.com/z3EFoPs.png" alt></p><h2 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h2><p>Google Analytics可以更進一步的分析讀者在文章閱讀的時間，讓我們能了解是否能留住讀者，還可以知道什麼時段讀者較多與來自哪裡</p><p>首先去<a href="https://analytics.google.com/analytics/web/provision/?authuser=0#/provision" target="_blank" rel="noopener">Google Analytics</a>申請帳號，</p><p><img src="https://i.imgur.com/jFM5RC5.png" alt></p><p>然後將追蹤ID輸入到主題的主配置中<br>\themes\next<br>google_analytics: UA-XXXXXXXXX-X<br>將部落格再次部屬<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><p>成功後我們就可以看到用戶的使用情形了<br>這Google分析是不是超猛的~~</p><p><img src="https://i.imgur.com/2h7Fuj8.png" alt></p><p><img src="https://i.imgur.com/ng1iv2n.png" alt></p><p>上圖是剛分析的第一天資料量較少，但是可以看一下功能</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.newscan.com.tw/all-seo/seo-guide.htm" target="_blank" rel="noopener">SEO的初學者教學，搞懂SEO搜尋引擎優化，讓你網站訂單接不完-新視野</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這是我第一次編寫個人部落格，我這次架完網站後，由於文章量不多，隔了五個月才設置統計人數功能，開啟統計人數後發現有人閱讀，真的是件讓人很開心的
      
    
    </summary>
    
      <category term="Hexo" scheme="https://teddybearfp.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo Next" scheme="https://teddybearfp.github.io/tags/Hexo-Next/"/>
    
      <category term="SEO分析網站" scheme="https://teddybearfp.github.io/tags/SEO%E5%88%86%E6%9E%90%E7%B6%B2%E7%AB%99/"/>
    
      <category term="Google Analytics" scheme="https://teddybearfp.github.io/tags/Google-Analytics/"/>
    
      <category term="Google search console" scheme="https://teddybearfp.github.io/tags/Google-search-console/"/>
    
  </entry>
  
  <entry>
    <title>平行處理用CUDA</title>
    <link href="https://teddybearfp.github.io/2019/03/26/%E5%B9%B3%E8%A1%8C%E8%99%95%E7%90%86%E7%94%A8CUDA/"/>
    <id>https://teddybearfp.github.io/2019/03/26/平行處理用CUDA/</id>
    <published>2019-03-26T10:05:16.000Z</published>
    <updated>2019-03-27T14:19:34.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天公司最強學長介紹CUDA的厲害，讓我們了解到透過GPU的方式平行處理加速完成計算的驚人之處，所以編寫一篇來記錄這強大的CUD，現今的手機應用軟體依賴執行 GPU 的雲端伺服器。店家使用 GPU 分析零售和網路數據。網站利用 GPU 以更準確地放置廣告。</p><h2 id="C-C-平行處理"><a href="#C-C-平行處理" class="headerlink" title="C/C++ 平行處理"></a>C/C++ 平行處理</h2><p>CPU上我們要用平行處理可以透過OpenMP的函式來完成，OpenMP 是一種能透過高階指令，很簡單地將程式平行化、多執行緒化的 API；在最簡單的情形，甚至可以只加一行指令，就可以將迴圈內的程式平行化處理了！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for <span class="comment">//只要將這句加在耗時的迴圈之前即可變成平行處理</span></span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++ i )</span><br><span class="line">    <span class="comment">//dosomething;</span></span><br></pre></td></tr></table></figure></p><h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><p>CUDA是由NVIDIA所推出的一種整合技術CUDA核心運算技術不但對遊戲、文書處理或是影音轉檔都幫助甚大，今日的GPU在浮點運算效能上早已超越CPU，不但現在的電腦應用中CPU與GPU是共同存在的，連原本是需要CPU來運算的資料現在都可以藉由GPU來執行，而且還做得更好！<br>現今電影場景許多都是透過CUDA，例如:家喻戶曉的3D阿凡達的電影背景幾乎都是由CUDA運算，拍攝時演員只需要在棚內特製的佈景前擺出動作，然後再和CUDA運算好的虛擬場景結合後，就成為我們在螢光幕前所看到的一切！</p><p>編寫方面CUDA可以相容OpenCL或者自家的C編譯器。無論是CUDA C語言或是OpenCL，指令最終都會被驅動程式轉換成PTX程式碼，交由顯示核心計算</p><h2 id="CPU-vs-GPU"><a href="#CPU-vs-GPU" class="headerlink" title="CPU vs GPU"></a>CPU vs GPU</h2><p>下面GIF比較CPU與GPU繪圖速度<br>CPU<br><img src="https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif" alt title="圖1"></p><p>GPU<br><img src="https://i.imgur.com/Dgj8EJj.gif" alt title="圖2"></p><p><img src="https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif" alt title="圖3"></p><h2 id="使用CUDA"><a href="#使用CUDA" class="headerlink" title="使用CUDA"></a>使用CUDA</h2><p>使用CUDA簡單的說就是把GPU當CPU來用，要使用之前我們得先看我們的電腦有沒有支援CUDA，在<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">CUDA GPUs </a>可以確認顯示是否有支援，接著至<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">CUDA Toolkit</a>下載相對應版本</p><h2 id="CUDA運算環境"><a href="#CUDA運算環境" class="headerlink" title="CUDA運算環境"></a>CUDA運算環境</h2><p>__host__<br>CPU執行且可使用C/C++一般函數</p><p>__global__<br>CPU/GPU執行但不可使用C/C++一般函數</p><p>__device__<br>GPU執行且不可使用C/C++一般函數<br>在device上執行的副程式，稱為kernel，通常有上百到上千個執行緒(thread)執行同一個kernel。</p><h2 id="CUDA-vs-Stream-Processor"><a href="#CUDA-vs-Stream-Processor" class="headerlink" title="CUDA vs Stream Processor"></a>CUDA vs Stream Processor</h2><ul><li>CUDA 較早開發</li><li>完整性較高</li><li>主流</li><li>TensorFlow 是使用CUDA做Machine learning</li><li>Google 在用</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>公司最強學長的報告<br><a href="https://zh.wikipedia.org/wiki/CUDA" target="_blank" rel="noopener">CUDA - 维基百科，自由的百科全书</a><br><a href="https://www.computerdiy.com.tw/nvidia-cuda/" target="_blank" rel="noopener">硬體加速搞不懂？CUDA讓一切變得更簡單</a><br><a href="https://blogs.nvidia.com.tw/2012/09/what-is-cuda-2/" target="_blank" rel="noopener">什麼是 CUDA?</a><br><a href="https://kheresy.wordpress.com/2006/06/09/%E7%B0%A1%E6%98%93%E7%9A%84%E7%A8%8B%E5%BC%8F%E5%B9%B3%E8%A1%8C%E5%8C%96%E6%96%B9%E6%B3%95%EF%BC%8Dopenmp%EF%BC%88%E4%B8%80%EF%BC%89%E7%B0%A1%E4%BB%8B/" target="_blank" rel="noopener"></a></p><h2 id="圖片來源"><a href="#圖片來源" class="headerlink" title="圖片來源"></a>圖片來源</h2><p>圖1:<a href="https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif" target="_blank" rel="noopener">https://thumbs.gfycat.com/KnobbyClearDutchshepherddog-max-1mb.gif</a><br>圖2:<a href="https://i.imgur.com/Dgj8EJj.gif" target="_blank" rel="noopener">https://i.imgur.com/Dgj8EJj.gif</a><br>圖3:<a href="https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif" target="_blank" rel="noopener">https://img.gifmagazine.net/gifmagazine/images/3407897/original.gif</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天公司最強學長介紹CUDA的厲害，讓我們了解到透過GPU的方式平行處理加速完成計算的驚人之處，所以編寫一篇來記錄這強大的CUD，現今的手機
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="平行處理" scheme="https://teddybearfp.github.io/tags/%E5%B9%B3%E8%A1%8C%E8%99%95%E7%90%86/"/>
    
      <category term="CUDA" scheme="https://teddybearfp.github.io/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>環狀佇列(Circular Queue)</title>
    <link href="https://teddybearfp.github.io/2019/03/26/%E7%92%B0%E7%8B%80%E4%BD%87%E5%88%97-Circular-Queue/"/>
    <id>https://teddybearfp.github.io/2019/03/26/環狀佇列-Circular-Queue/</id>
    <published>2019-03-26T04:05:16.000Z</published>
    <updated>2019-08-13T14:28:17.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近處理一些數據是滿兩百筆後，進行一個queue佇列的動作(先進先出)，但是我們如果是使用queue的話只能對頭尾操作，要遍歷一遍的話要用pop，也不適合重覆使用，那麼我們來改用陣列達到實現queue的效果</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>Queue是一個先進先出的佇列這種佇列我們可以掌握頭尾的資料</p><p>push: 把一個值加到最後<br>pop: 把最後一個值移除<br>size: 得到目前資料長度<br>front: 取得第一筆<br>back: 取得最後一筆<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line">q.push(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">q.front();<span class="comment">//1</span></span><br><span class="line">q.back();<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">q.pop();<span class="comment">//1被拿掉</span></span><br><span class="line">q.size();<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><p>優點:可以快速的把第一個值拿掉<br>缺點:只能操作到頭尾資料</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>push_back: 把一個值加到最後<br>pop_back: 把最後一個值移除<br>size: 得到目前資料長度<br>vec[]: 得到某一個位置的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    vec.push_back(<span class="number">1</span>);<span class="comment">//賦值</span></span><br><span class="line">    vec.push_back(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> dataLength = vec.size();<span class="comment">//取得容器長度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,vec.at(<span class="number">1</span>));<span class="comment">//操作元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,vec[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:vec)<span class="comment">//Vector很方便的逐一遍歷</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    vec.pop_back();<span class="comment">//移除2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>優點:宣告時可以不用給予大小<br>缺點:內部進行刪除時效率低</p><h2 id="環狀佇列-Unordered"><a href="#環狀佇列-Unordered" class="headerlink" title="環狀佇列(Unordered)"></a>環狀佇列(Unordered)</h2><p>有時候我們只是要最新的100筆資料而不管順序，那麼可以用標準模板庫（Standard Template Library）的Vector容器來達成目標，這種方式是只確保是資料是最新的100筆，而資料順序不是保證從0~99，利用idex紀錄資料，當容器資料量到達100滿的時候從第一筆開始覆蓋<br>首先我們宣告Vector跟宣告大小</p><h3 id="第一種-起始記憶體位置不變"><a href="#第一種-起始記憶體位置不變" class="headerlink" title="第一種 起始記憶體位置不變"></a>第一種 起始記憶體位置不變</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> queueSize = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span>.size() &gt;= queueSize)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt;= queueSize)</span><br><span class="line">    &#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>[idx] = value;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queue</span>[idx] = value;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>.push_back(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二種-起始記憶體位置變動"><a href="#第二種-起始記憶體位置變動" class="headerlink" title="第二種 起始記憶體位置變動"></a>第二種 起始記憶體位置變動</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> queueSize = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;<span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span>.size() &gt;= queueSize)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>.push_back(value);</span><br><span class="line">    <span class="built_in">queue</span>.erase(<span class="built_in">queue</span>.begin());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>.push_back(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="環狀佇列-Ordered"><a href="#環狀佇列-Ordered" class="headerlink" title="環狀佇列(Ordered)"></a>環狀佇列(Ordered)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_QUEUE 10</span></span><br><span class="line"><span class="keyword">int</span> circularQueue[MAX_QUEUE];</span><br><span class="line"><span class="keyword">int</span> front = <span class="number">-1</span>, rear = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>; <span class="comment">//透過flag可以將原本只能存放N-1個元素的環形佇列變成存放N個元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear % MAX_QUEUE == front);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (front == rear)? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">queue</span>, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull() &amp;&amp; flag == <span class="number">1</span> || rear == MAX_QUEUE - <span class="number">1</span> &amp;&amp; front == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Circular Queue is full!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Circular Queue add: %d\n"</span>, value);</span><br><span class="line">    rear = (rear + <span class="number">1</span>) % MAX_QUEUE;</span><br><span class="line">    <span class="built_in">queue</span>[rear] = value;</span><br><span class="line">    <span class="keyword">if</span> (front == rear) flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty() &amp;&amp; flag == <span class="number">0</span>)&#123; <span class="comment">//檢查佇列是否為空的</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Circular Queue is empty!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    front = (front + <span class="number">1</span>) % MAX_QUEUE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d is deleted.\n"</span>, <span class="built_in">queue</span>[front]);</span><br><span class="line">    <span class="keyword">if</span> (front == rear) flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Enqueue(circularQueue, <span class="number">1</span>);</span><br><span class="line">    Enqueue(circularQueue, <span class="number">2</span>);</span><br><span class="line">    Enqueue(circularQueue, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://larry850806.github.io/2016/06/06/STL1/" target="_blank" rel="noopener">[C++] STL 容器 (一) - 基本介紹</a><br><a href="https://j101044.wordpress.com/2014/08/19/algorithmc-c-%E4%BD%87%E5%88%97queue/" target="_blank" rel="noopener">[Algorithm][C / C++] 佇列(Queue)、環狀佇列(Circular Queue)</a></p><h2 id="好音樂分享"><a href="#好音樂分享" class="headerlink" title="好音樂分享"></a>好音樂分享</h2><p>長大以後聽著很有感觸呢!或許講的是我是你也是妳</p><p><a href="https://www.youtube.com/watch?v=3P8ODasFchE&amp;index=4&amp;list=PL5AkdapUo5y1F6DUOeLEPpk0GpNKcIvY4" target="_blank" rel="noopener">『城市唱遊 EP.20』好樂團 - 我把我的青春給你｜樂人 x Volkswagen</a><br><a href="https://www.youtube.com/watch?v=Elb9-GHqxfY" target="_blank" rel="noopener">Vising《 長大以後 》Lyric Video</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近處理一些數據是滿兩百筆後，進行一個queue佇列的動作(先進先出)，但是我們如果是使用queue的話只能對頭尾操作，要遍歷一遍的話要用p
      
    
    </summary>
    
      <category term="C++" scheme="https://teddybearfp.github.io/categories/C/"/>
    
    
      <category term="環狀佇列" scheme="https://teddybearfp.github.io/tags/%E7%92%B0%E7%8B%80%E4%BD%87%E5%88%97/"/>
    
      <category term="Circular Queue" scheme="https://teddybearfp.github.io/tags/Circular-Queue/"/>
    
      <category term="Vector" scheme="https://teddybearfp.github.io/tags/Vector/"/>
    
      <category term="Queue" scheme="https://teddybearfp.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>看門狗計時器(Watchdog Timer)</title>
    <link href="https://teddybearfp.github.io/2019/03/25/%E7%9C%8B%E9%96%80%E7%8B%97%E8%A8%88%E6%99%82%E5%99%A8-Watchdog-Timer/"/>
    <id>https://teddybearfp.github.io/2019/03/25/看門狗計時器-Watchdog-Timer/</id>
    <published>2019-03-25T04:05:16.000Z</published>
    <updated>2019-03-25T15:52:57.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在編寫一些較有危險性的函式在裝置上，我們要怎麼來降低風險呢?例如:馬達持續未關閉、高壓電輸出、加熱裝置未關閉之類的潛在危險因子，最近編寫一些函式控制裝置，但是有一定的風險在其中，在思考防範機制的時候，前輩給了我一個不錯的思維，就是這些情況可以透過看門狗計時器來幫我們守護整體安全性，使控制系統轉入安全狀態中。</p><h2 id="看門狗計時器"><a href="#看門狗計時器" class="headerlink" title="看門狗計時器"></a>看門狗計時器</h2><p>看門狗計時器是一種電腦硬體式的計時裝置，當系統的主程式發生某些錯誤事件時，例如:程式異常中止或是崩潰，導致程式沒有正常執行解構函式與離開狀態機，假死機或未定時的清除看門狗計時器的內含計時值（多半是向對計時器發送清除訊號），這時看門狗計時器就會對系統發出重設、重新啟動或關閉的訊號，使系統從懸停狀態回復到正常運作狀態。看門狗一旦使用便不能停止。一般情況下計數器在系統休眠時依然計數，但在某些晶片上，處於低功耗模式下的看門狗僅僅保留暫存器資料但不計數。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>在FPGA或是Firmware的地方編寫看門狗計時器，當程式執行的時候，軟體不斷的給看門狗計時器答覆，當沒答覆的時候代表程式離開、需要重啟或關閉，這樣就不用擔心軟體方面的異常中止，硬體自行有保護<br>讚啦!</p><h2 id="生活小記"><a href="#生活小記" class="headerlink" title="生活小記"></a>生活小記</h2><p>今天同事跟我說個驚人事實就是漫威屬於迪士尼的，後來我看到復仇者聯盟的宣傳照突然有種喜感，接下來換我告訴他驚人的事實，中國有嘻哈也是迪士尼的，因為Diss你~</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%9C%8B%E9%96%80%E7%8B%97%E8%A8%88%E6%99%82%E5%99%A8" target="_blank" rel="noopener">看門狗計時器- 维基百科，自由的百科全书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在編寫一些較有危險性的函式在裝置上，我們要怎麼來降低風險呢?例如:馬達持續未關閉、高壓電輸出、加熱裝置未關閉之類的潛在危險因子，最近編寫一些
      
    
    </summary>
    
      <category term="其他" scheme="https://teddybearfp.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="看門狗計時器" scheme="https://teddybearfp.github.io/tags/%E7%9C%8B%E9%96%80%E7%8B%97%E8%A8%88%E6%99%82%E5%99%A8/"/>
    
      <category term="Watchdog Timer" scheme="https://teddybearfp.github.io/tags/Watchdog-Timer/"/>
    
  </entry>
  
  <entry>
    <title>Python 資料視覺化(Data Visualization)</title>
    <link href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/"/>
    <id>https://teddybearfp.github.io/2019/03/20/Python-資料視覺化/</id>
    <published>2019-03-20T04:05:16.000Z</published>
    <updated>2019-07-05T14:49:07.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>數字比較不能讓一目了然資料的變化，驗證數據時看這些數字比較無感，雖然excel就可以畫圖形了，最近有大量數據圖需要觀察，一個一個excel點進去設定繪製與截圖實在耗時，所以我們編寫一個資料視覺化程式更方便更快速達成多個圖表繪製，可以將同層中的csv數據透過matplotlib分色畫成折線圖並存成圖檔，也可以畫成柱狀圖、圓餅圖、散佈圖與其他更高階的視覺化圖形，這篇我們紀錄折線圖的使用方式<br><img src="https://i.imgur.com/ZTz43gn.png" alt></p><h2 id="編寫中文"><a href="#編寫中文" class="headerlink" title="編寫中文"></a>編寫中文</h2><p>Python編碼默認是ASCII格式，沒修改編碼的情況下無法編寫中文，所以輸入中文會報錯，解決辦法有以下兩種</p><p>第一種方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br></pre></td></tr></table></figure></p><p>第二種方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br></pre></td></tr></table></figure></p><h2 id="glob讀取-csv"><a href="#glob讀取-csv" class="headerlink" title="glob讀取.csv"></a>glob讀取.csv</h2><p>glob.iglob(pathname), 一次只獲取一個匹配路徑<br>glob.glob（pathname), 獲取所有的匹配路徑<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob </span><br><span class="line"></span><br><span class="line">f = glob.iglob(<span class="string">r'.\*.csv'</span>)</span><br><span class="line">input_files = glob.glob(<span class="string">r'*.csv'</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> input_file <span class="keyword">in</span> input_files: <span class="comment">#檢視取得到的內容</span></span><br><span class="line">    print(input_file)</span><br></pre></td></tr></table></figure></p><h2 id="讀取CSV內容"><a href="#讀取CSV內容" class="headerlink" title="讀取CSV內容"></a>讀取CSV內容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">input_files = <span class="string">"Teddybearfp.csv"</span></span><br><span class="line">file = pd.read_csv(input_file,encoding = <span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開啟 CSV 檔案</span></span><br><span class="line"><span class="keyword">with</span> open(input_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> rFile:</span><br><span class="line"></span><br><span class="line"><span class="comment">#讀取 CSV 檔案內容</span></span><br><span class="line">filereader = csv.reader(rFile)</span><br><span class="line"></span><br><span class="line"><span class="comment">#filereader.next() 返回即为第一行的内容(通常為標題)</span></span><br><span class="line">header = next(filereader)</span><br><span class="line"></span><br><span class="line"><span class="comment">#剖析header得到title標題與count_header總數</span></span><br><span class="line">title = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_header = len(title)</span><br></pre></td></tr></table></figure><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(plt, data)</span>:</span></span><br><span class="line">    x = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    y = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    <span class="comment">#調整圖形大小</span></span><br><span class="line">    <span class="comment">#默認像素：[6.0,4.0]，分辨率100，圖形大小 600X400</span></span><br><span class="line">    <span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#畫出圖形</span></span><br><span class="line">    plt.xlabel(<span class="string">'Seconds'</span>) <span class="comment">#X軸</span></span><br><span class="line">    plt.ylabel(<span class="string">'Temperature'</span>) <span class="comment">#Y軸</span></span><br><span class="line">    <span class="comment">#plt.ylim((1, 8)) 可以設置極限值改變顯示區域</span></span><br><span class="line">    plt.plot(x, y,color = <span class="string">"red"</span>, label = <span class="string">"A"</span>, linewidth = <span class="number">1</span>) <span class="comment">#畫線並設置顏色與標籤和線寬</span></span><br><span class="line">    plt.legend(loc = <span class="string">'best'</span>,prop=&#123;<span class="string">'size'</span>:<span class="number">6</span>&#125;) <span class="comment">#將標籤找到數據較少的地方放置(盡可能不會遮蔽到數據),prop調整圖示大小</span></span><br><span class="line">    plt.savefig(filename + <span class="string">".png"</span>, dpi=<span class="number">300</span>)<span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#plt.plot(x, y) 線(預設)</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, 'o') 點</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, '-o') 線與點</span></span><br><span class="line"><span class="comment">#plt.plot(x, y, '--o') 虛線與點</span></span><br><span class="line"></span><br><span class="line">data = [ (<span class="number">1</span>,<span class="number">2</span>), (<span class="number">2</span>,<span class="number">8</span>), (<span class="number">5</span>,<span class="number">2</span>), (<span class="number">7</span>,<span class="number">6</span>), (<span class="number">9</span>,<span class="number">10</span>) ]</span><br><span class="line"><span class="comment">#呼叫畫圖函式</span></span><br><span class="line">plotData(plt, data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Kfl7gec.png" alt></p><h2 id="實作csv資料視覺化"><a href="#實作csv資料視覺化" class="headerlink" title="實作csv資料視覺化"></a>實作csv資料視覺化</h2><p>以下實作是將同層的csv資料畫成折線圖(例如:溫度變化圖)讓我們繼續看下去<br><img src="https://i.imgur.com/wseilHN.png" alt title="眼花撩亂的csv數據"></p><p>不要懷疑上面的圖真的是模糊過的不是眼睛出問題</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotData</span><span class="params">(plt, data, color, filename, label)</span>:</span></span><br><span class="line">    x = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    y = [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    plt.xlabel(<span class="string">'Seconds'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Temperature'</span>)</span><br><span class="line">    plt.rcParams[<span class="string">'savefig.dpi'</span>] = <span class="number">800</span></span><br><span class="line">    plt.plot(x, y, <span class="string">'-'</span>, color = color, label = label)</span><br><span class="line">    plt.legend(loc = <span class="string">'best'</span>,prop=&#123;<span class="string">'size'</span>:<span class="number">6</span>&#125;)<span class="comment">#prop調整圖示大小</span></span><br><span class="line">    plt.savefig(filename + <span class="string">".png"</span>, dpi=<span class="number">300</span>)<span class="comment"># 指定dpi=200，圖片大小為 1200*800, dpi=300，圖片大小為 1800*1200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#讀檔取得標題</span></span><br><span class="line">input_files = glob.glob(<span class="string">r'*.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#輸入目標溫度畫輔助線</span></span><br><span class="line">targetDegree = int(input(<span class="string">"Target degree:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> input_file <span class="keyword">in</span> input_files:</span><br><span class="line">    result_data = []</span><br><span class="line">    expect = []</span><br><span class="line">    file = pd.read_csv(input_file,encoding = <span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(input_file,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> rFile:</span><br><span class="line">        filereader = csv.reader(rFile)</span><br><span class="line">        header = next(filereader)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#剖析header得到title標題與count_header總數</span></span><br><span class="line">    title = [ n <span class="keyword">for</span> n <span class="keyword">in</span> header <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">    count_header = len(title)  </span><br><span class="line"></span><br><span class="line">    color = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"green"</span>, <span class="string">"navy"</span>, <span class="string">"skyblue"</span>, </span><br><span class="line">             <span class="string">"burlywood"</span>, <span class="string">"blue"</span>, <span class="string">"cyan"</span>, <span class="string">"black"</span>, <span class="string">"brown"</span>,</span><br><span class="line">             <span class="string">"orange"</span>, <span class="string">"purple"</span>, <span class="string">"magenta"</span>, <span class="string">"slateblue"</span>, <span class="string">"gold"</span>,</span><br><span class="line">             <span class="string">"mintcream"</span>, <span class="string">"navy"</span>, <span class="string">"gold"</span>, <span class="string">"bisque"</span>, <span class="string">"aqua"</span>]</span><br><span class="line">             </span><br><span class="line">    <span class="comment">#畫輔助線看有沒有落在正負1範圍內(若不需要這段可以拿掉)</span></span><br><span class="line">    data = []</span><br><span class="line">    dataLength = len(file[title[<span class="number">0</span>]])</span><br><span class="line">    resTitle = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree)<span class="comment">#紅線目標溫度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"target"</span>)</span><br><span class="line">    </span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree - <span class="number">1</span>)<span class="comment">#綠線正負一度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"lower"</span>)</span><br><span class="line">    </span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(dataLength):</span><br><span class="line">        data.append(targetDegree + <span class="number">1</span>)<span class="comment">#綠線正負一度</span></span><br><span class="line">        </span><br><span class="line">    data = list(enumerate(data))</span><br><span class="line">    result_data.append(data)</span><br><span class="line">    resTitle.append(<span class="string">"upper"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#讀取每一行的資料並放到list中</span></span><br><span class="line">    <span class="keyword">for</span> number, title_ <span class="keyword">in</span> enumerate(title):</span><br><span class="line">        data = []</span><br><span class="line">        resTitle.append(title_)</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> enumerate(file[title_]):</span><br><span class="line">            data.append(content)</span><br><span class="line">            </span><br><span class="line">        result_data.append(data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#繪製圖形</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(result_data)):</span><br><span class="line">        plotData(plt, result_data[n], color[n], input_file.strip(<span class="string">".csv"</span>),resTitle[n])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/oyxIPhi.png" alt title="畫出溫度變化折線圖與正負1度輔助線"></p><p><img src="https://i.imgur.com/lqJi6MH.png" alt title="溫度變化折線圖與目標溫度無輔助線"></p><h2 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h2><p>關於溫度如何收斂呢?我們可以透過用PID控制器的方式達到數據收斂，PID控制器（比例-積分-微分控制器），由比例單元（P）、積分單元（I）和微分單元（D）組成。可以透過調整這三個單元的增益Kp，Ki和Kd來調定其特性。PID控制器主要適用於基本上線性，且動態特性不隨時間變化的系統。<br>P控制器: Kp * Error(誤差)<br>PI控制器: Kp * Error(誤差) + Ki * SumOfError(N組)<br>​PID 的​參數​調整​指​的是​通過​設定 P、​I 與 D 的​最佳​增益來達成<br>這穩定的控制方式在​業界​受到​廣泛​使用，這項​演算法​彈性​十足，​能夠​在​各式各樣​的​應用​中​能有良好的​結果<br>還可以運用在股票運算K線呢!不說了趕快繼續練習猜測與檢查找到最佳的PID</p><h2 id="網路笑話一則"><a href="#網路笑話一則" class="headerlink" title="網路笑話一則"></a>網路笑話一則</h2><p>上面既然提到了股票那麼來一則關於股票的笑話吧!</p><p>Q:猜猜誰不需要股票??</p><p>A:東尼史塔克</p><p>因為(don’t need stock)</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.itread01.com/articles/1476166832.html" target="_blank" rel="noopener">簡單掌握Python中glob模塊查找文件路徑的用法</a><br><a href="https://tree.rocks/python/python-matplotlib-simple-linechart/" target="_blank" rel="noopener">Python Matplotlib 簡單繪制圖表教學 ( 折線圖 )</a><br><a href="https://zh.wikipedia.org/zh-tw/PID%E6%8E%A7%E5%88%B6%E5%99%A8" target="_blank" rel="noopener">PID控制器- 维基百科，自由的百科全书</a><br><a href="http://www.ni.com/zh-tw/innovations/white-papers/06/pid-theory-explained.html" target="_blank" rel="noopener">PID 控制原理教學- National Instruments</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;數字比較不能讓一目了然資料的變化，驗證數據時看這些數字比較無感，雖然excel就可以畫圖形了，最近有大量數據圖需要觀察，一個一個excel點
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="csv" scheme="https://teddybearfp.github.io/tags/csv/"/>
    
      <category term="資料視覺化" scheme="https://teddybearfp.github.io/tags/%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/"/>
    
      <category term="Data Visualization" scheme="https://teddybearfp.github.io/tags/Data-Visualization/"/>
    
      <category term="折線圖" scheme="https://teddybearfp.github.io/tags/%E6%8A%98%E7%B7%9A%E5%9C%96/"/>
    
      <category term="matplotlib" scheme="https://teddybearfp.github.io/tags/matplotlib/"/>
    
      <category term="PID控制器" scheme="https://teddybearfp.github.io/tags/PID%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python 資料比對</title>
    <link href="https://teddybearfp.github.io/2019/03/19/Python-%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D/"/>
    <id>https://teddybearfp.github.io/2019/03/19/Python-資料比對/</id>
    <published>2019-03-19T05:05:16.000Z</published>
    <updated>2019-07-05T14:54:23.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如我們有兩個大型Excel(各四萬筆)要比對，要做三種資料(A∩B)、(A-A∩B)、(B-A∩B)那麼如果用excel篩選後複製貼上反覆操作後有錯誤風險且速度較慢，透過篩選複製貼上繁瑣且難發現有重複資料或是資料不全的項目，這一篇記錄了我去年前幫忙公務員解決的問題，想當初有公務員周期性的每個月需要做好幾筆，後來喝杯咖啡執行這程式資料就出來了輕鬆了不少呢</p><p>此篇使用的測試資料內容皆為亂掰的不是真實資料~</p><h2 id="舉例"><a href="#舉例" class="headerlink" title="舉例"></a>舉例</h2><p>一開始我們有兩份excel名單，一份名單內容是三月住宿而另一份是四月住宿的名單，那麼我們要產出新的三份excel且不同欄位需合併</p><ul><li>三月住宿四月皆住宿者</li><li>三月住宿四月沒住宿者</li><li>三月沒住四月新住宿者</li></ul><p>下圖為三月住宿名單(紅色為與四月相同的部分)<br><img src="https://i.imgur.com/FnymF99.png" alt title="三月住宿者"></p><p>下圖為三月住宿名單(紅色為與三月相同的部分)<br><img src="https://i.imgur.com/Q8gdJpq.png" alt title="四月住宿者"></p><p>那麼接下來我們的目標是要產出以下三種excel(兩份資料欄位需合併)</p><p>第一種(三月住宿四月皆住宿者)<br><img src="https://i.imgur.com/0fQqhx3.png" alt></p><p>第二種(三月住宿四月沒住宿者)<br><img src="https://i.imgur.com/1ajI0F6.png" alt></p><p>第三種(三月沒住四月新住宿者)<br><img src="https://i.imgur.com/WO5yICC.png" alt></p><h2 id="實作Excel交叉比對"><a href="#實作Excel交叉比對" class="headerlink" title="實作Excel交叉比對"></a>實作Excel交叉比對</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">input_file1 = <span class="string">"a.csv"</span></span><br><span class="line">input_file2 = <span class="string">"b.csv"</span></span><br><span class="line">write_data = <span class="string">''</span></span><br><span class="line">result_title = []</span><br><span class="line">result_titlea = []</span><br><span class="line">result_titleb = []</span><br><span class="line">same = []</span><br><span class="line">diffa= []</span><br><span class="line">diffb = []</span><br><span class="line">IDb = []</span><br><span class="line"><span class="comment">#read two files</span></span><br><span class="line">file1 = pd.read_csv(input_file1,encoding = <span class="string">'utf8'</span>)</span><br><span class="line">file2 = pd.read_csv(input_file2,encoding = <span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">with</span> open(input_file1,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> filex1:</span><br><span class="line">    filereadera = csv.reader(filex1)</span><br><span class="line">    headera = next(filereadera)</span><br><span class="line"><span class="comment">#counting header and write headercontent</span></span><br><span class="line">titlea = [ n <span class="keyword">for</span> n <span class="keyword">in</span> headera <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_headera = len(titlea)      </span><br><span class="line"><span class="keyword">with</span> open(input_file2,<span class="string">'r'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> filex2:</span><br><span class="line">    filereaderb = csv.reader(filex2)</span><br><span class="line">    headerb = next(filereaderb)</span><br><span class="line"><span class="comment">#counting header and write headercontent</span></span><br><span class="line">titleb = [ n <span class="keyword">for</span> n <span class="keyword">in</span> headerb <span class="keyword">if</span> n != <span class="string">''</span> ]</span><br><span class="line">count_headerb = len(titleb)   </span><br><span class="line">l_a = len(file1[titlea[<span class="number">0</span>]])</span><br><span class="line">l_b = len(file2[titleb[<span class="number">0</span>]])</span><br><span class="line">count_a = <span class="number">0</span></span><br><span class="line">count_b = <span class="number">0</span></span><br><span class="line"><span class="comment">#diffb檔案的title</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">    result_titleb.append(b)</span><br><span class="line">diffb.append(result_titleb)</span><br><span class="line"><span class="comment">#a跟b title若重複,刪除重複者</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">del</span> titleb[n]</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"><span class="comment">#ab相同檔案title,diffa檔案title</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    result_title.append(a)</span><br><span class="line">    result_titlea.append(a)</span><br><span class="line">diffa.append(result_titlea)</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> titleb:</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="string">'身分證號'</span><span class="keyword">or</span> b ==<span class="string">'身分證'</span><span class="keyword">or</span> b ==<span class="string">'身份證'</span><span class="keyword">or</span> b ==<span class="string">'身份證號'</span> <span class="keyword">or</span> b ==<span class="string">'id'</span><span class="keyword">or</span> b ==<span class="string">'ID'</span><span class="keyword">or</span> b ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> b ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result_title.append(b)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> titlea:</span><br><span class="line">    <span class="keyword">if</span> a ==<span class="string">'身分證號'</span><span class="keyword">or</span> a ==<span class="string">'身分證'</span><span class="keyword">or</span> a ==<span class="string">'身份證'</span><span class="keyword">or</span> a ==<span class="string">'身份證號'</span> <span class="keyword">or</span> a ==<span class="string">'id'</span><span class="keyword">or</span> a ==<span class="string">'ID'</span><span class="keyword">or</span> a ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> a ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        IDa = [content <span class="keyword">for</span> content <span class="keyword">in</span> file1[a]]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count_a += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> result_titleb:</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="string">'身分證號'</span><span class="keyword">or</span> b ==<span class="string">'身分證'</span><span class="keyword">or</span> b ==<span class="string">'身份證'</span><span class="keyword">or</span> b ==<span class="string">'身份證號'</span> <span class="keyword">or</span> b ==<span class="string">'id'</span><span class="keyword">or</span> b ==<span class="string">'ID'</span><span class="keyword">or</span> b ==<span class="string">'身分證字號'</span> <span class="keyword">or</span> b ==<span class="string">'身份證字號'</span>:</span><br><span class="line">        IDb = [content <span class="keyword">for</span> content <span class="keyword">in</span> file2[b]]     </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count_b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">same.append(result_title)</span><br><span class="line">count_ac = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> IDa:</span><br><span class="line">    count_bc = <span class="number">0</span></span><br><span class="line">    same_temp = []</span><br><span class="line">    diff_temp = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> IDb:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">for</span> ta <span class="keyword">in</span> titlea:</span><br><span class="line">                <span class="keyword">if</span> type(file1[ta][count_ac]) != str <span class="keyword">and</span> np.isnan(float(file1[ta][count_ac])):</span><br><span class="line">                    same_temp.append(<span class="string">'none'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    same_temp.append(str(file1[ta][count_ac]))</span><br><span class="line">            bc = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> titleb:</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> type(file2[tb][count_bc]) != str <span class="keyword">and</span> np.isnan(float(file2[tb][count_bc])):</span><br><span class="line">                    same_temp.append(<span class="string">'none'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    same_temp.append(str(file2[tb][count_bc]))</span><br><span class="line">                bc += <span class="number">1</span></span><br><span class="line">            same.append(same_temp)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> a!= b <span class="keyword">and</span> count_bc+<span class="number">1</span> == l_b:</span><br><span class="line">            <span class="keyword">for</span> ta <span class="keyword">in</span> titlea:</span><br><span class="line">                diff_temp.append(str(file1[ta][count_ac]))</span><br><span class="line">            diffa.append(diff_temp)</span><br><span class="line">        count_bc += <span class="number">1</span></span><br><span class="line">    count_ac += <span class="number">1</span></span><br><span class="line">count_bc = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> IDb:</span><br><span class="line">    count_ac = <span class="number">0</span></span><br><span class="line">    same_temp = []</span><br><span class="line">    diff_temp = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> IDa:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> a!= b <span class="keyword">and</span> count_ac+<span class="number">1</span> == l_a:</span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> result_titleb:</span><br><span class="line">                diff_temp.append(str(file2[tb][count_bc]))</span><br><span class="line">            diffb.append(diff_temp)</span><br><span class="line">        count_ac += <span class="number">1</span></span><br><span class="line">    count_bc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ab檔案皆存在者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    filewriter = csv.writer(file)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> same:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'僅存在a檔案者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file2:</span><br><span class="line">    filewriter = csv.writer(file2)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> diffa:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'僅存在b檔案者.csv'</span>,<span class="string">'w'</span>,newline = <span class="string">''</span>,encoding =<span class="string">'utf8'</span>) <span class="keyword">as</span> file3:</span><br><span class="line">    filewriter = csv.writer(file3)</span><br><span class="line">    <span class="comment">#filewriter.writerow(write_title(filename))</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> diffb:</span><br><span class="line">        filewriter.writerow(row)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'感謝seafood 讚嘆seafood'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="可能遇到的問題"><a href="#可能遇到的問題" class="headerlink" title="可能遇到的問題"></a>可能遇到的問題</h2><p>將excel轉成csv的格式可能會遇到編碼問題</p><p>解決方法:<br>1.excel檔案另存新檔為類型csv<br>2.再用Notepad++編輯csv<br>3.上方選項&gt;&gt;編碼&gt;&gt;轉換至UTF-8碼格式(檔首無BOM)<br>4.存檔<br>5.執行程式<br>6.Notepad++編輯csv<br>7.上方選項&gt;&gt;編碼&gt;&gt;轉換至ANSI碼格式<br>8.存檔</p><p>因為要處理中文字時需轉為UTF-8格式，處理完後因為csv的顯示需要用ANSI所以回覆他為ANSI編碼</p><h2 id="笑話一則"><a href="#笑話一則" class="headerlink" title="笑話一則"></a>笑話一則</h2><p>哪個藝人很會阻擋人?</p><p>周杰倫<br>因為周董(台語:阻擋)</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://teddybearfp.github.io/2019/03/20/Python-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/">Python 資料視覺化(Data Visualization)</a><br><a href="https://teddybearfp.github.io/2019/01/31/Python-%E7%88%AC%E5%8F%96%E5%AD%B8%E8%A1%93%E7%B6%B2%E9%A0%81PDF/">Python 爬取Google學術網頁PDF</a><br><a href="https://teddybearfp.github.io/2018/11/16/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81%E7%88%AC%E5%8F%96/">Python 爬蟲幫你掌握氣象!(動態網頁爬取)</a><br><a href="https://teddybearfp.github.io/2018/11/07/Ptt%E7%88%AC%E8%9F%B2/">Python 爬蟲幫你精選PTT文章!(靜態頁面爬取)</a><br><a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">Python 如何打造專屬的LineBot呢</a><br><a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/">Python解析ts檔(XML)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;假如我們有兩個大型Excel(各四萬筆)要比對，要做三種資料(A∩B)、(A-A∩B)、(B-A∩B)那麼如果用excel篩選後複製貼上反覆
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="資料比對" scheme="https://teddybearfp.github.io/tags/%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D/"/>
    
      <category term="csv" scheme="https://teddybearfp.github.io/tags/csv/"/>
    
  </entry>
  
</feed>
