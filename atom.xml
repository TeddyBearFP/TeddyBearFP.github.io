<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泰迪熊的程式足跡</title>
  
  <subtitle>遊走程式森林的泰迪熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teddybearfp.github.io/"/>
  <updated>2020-02-18T13:54:08.762Z</updated>
  <id>https://teddybearfp.github.io/</id>
  
  <author>
    <name>G.C.L.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt Linguist 語言家(多國語言)</title>
    <link href="https://teddybearfp.github.io/2020/02/18/Qt-Linguist-%E8%AA%9E%E8%A8%80%E5%AE%B6-%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80/"/>
    <id>https://teddybearfp.github.io/2020/02/18/Qt-Linguist-語言家-多國語言/</id>
    <published>2020-02-18T07:05:16.000Z</published>
    <updated>2020-02-18T13:54:08.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-Linguist-語言家-多國語言"><a href="#Qt-Linguist-語言家-多國語言" class="headerlink" title="Qt Linguist 語言家 多國語言"></a>Qt Linguist 語言家 多國語言</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以國際化來說我們開發的軟體必須要加上多國語言才夠 International，那在 Qt 軟體完成後我們可以用 Qt 本身提供的 Linguist 達到多國語言的介面</p><h2 id="多國語言工具"><a href="#多國語言工具" class="headerlink" title="多國語言工具"></a>多國語言工具</h2><p>在進行多國語言翻譯時會有三種工具<br>這三種通常會在你安裝的 Qt 資料夾內<br>例如: C:\Qt\Qt5.10.1\5.10.1\msvc2015\bin</p><h3 id="lupdate-exe"><a href="#lupdate-exe" class="headerlink" title="lupdate.exe"></a>lupdate.exe</h3><p>用於生成或更新翻譯源文件（.ts）文件的命令行工具。<br>用法：透過 cmd 切換到專案層接著輸入 </p><pre><code>lupdate 專案名稱.pro</code></pre><h3 id="linguist"><a href="#linguist" class="headerlink" title="linguist"></a>linguist</h3><p>用於執行翻譯工作的 GUI 工具</p><h3 id="lrelease-exe"><a href="#lrelease-exe" class="headerlink" title="lrelease.exe"></a>lrelease.exe</h3><p>用於從.ts 文件中生成.qm 文件的命令行工具。<br>用法：透過 cmd 切換到專案層接著輸入</p><pre><code>lrelease 專案名稱.pro</code></pre><h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>以上直接呼叫 lupdate 與 lrelease 是因為把這三種工具的檔案位置</p><pre><code>C:\Qt\Qt5.10.1\5.10.1\msvc2015\bin\</code></pre><p>加入到環境變數所以才可以直接這樣在 cmd 當中呼叫使用</p><h2 id="qsTr"><a href="#qsTr" class="headerlink" title="qsTr()"></a>qsTr()</h2><p>若字串要轉換成多國語言那麼當我們在先寫軟體時需要在該字串前加上 qsTr<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.9</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.2</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.2</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    id: root</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">640</span></span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">    title: qsTr(<span class="string">"TB MultiLanguage"</span>)</span><br><span class="line">    property <span class="keyword">bool</span> translated: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    Column &#123;</span><br><span class="line">        anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        anchors.verticalCenter: parent.verticalCenter</span><br><span class="line">        spacing: <span class="number">20</span></span><br><span class="line">        Repeater &#123;</span><br><span class="line">            model: [qsTr(<span class="string">"Monday"</span>), qsTr(<span class="string">"Tuesday"</span>), qsTr(<span class="string">"Wednesday"</span>), qsTr(<span class="string">"Thursday"</span>),</span><br><span class="line">                    qsTr(<span class="string">"Friday"</span>), qsTr(<span class="string">"Saturday"</span>), qsTr(<span class="string">"Sunday"</span>)]</span><br><span class="line">            Text &#123;</span><br><span class="line">                text: modelData</span><br><span class="line">                font.pixelSize: <span class="number">28</span></span><br><span class="line">                color: <span class="string">"#31AA4E"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Button &#123;</span><br><span class="line">        width: <span class="number">200</span></span><br><span class="line">        height: <span class="number">100</span></span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        anchors.rightMargin: <span class="number">20</span></span><br><span class="line">        anchors.bottom: parent.bottom</span><br><span class="line">        anchors.bottomMargin: <span class="number">20</span></span><br><span class="line">        text: <span class="string">"TeddyBearFP\nSwitch language"</span></span><br><span class="line">        font.pixelSize: <span class="number">20</span></span><br><span class="line">        background: Rectangle &#123;</span><br><span class="line">            color: <span class="string">"chartreuse"</span></span><br><span class="line">            border.width: <span class="number">1</span></span><br><span class="line">            border.color: <span class="string">"blue"</span></span><br><span class="line">            radius: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            <span class="keyword">if</span>(translated)</span><br><span class="line">                multiLanguage.updateLanguage(<span class="string">"CHT"</span>)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                multiLanguage.updateLanguage(<span class="string">"ENG"</span>)</span><br><span class="line">            translated = !translated</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>英文版完成圖</p><p><img src="https://i.imgur.com/G9nhUeQ.png" alt></p><h3 id="Step-2-Create-Translation-Source-files-創建-ts-檔"><a href="#Step-2-Create-Translation-Source-files-創建-ts-檔" class="headerlink" title="Step 2 Create Translation Source files 創建 ts 檔"></a>Step 2 Create Translation Source files 創建 ts 檔</h3><h4 id="pro-新增-TRANSLATIONS-指令"><a href="#pro-新增-TRANSLATIONS-指令" class="headerlink" title="pro 新增 TRANSLATIONS 指令"></a>pro 新增 TRANSLATIONS 指令</h4><p>在專案 pro 檔中加入以下指令:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TRANSLATIONS = translator/MultiLanguage_ENG.ts\</span><br><span class="line">               translator/MultiLanguage_CHT.ts</span><br></pre></td></tr></table></figure><h4 id="系統管理員權限-cmd-更新-ts-檔"><a href="#系統管理員權限-cmd-更新-ts-檔" class="headerlink" title="系統管理員權限 cmd 更新 ts 檔"></a>系統管理員權限 cmd 更新 ts 檔</h4><p>先在 pro 檔案旁創建剛剛輸入的資料夾名稱 ( “translator/MultiLanguage_ENG.ts” ) 的資料夾，以我的例子來說要創建個叫做 “translator” 的資料夾在 pro 檔旁<br>以系統管理員權限開啟 cmd 切換到專案層( “D:\MultiLanguage” ) 並用 lupdate.exe 更新 ts 檔</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">開啟 cmd</span><br><span class="line">d:</span><br><span class="line">cd MultiLanguage 到達( <span class="string">"D:\MultiLanguage"</span> )該層後</span><br><span class="line">輸入</span><br><span class="line">lupdate.exe MultiLanguage.pro</span><br></pre></td></tr></table></figure><p>指令成功圖</p><p><img src="https://i.imgur.com/u3Wcyft.png" alt></p><p>成功產出 ts 檔</p><p><img src="https://i.imgur.com/eGqYnfk.png" alt></p><h3 id="Step-3-執行-Linguist-翻譯"><a href="#Step-3-執行-Linguist-翻譯" class="headerlink" title="Step 3 執行 Linguist 翻譯"></a>Step 3 執行 Linguist 翻譯</h3><h4 id="填寫-ts-檔"><a href="#填寫-ts-檔" class="headerlink" title="填寫 ts 檔"></a>填寫 ts 檔</h4><p>完成步驟二後我們會得到 ts 檔<br>未完成翻譯的 ts 檔內容會如下圖:</p><p><img src="https://i.imgur.com/ukgzb5N.png" alt></p><p>如果翻譯檔非常大型我們可以先從 excel 翻完後執行腳本讓它自行幫我們填寫<br>可以參考我的另一篇文章 <a href="https://teddybearfp.github.io/2019/01/11/Python%E8%A7%A3%E6%9E%90ts%E6%AA%94-XML/"> Python 解析 ts 檔 (XML) </a> ，這樣可以看你要從 ts 轉 excel 或是 excel 填寫 ts 內容皆快速很多</p><p>翻譯完成圖:</p><p><img src="https://i.imgur.com/MyNc1hL.png" alt></p><h4 id="Linguist-語言家翻譯並存檔"><a href="#Linguist-語言家翻譯並存檔" class="headerlink" title="Linguist 語言家翻譯並存檔"></a>Linguist 語言家翻譯並存檔</h4><p>完成上一步的填寫 ts 檔後，我們開啟 Linguist</p><p>開啟 Linguist 我們有兩種方式</p><p>第一種: 若已經把一開始三個工具的路徑加入環境變數那麼只要在 cmd 輸入</p><pre><code>linguist</code></pre><p>第二種: 我們可以在 QtCreator 新增路徑，設定好後點擊 tool 便可直接啟動工具</p><p>到 QtCreator Environment 新增</p><p><img src="https://i.imgur.com/kTqbWOG.png" alt></p><p>接著便可在上方的 Tools 使用啟動該工具</p><p><img src="https://i.imgur.com/nsxuvZC.png" alt></p><p>Linguist 開啟 ts files 開啟後選擇從什麼語言翻譯到什麼語言</p><p><img src="https://i.imgur.com/hUfZvy8.png" alt></p><p>Linguist 確認翻譯無異常後存檔</p><p><img src="https://i.imgur.com/CwIRIXa.png" alt></p><h3 id="Step-4-ts-轉成-qm-檔"><a href="#Step-4-ts-轉成-qm-檔" class="headerlink" title="Step 4 ts 轉成 qm 檔"></a>Step 4 ts 轉成 qm 檔</h3><h4 id="產生-qm-檔"><a href="#產生-qm-檔" class="headerlink" title="產生 qm 檔"></a>產生 qm 檔</h4><p>用 cmd 使用 lrelease 將剛剛填寫完畢並且確認翻譯無誤的 ts 檔透過指令產出 qm 檔</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrelease.exe  MultiLanguage.pro</span><br></pre></td></tr></table></figure><p>成功產出 qm 檔</p><p><img src="https://i.imgur.com/CjkuL47.png" alt></p><h4 id="將-translator-qm檔-加至現有專案"><a href="#將-translator-qm檔-加至現有專案" class="headerlink" title="將 translator/ qm檔 加至現有專案"></a>將 translator/ qm檔 加至現有專案</h4><p>回到 QtCreator 將專案的 Resource 新增現有資料夾至專案中<br>Add Exising Directory<br>把 translator 資料夾與剛剛產出的 qm 檔導入</p><p><img src="https://i.imgur.com/yR8iQm1.png" alt></p><h4 id="創建一個-MultiLanguage-class"><a href="#創建一個-MultiLanguage-class" class="headerlink" title="創建一個 MultiLanguage class"></a>創建一個 MultiLanguage class</h4><p>MultiLanguage class 用來判別現在要顯示哪種語言</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MULTILANGUAGE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MULTILANGUAGE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTranslator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//繼承 QQuickItem 讓這個類別可以在 qml 中被呼叫</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiLanguage</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//將 engine 導入，呼叫 retranslate 用來刷新頁面，否則即使 installTranslator 畫面看似也無動作</span></span><br><span class="line">    MultiLanguage( QQmlApplicationEngine *engine ) </span><br><span class="line">    &#123;</span><br><span class="line">        m_engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//qml 呼叫此函式切換語言</span></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">updateLanguage</span><span class="params">( QString lang )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">QFont <span class="title">engFont</span><span class="params">( <span class="string">"Arial"</span> )</span></span>;</span><br><span class="line">        <span class="function">QFont <span class="title">chFont</span><span class="params">( <span class="string">"Microsoft JhengHei"</span> )</span></span>;</span><br><span class="line">        qDebug() &lt;&lt; lang;</span><br><span class="line">        <span class="keyword">if</span> ( lang == <span class="string">"ENG"</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            m_translator.load( <span class="string">"MultiLanguage_ENG"</span>, <span class="string">":/translator"</span> );</span><br><span class="line">            qApp-&gt;installTranslator( &amp;m_translator ); <span class="comment">//這個qApp 等於從 main.cpp 使用的 QGuiApplication app( argc, argv );</span></span><br><span class="line">            qApp-&gt;setFont( engFont );</span><br><span class="line">            m_engine-&gt;retranslate(); <span class="comment">//必須讓 engine 重新翻譯否則無變化</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( lang == <span class="string">"CHT"</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            m_translator.load( <span class="string">"MultiLanguage_CHT"</span>, <span class="string">":/translator"</span> );</span><br><span class="line">            qApp-&gt;installTranslator( &amp;m_translator );</span><br><span class="line">            qApp-&gt;setFont( chFont );</span><br><span class="line">            m_engine-&gt;retranslate(); <span class="comment">//必須讓 engine 重新翻譯否則無變化</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            qApp-&gt;removeTranslator( &amp;m_translator );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QQmlApplicationEngine *m_engine;</span><br><span class="line">    QTranslator m_translator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MULTILANGUAGE_H</span></span></span><br></pre></td></tr></table></figure><ul><li>重點整理:<br>  需將 main.cpp 的 engine 導入，呼叫 retranslate 用來刷新頁面，否則即使 installTranslator 畫面看似也無動作<br>  這個qApp 等於從 main.cpp 使用的 QGuiApplication app( argc, argv );</li></ul><h4 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"multilanguage.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlContext&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主要變更下面三句指令</span></span><br><span class="line">    <span class="comment">// 初始化 multiLanguage 並且把 engine 導入</span></span><br><span class="line">    <span class="function">MultiLanguage <span class="title">multiLanguage</span><span class="params">( &amp;engine )</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用 setContextProperty 方法將類別註冊給 qml 使用</span></span><br><span class="line">    engine.rootContext()-&gt;setContextProperty( <span class="string">"multiLanguage"</span>, &amp;multiLanguage );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 預設程式初始語言為英文</span></span><br><span class="line">    multiLanguage.updateLanguage( <span class="string">"ENG"</span> );</span><br><span class="line"></span><br><span class="line">    engine.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line">    <span class="keyword">if</span> ( engine.rootObjects().isEmpty() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> result = app.exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完成圖"><a href="#完成圖" class="headerlink" title="完成圖"></a>完成圖</h4><p>大功告成啦<br>接下來只要按切換語言按鈕便會在英文與繁體中文間做即時切換</p><p>繁體中文</p><p><img src="https://i.imgur.com/DHe2mv3.png" alt></p><p>英文</p><p><img src="https://i.imgur.com/G9nhUeQ.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-Linguist-語言家-多國語言&quot;&gt;&lt;a href=&quot;#Qt-Linguist-語言家-多國語言&quot; class=&quot;headerlink&quot; title=&quot;Qt Linguist 語言家 多國語言&quot;&gt;&lt;/a&gt;Qt Linguist 語言家 多國語言&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Linguist" scheme="https://teddybearfp.github.io/tags/Linguist/"/>
    
      <category term="多國語言" scheme="https://teddybearfp.github.io/tags/%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Qt 計時器 Timer</title>
    <link href="https://teddybearfp.github.io/2020/02/18/Qt-%E8%A8%88%E6%99%82%E5%99%A8-QTimer-%E8%A8%AD%E5%AE%9A%E5%80%92%E6%95%B8%E8%A8%88%E6%99%82%E5%99%A8/"/>
    <id>https://teddybearfp.github.io/2020/02/18/Qt-計時器-QTimer-設定倒數計時器/</id>
    <published>2020-02-18T04:05:16.000Z</published>
    <updated>2020-02-18T13:54:22.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-計時器-QTimer-設定倒數計時器"><a href="#Qt-計時器-QTimer-設定倒數計時器" class="headerlink" title="Qt 計時器 QTimer 設定倒數計時器"></a>Qt 計時器 QTimer 設定倒數計時器</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們需要寫一些函式持續執行運作個特定幾秒，並且不讓其運作影響整個 UI 被 hang 住，這樣我們除了把函式自己創建另一條執行緒執行之外，也可以透過 Qt 提供的 QTimer 方便且迅速的達到相同效果，這一篇我們記錄 C++ 端的 QTimer 與 QML 端的 Timer 兩種用法</p><h2 id="Qt-QTimer"><a href="#Qt-QTimer" class="headerlink" title="Qt QTimer"></a>Qt QTimer</h2><p>這邊我們舉個例子:<br>當程式運作到某個階段時我們要響起蜂鳴器 3 秒，那麼如果純粹一個 While 迴圈則會讓整個程式卡在該函式的 While 倒數迴圈中，雖然以 Qtconcurrent 解決也很棒，但今天不介紹它，我們使用的是 QTimer</p><h2 id="QTimer-倒數計時器"><a href="#QTimer-倒數計時器" class="headerlink" title="QTimer 倒數計時器"></a>QTimer 倒數計時器</h2><h3 id="標頭檔-h"><a href="#標頭檔-h" class="headerlink" title="標頭檔.h"></a>標頭檔.h</h3><p>首先我們可以在標頭檔 .h 先宣告成員<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtimer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeddybearFP</span>:</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TeddybearFP();</span><br><span class="line">    ~TeddybearFP();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QTimer buzzerTimer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBuzzerTimerTimeOut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="實作檔-cpp"><a href="#實作檔-cpp" class="headerlink" title="實作檔.cpp"></a>實作檔.cpp</h3><p>接著在實作檔 .cpp 中實作<br>在建構子中連結 signal 與 slot<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfp.h"</span></span></span><br><span class="line"></span><br><span class="line">TeddybearFP::TeddybearFP() &#123;</span><br><span class="line">    <span class="comment">// connect 函式中需要傳 buzzerTimer 記憶體起始位置，與 QTimer 本身的擁有的 timeout 信號, 而 SLOT 則是我們編寫的時間到處發的函式</span></span><br><span class="line">    connect( &amp;buzzerTimer, SIGNAL( timeout() ), <span class="keyword">this</span>, SLOT( onBuzzerTimerTimeOut() ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TeddybearFP::~TeddybearFP() &#123;</span><br><span class="line">    <span class="comment">//有 connect 記得一定要在解構 disconnect 阿阿阿阿阿,否則會越綁定越多次</span></span><br><span class="line">    disconnect( &amp;buzzerTimer, SIGNAL( timeout() ), <span class="keyword">this</span>, SLOT( onBuzzerTimerTimeOut() ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddybearFP::doSomething &#123;</span><br><span class="line">    buzzerTimer.start( <span class="number">3000</span> ); <span class="comment">//設定 buzzer 倒數 3 秒,若沒有設定間隔,預設間隔為一秒, 此時這類別的執行緒會空出來,直到3秒倒數完成</span></span><br><span class="line"></span><br><span class="line">    Set蜂鳴器(響)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddybearFP::onBuzzerTimerTimeOut()</span><br><span class="line">&#123;</span><br><span class="line">    Set蜂鳴器(不響)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TeddybearFP::onStopBtnClicked()</span><br><span class="line">&#123;</span><br><span class="line">    buzzerTimer.stop();</span><br><span class="line">    onBuzzerTimerTimeOut();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>透過 QTimer 方式編寫的話，當倒數 3 秒鐘時，畫面就不會被卡住囉，依然可以正常操作，僅在 3 秒鐘一到的那一瞬間會回到主執行緒做 onBuzzerTimerTimeOut() 函式內部的事情，另外我們還編寫了另一個 SLOT  onStopBtnClicked() 當暫停按鍵被點擊，我們直接暫停計時器並且蜂鳴器結束</p><h2 id="QML-Timer用法"><a href="#QML-Timer用法" class="headerlink" title="QML Timer用法"></a>QML Timer用法</h2><p>在 QML 中的 Timer 類似於 C++ 端的 QTimer ，僅需調整些屬性即可使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Properties  屬性</span><br><span class="line">interval :  設定每次重複執行的間隔時間</span><br><span class="line">repeat :    是否重覆執行</span><br><span class="line">running :   是否運行,若為 <span class="literal">true</span> 則一進該頁面會直接執行</span><br><span class="line"></span><br><span class="line">Methods </span><br><span class="line">restart() : 重新執行</span><br><span class="line">start() :   計時器開始</span><br><span class="line">stop() :    計時器暫停</span><br><span class="line"></span><br><span class="line">slot </span><br><span class="line">onTriggered : 每次計時器觸發時要做什麼事情寫在這裡</span><br></pre></td></tr></table></figure></p><p>以下我們來看一下如何把 QML 端的計時器運用在工程模式中</p><h3 id="工程模式"><a href="#工程模式" class="headerlink" title="工程模式"></a>工程模式</h3><p>有時候我們要讓一些資訊僅讓工程師檢視不讓使用者得知<br>那麼我們可以做一個隱藏的 button 並在指定時間內按特定次數才顯示</p><h3 id="工程模式實作"><a href="#工程模式實作" class="headerlink" title="工程模式實作"></a>工程模式實作</h3><p>這邊我們舉個例子:<br>按程式操作介面的右下角的隱藏按鈕5秒內按壓五次則顯示工程師身高<br>在一定時間內按壓頁面右下角隱藏的按鈕超過特定次數，出現隱藏資訊的實作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QML Show_engineer_height.qml</span></span><br><span class="line">Item &#123;</span><br><span class="line">    property <span class="keyword">int</span> timerCounter: <span class="number">0</span></span><br><span class="line">    property <span class="keyword">int</span> clickCounter: <span class="number">0</span></span><br><span class="line">    width: <span class="number">800</span></span><br><span class="line">    height:<span class="number">600</span></span><br><span class="line">    </span><br><span class="line">    Timer &#123;</span><br><span class="line">        id: timer</span><br><span class="line">        repeat: <span class="literal">true</span>   <span class="comment">//當開始後會持續執行,若設定 false 則onTriggerd 內容僅會執行一次</span></span><br><span class="line">        onTriggered: &#123; <span class="comment">//當timer.start()會進入此處, 每次計時器觸發時做的事情放此</span></span><br><span class="line">            timerCounter = timerCounter + <span class="number">1</span></span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">"timerCounter:"</span>,timerCounter)</span><br><span class="line">            <span class="keyword">if</span>( timerCounter === <span class="number">5</span>) <span class="comment">//倒數五秒若點擊次數不到五次則全部歸零</span></span><br><span class="line">            &#123;</span><br><span class="line">                timerCounter = <span class="number">0</span></span><br><span class="line">                clickCounter = <span class="number">0</span></span><br><span class="line">                stop()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Button &#123;</span><br><span class="line">        <span class="comment">//放在右下角</span></span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        anchors.bottom: parent.bottom</span><br><span class="line">        width: <span class="number">200</span></span><br><span class="line">        height: <span class="number">200</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            <span class="keyword">if</span>( !timer.running ) timer.start() <span class="comment">//若計時器尚未運行則啟動計時器</span></span><br><span class="line">            clickCounter = clickCounter + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>( clickCounter &gt;= <span class="number">5</span> ) timer.stop() <span class="comment">//超過5次則讓計時器停止不繼續倒數</span></span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">"clickCounter:"</span>,clickCounter)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Text &#123;</span><br><span class="line">        width: <span class="number">100</span></span><br><span class="line">        height: <span class="number">50</span></span><br><span class="line">        anchors.left: parent.left</span><br><span class="line">        anchors.leftMargin: <span class="number">50</span></span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.topMargin: <span class="number">50</span></span><br><span class="line">        font.pixelSize: <span class="number">28</span></span><br><span class="line">        color: <span class="string">"white"</span></span><br><span class="line">        horizontalAlignment: Text.AlignHCenter <span class="comment">//置中</span></span><br><span class="line">        text: <span class="string">"Engineer Height: 176"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-計時器-QTimer-設定倒數計時器&quot;&gt;&lt;a href=&quot;#Qt-計時器-QTimer-設定倒數計時器&quot; class=&quot;headerlink&quot; title=&quot;Qt 計時器 QTimer 設定倒數計時器&quot;&gt;&lt;/a&gt;Qt 計時器 QTimer 設定倒數計時器&lt;/
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="QTimer" scheme="https://teddybearfp.github.io/tags/QTimer/"/>
    
      <category term="Timer" scheme="https://teddybearfp.github.io/tags/Timer/"/>
    
  </entry>
  
  <entry>
    <title>Python generate fake data for testing database syntax efficiency</title>
    <link href="https://teddybearfp.github.io/2020/02/14/Python-generate-fake-data-for-testing-database-syntax-efficiency/"/>
    <id>https://teddybearfp.github.io/2020/02/14/Python-generate-fake-data-for-testing-database-syntax-efficiency/</id>
    <published>2020-02-14T04:05:16.000Z</published>
    <updated>2020-02-14T15:57:16.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-產出假資料來測試資料庫語法的效率"><a href="#Python-產出假資料來測試資料庫語法的效率" class="headerlink" title="Python 產出假資料來測試資料庫語法的效率"></a>Python 產出假資料來測試資料庫語法的效率</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時候我們需要一些測試資料，例如:要測試資料庫語法是否夠快速，那麼我們可以先寫一個 FakeDataGenerator 來產生包含 ( 名字、性別、生日、到訪日、地址、EMail、備註文字 ) 的測試資料</p><h2 id="fake2db"><a href="#fake2db" class="headerlink" title="fake2db"></a>fake2db</h2><p>這邊我們使用的是 Python 有人提供的 fake2db 函式庫可以得到許多隨機特定格式資料。</p><h3 id="安裝-fake2db"><a href="#安裝-fake2db" class="headerlink" title="安裝 fake2db"></a>安裝 fake2db</h3><p>老樣子用 pip 安裝一下 fake2db<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install fake2db</span><br></pre></td></tr></table></figure></p><h3 id="使用-fake2db"><a href="#使用-fake2db" class="headerlink" title="使用 fake2db"></a>使用 fake2db</h3><p>每次取得 faker 的函式回傳值皆會是函式隨機產生後回傳的每次不一樣</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line">fake = Faker()</span><br><span class="line">print(<span class="string">"Name:"</span>, fake.name())</span><br><span class="line">print(<span class="string">"date:"</span>,fake.date())</span><br><span class="line">print(<span class="string">"thisYearDate:"</span>,fake.date_time_this_year())</span><br><span class="line">print(<span class="string">"Comment:"</span>,fake.text())</span><br><span class="line">print(<span class="string">"word:"</span>,fake.word())</span><br><span class="line">print(<span class="string">"Address:"</span>,fake.address())</span><br><span class="line">print(<span class="string">"PhoneNumber:"</span>, fake.phone_number())</span><br><span class="line">print(<span class="string">"EMail:"</span>, fake.email())</span><br><span class="line"></span><br><span class="line"><span class="comment">#輸出結果如下</span></span><br><span class="line">Name: Christine Kelley</span><br><span class="line">date: <span class="number">2006</span><span class="number">-12</span><span class="number">-24</span></span><br><span class="line">thisYearDate: <span class="number">2020</span><span class="number">-02</span><span class="number">-02</span> <span class="number">03</span>:<span class="number">12</span>:<span class="number">26</span></span><br><span class="line">Comment: Illo fugiat non laudantium libero deleniti consequatur facere. Et esse voluptas dicta. Recusandae ducimus quos earum nesciunt. Similique autem inventore quisquam minus excepturi sint.</span><br><span class="line">word: repellendus</span><br><span class="line">Address: <span class="number">61905</span> Linda Lodge</span><br><span class="line">Lake Reginamouth, GA <span class="number">71925</span></span><br><span class="line">PhoneNumber: <span class="number">00118138799</span></span><br><span class="line">EMail: mbaxter@yahoo.com</span><br></pre></td></tr></table></figure><p>利用以上特性讓我們來做測試資料吧</p><h2 id="FakeDataGenerator-實作"><a href="#FakeDataGenerator-實作" class="headerlink" title="FakeDataGenerator 實作"></a>FakeDataGenerator 實作</h2><p>用 faker 函式創建假的會員資料</p><p>fakeDataNumber 填入欲產出的假資料數量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">'member.db'</span>)</span><br><span class="line">cursorObj = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDatabase</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursorObj.execute(<span class="string">'''CREATE TABLE member</span></span><br><span class="line"><span class="string">                         ('SN'         TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Name'        TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Gender'      TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Birthday'    TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Address'     TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'PhoneNumber' TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'EMail'       TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">                         'Comment'     TEXT    NOT NULL);'''</span>)</span><br><span class="line">        print(<span class="string">"member table created!"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"member table already exists."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateFakeData</span><span class="params">( fakeDataNumber )</span>:</span></span><br><span class="line">    fake = Faker()</span><br><span class="line">    data = []</span><br><span class="line">    sn = <span class="number">1</span></span><br><span class="line">    gender = [<span class="string">"M"</span>, <span class="string">"F"</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range( <span class="number">1</span>, fakeDataNumber ) :</span><br><span class="line">        <span class="keyword">if</span>(sn%<span class="number">10000</span> == <span class="number">0</span>):</span><br><span class="line">            print(sn)</span><br><span class="line">        genderSeed = random.randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        data.append([sn,fake.name(),gender[genderSeed],fake.date(),fake.address(),fake.phone_number(),fake.email(),fake.text()])</span><br><span class="line">        sn+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    q = <span class="string">"""INSERT INTO member(SN,Name,Gender,Birthday,Address,PhoneNumber,EMail,Comment) VALUES(?,?,?,?,?,?,?,?)"""</span></span><br><span class="line">    cursorObj.executemany(q,data)</span><br><span class="line">    con.commit()  </span><br><span class="line">    con.close()</span><br><span class="line">    print(<span class="string">"Fake Data generated!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tStart = time.time()</span><br><span class="line">    createDatabase()</span><br><span class="line">    fakeDataNumber = <span class="number">1000</span></span><br><span class="line">    generateFakeData( fakeDataNumber )</span><br><span class="line">    tEnd = time.time()</span><br><span class="line">    print(<span class="string">"It takes "</span>, round (tEnd - tStart, <span class="number">2</span>) , <span class="string">" seconds to generate "</span>, fakeDataNumber, <span class="string">" fake data."</span>)</span><br></pre></td></tr></table></figure></p><p>執行結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">member table already exists.</span><br><span class="line">Fake Data generated!</span><br><span class="line">It takes  4.9  seconds to generate  1000  fake data.</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/kbYTaC6.png" alt></p><h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><ol><li>目前使用上來說 fake.date() 有機會在 faker 函式庫本身內部出錯 ( return 發生錯誤 )導致程式終止 OSError</li><li>fake.text() 因回傳的字串字數多，速度比較慢，會導致在大量產出時速度很慢，若只要一些 Text 的話，可以用 fake.word() 加減用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-產出假資料來測試資料庫語法的效率&quot;&gt;&lt;a href=&quot;#Python-產出假資料來測試資料庫語法的效率&quot; class=&quot;headerlink&quot; title=&quot;Python 產出假資料來測試資料庫語法的效率&quot;&gt;&lt;/a&gt;Python 產出假資料來測試資料
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="fake2db" scheme="https://teddybearfp.github.io/tags/fake2db/"/>
    
  </entry>
  
  <entry>
    <title>Qt access a cpp structure in QML ( Q_GADGET )</title>
    <link href="https://teddybearfp.github.io/2020/02/05/Qt-access-a-cpp-structure-in-QML-Q-GADGET/"/>
    <id>https://teddybearfp.github.io/2020/02/05/Qt-access-a-cpp-structure-in-QML-Q-GADGET/</id>
    <published>2020-02-05T04:05:16.000Z</published>
    <updated>2020-02-05T12:44:08.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-access-a-cpp-structure-in-QML-Q-GADGET"><a href="#Qt-access-a-cpp-structure-in-QML-Q-GADGET" class="headerlink" title="Qt access a cpp structure in QML ( Q_GADGET )"></a>Qt access a cpp structure in QML ( Q_GADGET )</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為 QProperty 不能使用非 QObject 的子類別資料型態，所以不是單純註冊就可以讓 qml 端使用，單純註冊僅能讓註冊的自訂型態被認得，但是其內容依舊是 undefined，那麼我們看看如何透過 Q_GADGET 解決這個問題吧<br>這一篇記錄如何在 qml 端對 C++ 的結構作操作。</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>跟隨以下六步驟達到從 qml 操作 c++ 結構</p><h3 id="ModelDataItem-h"><a href="#ModelDataItem-h" class="headerlink" title="ModelDataItem.h"></a>ModelDataItem.h</h3><p>例如: 有個類別叫做 modelDataItem 負責各類數據讓 qml 端顯示與存取，其中某一筆 QProperty 的資料型態需用自定義的結構 struct Figure 紀錄身高與體重</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MODELDATAITEM_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODELDATAITEM_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Step1: 創建自定義結構</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Figure</span> //紀錄身材的結構</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Q_GADGET <span class="comment">// 輕量型 QObject</span></span><br><span class="line">    <span class="keyword">int</span> m_height;</span><br><span class="line">    <span class="keyword">int</span> m_weight;</span><br><span class="line">    Q_PROPERTY( <span class="keyword">int</span> height MEMBER m_height )</span><br><span class="line">    Q_PROPERTY( <span class="keyword">int</span> weight MEMBER m_weight )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelDataItem</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step2: 以自定義結構為型態類別創建 QProperty 並實作它</span></span><br><span class="line">    Q_PROPERTY( Figure figure READ figure WRITE setFigure NOTIFY figureChanged )</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ModelDataItem</span><span class="params">( QObject *parent = <span class="literal">nullptr</span> )</span></span>;</span><br><span class="line">    <span class="function">Figure <span class="title">figure</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Figure m_figure;</span><br><span class="line">    </span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">figureChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step3: 實作完成 QProperty 後，Q_DECLARE_METATYPE 宣告該型態給 qml </span></span><br><span class="line">Q_DECLARE_METATYPE( Figure )</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MODELDATAITEM_H</span></span></span><br></pre></td></tr></table></figure><h3 id="ModelDataItem-cpp"><a href="#ModelDataItem-cpp" class="headerlink" title="ModelDataItem.cpp"></a>ModelDataItem.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"modeldataitem.h"</span></span></span><br><span class="line"></span><br><span class="line">ModelDataItem::ModelDataItem( QObject *parent )</span><br><span class="line">    : QObject( parent )</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Flag ModelDataItem::figure()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_figure;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ModelDataItem::setFigure( Figure figure )</span><br><span class="line">&#123;</span><br><span class="line">    m_figure = figure;</span><br><span class="line">    <span class="function">emit <span class="title">figureChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"modeldataitem.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step4: 註冊自定義類別</span></span><br><span class="line">    qmlRegisterType&lt;ModelDataItem&gt;( <span class="string">"teddybearFp"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"ModelDataItem"</span> );</span><br><span class="line">    <span class="comment">// Step5: 註冊自定義型態</span></span><br><span class="line">    qRegisterMetaType&lt;Figure&gt;( <span class="string">"Figure"</span> ); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( mainWindow.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = app.exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="User-qml"><a href="#User-qml" class="headerlink" title="User.qml"></a>User.qml</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> teddybearFp <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">ModelDataItem &#123;</span><br><span class="line">    id: root</span><br><span class="line">    anchors.fill: parent</span><br><span class="line">    </span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        acceptedButtons: Qt.LeftButton | Qt.RightButton</span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            <span class="comment">//Step6: 直接對結構內的 QProperty 操作 assign value</span></span><br><span class="line">            <span class="comment">//結構內 QProperty 雖然沒寫 WRITE 但是會寫入數值</span></span><br><span class="line">            <span class="comment">//並且在類別內的 Figure 寫入後發送信號 NOTIFY 通知 (figureChanged()觸發)</span></span><br><span class="line">            root.figure.height = <span class="number">180</span></span><br><span class="line">            root.figure.weight = <span class="number">70</span></span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">"height:"</span>, root.figure.height)</span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">"weight:"</span>, root.figure.weight)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>透過 Q_GADGET 方法，即使 QProperty 的資料型態沒有使用類別去繼承 QObject 也能在 Qml 中進行操作喔</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-access-a-cpp-structure-in-QML-Q-GADGET&quot;&gt;&lt;a href=&quot;#Qt-access-a-cpp-structure-in-QML-Q-GADGET&quot; class=&quot;headerlink&quot; title=&quot;Qt access 
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="Q_GADGET" scheme="https://teddybearfp.github.io/tags/Q-GADGET/"/>
    
  </entry>
  
  <entry>
    <title>Qt 顯示軟體版本資訊</title>
    <link href="https://teddybearfp.github.io/2020/01/07/Qt-%E9%A1%AF%E7%A4%BA%E8%BB%9F%E9%AB%94%E7%89%88%E6%9C%AC%E8%B3%87%E8%A8%8A/"/>
    <id>https://teddybearfp.github.io/2020/01/07/Qt-顯示軟體版本資訊/</id>
    <published>2020-01-07T04:05:16.000Z</published>
    <updated>2020-01-07T13:13:06.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-顯示軟體版本資訊"><a href="#Qt-顯示軟體版本資訊" class="headerlink" title="Qt 顯示軟體版本資訊"></a>Qt 顯示軟體版本資訊</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>開發應用軟體，出版的時候最好加上個軟體版本資訊，方便日後的升級與控管，這一篇我們記錄如何顯示軟體版本資訊</p><h2 id="Qt-軟體版本資訊實作"><a href="#Qt-軟體版本資訊實作" class="headerlink" title="Qt 軟體版本資訊實作"></a>Qt 軟體版本資訊實作</h2><h3 id="YourApp-pro"><a href="#YourApp-pro" class="headerlink" title="YourApp.pro"></a>YourApp.pro</h3><p>在 pro 檔案中加入軟體版本資訊</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#軟體版本資訊</span></span><br><span class="line">VERSION = <span class="number">1.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#加入定義讓軟體版本資訊可以在 cpp 中使用</span></span><br><span class="line">DEFINES += APP_VERSION=\\\<span class="string">"$$VERSION\\\"</span></span><br></pre></td></tr></table></figure><h3 id="使用端-cpp"><a href="#使用端-cpp" class="headerlink" title="使用端.cpp"></a>使用端.cpp</h3><p>用 Q_INVOKABLE 函式將軟體版本資訊傳遞到顯示端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="function">Q_INVOKABLE QString <span class="title">getVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line">QString About::getVersion()&#123;</span><br><span class="line">    <span class="keyword">return</span> APP_VERSION;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-顯示軟體版本資訊&quot;&gt;&lt;a href=&quot;#Qt-顯示軟體版本資訊&quot; class=&quot;headerlink&quot; title=&quot;Qt 顯示軟體版本資訊&quot;&gt;&lt;/a&gt;Qt 顯示軟體版本資訊&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="顯示軟體版本資訊" scheme="https://teddybearfp.github.io/tags/%E9%A1%AF%E7%A4%BA%E8%BB%9F%E9%AB%94%E7%89%88%E6%9C%AC%E8%B3%87%E8%A8%8A/"/>
    
  </entry>
  
  <entry>
    <title>Qt BusyIndicator</title>
    <link href="https://teddybearfp.github.io/2019/12/26/Qt-BusyIndicator/"/>
    <id>https://teddybearfp.github.io/2019/12/26/Qt-BusyIndicator/</id>
    <published>2019-12-26T08:05:16.000Z</published>
    <updated>2019-12-26T14:48:54.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-BusyIndicator"><a href="#Qt-BusyIndicator" class="headerlink" title="Qt BusyIndicator"></a>Qt BusyIndicator</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們對圖片進行運算時，如果沒有任何動畫告知會以為整個 UI hang 住了，那麼我們可以透過 BusyIndicator ，當圖片在載入或是運算時，會有 Loading 動畫</p><h2 id="BusyIndicator"><a href="#BusyIndicator" class="headerlink" title="BusyIndicator"></a>BusyIndicator</h2><p>繁忙指示器應用於指示正在加載內容或 UI 阻塞以等待資源可用時的活動</p><h2 id="BusyIndicator-實作"><a href="#BusyIndicator-實作" class="headerlink" title="BusyIndicator 實作"></a>BusyIndicator 實作</h2><p>我們來看看如何將 BusyIndicator 用在圖片載入與計算的時候顯示 Loading 動畫</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Image &#123;</span><br><span class="line">    id: img</span><br><span class="line">    width: parent.width</span><br><span class="line">    height: parent.height</span><br><span class="line">    transformOrigin: Item.TopLeft</span><br><span class="line">    fillMode: Image.PreserveAspectFit</span><br><span class="line">    asynchronous: <span class="literal">true</span> <span class="comment">//注意這邊要設置成非同步載入</span></span><br><span class="line">&#125;</span><br><span class="line">BusyIndicator &#123;</span><br><span class="line">    anchors.centerIn: parent</span><br><span class="line">    width: <span class="number">96</span></span><br><span class="line">    height: <span class="number">96</span></span><br><span class="line">    implicitWidth: <span class="number">96</span></span><br><span class="line">    implicitHeight: <span class="number">96</span></span><br><span class="line">    running: img.status === Image.Loading</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-BusyIndicator&quot;&gt;&lt;a href=&quot;#Qt-BusyIndicator&quot; class=&quot;headerlink&quot; title=&quot;Qt BusyIndicator&quot;&gt;&lt;/a&gt;Qt BusyIndicator&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="BusyIndicator" scheme="https://teddybearfp.github.io/tags/BusyIndicator/"/>
    
  </entry>
  
  <entry>
    <title>Qt QUrlQuery</title>
    <link href="https://teddybearfp.github.io/2019/12/26/Qt-QUrlQuery/"/>
    <id>https://teddybearfp.github.io/2019/12/26/Qt-QUrlQuery/</id>
    <published>2019-12-26T07:05:16.000Z</published>
    <updated>2019-12-26T14:48:39.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-QUrlQuery"><a href="#Qt-QUrlQuery" class="headerlink" title="Qt QUrlQuery"></a>Qt QUrlQuery</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我們使用我前幾篇所編寫的 <a href="https://teddybearfp.github.io/2019/12/12/Qt-QQuickImageProvider-%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9C%96%E7%89%87%E6%8F%90%E4%BE%9B%E8%80%85/#more">Qt QQuickImageProvider 好用的圖片提供者</a>那麼可以搭配這一篇所介紹的 QUrlQuery ，讓我們跟 ImageProvider 要求圖片的語句更簡易的剖析，讓要求圖片的寫法與 HTTP 的 GET 語句一致</p><h2 id="HTTP-GET-語法"><a href="#HTTP-GET-語法" class="headerlink" title="HTTP GET 語法"></a>HTTP GET 語法</h2><p>統一資源定位符（英語： Uniform Resource Locator，縮寫：URL；或稱 統一資源定位器、定位位址、 URL 位址 [1]，俗稱 網頁位址或簡稱網址）是網際網路上標準的資源的位址（ Address ），如同在網路上的門牌。</p><p>GET 模式的表單參數，以「?」字元為起點，每個參數以「&amp;」隔開，再以「=」分開參數名稱與資料，通常以 UTF8 的 URL 編碼，避開字元衝突的問題</p><p>例如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"http://www.example.com/TeddyBearFp?date=20191225&amp;festival=Christmas"</span></span><br></pre></td></tr></table></figure><p>上述網址<br>在問號以前: 為網址路徑<br>問號後方: 為 query 語句,並且在多個參數間以 &amp; 隔開</p><p>如果我們直接以字串方式剖析 query 內容並分類成 key , value 較繁瑣，可以用更方便的函式庫 QUrlQuery 來剖析</p><h2 id="QUrlQuery"><a href="#QUrlQuery" class="headerlink" title="QUrlQuery"></a>QUrlQuery</h2><p>剖析 HTTP GET 語法，將問號以前的路徑與 Query 內容分開</p><h3 id="取得-query-語句"><a href="#取得-query-語句" class="headerlink" title="取得 query 語句"></a>取得 query 語句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//將網址 http://www.example.com/TeddyBearFp?date=20191225&amp;festival=Christmas 剖析出 query 內容</span></span><br><span class="line"><span class="function">QUrl <span class="title">url</span><span class="params">(<span class="string">"http://www.example.com/TeddyBearFp?date=20191225&amp;festival=Christmas"</span>)</span></span>;</span><br><span class="line"><span class="function">QUrlQuery <span class="title">query</span><span class="params">(url.query())</span></span>;</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"query: "</span> &lt;&lt; url.query();</span><br><span class="line"><span class="comment">//印出 "date=20191225&amp;festival=Christmas"</span></span><br></pre></td></tr></table></figure><h3 id="從-query-語句中剖析出-Key-value"><a href="#從-query-語句中剖析出-Key-value" class="headerlink" title="從 query 語句中剖析出 Key, value"></a>從 query 語句中剖析出 Key, value</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//將網址 http://www.example.com/TeddyBearFp?visitDate=20191225&amp;festival=Christmas 剖析出 query 內容</span></span><br><span class="line"><span class="function">QUrl <span class="title">url</span><span class="params">(<span class="string">"http://www.example.com/TeddyBearFp?date=20191225&amp;festival=Christmas"</span>)</span></span>;</span><br><span class="line"><span class="function">QUrlQuery <span class="title">query</span><span class="params">(url.query())</span></span>;</span><br><span class="line">QList&lt;QPair&lt;QString, QString&gt;&gt; <span class="built_in">list</span> = query.queryItems();</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length(); i++ )</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"list["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: ("</span> &lt;&lt; <span class="built_in">list</span>[ i ].first &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="built_in">list</span>[ i ].second &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">    <span class="comment">//印出 list[ 0 ]: ( "date" , "20191225" )</span></span><br><span class="line">    <span class="comment">//印出 list[ 1 ]: ( "festival" , "Christmas" )</span></span><br><span class="line">&#125;</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"date: "</span> &lt;&lt; query.queryItemValue( <span class="string">"date"</span> );</span><br><span class="line"><span class="comment">//印出 date: 20191225</span></span><br><span class="line">qDebug() &lt;&lt; <span class="string">"festival: "</span> &lt;&lt; query.queryItemValue( <span class="string">"festival"</span> );</span><br><span class="line"><span class="comment">//印出 festival: Christmas</span></span><br></pre></td></tr></table></figure><h2 id="QUrlQuery-搭配-ImageProvider-的實作"><a href="#QUrlQuery-搭配-ImageProvider-的實作" class="headerlink" title="QUrlQuery 搭配 ImageProvider 的實作"></a>QUrlQuery 搭配 ImageProvider 的實作</h2><p>如果有點忘記 ImageProvider 是什麼可以回顧一下 <a href="https://teddybearfp.github.io/2019/12/12/Qt-QQuickImageProvider-%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9C%96%E7%89%87%E6%8F%90%E4%BE%9B%E8%80%85/#more">Qt QQuickImageProvider 好用的圖片提供者</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">QImage ImageProvider::requestImage( <span class="keyword">const</span> QString &amp;id, QSize *size, <span class="keyword">const</span> QSize &amp;requestedSize )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">QUrl <span class="title">url</span><span class="params">( id )</span></span>;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"id: "</span> &lt;&lt; id; <span class="comment">//output1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">QUrlQuery <span class="title">query</span><span class="params">( url.query() )</span></span>;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"query: "</span> &lt;&lt; url.query(); <span class="comment">//output2</span></span><br><span class="line">    </span><br><span class="line">    QList&lt;QPair&lt;QString, QString&gt;&gt; <span class="built_in">list</span> = query.queryItems();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length(); i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"list["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: ("</span> &lt;&lt; <span class="built_in">list</span>[ i ].first &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="built_in">list</span>[ i ].second &lt;&lt; <span class="string">")"</span>; <span class="comment">//output3</span></span><br><span class="line">    &#125;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"contrast: "</span> &lt;&lt; query.queryItemValue( <span class="string">"contrast"</span> ).toInt(); <span class="comment">//output4</span></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"brightness: "</span> &lt;&lt; query.queryItemValue( <span class="string">"brightness"</span> ).toInt(); <span class="comment">//output5</span></span><br><span class="line">    </span><br><span class="line">    QString imgPath = id.split( <span class="string">'?'</span> )[ <span class="number">0</span> ];</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"imgPath "</span> &lt;&lt; imgPath; <span class="comment">//output6</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    QImage img = QImage( imgPath ).convertToFormat( QImage::Format_RGB888 );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( query.queryItemValue( <span class="string">"contrast"</span> ) != <span class="string">""</span> )</span><br><span class="line">        contrastLevel = query.queryItemValue( <span class="string">"contrast"</span> ).toInt();</span><br><span class="line">    <span class="keyword">if</span> ( query.queryItemValue( <span class="string">"brightness"</span> ) != <span class="string">""</span> )</span><br><span class="line">        brightnessLevel = query.queryItemValue( <span class="string">"brightness"</span> ).toInt();</span><br><span class="line">        </span><br><span class="line">    Brightness( &amp;img, brightnessLevel );</span><br><span class="line">    Contrast( &amp;img, contrastLevel );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> img;</span><br></pre></td></tr></table></figure><p>輸出檢視</p><pre><code>//output1id:  &quot;d:/TeddyBearFp/20191025170005.jpg?contrast=0&amp;brightness=2&quot;//output2query:  &quot;contrast=0&amp;brightness=0&quot;//output3list[ 0 ]: ( &quot;contrast&quot; , &quot;0&quot; )list[ 1 ]: ( &quot;brightness&quot; , &quot;2&quot; )//output4contrast:  0//output5brightness:  2//output6imgPath  &quot;d:/TeddyBearFp/20191025170005.jpg&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-QUrlQuery&quot;&gt;&lt;a href=&quot;#Qt-QUrlQuery&quot; class=&quot;headerlink&quot; title=&quot;Qt QUrlQuery&quot;&gt;&lt;/a&gt;Qt QUrlQuery&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QUrlQuery" scheme="https://teddybearfp.github.io/tags/QUrlQuery/"/>
    
  </entry>
  
  <entry>
    <title>Qt QSqlQuery</title>
    <link href="https://teddybearfp.github.io/2019/12/25/Qt-QSqlQuery/"/>
    <id>https://teddybearfp.github.io/2019/12/25/Qt-QSqlQuery/</id>
    <published>2019-12-25T07:05:16.000Z</published>
    <updated>2019-12-25T10:41:34.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-QSqlQuery"><a href="#Qt-QSqlQuery" class="headerlink" title="Qt QSqlQuery"></a>Qt QSqlQuery</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇記錄一些 Qt 使用 QSqlQuery 對 Sql 操作的語法</p><h2 id="創建-db"><a href="#創建-db" class="headerlink" title="創建 db"></a>創建 db</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QSqlDatabase db;</span><br><span class="line">db = <span class="attribute">QSqlDatabase</span>::addDatabase( <span class="string">"QSQLITE"</span> );</span><br><span class="line">db.setDatabaseName( dbPath );</span><br><span class="line">db.setUserName(<span class="string">"admin"</span>);</span><br><span class="line">db.setPassword(<span class="string">"1234"</span>);</span><br></pre></td></tr></table></figure><h2 id="QSqlQuery"><a href="#QSqlQuery" class="headerlink" title="QSqlQuery"></a>QSqlQuery</h2><h3 id="QSqlQuery-1"><a href="#QSqlQuery-1" class="headerlink" title="QSqlQuery"></a>QSqlQuery</h3><p>QSqlQuery 可以執行任何的 SQL 語句</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QSqlQuery query(db);</span><br><span class="line">query.exec(<span class="string">"INSERT INTO employee (id, name, salary) "</span></span><br><span class="line">           <span class="string">"VALUES (1001, 'Thad Beaumont', 65000)"</span>);</span><br></pre></td></tr></table></figure><h3 id="操作多項紀錄-named-binding"><a href="#操作多項紀錄-named-binding" class="headerlink" title="操作多項紀錄( named binding )"></a>操作多項紀錄( named binding )</h3><p>bindValue<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//創建 QSqlQuery</span></span><br><span class="line"><span class="function">QSqlQuery <span class="title">query</span><span class="params">( db )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//named binding 綁定多個欄位</span></span><br><span class="line">query.prepare(<span class="string">"INSERT INTO employee (id, name, salary) "</span></span><br><span class="line">              <span class="string">"VALUES (:id, :name, :salary)"</span>);</span><br><span class="line">query.bindValue(<span class="string">":id"</span>, <span class="number">1001</span>);</span><br><span class="line">query.bindValue(<span class="string">":name"</span>, <span class="string">"Thad Beaumont"</span>);</span><br><span class="line">query.bindValue(<span class="string">":salary"</span>, <span class="number">65000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//執行 sql 語句成功與否</span></span><br><span class="line"><span class="keyword">if</span> ( !query.exec() )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//印出錯誤訊息</span></span><br><span class="line">    qDebug( <span class="string">"Database::SetToStation Cannot set station because %s"</span>, qPrintable( query.lastError().text() ) );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><h3 id="操作多項紀錄-positional-binding"><a href="#操作多項紀錄-positional-binding" class="headerlink" title="操作多項紀錄( positional binding )"></a>操作多項紀錄( positional binding )</h3><p>addBindValue<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//創建 QSqlQuery</span></span><br><span class="line"><span class="function">QSqlQuery <span class="title">query</span><span class="params">(db)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//positional binding 綁定多個欄位</span></span><br><span class="line">query.prepare(<span class="string">"INSERT INTO employee (id, name, salary) "</span></span><br><span class="line">              <span class="string">"VALUES (?, ?, ?)"</span>);</span><br><span class="line">query.addBindValue(<span class="number">1001</span>);</span><br><span class="line">query.addBindValue(<span class="string">"Thad Beaumont"</span>);</span><br><span class="line">query.addBindValue(<span class="number">65000</span>);</span><br><span class="line"><span class="comment">//執行 sql 語句成功與否</span></span><br><span class="line"><span class="keyword">if</span> ( !query.exec() )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//印出錯誤訊息</span></span><br><span class="line">    qDebug( <span class="string">"Database::SetToStation Cannot set station because %s"</span>, qPrintable( query.lastError().text() ) );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><h3 id="搜尋遍歷"><a href="#搜尋遍歷" class="headerlink" title="搜尋遍歷"></a>搜尋遍歷</h3><p>query.next()<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QSqlQuery <span class="title">query</span><span class="params">(db)</span></span>;</span><br><span class="line">query.exec(<span class="string">"SELECT * FROM Measurements"</span>);</span><br><span class="line"><span class="comment">//next () 方法移至所查得的下一筆資料，如果可以找到下一筆資料則傳回 true，否則傳回 false (搜尋遍歷)</span></span><br><span class="line"><span class="keyword">while</span> (query.next()) &#123;</span><br><span class="line">    <span class="keyword">int</span> id = query.value(<span class="number">0</span>).toInt();</span><br><span class="line">    QString name = query.value(<span class="number">1</span>).toString();</span><br><span class="line">    <span class="keyword">int</span> age = query.value(<span class="number">2</span>).toInt();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">" "</span> &lt;&lt; qPrintable(name) &lt;&lt; <span class="string">" "</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://doc.qt.io/qt-5/sql-sqlstatements.html" target="_blank" rel="noopener">Executing SQL Statements</a></p><p><a href="https://openhome.cc/Gossip/Qt4Gossip/QSqlQuery.html" target="_blank" rel="noopener">QSqlQuery - OpenHome.cc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-QSqlQuery&quot;&gt;&lt;a href=&quot;#Qt-QSqlQuery&quot; class=&quot;headerlink&quot; title=&quot;Qt QSqlQuery&quot;&gt;&lt;/a&gt;Qt QSqlQuery&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QSql" scheme="https://teddybearfp.github.io/tags/QSql/"/>
    
      <category term="QSqlQuery" scheme="https://teddybearfp.github.io/tags/QSqlQuery/"/>
    
  </entry>
  
  <entry>
    <title>Qt QSql Transactions</title>
    <link href="https://teddybearfp.github.io/2019/12/25/Qt-QSql-Transactions/"/>
    <id>https://teddybearfp.github.io/2019/12/25/Qt-QSql-Transactions/</id>
    <published>2019-12-25T03:05:16.000Z</published>
    <updated>2019-12-25T10:41:09.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-QSql-Transactions"><a href="#Qt-QSql-Transactions" class="headerlink" title="Qt QSql Transactions"></a>Qt QSql Transactions</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假如我們要將兩個有關聯的 A Table 與 B Table 資料進行操作，如果針對各別單獨操作，可能 A 表格刪除成功， B 表格內的資料卻刪除失敗的時候，那麼這兩個表格中的資料就會出現問題，這時候我們就要透過 Transactions 的方式避免表格資料不同步的問題發生</p><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p>交易功能 Transactions<br>首先喊出 Transactions 像是買賣雙方說要來交易<br>接著如果買賣雙方發現有異狀則喊 rollback 回復交易並且結束交易<br>若是雙方驗證後都正確皆大歡喜則 commit 確認交易提交並且結束交易</p><p>所以運作模式如下<br>先檢查有沒有支援 transaction 有的話建立 transactions ，並對資料庫多項操作</p><p>如果資料內容操作皆如預期，那麼可以透過 commit 方式提交結果，結束 transactions<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">QSqlDatabase</span>::database().commit();</span><br></pre></td></tr></table></figure></p><p>如果資料內容操作不如預期，那麼可以透過 rollback 方式退到操作 transactions 之前的資料庫資料，結束 transactions</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">QSqlDatabase</span>::database().rollback();</span><br></pre></td></tr></table></figure><p>整體流程:<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得目前資料庫連結的 QSqlDatabase 實例</span></span><br><span class="line">QSqlDriver *driver = <span class="attribute">QSqlDatabase</span>::database().driver();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 hasFeature () 測試是否支援交易，如果支援交易，則使用 transaction () 開啟交易</span></span><br><span class="line"><span class="keyword">if</span> (driver-&gt;hasFeature(<span class="attribute">QSqlDriver</span>::Transactions)) &#123;</span><br><span class="line">    <span class="comment">//在創建 query 之前，先建立 transactions </span></span><br><span class="line">    <span class="attribute">QSqlDatabase</span>::database().transaction();</span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//執行多個 Sql 語法</span></span><br><span class="line">    query.exec(<span class="string">"UPDATE ....."</span>);</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( query.exec() ) <span class="comment">//使用 commit () 提交執行</span></span><br><span class="line">        <span class="attribute">QSqlDatabase</span>::database().commit();</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//使用 rollback () 方法撤消</span></span><br><span class="line">        <span class="attribute">QSqlDatabase</span>::database().rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>注意: 必須在創建 query 之前，先建立 transactions </li></ul><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">QSqlDatabase</span>::database().transaction();</span><br><span class="line">QSqlQuery query( db );</span><br></pre></td></tr></table></figure><h2 id="Transactions-實作"><a href="#Transactions-實作" class="headerlink" title="Transactions 實作"></a>Transactions 實作</h2><p>A 表格的memberSN碼 為外鍵連結 B表格的SN碼</p><p>假設今天資料需求是當 B表格某筆資料被刪除時那麼關聯到的 A表格內容也要刪除掉，下列記錄為如何確保資料在兩個表格皆正確刪除</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立 transaction ( 必須在創建 query 之前，先建立 transactions )</span></span><br><span class="line"><span class="attribute">QSqlDatabase</span>::database().transaction(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//建立 query</span></span><br><span class="line">QSqlQuery query( db );</span><br><span class="line"></span><br><span class="line"><span class="comment">//QSqlQuery 執行 SQL statements</span></span><br><span class="line"><span class="comment">//透過 named binding 對 A Table 資料庫操作</span></span><br><span class="line">query.prepare( <span class="string">"Delete from A WHERE MemberSN = :SN"</span> );</span><br><span class="line">query.bindValue( <span class="string">":SN"</span>, memberItem-&gt;sn() );</span><br><span class="line"></span><br><span class="line"><span class="comment">//檢測 sql 操作是否執行成功</span></span><br><span class="line"><span class="keyword">if</span> ( !query.exec() )</span><br><span class="line">&#123;</span><br><span class="line">    qDebug( <span class="string">"DeleteA() Cannot get member"</span> );</span><br><span class="line">    <span class="comment">//失敗回退到 transaction 先前狀態，並結束 transaction</span></span><br><span class="line">    <span class="attribute">QSqlDatabase</span>::database().rollback();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//QSqlQuery 執行 SQL statements</span></span><br><span class="line">    <span class="comment">//透過 named binding 對 B Table 資料庫操作</span></span><br><span class="line">    query.prepare( <span class="string">"Delete from B where SN=:SN"</span> );</span><br><span class="line">    query.bindValue( <span class="number">0</span>, memberItem-&gt;sn() );</span><br><span class="line">    <span class="keyword">if</span> ( !query.exec() )</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug( <span class="string">"DeleteB() Cannot get Member"</span> );</span><br><span class="line">        <span class="attribute">QSqlDatabase</span>::database().rollback();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">QSqlDatabase</span>::database().commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-QSql-Transactions&quot;&gt;&lt;a href=&quot;#Qt-QSql-Transactions&quot; class=&quot;headerlink&quot; title=&quot;Qt QSql Transactions&quot;&gt;&lt;/a&gt;Qt QSql Transactions&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QSql" scheme="https://teddybearfp.github.io/tags/QSql/"/>
    
      <category term="Transactions" scheme="https://teddybearfp.github.io/tags/Transactions/"/>
    
  </entry>
  
  <entry>
    <title>Qt Context Menu 動態菜單</title>
    <link href="https://teddybearfp.github.io/2019/12/20/Qt-Context-Menu-%E5%8B%95%E6%85%8B%E8%8F%9C%E5%96%AE/"/>
    <id>https://teddybearfp.github.io/2019/12/20/Qt-Context-Menu-動態菜單/</id>
    <published>2019-12-20T05:05:16.000Z</published>
    <updated>2019-12-24T15:30:38.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-Context-Menu-動態菜單"><a href="#Qt-Context-Menu-動態菜單" class="headerlink" title="Qt Context Menu 動態菜單"></a>Qt Context Menu 動態菜單</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這一篇將記錄如何製作一個 Dynamic 的右鍵菜單，在不同頁面中，依照不同需求右鍵菜單的內容有所變化</p><h2 id="Context-Menu-作法"><a href="#Context-Menu-作法" class="headerlink" title="Context Menu 作法"></a>Context Menu 作法</h2><p>菜單主要會分三個部分</p><ul><li>文字顯示</li><li>圖示顯示</li><li>觸發事件</li></ul><p>我們主要可以透過 Instantiator 動態產生 model 中的內容，另外為了實作 Dynamic 所以 model 要開放給使用層填寫，在這邊是以 menuDetails 作記錄，使用層傳入 JSON 格式的 model 內容，ContextMenu 以 modelData 操作其內容，</p><h3 id="文字顯示"><a href="#文字顯示" class="headerlink" title="文字顯示"></a>文字顯示</h3><p>文字顯示將傳入的 JSON text 解析出來<br>modelData.text</p><h3 id="圖示顯示"><a href="#圖示顯示" class="headerlink" title="圖示顯示"></a>圖示顯示</h3><p>這跟文字的提取類似<br>modelData.icon</p><h3 id="觸發事件"><a href="#觸發事件" class="headerlink" title="觸發事件"></a>觸發事件</h3><p>原本我是將 function 同樣以 JSON 方式傳入但好像哪裡出了問題，所以改以信號方式解決<br>我們可以透過傳遞信號的方式將被選擇到的項目名稱傳出，依項目做指定的動作</p><p>signal menuItemSelected(var item)<br>onTriggered: menuItemSelected(modelData.text)</p><h2 id="Context-Menu-實作"><a href="#Context-Menu-實作" class="headerlink" title="Context Menu 實作"></a>Context Menu 實作</h2><h3 id="ContextMenu-qml"><a href="#ContextMenu-qml" class="headerlink" title="ContextMenu.qml"></a>ContextMenu.qml</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.12</span></span><br><span class="line"></span><br><span class="line">Menu &#123;</span><br><span class="line">    id: contextMenu</span><br><span class="line">    property <span class="keyword">var</span> menuDetails <span class="comment">// need to contain &#123; "text":"text", "icon":"../image/icon/..", fn:function() &#123; dosomething &#125; &#125;</span></span><br><span class="line">    signal menuItemSelected(<span class="keyword">var</span> item)</span><br><span class="line"></span><br><span class="line">    Instantiator &#123;</span><br><span class="line">        id: inst</span><br><span class="line">        model: menuDetails</span><br><span class="line">        MenuItem &#123;</span><br><span class="line">            text: modelData.text</span><br><span class="line">            <span class="comment">//icon: modelData.icon</span></span><br><span class="line">            onTriggered: menuItemSelected(modelData.text)</span><br><span class="line">        &#125;</span><br><span class="line">        onObjectAdded: contextMenu.insertItem(index, object)</span><br><span class="line">        onObjectRemoved: contextMenu.removeItem(object)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MenuSeparator &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">    MenuItem &#123;</span><br><span class="line">        text: <span class="string">"About"</span></span><br><span class="line">        icon.source: <span class="string">"qrc:/images/maximized.svg"</span></span><br><span class="line">        onTriggered: <span class="built_in">console</span>.log(<span class="string">"About Clicked"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用端"><a href="#使用端" class="headerlink" title="使用端"></a>使用端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ContextMenu &#123;</span><br><span class="line">    id: contextMenu</span><br><span class="line">    menuDetails: [</span><br><span class="line">        &#123;<span class="string">"text"</span>:<span class="string">"Select"</span>,<span class="string">"icon"</span>:<span class="string">"qrc:/images/a.jpg"</span>,<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"Select is clicked"</span>)&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"text"</span>:<span class="string">"Copy"</span>  ,<span class="string">"icon"</span>:<span class="string">"qrc:/images/b.jpg"</span>,<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"Copy is clicked"</span>)&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"text"</span>:<span class="string">"Paste"</span> ,<span class="string">"icon"</span>:<span class="string">"qrc:/images/c.jpg"</span>,<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">"Paste is clicked"</span>)&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">    onMenuItemSelected: &#123;</span><br><span class="line">        <span class="keyword">if</span>(item === <span class="string">"Select"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Select is clicked"</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item === <span class="string">"Copy"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Copy is clicked"</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(item === <span class="string">"Paste"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Paste is clicked"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-Context-Menu-動態菜單&quot;&gt;&lt;a href=&quot;#Qt-Context-Menu-動態菜單&quot; class=&quot;headerlink&quot; title=&quot;Qt Context Menu 動態菜單&quot;&gt;&lt;/a&gt;Qt Context Menu 動態菜單&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="ContextMenu" scheme="https://teddybearfp.github.io/tags/ContextMenu/"/>
    
  </entry>
  
  <entry>
    <title>Qt QQuickImageProvider 好用的圖片提供者</title>
    <link href="https://teddybearfp.github.io/2019/12/12/Qt-QQuickImageProvider-%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9C%96%E7%89%87%E6%8F%90%E4%BE%9B%E8%80%85/"/>
    <id>https://teddybearfp.github.io/2019/12/12/Qt-QQuickImageProvider-好用的圖片提供者/</id>
    <published>2019-12-12T05:05:16.000Z</published>
    <updated>2019-12-24T15:31:13.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-QQuickImageProvider-好用的圖片提供者"><a href="#Qt-QQuickImageProvider-好用的圖片提供者" class="headerlink" title="Qt QQuickImageProvider 好用的圖片提供者"></a>Qt QQuickImageProvider 好用的圖片提供者</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在編寫介面程式常需要使用到圖片，不管是用來增添質感的還是做影像處理輸出顯示的圖片，Qt 提供了非常好用的 class ，<a href="https://doc.qt.io/qt-5/qquickimageprovider.html" target="_blank" rel="noopener">QQuickImageProvider</a> 今天來記錄一下如何在 qml 中使用 QQuickImageProvider 類別並取得調整完亮度的圖片</p><h2 id="QQuickImageProvider"><a href="#QQuickImageProvider" class="headerlink" title="QQuickImageProvider"></a>QQuickImageProvider</h2><p><a href="https://doc.qt.io/qt-5/qquickimageprovider.html" target="_blank" rel="noopener">QQuickImageProvider</a> 將圖片在 C++ 中處理與操作(調整圖片亮度、對比、紅色抽離…)，完成後回傳圖片提供給 qml 顯示，在 main 註冊後便可以在全專案中使用，不用在需要的地方導入 .h 或是 import 十分方便</p><h2 id="QQuickImageProvider-實作"><a href="#QQuickImageProvider-實作" class="headerlink" title="QQuickImageProvider 實作"></a>QQuickImageProvider 實作</h2><h3 id="ImageProvider-h"><a href="#ImageProvider-h" class="headerlink" title="ImageProvider.h"></a>ImageProvider.h</h3><p>主要做的事情:</p><p>繼承 QQuickImageProvider<br>覆寫 requestImage ( 當 QQuickImageProvider 被呼叫時，會從這個函式進入 )<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> IMAGEPROVIDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGEPROVIDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QImage&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickImageProvider&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//This class is responsible for process image and supply who in need</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageProvider</span> :</span> <span class="keyword">public</span> QObject, <span class="keyword">public</span> QQuickImageProvider</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ImageProvider</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//lock requestImage</span></span><br><span class="line">    QMutex mutex;</span><br><span class="line"></span><br><span class="line">    <span class="function">QImage <span class="title">requestImage</span><span class="params">( <span class="keyword">const</span> QString &amp;id, QSize *size, <span class="keyword">const</span> QSize &amp;requestedSize )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Brightness</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Brightness</span><span class="params">( QImage *img, <span class="keyword">int</span> level )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// image parameters</span></span><br><span class="line">    <span class="keyword">int</span> brightnessLevel;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// IMAGEPROVIDER_H</span></span></span><br></pre></td></tr></table></figure></p><h3 id="ImageProvider-cpp"><a href="#ImageProvider-cpp" class="headerlink" title="ImageProvider.cpp"></a>ImageProvider.cpp</h3><p>當 qml 要圖片的時候， 會從 requestImage 函式進入，可以將傳遞的 id 訊息剖析，得知他要一張怎樣的照片，例如:要亮度加兩階的 brightness 圖片回傳</p><p>在 qml 中傳<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.source = <span class="string">"image://TBImageProvider/"</span> + <span class="string">"d:/images/test.jpg?brightness = 2?"</span></span><br></pre></td></tr></table></figure></p><p>從 requestImage 參數內的 id 將會收到下列訊息</p><pre><code>&quot;d:/images/test.jpg?brightness = 2?&quot;</code></pre><p>接著我們可以針對 id 剖析<br>剖析出圖片路徑: “d:/images/test.jpg”<br>與調整的亮度值: 2<br>呼叫函式對圖片操作並回傳圖片</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"imageprovider.h"</span></span></span><br><span class="line"></span><br><span class="line">ImageProvider::ImageProvider()</span><br><span class="line">    : QQuickImageProvider( QQuickImageProvider::Image )</span><br><span class="line">&#123;</span><br><span class="line">    brightnessLevel = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QImage ImageProvider::requestImage( <span class="keyword">const</span> QString &amp;id, QSize *size, <span class="keyword">const</span> QSize &amp;requestedSize )</span><br><span class="line">&#123;</span><br><span class="line">    Q_UNUSED( requestedSize )</span><br><span class="line">    qDebug() &lt;&lt; id;</span><br><span class="line">    mutex.lock();</span><br><span class="line"></span><br><span class="line">    QStringList part = id.split( <span class="string">'?'</span> );</span><br><span class="line">    QString imgPath = id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( part.size() &gt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        imgPath = part[ <span class="number">0</span> ];</span><br><span class="line">        part = part[ <span class="number">1</span> ].split( <span class="string">'&amp;'</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; part.size(); idx++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( part[ idx ].startsWith( <span class="string">"brightness = "</span> ) )</span><br><span class="line">                brightnessLevel = part[ idx ].replace( <span class="string">"brightness = "</span>, <span class="string">""</span> ).toInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面兩句主要是因為從 db load 路徑時可能會產生的字符</span></span><br><span class="line">    imgPath = imgPath.replace( <span class="string">"%5C"</span>, <span class="string">"\\"</span> );</span><br><span class="line">    imgPath = imgPath.replace( <span class="string">"%5c"</span>, <span class="string">"\\"</span> );</span><br><span class="line"></span><br><span class="line">    QImage img = QImage( imgPath ).convertToFormat( QImage::Format_RGB888 );</span><br><span class="line"></span><br><span class="line">    Brightness( &amp;img, brightnessLevel );</span><br><span class="line"></span><br><span class="line">    mutex.unlock();</span><br><span class="line">    <span class="keyword">return</span> img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ImageProvider::Brightness( QImage *img, <span class="keyword">int</span> level )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf = img-&gt;bits();</span><br><span class="line">    <span class="keyword">int</span> byteCount = img-&gt;byteCount();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for <span class="comment">//平行處理加速</span></span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; byteCount; idx++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = buf[ idx ] + level * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v &gt; <span class="number">255</span> )</span><br><span class="line">            buf[ idx ] = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; <span class="number">0</span> )</span><br><span class="line">            buf[ idx ] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            buf[ idx ] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="註冊-QQuickImageProvider"><a href="#註冊-QQuickImageProvider" class="headerlink" title="註冊 QQuickImageProvider"></a>註冊 QQuickImageProvider</h3><p>主要只有 addImageProvider 這句指令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"viewmodels/controls/imageprovider.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> quick;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line">    </span><br><span class="line">    MainWindow mainWindow;</span><br><span class="line">    <span class="comment">// 註冊的名稱是之後每次要用 imageProvider 都要呼叫的，這邊我取名為 TBImageProvider, 後者為覆寫 QQuickImageProvider 的類別名稱</span></span><br><span class="line">    mainWindow.addImageProvider( QLatin1String( <span class="string">"TBImageProvider"</span> ), <span class="keyword">new</span> ImageProvider );</span><br><span class="line">    mainWindow.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( mainWindow.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = app.exec();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定圖像提供者應加載圖像"><a href="#指定圖像提供者應加載圖像" class="headerlink" title="指定圖像提供者應加載圖像"></a>指定圖像提供者應加載圖像</h3><p>要指定圖像提供者應加載圖像，請對圖像的 URL 源使用 “image：” 方案，後跟圖像提供者的標識符和請求的圖像。 例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image &#123; <span class="attr">source</span>: <span class="string">"image://TBImageProvider/image.png"</span> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="ImageViewer-qml"><a href="#ImageViewer-qml" class="headerlink" title="ImageViewer.qml"></a>ImageViewer.qml</h3><p>例如: 在 qml 中按下亮度增加按鈕後，會呼叫 image provider 將圖片處理成指定亮度並在 img 元件中顯示該圖<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Image &#123;</span><br><span class="line">    id: img</span><br><span class="line">    width: parent.width</span><br><span class="line">    height: parent.height</span><br><span class="line">    transformOrigin: Item.TopLeft</span><br><span class="line">    fillMode: Image.PreserveAspectFit <span class="comment">//等比例裁剪</span></span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">Button &#123;</span><br><span class="line">    id: btnContrastPlus</span><br><span class="line">    width: <span class="number">100</span></span><br><span class="line">    height: <span class="number">50</span></span><br><span class="line">    text: <span class="string">"+"</span></span><br><span class="line">    onClicked: &#123;</span><br><span class="line">        img.source = <span class="string">"image://TBImageProvider/"</span> + pic.path + <span class="string">"test.jpg"</span> + <span class="string">"?brightness = "</span> + <span class="built_in">parseInt</span>( imageViewer.getBrightness())+ <span class="string">"?"</span></span><br><span class="line">        <span class="comment">//img.source = "image://TBImageProvider/" + "d:/images/test.jpg?brightness = 2?"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-QQuickImageProvider-好用的圖片提供者&quot;&gt;&lt;a href=&quot;#Qt-QQuickImageProvider-好用的圖片提供者&quot; class=&quot;headerlink&quot; title=&quot;Qt QQuickImageProvider 好用的圖片提供
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QQuickImageProvider" scheme="https://teddybearfp.github.io/tags/QQuickImageProvider/"/>
    
  </entry>
  
  <entry>
    <title>QFileInfo 檢測資料夾存在與資料數量</title>
    <link href="https://teddybearfp.github.io/2019/12/03/QFileInfo-%E6%AA%A2%E6%B8%AC%E8%B3%87%E6%96%99%E5%A4%BE%E5%AD%98%E5%9C%A8%E8%88%87%E8%B3%87%E6%96%99%E6%95%B8%E9%87%8F/"/>
    <id>https://teddybearfp.github.io/2019/12/03/QFileInfo-檢測資料夾存在與資料數量/</id>
    <published>2019-12-03T03:05:16.000Z</published>
    <updated>2019-12-24T15:30:34.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QFileInfo-檢測資料夾存在與資料數量"><a href="#QFileInfo-檢測資料夾存在與資料數量" class="headerlink" title="QFileInfo 檢測資料夾存在與資料數量"></a>QFileInfo 檢測資料夾存在與資料數量</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了程式不會崩潰，那麼在做一些計算之前，我們需要先取得指定資料夾是否存在或是特定檔案類型個數符不符合<br>這一篇我以取得 jpg 檔為例<br>將 Dialog 傳送回來的路徑剖析檔案個數</p><h2 id="IsFileCorrect"><a href="#IsFileCorrect" class="headerlink" title="IsFileCorrect"></a>IsFileCorrect</h2><p>我們在進行運算之前可以先執行這個判斷函式，以免程式崩潰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> TBTester::IsFileCorrect( QString path ) &#123;</span><br><span class="line">    QDir* dir = <span class="keyword">new</span> QDir( path );</span><br><span class="line">    <span class="keyword">if</span> ( !dir-&gt;exists() )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 若資料夾不存在, 回傳 False</span></span><br><span class="line">        </span><br><span class="line">    QStringList filter;</span><br><span class="line">    filter &lt;&lt; <span class="string">"*.jpg"</span>;  <span class="comment">// 所有 jpg 格式檔案</span></span><br><span class="line">    <span class="comment">//filter &lt;&lt; "[0-9]*.jpg"; //所有數字檔名的 jpg 格式檔案</span></span><br><span class="line">    dir-&gt;setNameFilters( filter ); <span class="comment">// 設置過濾器</span></span><br><span class="line">    QList&lt;QFileInfo&gt;* fileInfo = <span class="keyword">new</span> QList&lt;QFileInfo&gt;( dir-&gt;entryInfoList( filter ) );</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; fileInfo-&gt;count()  <span class="comment">//取得過濾後的檔案數量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( fileInfo-&gt;count() &lt; <span class="number">128</span> ) <span class="comment">//如果該檔案類型不符合最低計算條件則回傳 False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;QFileInfo-檢測資料夾存在與資料數量&quot;&gt;&lt;a href=&quot;#QFileInfo-檢測資料夾存在與資料數量&quot; class=&quot;headerlink&quot; title=&quot;QFileInfo 檢測資料夾存在與資料數量&quot;&gt;&lt;/a&gt;QFileInfo 檢測資料夾存在與資料
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QDir" scheme="https://teddybearfp.github.io/tags/QDir/"/>
    
      <category term="QFileInfo" scheme="https://teddybearfp.github.io/tags/QFileInfo/"/>
    
  </entry>
  
  <entry>
    <title>QImage memory buffer 操作</title>
    <link href="https://teddybearfp.github.io/2019/11/04/QImage-memory-buffer-%E6%93%8D%E4%BD%9C/"/>
    <id>https://teddybearfp.github.io/2019/11/04/QImage-memory-buffer-操作/</id>
    <published>2019-11-04T03:05:16.000Z</published>
    <updated>2019-11-04T13:56:44.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QImage-memory-buffer-操作"><a href="#QImage-memory-buffer-操作" class="headerlink" title="QImage memory buffer 操作"></a>QImage memory buffer 操作</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>QImage 讀取圖片後，將其轉換成 memory buffer 進行顏色操作與計算每個 bit 的數值，這一篇我會記錄一些比較常用到的 memory buffer 處理，例如: QImage 讀取圖片後轉成 memory buffer，單通道轉三通道，與 resize 成不同大小的圖</p><h2 id="讀取單張圖片至-memory-buffer"><a href="#讀取單張圖片至-memory-buffer" class="headerlink" title="讀取單張圖片至 memory buffer"></a>讀取單張圖片至 memory buffer</h2><p>運用 QImage 的函式讀取 128 張 寬512 <em> 高128 的灰階(單通道)圖片，並存到 memory buffer ( unsigned char </em> ) 中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">QImage img = QImage( <span class="number">512</span>, <span class="number">128</span>, QImage::Format_Grayscale8 );</span><br><span class="line"><span class="comment">//將 imgBuf 指向 img 的記憶體起始位置, 這樣對 imgBuf 操作即是對 img 操作</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* imgBuf = img.bits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//高</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;   <span class="comment">//寬</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">512</span>; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//將整張圖變成白色</span></span><br><span class="line">        imgBuf[ i * <span class="number">512</span> + j ] = <span class="number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存取圖片驗證是不是變成純白色的圖</span></span><br><span class="line">img.save(<span class="string">"image.jpg"</span>,<span class="string">"JPG"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="讀取多張圖片至-memory-buffer"><a href="#讀取多張圖片至-memory-buffer" class="headerlink" title="讀取多張圖片至 memory buffer"></a>讀取多張圖片至 memory buffer</h2><p>運用 QImage 的函式讀取 128 張 寬512 <em> 高512 的灰階(單通道)圖片，並存到 memory buffer ( unsigned char </em> ) </p><p>QFileDialog 用法可以參考我的另一篇文章 <a href="https://teddybearfp.github.io/2019/08/21/Qt-FileDialog/#more">QFileDialog</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//宣告一個 512 * 512 單通道的 QImage img </span></span><br><span class="line">QImage img = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_Grayscale8 );</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* src = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">512</span> * <span class="number">512</span> * <span class="number">128</span> ];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* ptr = src;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//path 為絕對路徑或是 QFileDialog 讀取到的值</span></span><br><span class="line">    img.load( path + QString::number( i ) + <span class="string">".jpg"</span>, <span class="string">"JPG"</span> );</span><br><span class="line">    <span class="comment">//一張一張圖片拷貝到記憶體位置中</span></span><br><span class="line">    <span class="built_in">memcpy</span>( ptr, img.bits(), img.sizeInBytes() );</span><br><span class="line">    <span class="comment">//位移一張灰階圖的大小,若三通道圖則需要位移 512 * 512 * 3</span></span><br><span class="line">    ptr += <span class="number">512</span> * <span class="number">512</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用完後記得 delete</span></span><br><span class="line"><span class="keyword">if</span> ( ptr != <span class="literal">nullptr</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//ptr指向空指標即可</span></span><br><span class="line">    ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( src != <span class="literal">nullptr</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] src;</span><br><span class="line">    src = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="操作灰階-單通道-圖片-memory-buffer"><a href="#操作灰階-單通道-圖片-memory-buffer" class="headerlink" title="操作灰階(單通道)圖片 memory buffer"></a>操作灰階(單通道)圖片 memory buffer</h2><p>灰階(單通道) 寬512 高128 的圖片操作, 這邊操作除了整張圖變白外, 順便記錄正規化( Normalization ) value 是將原本 memory buffer 中數值區間對應到另一個數值區間中, 例如: 原本 memory buffer 中值是 10 ~ 200 透過正規化讓它變成 0 ~ 255 區間, 這可以看我的另一篇文章 <a href="https://teddybearfp.github.io/2019/01/08/normalize/">標準化(Normalization)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">512</span>; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//整張圖變白</span></span><br><span class="line">        <span class="comment">//src[ i * 512 + j ] = value;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Normalization value</span></span><br><span class="line">        <span class="keyword">double</span> value = targetMin + ( (<span class="keyword">float</span>) ( ( src[ i * <span class="number">512</span> + j ] - originMin ) / (<span class="keyword">float</span>) diff ) * ( targetMax - targetMin ) );</span><br><span class="line">        src[ i * <span class="number">512</span> + j ] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="單通道轉三通道"><a href="#單通道轉三通道" class="headerlink" title="單通道轉三通道"></a>單通道轉三通道</h2><p>讀取位元深度為 8 的灰階圖( 單通道 ), 將其轉換成位元深度 24 的彩色圖( 三通道 ), 這邊要注意的是單通道轉三通道, stride 會變 3 倍</p><p>單通道: stride = width<br>三通道: stride = width * 3</p><p>單通道: dataLength = width <em> height<br>三通道: dataLength = width </em> 3 * height</p><p>這邊舉例:<br>單通道 memory buffer<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *src = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ width * height ]</span><br></pre></td></tr></table></figure></p><p>三通道 memory buffer<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一種</span></span><br><span class="line">QImage colorImg = QImage( <span class="number">512</span>, <span class="number">512</span>, QImage::Format_RGB888 );</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *dst = colorImg.bits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二種</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *dst = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ width * <span class="number">3</span> * height ]</span><br></pre></td></tr></table></figure></p><p>進行轉換</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = src[ i * width + j];</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] =src[ i * width + j];</span><br><span class="line">        dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] =src[ i * width + j]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雖然完成圖片長一樣但是已經變成三通道以 RGB 存放的圖片了,可以進行後續操作</p><h2 id="單通道轉三通道-Mapping-to-Jet"><a href="#單通道轉三通道-Mapping-to-Jet" class="headerlink" title="單通道轉三通道 ( Mapping to Jet )"></a>單通道轉三通道 ( Mapping to Jet )</h2><p>這邊所謂的 Jet 是 MatlabJet 一種由 藍 -&gt; 綠 -&gt; 紅的色彩映射, 詳細做法可以看我的另一篇文章<a href="https://teddybearfp.github.io/2019/10/14/Color-mapping-Matlab-Jet/">Color mapping (Matlab Jet)</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++ )</span><br><span class="line">    &#123;</span><br><span class="line">        v = src[ i * width + j ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> dv;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//vmin, vmax 表示 Jet 上下限,可以用參數傳入例如: vmin:0 ,vmax;255</span></span><br><span class="line">        <span class="keyword">if</span> ( v &lt; vmin )</span><br><span class="line">            v = vmin;</span><br><span class="line">        <span class="keyword">if</span> ( v &gt; vmax )</span><br><span class="line">            v = vmax;</span><br><span class="line">        dv = vmax - vmin;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.125</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = ( <span class="number">0.5</span> + ( v - vmin ) * ( ( <span class="number">1</span> - <span class="number">0.5</span> ) / ( <span class="number">0.125</span> * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.375</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = ( ( v - ( dv * <span class="number">0.125</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.375</span> - <span class="number">0.125</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.625</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = ( ( v - ( dv * <span class="number">0.375</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.625</span> - <span class="number">0.375</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = ( <span class="number">1</span> - ( v - ( dv * <span class="number">0.375</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.625</span> - <span class="number">0.375</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v &lt; ( vmin + <span class="number">0.875</span> * dv ) )</span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = <span class="number">1</span> * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = ( <span class="number">1</span> - ( v - ( dv * <span class="number">0.625</span> ) - vmin ) * ( <span class="number">1</span> / ( ( <span class="number">0.875</span> - <span class="number">0.625</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> ] = ( <span class="number">1</span> - ( v - dv * <span class="number">0.875</span> - vmin ) * ( <span class="number">0.5</span> / ( ( <span class="number">1</span> - <span class="number">0.875</span> ) * dv ) ) ) * <span class="number">255</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">1</span> ] = <span class="number">0</span>;</span><br><span class="line">            dst[ i * width * <span class="number">3</span> + j * <span class="number">3</span> + <span class="number">2</span> ] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;QImage-memory-buffer-操作&quot;&gt;&lt;a href=&quot;#QImage-memory-buffer-操作&quot; class=&quot;headerlink&quot; title=&quot;QImage memory buffer 操作&quot;&gt;&lt;/a&gt;QImage memory buf
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://teddybearfp.github.io/tags/Qt/"/>
    
      <category term="QImage" scheme="https://teddybearfp.github.io/tags/QImage/"/>
    
  </entry>
  
  <entry>
    <title>Python 打造我的第二隻專屬 LineBot</title>
    <link href="https://teddybearfp.github.io/2019/10/22/Python-%E6%89%93%E9%80%A0%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E9%9A%BB-LineBot/"/>
    <id>https://teddybearfp.github.io/2019/10/22/Python-打造我的第二隻-LineBot/</id>
    <published>2019-10-22T07:05:16.000Z</published>
    <updated>2019-10-23T13:49:25.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-打造我的第二隻專屬-LineBot"><a href="#Python-打造我的第二隻專屬-LineBot" class="headerlink" title="Python 打造我的第二隻專屬 LineBot"></a>Python 打造我的第二隻專屬 LineBot</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的第一個 <a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">LineBot 泰迪熊</a> 已經運作一年多了，最近 M 學長想要有一隻可以在公司揪團購的時候能用的機器人，這題材我覺得蠻有趣的，想說順便整理先前的做法並作一些改善，同時記錄製做過程，所以決定再創造一隻機器人</p><h2 id="LineBot"><a href="#LineBot" class="headerlink" title="LineBot"></a>LineBot</h2><p>LineBot 因不需安裝程式，可直接在 Line 上進行操作，若是僅提供些訊息的話是比 app 來的更方便快速的，給親朋好友使用也只需分享好友資料並可開始使用，所以也是個不錯的開發方式</p><h2 id="我的第一隻-LineBot-泰迪熊"><a href="#我的第一隻-LineBot-泰迪熊" class="headerlink" title="我的第一隻 LineBot 泰迪熊"></a>我的第一隻 LineBot 泰迪熊</h2><p>在我先前的文章有記錄我的第一個 <a href="https://teddybearfp.github.io/2018/10/26/Python-LineBot/">LineBot 泰迪熊</a> </p><p>主要功能有以下幾個</p><ol><li>快速輸入面板</li><li>取得天氣資訊</li><li>取得將各大版 PTT 的 Top 15 文章，直接幫你篩選熱門文章節省時間</li><li>取得即時新聞內容</li><li>取得現正熱映電影與電影評分</li><li>推薦附近好吃的餐廳與小吃並得到評分與距離</li><li>聊天功能</li><li>圖戰功能</li><li>關鍵字搜尋功能</li></ol><h2 id="第二隻-LineBot-泰迪熊-Super"><a href="#第二隻-LineBot-泰迪熊-Super" class="headerlink" title="第二隻 LineBot 泰迪熊 Super"></a>第二隻 LineBot 泰迪熊 Super</h2><p>目前第二隻 LineBot 的定位，會是功能較簡單，利於之後重新定位或是擴充的角色，命名方式是以七龍珠的內的命名法則為參考</p><p>主要功能暫定有以下幾個</p><ol><li>呈現菜單</li><li>紀錄大家要點什麼餐點</li><li>呈現大家要點的餐點內容</li></ol><h2 id="創建-LineBot"><a href="#創建-LineBot" class="headerlink" title="創建 LineBot"></a>創建 LineBot</h2><h3 id="申請-Line-帳號"><a href="#申請-Line-帳號" class="headerlink" title="申請 Line 帳號"></a>申請 Line 帳號</h3><p>第一步是先申請 Line 帳號，或用自己的 Line 帳號，才可以創建 LineBot </p><h3 id="LINE-Develop"><a href="#LINE-Develop" class="headerlink" title="LINE Develop"></a>LINE Develop</h3><h4 id="創建頻道"><a href="#創建頻道" class="headerlink" title="創建頻道"></a>創建頻道</h4><p><a href="https://developers.line.biz/en/" target="_blank" rel="noopener">LINE Develop</a> 中登入 Line 帳號後會看到此頁面<br>選擇 Provider List 看到現有頻道</p><p><img src="https://i.imgur.com/lD7kLQD.png" alt></p><p>選擇 Create new Channel ，如果要製做 LineBot 請選 Message API</p><p><img src="https://i.imgur.com/C5k8vaO.png" alt></p><p>接著填寫 LineBot 基本資料，信箱、概述等等，填寫完畢後送出並同意 Line 相關規章</p><p>完成後會看到 Provider List 新增了剛剛創建的 LineBot</p><p><img src="https://i.imgur.com/9o73ACv.png" alt></p><h4 id="允許-webhook-傳訊"><a href="#允許-webhook-傳訊" class="headerlink" title="允許 webhook 傳訊"></a>允許 webhook 傳訊</h4><p>點選剛剛創建的 LineBot 會看到該機器人的設置內容，將 webhook enabled 並儲存</p><p><img src="https://i.imgur.com/NHhhuMr.png" alt></p><h4 id="取得-Channel-secret、Channel-access-token"><a href="#取得-Channel-secret、Channel-access-token" class="headerlink" title="取得 Channel secret、Channel access token"></a>取得 Channel secret、Channel access token</h4><p>這邊最重要的事情就是取得 Channel secret 跟 Channel access token</p><p>Channel secret</p><p><img src="https://i.imgur.com/nNUUEl0.png" alt></p><p>若 Channel access token 是空的，則按右邊 Issue 產生</p><p><img src="https://i.imgur.com/Ot4Qd67.png" alt></p><p>到時候將這兩個值貼在程式碼中</p><pre><code>Channel_Access_Token = YOUR_CHANNEL_SECRETChannel_Secret = YOUR_CHANNEL_SECRET</code></pre><h3 id="LINE-Official-Account-Manager"><a href="#LINE-Official-Account-Manager" class="headerlink" title="LINE Official Account Manager"></a>LINE Official Account Manager</h3><p>接著我們到 <a href="https://manager.line.biz" target="_blank" rel="noopener">LINE Official Account Manager</a> 對泰迪熊 Super 進行更詳細的設定</p><h4 id="帳號設定頁面"><a href="#帳號設定頁面" class="headerlink" title="帳號設定頁面"></a>帳號設定頁面</h4><p><img src="https://i.imgur.com/Flx16BJ.png" alt></p><p>勾選 接受邀請加入群組或多人聊天室 讓泰迪熊 Super 能變群組機器人<br><img src="https://i.imgur.com/hY8gZn4.png" alt></p><h4 id="回應設定頁面"><a href="#回應設定頁面" class="headerlink" title="回應設定頁面"></a>回應設定頁面</h4><p>可以設置一些基本問後語句，可以在這邊將罐頭訊息關閉</p><p><img src="https://i.imgur.com/J0hw0Ez.png" alt></p><h2 id="部屬-LineBot"><a href="#部屬-LineBot" class="headerlink" title="部屬 LineBot"></a>部屬 LineBot</h2><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><p>設定完一些基本資料與行為後，要將 LineBot 部屬到 Heroku 上運行， 首先要先申辦 Heroku 帳號</p><h4 id="heroku-cli"><a href="#heroku-cli" class="headerlink" title="heroku-cli"></a>heroku-cli</h4><p>有了帳號後下載 <a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noopener">heroku-cli</a></p><p>注意: Heroku CLI 需要 Git 環境需先安裝完成後再安裝 CLI<br>The Heroku CLI requires Git, the popular version control system. If you don’t already have Git installed, complete the following before installing the CLI:</p><p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener">Git installation</a><br><a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup" target="_blank" rel="noopener">First-time Git setup</a></p><h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><p>Git 與 Heroku CLI 安裝完成後，開啟命令提示字元 command line 切換到 linebot 的資料夾並輸入以下指令</p><p>1.登入 Heroku</p><pre><code>heroku login</code></pre><p>輸入 heroku 帳號密碼登入成功會寫 Logged in as “你的信箱” 如下圖</p><p><img src="https://i.imgur.com/PlTUdWl.png" alt></p><p>2.創建.git資料夾(初始化 git)<br>僅在第一次使用時要輸入</p><pre><code>git config --global user.name &quot;你的名字&quot;git config --global user.email 你的信箱git init</code></pre><p><img src="https://i.imgur.com/uylQ6lp.png" alt></p><p>可以到該層看是否創建 .git 資料夾</p><p>3.與 Heroku 連線</p><pre><code>heroku git:remote -a HEROKU_APP名稱</code></pre><p><img src="https://i.imgur.com/C66dMoq.png" alt></p><p>4.偵測變更 與 commit 與 push<br>注意1: git add .中的這個.需要與 add 空一格<br>注意2: 建置時 buildpackages 可以選擇語言 例如: 選擇Python<br><img src="https://i.imgur.com/FL4Wjxc.png" alt></p><pre><code>git add .git commit -m &quot;此次變更說明&quot;git push heroku master</code></pre><p>成功部屬後，會在 Heroku app 的 overview 中看到 build successed</p><p><img src="https://i.imgur.com/KyzN5FP.png" alt></p><p>以上四步驟指令可以在 web app 裡的 deploy 看到</p><p><img src="https://i.imgur.com/bBQIxsE.png" alt></p><p>之後有任何變更要套用僅需第一步驟登入 heroku 與第三步驟連線 heroku 並且反覆執行第四步驟即可更新</p><h4 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h4><p>除了 cmd 指令方式還可以用 git gui 方式上傳程式碼，部屬到 Heroku 上面，我用的是 <a href="https://www.sourcetreeapp.com" target="_blank" rel="noopener">Sourcetree</a> 整體使用上算是容易上手且頁面簡潔，如果覺得用 cmd 部屬太困難那麼就用有使用者介面的 git gui 方式吧</p><h2 id="Webhook-URL"><a href="#Webhook-URL" class="headerlink" title="Webhook URL"></a>Webhook URL</h2><p>最後要把之前尚未填寫的 Webhook URL 給補上，這個值會是你的 Heroku 部屬完成後的網址加上/callback</p><p>例如: 我部屬完成 Heroku ，在 Heroku 主頁右上角 Open app 得到剛剛部屬完成的位置 <a href="https://superteddybearbot.herokuapp.com" target="_blank" rel="noopener">https://superteddybearbot.herokuapp.com</a><br>那麼我們的 Webhook URL 即是 <a href="https://superteddybearbot.herokuapp.com/callback" target="_blank" rel="noopener">https://superteddybearbot.herokuapp.com/callback</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.oxxostudio.tw/articles/201701/line-bot.html" target="_blank" rel="noopener">LINE BOT 實戰 (原理篇)</a><br><a href="https://github.com/twtrubiks/line-bot-tutorial" target="_blank" rel="noopener">twtrubiks/line-bot-tutorial - GitHub</a><br><a href="https://yaoandy107.github.io/line-bot-tutorial/" target="_blank" rel="noopener">LineBot+Python，輕鬆建立聊天機器人</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-打造我的第二隻專屬-LineBot&quot;&gt;&lt;a href=&quot;#Python-打造我的第二隻專屬-LineBot&quot; class=&quot;headerlink&quot; title=&quot;Python 打造我的第二隻專屬 LineBot&quot;&gt;&lt;/a&gt;Python 打造我的第二隻
      
    
    </summary>
    
      <category term="Python" scheme="https://teddybearfp.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://teddybearfp.github.io/tags/Python/"/>
    
      <category term="LineBot" scheme="https://teddybearfp.github.io/tags/LineBot/"/>
    
  </entry>
  
  <entry>
    <title>Qt 求圓邊上的極座標位置</title>
    <link href="https://teddybearfp.github.io/2019/10/19/%E6%B1%82%E5%9C%93%E7%9A%84%E6%A5%B5%E5%BA%A7%E6%A8%99%E4%BD%8D%E7%BD%AE/"/>
    <id>https://teddybearfp.github.io/2019/10/19/求圓的極座標位置/</id>
    <published>2019-10-19T07:05:16.000Z</published>
    <updated>2019-10-21T12:07:47.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-求圓邊上的極座標位置"><a href="#Qt-求圓邊上的極座標位置" class="headerlink" title="Qt 求圓邊上的極座標位置"></a>Qt 求圓邊上的極座標位置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要將一個圓的邊分為幾個點，可以用極座標的方式去取得每個點的 (X , Y) 值</p><h2 id="直角坐標轉極座標"><a href="#直角坐標轉極座標" class="headerlink" title="直角坐標轉極座標"></a>直角坐標轉極座標</h2><p>直角坐標點 ( x , y ) 轉為極座標點為 ( r cos(θ), r sin(θ) )</p><p>x = r cos(θ), y = r sin(θ) 其中 r 為圓的半徑, θ 是角度</p><p>例如: 在原點為 ( 0 , 0 ), 半徑為 100 的圓型中取得角度為 45°<br>那麼我們會得到該點座標為 ( 100 <em> cos( 45° ), 100 </em> sin( 45° ) ) = ( 100 <em> 0.7071 , 100  </em> 0.7071 ) = ( 71 , 71 )</p><p><img src="https://i.imgur.com/X8hllOn.png" alt></p><h2 id="將圓上的邊分為幾個點實作"><a href="#將圓上的邊分為幾個點實作" class="headerlink" title="將圓上的邊分為幾個點實作"></a>將圓上的邊分為幾個點實作</h2><p>來實作直角坐標轉極座標算法，將圓上的邊分為特定點數 (例如:一百個點)<br>首先我們先用 Qt 畫一個 512 * 512 的圓，並在圓上找到 100 個座標點繞一圈，那麼要找一百個點的話，表示 θ 每次增加量為 360 / 100 = 3.6°</p><p>完成圖如下:</p><p><img src="https://i.imgur.com/BArDoUu.png" alt></p><p>我們這邊用 QPainter 來實現並將其製作成 qml item 以利後續延伸</p><h3 id="PolarCoordinates-h"><a href="#PolarCoordinates-h" class="headerlink" title="PolarCoordinates.h"></a>PolarCoordinates.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> POLARCOORDINATES_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POLARCOORDINATES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickPaintedItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolarCoordinates</span> :</span> <span class="keyword">public</span> QQuickPaintedItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( <span class="keyword">int</span> number READ number WRITE setNumber NOTIFY numberChanged )</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    PolarCoordinates();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">( QPainter *painter )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNumber</span><span class="params">( <span class="keyword">int</span> number )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_number;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawPolarCoordinates</span><span class="params">( QPainter *painter )</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">numberChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// POLARCOORDINATES_H</span></span></span><br></pre></td></tr></table></figure><h3 id="PolarCoordinates-cpp"><a href="#PolarCoordinates-cpp" class="headerlink" title="PolarCoordinates.cpp"></a>PolarCoordinates.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"polarcoordinates.h"</span></span></span><br><span class="line"></span><br><span class="line">PolarCoordinates::PolarCoordinates()</span><br><span class="line">&#123;</span><br><span class="line">    m_number = <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::paint( QPainter *painter )</span><br><span class="line">&#123;</span><br><span class="line">    painter-&gt;setPen( QPen( Qt::black, <span class="number">1</span> ) );</span><br><span class="line">    <span class="function">QRectF <span class="title">rectangle1</span><span class="params">( <span class="number">0.0</span>, <span class="number">0.0</span>, width() - <span class="number">1</span>, height() - <span class="number">1</span> )</span></span>;</span><br><span class="line">    painter-&gt;drawEllipse( rectangle1 ); <span class="comment">//畫直徑為512的圓</span></span><br><span class="line"></span><br><span class="line">    drawPolarCoordinates( painter );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::drawPolarCoordinates( QPainter *painter )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> degree = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> radius = width() / <span class="number">2</span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">center</span><span class="params">( width() / <span class="number">2</span>, height() / <span class="number">2</span> )</span></span>; <span class="comment">//Center of mind</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_number; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        degree += <span class="number">360.0</span> / m_number;</span><br><span class="line">        painter-&gt;setPen( QPen( Qt::red, <span class="number">5</span> ) );</span><br><span class="line">        <span class="comment">// find the m_number Polar coordinates in the width, height circle.</span></span><br><span class="line">        painter-&gt;drawPoint( QPointF( radius * <span class="built_in">cos</span>( degree ) + center.x(), radius * <span class="built_in">sin</span>( degree ) + center.y() ) );</span><br><span class="line"></span><br><span class="line">        painter-&gt;setPen( QPen( Qt::green, <span class="number">5</span> ) );</span><br><span class="line">        <span class="comment">// find the m_number Polar coordinates in the width, height/ 4 circle.</span></span><br><span class="line">        painter-&gt;drawPoint( QPointF( ( radius / <span class="number">2</span> ) * <span class="built_in">cos</span>( degree ) + center.x(), ( ( radius / <span class="number">2</span> ) * <span class="built_in">sin</span>( degree ) + center.y() ) / <span class="number">4</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PolarCoordinates::number()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PolarCoordinates::setNumber( <span class="keyword">int</span> number )</span><br><span class="line">&#123;</span><br><span class="line">    m_number = number;</span><br><span class="line">    update();</span><br><span class="line">    <span class="function">emit <span class="title">numberChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.12</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">600</span></span><br><span class="line">    height: <span class="number">600</span></span><br><span class="line">    title: qsTr(<span class="string">"Polar Coordinates"</span>)</span><br><span class="line">    PolarCoordinates</span><br><span class="line">    &#123;</span><br><span class="line">        anchors.horizontalCenter: parent.horizontalCenter</span><br><span class="line">        anchors.verticalCenter: parent.verticalCenter</span><br><span class="line">        width: <span class="number">512</span></span><br><span class="line">        height: <span class="number">512</span></span><br><span class="line">        number: <span class="number">100</span> <span class="comment">//可以指定要分為幾個點</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成!<br><img src="https://i.imgur.com/O2Un1jf.png" alt></p><h2 id="補充-角度與弧度"><a href="#補充-角度與弧度" class="headerlink" title="補充 ( 角度與弧度 )"></a>補充 ( 角度與弧度 )</h2><p>在 C 標準函式庫中 sin 與 cos 三角函數相關的函式是使用弧度 ( radian ) 而非角度</p><pre><code>double sin(double x);回傳值: 為 x 弧度(弳度)的 sine 值參數: 需傳弧度，以弧度表示角度的值，一弧度等於 180 / PI 度。sin ( radian ), cos ( radian )</code></pre><p>一個完整的圓的弧度是 2 π ，所以 2 π * radian = 360°</p><p>π <em> radian = 180°, 1° = (π / 180) </em> radian , 1 radian = 180° / π</p><p>由此可知: </p><pre><code>radian = (π / 180) * degreedegree = (180 / π) * radian</code></pre><p>例如: 求 30 度的 sin 值，則必須將 30 度轉為弧度 radian = 30 * ( 3.1415 / 180 )</p><pre><code>sin ( 30 * ( 3.1415 / 180 ) ) = 0.5</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-求圓邊上的極座標位置&quot;&gt;&lt;a href=&quot;#Qt-求圓邊上的極座標位置&quot; class=&quot;headerlink&quot; title=&quot;Qt 求圓邊上的極座標位置&quot;&gt;&lt;/a&gt;Qt 求圓邊上的極座標位置&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="QPainter" scheme="https://teddybearfp.github.io/tags/QPainter/"/>
    
      <category term="極座標" scheme="https://teddybearfp.github.io/tags/%E6%A5%B5%E5%BA%A7%E6%A8%99/"/>
    
      <category term="QQuickPaintedItem" scheme="https://teddybearfp.github.io/tags/QQuickPaintedItem/"/>
    
  </entry>
  
  <entry>
    <title>Color mapping ( Matlab Jet )</title>
    <link href="https://teddybearfp.github.io/2019/10/14/Color-mapping-Matlab-Jet/"/>
    <id>https://teddybearfp.github.io/2019/10/14/Color-mapping-Matlab-Jet/</id>
    <published>2019-10-14T07:05:16.000Z</published>
    <updated>2019-10-15T14:14:40.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Color-mapping-Matlab-Jet-in-Qt"><a href="#Color-mapping-Matlab-Jet-in-Qt" class="headerlink" title="Color mapping ( Matlab Jet ) in Qt"></a>Color mapping ( Matlab Jet ) in Qt</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天記錄最近編寫的小工具( ColorMappingJet )，將灰階重新分布為色彩空間( Matlab Jet )，顏色映射( Color mapping )是將一個圖像的顏色映射到另一個圖像的顏色的功能。顏色映射可以被稱為導致映射函數的算法或者變換圖像顏色的算法。</p><h2 id="Matlab-Jet"><a href="#Matlab-Jet" class="headerlink" title="Matlab Jet"></a>Matlab Jet</h2><p>這是種顏色映射的算法，是將灰階值放到 Jet 上進行顏色映射( Color mapping )，值由小到大從深藍到綠到深紅</p><p>如下圖:</p><p><img src="https://i.imgur.com/gUzSwAv.png" alt></p><p>下圖是截取自 <a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">Origins of Colormaps</a> 網站講解的 Jet 映射原理</p><p><img src="https://i.imgur.com/7Dzl98j.png" alt="圖1"></p><p>主要是在 1/8 , 3/8 , 5/8 , 7/8 這幾個位置進行顏色轉折</p><h2 id="Color-mapping-in-Qt"><a href="#Color-mapping-in-Qt" class="headerlink" title="Color mapping in Qt"></a>Color mapping in Qt</h2><p>我編寫的小工具 ( ColorMappingJet ) 是可以輸入任意上下限的灰階值再透過 Slider 調整當下數值，讓下方的方型進行顏色映射</p><p>上下限不一定要是0 ~ 255 或是 -1 ~ 1<br>可以是 0 ~ 300 或是 123 ~ 777</p><p>例如:<br>下限為 0</p><p><img src="https://i.imgur.com/rB75nGX.png" alt></p><p>上限為 300<br><img src="https://i.imgur.com/v87ITRr.png" alt></p><p>那麼我們要怎麼將灰階值轉換成三通道( RGB )值?</p><p>我的做法是將輸入的灰階值做顏色映射，將單通道的灰階值轉成三通道<br>由深藍色 -&gt; 藍色 -&gt;綠色 -&gt; 紅色 -&gt; 深紅色</p><pre><code>Slider 控制單通道灰階值 valueif value 在小於 0.125 時: 紅色通道值為 0 ， 綠色通道值為 0 ， 藍色通道值的增加，從 0.5 加到 1else if value 在小於 0.375 時: 紅色通道值為 0 ， 綠色通道值的增加，從 0 加到 1 ， 藍色通道值維持 1else ifvalue 在小於 0.625 時: 紅色通道值的增加，從 0 加到 1 ， 綠色通道值維持 1 ， 藍色通道值則從 1 減至 0else ifvalue 在小於 0.875 時: 紅色通道維持 1 ， 綠色通道值則從 1 減至 0 ， 藍色通道值為 0else其他 value: 紅色通道值則從 1 減至 0.5 ， 綠色通道值為 0 ， 藍色通道值為 0</code></pre><p>運算出來的數值存取至 Q_PROPERTY 的 QColor 中傳遞給 qml<br>透過以上方法就完成啦!</p><p><img src="https://i.imgur.com/FTi7JMC.png" alt></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">Origins of Colormaps</a></p><p><a href="https://blogs.mathworks.com/cleve/2015/02/02/origins-of-colormaps/#1b2ebb6e-d715-4a3b-a473-4940ab7ba7b7" target="_blank" rel="noopener">圖1 來源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Color-mapping-Matlab-Jet-in-Qt&quot;&gt;&lt;a href=&quot;#Color-mapping-Matlab-Jet-in-Qt&quot; class=&quot;headerlink&quot; title=&quot;Color mapping ( Matlab Jet ) in 
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Color mapping" scheme="https://teddybearfp.github.io/tags/Color-mapping/"/>
    
  </entry>
  
  <entry>
    <title>Qml Loader 載入器應用</title>
    <link href="https://teddybearfp.github.io/2019/10/02/Qml-Loader-%E8%BC%89%E5%85%A5%E5%99%A8%E6%87%89%E7%94%A8/"/>
    <id>https://teddybearfp.github.io/2019/10/02/Qml-Loader-載入器應用/</id>
    <published>2019-10-02T07:05:16.000Z</published>
    <updated>2019-10-02T14:43:53.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qml-Loader-載入器應用"><a href="#Qml-Loader-載入器應用" class="headerlink" title="Qml Loader 載入器應用"></a>Qml Loader 載入器應用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天來記錄一下 qml 中經常使用到的 Loader 元件</p><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>載入器是用來動態載入 qml 中的元件</p><p>載入頁面 - 可以用 source property 載入 qml 頁面 ( Qml file )<br>載入元件 - 或是用 sourceComponent property 元件 ( Component ) </p><p>透過 Loader 元件還可以解決頁面載入時某些元件尚未使用就搭載會錯誤的問題<br>例如:某個顯示元件需要在使用者選定圖片後，將圖片去做處理並顯示，那麼如果包在Component中的話，<br>一進入該頁面就會找不到顯示內容，透過 Loader 可以在選擇後，載入該顯示內容</p><h2 id="載入頁面"><a href="#載入頁面" class="headerlink" title="載入頁面"></a>載入頁面</h2><p>可以用 source property 載入 qml 頁面</p><h3 id="不帶參數載入頁面"><a href="#不帶參數載入頁面" class="headerlink" title="不帶參數載入頁面"></a>不帶參數載入頁面</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    Loader &#123; id: pageLoader &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: pageLoader.source = <span class="string">"Page1.qml"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="帶參數載入頁面"><a href="#帶參數載入頁面" class="headerlink" title="帶參數載入頁面"></a>帶參數載入頁面</h3><p>這邊要注意的部分是透過 setSource 所傳遞的參數會在載入新頁面完成後，才將值傳遞過去，所以頁面與元件載入優先於收到值，要非常注意這個先後順序</p><p>Sender.qml<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    Loader &#123; id: pageLoader &#125;</span><br><span class="line"></span><br><span class="line">    MouseArea &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        onClicked: pageLoader.setSource(<span class="string">"qrc:/Receiver.qml"</span>,  &#123;<span class="string">"src"</span>: volumeRendering.object, <span class="string">"loaderActive"</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="comment">//Receiver.qml 頁面中需要對應的 Property 例如: Property var src 與 Property alias loaderActive: loader.active 存放</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面強調的 setSource 優先順序問題來看看大概是怎個情形吧<br>如果有元件是需要傳遞過來的值才能順利載入頁面，但是值還未被傳遞完成，元件卻先被載入，出現異常</p><p>例如:以下程式碼 Sender.qml 透過 setSource 方式載入 Receiver.qml 頁面並傳遞 src 值，<br>此時因 ImageImport 需有 source 做相對應計算後顯示，但是尚未有數值，頁面卻先搭載，導致錯誤</p><p>Receiver.qml 錯誤範例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    id: root</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    property var src</span><br><span class="line">    property alias loaderActive: loader.active</span><br><span class="line">    </span><br><span class="line">    Viewer &#123;</span><br><span class="line">        anchors.fill: parent;</span><br><span class="line">        ImageImport &#123;</span><br><span class="line">            source: root.src</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="載入元件"><a href="#載入元件" class="headerlink" title="載入元件"></a>載入元件</h2><p>那麼我們該如何解決以上問題呢</p><p>可以透過 Loader 讓元件延遲載入，將需要延遲的元件包在 Component 之中<br>此處必須注意的是 Component 最外層僅能一個主要元件( 可以一層一層被包在內 )，不能最外層兩個以上元件</p><p>Receiver.qml 正確範例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">Item &#123;</span><br><span class="line">    id: root</span><br><span class="line">    width: <span class="number">200</span>; height: <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    property var src <span class="comment">//先將值存取至 src 需要時提取</span></span><br><span class="line">    property alias loaderActive: loader.active <span class="comment">//先將值存取至 loaderActive 需要時提取</span></span><br><span class="line">    property <span class="keyword">int</span> xValue: sliderX.value <span class="comment">//榜定 sliderX.value 值</span></span><br><span class="line">    </span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">        asynchronous: <span class="literal">true</span></span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.right: parent.right</span><br><span class="line">        width: <span class="number">512</span></span><br><span class="line">        height: <span class="number">500</span></span><br><span class="line">        active: <span class="literal">false</span> <span class="comment">//頁面載入時，不會搭載此元件，直到頁面載入完成後，接收到 setSource 來的值 src 內容與 loaderActive : true 才搭載</span></span><br><span class="line">        sourceComponent: component <span class="comment">//設置 Component 元件</span></span><br><span class="line">    &#125;</span><br><span class="line">    Component &#123;</span><br><span class="line">        id: component    </span><br><span class="line">        Viewer &#123;</span><br><span class="line">            anchors.fill: parent;</span><br><span class="line">            <span class="function">function <span class="title">crop</span><span class="params">()</span> </span>&#123; <span class="comment">//搭載後才能認到 mapper 所以不能直接被使用，需透過函式</span></span><br><span class="line">                mapper.setCroppingRegionPlanes(<span class="number">0</span>,xValue,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            Mapper &#123;</span><br><span class="line">                id: mapper</span><br><span class="line">                ImageImport &#123;</span><br><span class="line">                    source: root.src <span class="comment">//接收來自於 Sender.qml 的 volumeRendering.object</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Slider &#123;</span><br><span class="line">        id: sliderX</span><br><span class="line">        from:<span class="number">0</span></span><br><span class="line">        value: <span class="number">511</span></span><br><span class="line">        to:<span class="number">511</span></span><br><span class="line">        stepSize: <span class="number">1</span></span><br><span class="line">        onValueChanged: loader.item.crop() </span><br><span class="line">        <span class="comment">//因載入完成第一時間並不曉得 mapper 所以必須使用 loader 的 item ( 指的是 sourceComponent 對象 ) 的函式 Crop()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qml-Loader-載入器應用&quot;&gt;&lt;a href=&quot;#Qml-Loader-載入器應用&quot; class=&quot;headerlink&quot; title=&quot;Qml Loader 載入器應用&quot;&gt;&lt;/a&gt;Qml Loader 載入器應用&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Loader" scheme="https://teddybearfp.github.io/tags/Loader/"/>
    
  </entry>
  
  <entry>
    <title>Qt 如何在 qml 中使用 C++ Enum</title>
    <link href="https://teddybearfp.github.io/2019/10/02/Qt-%E5%A6%82%E4%BD%95%E5%9C%A8-qml-%E4%B8%AD%E4%BD%BF%E7%94%A8-C-Enum/"/>
    <id>https://teddybearfp.github.io/2019/10/02/Qt-如何在-qml-中使用-C-Enum/</id>
    <published>2019-10-02T03:05:16.000Z</published>
    <updated>2019-10-02T14:43:38.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-如何在-qml-中使用-C-Enum"><a href="#Qt-如何在-qml-中使用-C-Enum" class="headerlink" title="Qt 如何在 qml 中使用 C++ Enum"></a>Qt 如何在 qml 中使用 C++ Enum</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果要在 qml 中使用列舉，qml 中是不認得列舉型別的並需先註冊才可以讓 qml 端操作 C++ 的列舉，這邊來記錄一下該如何在 qml 中使用 C++ 的列舉</p><h2 id="列舉"><a href="#列舉" class="headerlink" title="列舉"></a>列舉</h2><p>列舉是一種複合型別，是一個被命名的整型常數的集合，適合用來歸納能分類成一組列舉的值與利於型別檢查，那麼什麼是適合分類成一組列舉的值，例如在日常生活中很常見的表示星期的 SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY 就是一個列舉或是 東、西、南、北。</p><h2 id="TB-C-enum-in-qml-實作"><a href="#TB-C-enum-in-qml-實作" class="headerlink" title="TB C++ enum in qml 實作"></a>TB C++ enum in qml 實作</h2><p>要在 qml 中使用 C++ 的 enum 要先註冊讓 qml 認得該資料型態，這邊我們記錄一下以星期為列舉範例</p><h3 id="步驟一-創建類別"><a href="#步驟一-創建類別" class="headerlink" title="步驟一 創建類別"></a>步驟一 創建類別</h3><p>創建一個類別繼承 QObject 或是 QObject 子類別( 例如: QQuickItem 必須添加 Q_OBJECT 巨集 )</p><h3 id="步驟二-創建列舉"><a href="#步驟二-創建列舉" class="headerlink" title="步驟二 創建列舉"></a>步驟二 創建列舉</h3><p>創建一個 enum 並加上 Q_ENUM( YourEnumNameHere ) 標籤並在私有封裝中加上</p><pre><code>QMetaEnum metaEnumWeek = QMetaEnum::fromType&lt;TeddyBearFP::Week&gt;();</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEDDYBEARFP_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEDDYBEARFP_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//步驟一</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeddyBearFP</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟二</span></span><br><span class="line">    <span class="keyword">enum</span> Week</span><br><span class="line">    &#123;</span><br><span class="line">        SUNDAY = <span class="number">7</span>,</span><br><span class="line">        MONDAY = <span class="number">1</span>,</span><br><span class="line">        TUESDAY = <span class="number">2</span>,</span><br><span class="line">        WEDNESDAY = <span class="number">3</span>,</span><br><span class="line">        THURSDAY = <span class="number">4</span>,</span><br><span class="line">        FRIDAY = <span class="number">5</span>,</span><br><span class="line">        SATURDAY = <span class="number">6</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM( Week )</span><br><span class="line"></span><br><span class="line">    TeddyBearFP();</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE QString <span class="title">enumValueKey_Week</span><span class="params">( Week week )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QMetaEnum metaEnumWeek = QMetaEnum::fromType&lt;TeddyBearFP::Week&gt;();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TEDDYBEARFP_H</span></span></span><br></pre></td></tr></table></figure><h3 id="步驟三-註冊類別"><a href="#步驟三-註冊類別" class="headerlink" title="步驟三 註冊類別"></a>步驟三 註冊類別</h3><p>在 main.cpp 中註冊類別讓 qml 可以使用</p><pre><code>qmlRegisterType&lt;TeddyBearFP&gt;( &quot;teddyBearFP&quot;, 1, 0, &quot;TeddyBearFP&quot; );</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tb2.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟三 註冊類別</span></span><br><span class="line">    qmlRegisterType&lt;TeddyBearFP&gt;( <span class="string">"teddyBearFP"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"TeddyBearFP"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//步驟五 註冊另一個類別與列舉</span></span><br><span class="line">    qmlRegisterType&lt;TB2&gt;( <span class="string">"tb2"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"TB2"</span> );</span><br><span class="line">    qRegisterMetaType&lt;TeddyBearFP::Week&gt;();</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    engine.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line">    <span class="keyword">if</span> ( engine.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步驟四-導入類別使用列舉"><a href="#步驟四-導入類別使用列舉" class="headerlink" title="步驟四 導入類別使用列舉"></a>步驟四 導入類別使用列舉</h3><p>在我們導入註冊成功的的類別後，在這一個步驟中，已經可以使用該類別的列舉內容了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> teddyBearFP <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">TeddyBearFP &#123;</span><br><span class="line">    Column</span><br><span class="line">    &#123;</span><br><span class="line">        width: parent.width</span><br><span class="line">        spacing: <span class="number">2</span></span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"Week Name: "</span> + enumValueKey_Week(TeddyBearFP.SUNDAY);</span><br><span class="line">        &#125;</span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"Week Value: "</span> + TeddyBearFP.SUNDAY.toString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步驟五-註冊列舉"><a href="#步驟五-註冊列舉" class="headerlink" title="步驟五 註冊列舉"></a>步驟五 註冊列舉</h3><p>如果你想要在其他類別中使用該列舉那麼必須在 main.cpp 中註冊它</p><pre><code>qRegisterMetaType&lt;TeddyBearFP::Week&gt;();</code></pre><p>註冊完成後便可以在另一個類別中使用</p><h4 id="h-cpp"><a href="#h-cpp" class="headerlink" title=".h / .cpp"></a>.h / .cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"teddybearfp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TB2</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TB2();</span><br><span class="line">    <span class="function">Q_INVOKABLE QString <span class="title">test</span><span class="params">( TeddyBearFP::Week week )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tb2.h"</span></span></span><br><span class="line"></span><br><span class="line">TB2::TB2()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QString TB2::test( TeddyBearFP::Week week )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( week == TeddyBearFP::MONDAY )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MONDAY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( week == TeddyBearFP::FRIDAY )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FRIDAY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Others"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="qml"><a href="#qml" class="headerlink" title="qml"></a>qml</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> tb2 <span class="number">1.0</span></span><br><span class="line">TB2 &#123;</span><br><span class="line">    Column &#123;</span><br><span class="line">        anchors.fill: parent</span><br><span class="line">        anchors.topMargin: <span class="number">5</span></span><br><span class="line">        anchors.leftMargin: <span class="number">5</span></span><br><span class="line">        spacing: <span class="number">20</span></span><br><span class="line">        Text</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            font.pixelSize : <span class="number">16</span></span><br><span class="line">            text:<span class="string">"TB2"</span></span><br><span class="line">        &#125;</span><br><span class="line">        Column</span><br><span class="line">        &#123;</span><br><span class="line">            width: parent.width</span><br><span class="line">            spacing: <span class="number">2</span></span><br><span class="line">            Text</span><br><span class="line">            &#123;</span><br><span class="line">                width: parent.width</span><br><span class="line">                font.pixelSize : <span class="number">16</span></span><br><span class="line">                text:<span class="string">"Week Name: "</span> + test(TeddyBearFP.FRIDAY);</span><br><span class="line">            &#125;</span><br><span class="line">            Text</span><br><span class="line">            &#123;</span><br><span class="line">                width: parent.width</span><br><span class="line">                font.pixelSize : <span class="number">16</span></span><br><span class="line">                text:<span class="string">"Week Value: "</span> + TeddyBearFP.FRIDAY.toString()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成-查看數值"><a href="#完成-查看數值" class="headerlink" title="完成 查看數值"></a>完成 查看數值</h3><p><img src="https://i.imgur.com/RMTfnvy.png" alt></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>公司 M 學長的資料分享</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-如何在-qml-中使用-C-Enum&quot;&gt;&lt;a href=&quot;#Qt-如何在-qml-中使用-C-Enum&quot; class=&quot;headerlink&quot; title=&quot;Qt 如何在 qml 中使用 C++ Enum&quot;&gt;&lt;/a&gt;Qt 如何在 qml 中使用 C++ En
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="Enum" scheme="https://teddybearfp.github.io/tags/Enum/"/>
    
  </entry>
  
  <entry>
    <title>Qt CreateMutex 確保應用程式不會被重複執行</title>
    <link href="https://teddybearfp.github.io/2019/10/01/Qt-CreateMutex-%E7%A2%BA%E4%BF%9D%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E4%B8%8D%E6%9C%83%E8%A2%AB%E9%87%8D%E8%A4%87%E5%9F%B7%E8%A1%8C/"/>
    <id>https://teddybearfp.github.io/2019/10/01/Qt-CreateMutex-確保應用程式不會被重複執行/</id>
    <published>2019-10-01T03:05:16.000Z</published>
    <updated>2019-10-02T14:43:24.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt-CreateMutex-確保應用程式不會被重複執行"><a href="#Qt-CreateMutex-確保應用程式不會被重複執行" class="headerlink" title="Qt CreateMutex 確保應用程式不會被重複執行"></a>Qt CreateMutex 確保應用程式不會被重複執行</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>編寫好一個應用程式要避免該程式被重複開啟，那麼我這邊紀錄的方式是用 CreateMutex 解決不會有多個行程去使用到同一個資源的問題，其運作方式會等一個行程用完資源後換下一個行程使用，而不會有相互衝突的問題</p><h2 id="CreateMutex-用法"><a href="#CreateMutex-用法" class="headerlink" title="CreateMutex 用法"></a>CreateMutex 用法</h2><p>CreateMutex()函式可以用來創建一個有指定名稱或無指定名稱的互斥對象</p><p>如果執行成功，就會返回互斥對象的 handle ，回傳零則表示有誤<br>若是返回有效的 handle 但是已經有指定名稱的，那麼 GetLastError 會得到 ERROR_ALREADY_EXISTS 已經存在的錯誤</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE <span class="title">CreateMutexA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpMutexAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL                  bInitialOwner, <span class="comment">//初始化互斥對象的擁有者</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName <span class="comment">//指向互斥對象的指標</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Handle hMutex = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二個參數，TRUE表示建立佔有Mutex使用權，FALSE表示建立者不佔有Mutex使用權</span></span><br><span class="line">hMutex = CreateMutex(<span class="literal">NULL</span>,FALSE,<span class="string">"MyMutex"</span>); <span class="comment">//建立Mutex</span></span><br><span class="line">WaitForSingleObject(hMutex, <span class="number">500</span>); <span class="comment">//取得Mutex使用權限並等待使用被釋放</span></span><br><span class="line"><span class="comment">//等待函式完成通常要給個 Timeout ms時間，特殊情況下才給 INFINITE 直到被手動釋放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//......Critical section protected code here(臨界區間) 這區塊的資源不會有同時被使用問題</span></span><br><span class="line"></span><br><span class="line">ReleaseMutex(hMutex); <span class="comment">//釋放使用使用權，讓其他執行續或行程進入critical section</span></span><br></pre></td></tr></table></figure><h2 id="實作-CreateMutex-確保應用程式不會被重複執行實作"><a href="#實作-CreateMutex-確保應用程式不會被重複執行實作" class="headerlink" title="實作 CreateMutex 確保應用程式不會被重複執行實作"></a>實作 CreateMutex 確保應用程式不會被重複執行實作</h2><p>了解 CreateMutex 用法的話，我們可以運用創建互斥鎖時指定名稱不重複的特性，達到確保應用程式唯一。</p><p>我們可以在應用程式一開啟的時候，創建一個 Mutex 指定應用程式名稱，並用 GetLastError 判斷是否 ERROR_ALREADY_EXISTS 若新創建成功則正常開啟應用程式，否則關閉該 handle 並把指標指向 NULL 最後回傳 FALSE 讓程式關閉不會繼續執行</p><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkUnique</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 創建 handleMutex 並設指定名稱</span></span><br><span class="line">    HANDLE m_hMutex = CreateMutex( <span class="literal">NULL</span>, FALSE, <span class="string">L"TeddyBearFP"</span> );</span><br><span class="line">    <span class="comment">// 檢查錯誤代碼</span></span><br><span class="line">    <span class="keyword">if</span> ( GetLastError() == ERROR_ALREADY_EXISTS )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果已有mutex存在則釋放 handle Mutex 並初始handle Mutex 指標位址</span></span><br><span class="line">        CloseHandle( m_hMutex );</span><br><span class="line">        m_hMutex = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 程式退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line">    <span class="keyword">if</span> ( !checkUnique() ) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 離開程式</span></span><br><span class="line">    engine.load( QUrl( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) ) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( engine.rootObjects().isEmpty() )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程式碼完成後，可以用以下方式驗證</p><p>開啟應用程式，接著開啟工作管理員看是否能找到該應用程式，順利找到該應用程式後，再重複開啟應用程式，會看到該應用程式在工作管理員中出現並快速關閉，實現檔案唯一的管控，這樣就成功拉!</p><h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>CreateMutex 方式創建 critical section 臨界區間亦可以讓多行程的多執行檔對單一動態連結檔(DLL) 進行操作存取而不會互相衝突</p><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p><a href="http://white5168.blogspot.com/2013/03/createmutex.html#.XZNjC0YzY2w" target="_blank" rel="noopener">CreateMutex建立多線程互斥機制—解決行程 … - iInfo 資訊交流</a><br><a href="https://baike.baidu.com/item/CreateMutex" target="_blank" rel="noopener">CreateMutex_百度百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Qt-CreateMutex-確保應用程式不會被重複執行&quot;&gt;&lt;a href=&quot;#Qt-CreateMutex-確保應用程式不會被重複執行&quot; class=&quot;headerlink&quot; title=&quot;Qt CreateMutex 確保應用程式不會被重複執行&quot;&gt;&lt;/a&gt;Qt
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="CreateMutex" scheme="https://teddybearfp.github.io/tags/CreateMutex/"/>
    
  </entry>
  
  <entry>
    <title>C++ 與 qml 透過 Q_PROPERTY 資料傳遞</title>
    <link href="https://teddybearfp.github.io/2019/09/27/C-%E8%88%87-qml-%E9%80%8F%E9%81%8E-Q-PROPERTY-%E8%B3%87%E6%96%99%E5%82%B3%E9%81%9E/"/>
    <id>https://teddybearfp.github.io/2019/09/27/C-與-qml-透過-Q-PROPERTY-資料傳遞/</id>
    <published>2019-09-27T03:05:16.000Z</published>
    <updated>2019-10-01T14:10:40.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-與-qml-透過-Q-PROPERTY-資料傳遞"><a href="#C-與-qml-透過-Q-PROPERTY-資料傳遞" class="headerlink" title="C++ 與 qml 透過 Q_PROPERTY 資料傳遞"></a>C++ 與 qml 透過 Q_PROPERTY 資料傳遞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有個資料流需求，需將資料由 sender.qml 呼叫 C++ 端的函式處理成 unsigned char* 型態送至另一個 receiver.qml 再由 receiver.qml 傳送至它的 C++ 端做資料處理，那麼如何讓指標在 C++ 與 qml 中傳送，此篇主要記錄 Q_PROPERTY 如何傳遞 QObject </p><h2 id="註冊型態"><a href="#註冊型態" class="headerlink" title="註冊型態"></a>註冊型態</h2><p>使用 QObject 的 SetProperty 時若傳送的變數型態是qml中不認得的需先註冊，這樣才能讓它們的值保存在QVariant中<br>例如: unsigned char<em><br>QVariant 是不能存放 unsigned char</em> 的 </p><p>需要註冊的有兩個地方<br>第一個地方是使用到的 class 標頭檔<br>第二個地方是 main.cpp</p><p>以下範例為註冊 unsigned char*</p><h3 id="標頭檔註冊"><a href="#標頭檔註冊" class="headerlink" title="標頭檔註冊"></a>標頭檔註冊</h3><p>需在該 class .h 檔中註冊型態<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span> * )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolumeRendering</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    VolumeRendering();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qRegisterMetaType&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span> *&gt;( <span class="string">"unsigned char *"</span> );</span><br></pre></td></tr></table></figure><h2 id="範例程式"><a href="#範例程式" class="headerlink" title="範例程式"></a>範例程式</h2><p>這邊我編寫sender與receiver記錄一下這資料流</p><p>sender會將資料 unsigned char* 與 int 透過 Q_PROPERTY 的方式以變數型態 QObject 傳遞給 receiver</p><p>receiver則會以 Q_PROPERTY 方式接收並印出 unsigned char* 記憶體位置證實是同一個記憶體位置表示成功接收</p><h3 id="資料流圖解"><a href="#資料流圖解" class="headerlink" title="資料流圖解"></a>資料流圖解</h3><p><img src="https://i.imgur.com/EwMEbjC.jpg" alt></p><h3 id="sender-h"><a href="#sender-h" class="headerlink" title="sender.h"></a>sender.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SENDER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SENDER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span> * )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( QObject *object READ object WRITE setObject NOTIFY objectChanged )</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sender();</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">void</span> <span class="title">sendObject</span><span class="params">( <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> number )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObject</span><span class="params">( QObject *object )</span></span>;</span><br><span class="line">    <span class="function">QObject *<span class="title">object</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QObject *m_Object;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">objectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SENDER_H</span></span></span><br></pre></td></tr></table></figure><h3 id="sender-cpp"><a href="#sender-cpp" class="headerlink" title="sender.cpp"></a>sender.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"></span><br><span class="line">Sender::Sender()</span><br><span class="line">&#123;</span><br><span class="line">    m_Object = <span class="keyword">new</span> QObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Sender::sendObject( <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> number )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* buf = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[ <span class="number">3</span> ];</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender buf:"</span> &lt;&lt; buf;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender width:"</span> &lt;&lt; width;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender height:"</span> &lt;&lt; height;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"sender number:"</span> &lt;&lt; number &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"src"</span>, QVariant::fromValue( buf ) );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"width"</span>, width );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"height"</span>, height );</span><br><span class="line">    m_Object-&gt;setProperty( <span class="string">"number"</span>, number );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Sender::setObject( QObject* object )</span><br><span class="line">&#123;</span><br><span class="line">    m_Object = object;</span><br><span class="line">    <span class="function">emit <span class="title">objectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QObject* Sender::object()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sender-qml"><a href="#sender-qml" class="headerlink" title="sender.qml"></a>sender.qml</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Controls <span class="number">2.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> teddybear.Sender <span class="number">1.0</span></span><br><span class="line">Sender &#123;</span><br><span class="line">    id: sender</span><br><span class="line">    Button &#123;</span><br><span class="line">        anchors.top: parent.top</span><br><span class="line">        anchors.topMargin: <span class="number">50</span></span><br><span class="line">        anchors.left: parent.left</span><br><span class="line">        anchors.leftMargin: <span class="number">50</span></span><br><span class="line">        width: <span class="number">200</span></span><br><span class="line">        height: <span class="number">180</span></span><br><span class="line">        text: <span class="string">"Send QObject"</span></span><br><span class="line">        onClicked: &#123;</span><br><span class="line">            sender.sendObject(<span class="number">512</span>,<span class="number">512</span>,<span class="number">8</span>)</span><br><span class="line">            loader.setSource(<span class="string">"qrc:/receiver.qml"</span>, &#123;<span class="string">"object"</span>: sender.object&#125; )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="receiver-h"><a href="#receiver-h" class="headerlink" title="receiver.h"></a>receiver.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> RECEIVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RECEIVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMetaType&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQuickItem&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> :</span> <span class="keyword">public</span> QQuickItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY( QObject *receivedObject READ receivedObject WRITE setReceivedObject NOTIFY receivedObjectChanged )</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Receiver();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setReceivedObject</span><span class="params">( QObject *receivedObject )</span></span>;</span><br><span class="line">    <span class="function">QObject *<span class="title">receivedObject</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QObject *m_ReceivedObject;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receivedObjectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// RECEIVER_H</span></span></span><br></pre></td></tr></table></figure><h3 id="receiver-cpp"><a href="#receiver-cpp" class="headerlink" title="receiver.cpp"></a>receiver.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE( <span class="keyword">unsigned</span> <span class="keyword">char</span>* )</span><br><span class="line">Receiver::Receiver()</span><br><span class="line">&#123;</span><br><span class="line">    m_ReceivedObject = <span class="keyword">new</span> QObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Receiver::setReceivedObject( QObject* receivedObject )</span><br><span class="line">&#123;</span><br><span class="line">    m_ReceivedObject = receivedObject;</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received buf: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"src"</span> ).value&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>*&gt;();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received width: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"width"</span> ).toInt();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received height: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"height"</span> ).toInt();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"received number: "</span> &lt;&lt; receivedObject-&gt;property( <span class="string">"number"</span> ).toInt() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">emit <span class="title">receivedObjectChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QObject* Receiver::receivedObject()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_ReceivedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="receiver-qml"><a href="#receiver-qml" class="headerlink" title="receiver.qml"></a>receiver.qml</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> teddybear.Receiver <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">Receiver &#123;</span><br><span class="line">    id: receiver</span><br><span class="line">    property var object</span><br><span class="line"></span><br><span class="line">    receivedObject: object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-cpp-1"><a href="#main-cpp-1" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"receiver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sender.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QQmlApplicationEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::setAttribute( Qt::AA_EnableHighDpiScaling );</span><br><span class="line"></span><br><span class="line">    <span class="function">QGuiApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    QQmlApplicationEngine engine;</span><br><span class="line"></span><br><span class="line">    qmlRegisterType&lt;Sender&gt;( <span class="string">"teddybear.Sender"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"Sender"</span> );</span><br><span class="line">    qmlRegisterType&lt;Receiver&gt;( <span class="string">"teddybear.Receiver"</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"Receiver"</span> );</span><br><span class="line">    qRegisterMetaType&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span> *&gt;( <span class="string">"unsigned char *"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> QUrl <span class="title">url</span><span class="params">( QStringLiteral( <span class="string">"qrc:/main.qml"</span> ) )</span></span>;</span><br><span class="line">    QObject::connect(</span><br><span class="line">        &amp;engine, &amp;QQmlApplicationEngine::objectCreated,</span><br><span class="line">        &amp;app, [url]( QObject *obj, <span class="keyword">const</span> QUrl &amp;objUrl ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !obj &amp;&amp; url == objUrl )</span><br><span class="line">                QCoreApplication::<span class="built_in">exit</span>( <span class="number">-1</span> );</span><br><span class="line">        &#125;,</span><br><span class="line">        Qt::QueuedConnection );</span><br><span class="line">    engine.load( url );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QtQuick <span class="number">2.12</span></span><br><span class="line"><span class="keyword">import</span> QtQuick.Window <span class="number">2.12</span></span><br><span class="line"></span><br><span class="line">Window &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">    width: <span class="number">800</span></span><br><span class="line">    height: <span class="number">800</span></span><br><span class="line">    title: qsTr(<span class="string">"Q_PROPERTY dataflow"</span>)</span><br><span class="line">    Component.onCompleted: loader.setSource(<span class="string">"qrc:/sender.qml"</span>)</span><br><span class="line">    Loader &#123;</span><br><span class="line">        id: loader</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="驗證成果"><a href="#驗證成果" class="headerlink" title="驗證成果"></a>驗證成果</h3><p><img src="https://i.imgur.com/hyB7o4n.png" alt></p><p>成功傳遞與接收拉!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-與-qml-透過-Q-PROPERTY-資料傳遞&quot;&gt;&lt;a href=&quot;#C-與-qml-透過-Q-PROPERTY-資料傳遞&quot; class=&quot;headerlink&quot; title=&quot;C++ 與 qml 透過 Q_PROPERTY 資料傳遞&quot;&gt;&lt;/a&gt;C++ 與 
      
    
    </summary>
    
      <category term="Qt" scheme="https://teddybearfp.github.io/categories/Qt/"/>
    
    
      <category term="QObject" scheme="https://teddybearfp.github.io/tags/QObject/"/>
    
      <category term="Q_PROPERTY" scheme="https://teddybearfp.github.io/tags/Q-PROPERTY/"/>
    
      <category term="setProperty" scheme="https://teddybearfp.github.io/tags/setProperty/"/>
    
  </entry>
  
</feed>
